# -*- coding: utf-8 -*-
""" Soap Client for cyperwatch """
#-----------------------------------------------------------------------------
# Name:        soapinterface.py
# Purpose:		 To do a search on the cyperwatch system
#
# Author:      Chris Hoy
#
# Created:	   20/10/2015
# Copyright:   (c) 2015

# print (CWSOAPCLIENT)
# gives list of all info incuding complex types including prefix's

#-----------------------------------------------------------------------------
from types import StringTypes
import math
import logging
import uuid
from suds.client import Client
from suds.plugin import MessagePlugin
import prcommon.Constants as Constants

CSW_METAELEMENTS = "MetaElements"
CSW_Index_News = "news"
CSW_Index_Facebook = "facebook"
CSW_Index_Twitter = "twitter"
CSW_Index_Blog = "blog"
CSW_Index_Forum = "forum"
CSW_Index_Instagram = 'instagram'

# class to show xml generated by soap interface for debug purposes
class LogPlugin(MessagePlugin):
	def __init__(self):
		self._request_file = None
		self._response_file = None

	def start_log(self):
		self._request_file = file("/tmp/request.xml", "w")
		self._response_file = file("/tmp/response.xml", "w")

	def end_log(self):
		if self._request_file:
			self._request_file.close()
			self._response_file.close()

	def sending(self, context):
		if  self._request_file:
			self._request_file.write(str(context.envelope))
			print (str(context.envelope))

	def received(self, context):
		if self._response_file:
			self._response_file.write(str(context.reply))
			print (str(context.reply))

# try and ignore suds errors
try:
	logging.getLogger('suds.client').setLevel(logging.ERROR)
	logging.getLogger('suds.transport').setLevel(logging.ERROR)
	logging.getLogger('suds.transport.http').setLevel(logging.INFO)  # Silent fail debug
	logging.getLogger('suds.xsd.schema').setLevel(logging.ERROR)
	logging.getLogger('suds.wsdl').setLevel(logging.ERROR)
	logging.getLogger('suds.resolver').setLevel(logging.ERROR)
	logging.getLogger('suds.xsd.query').setLevel(logging.ERROR)
	logging.getLogger('suds.xsd.basic').setLevel(logging.ERROR)
	logging.getLogger('suds.metrics').setLevel(logging.ERROR)
	logging.getLogger('suds.mx.core').setLevel(logging.ERROR)
	logging.getLogger('suds.xsd.sxbasic').setLevel(logging.ERROR)
	logging.getLogger('suds.xsd.sxbase').setLevel(logging.ERROR)
	logging.getLogger('suds.binding.marshaller').setLevel(logging.ERROR)
	logging.getLogger('suds.umx.typed').setLevel(logging.ERROR)
	CWSOAPLOG = LogPlugin()
	CWSOAPCLIENT = Client(Constants.SOAPURL, prefixes=True, plugins=[CWSOAPLOG])
	#CWSOAPLOG = None
	#CWSOAPCLIENT = Client(Constants.SOAPURL, prefixes=True)
except:
	print ("Problem loading CW interface ")
	CWSOAPCLIENT = None

# base class for handling results
class CSWResult(object):
	"CSWResult"

	def _fix_up_string(self, istring):

		outstring = istring.replace(u"\u2013", u"-")
		outstring = outstring.replace(u"\xf6", " ")

		return outstring


	def hand_result(self, doc):
		pass

	def pre_query(self):
		pass

	def post_query(self, query_count):
		pass

	def metatags(self, metatags, ids_only=False):
		"metatags"

		retdata = {}

		for tag in metatags:
			tagname = str(tag.Type)
			data = tag.Id if ids_only else (unicode(self._fix_up_string(tag.Value)), tag.Id)
			if tagname not in retdata:
				retdata[tagname] = [data, ]
			else:
				retdata[tagname].append(data)

		# this is for filtering
		if ids_only:
			for key in retdata.iterkeys():
				retdata[key] = set(retdata[key])

		return retdata

class CSWCommand(object):
	"Cyberwatch Search Function"
	Index_News = CSW_Index_News
	Index_Facebook = CSW_Index_Facebook
	Index_Twitter = CSW_Index_Twitter
	Index_Blog = CSW_Index_Blog
	Index_Forum = CSW_Index_Forum
	Index_Instagram = CSW_Index_Instagram
	
	Clippings_db_trans={3:CSW_Index_News,
	                    5:CSW_Index_Facebook,
	                    4:CSW_Index_Twitter,
	                    7:CSW_Index_Blog,
	                    6:CSW_Index_Forum,
	                    8:CSW_Index_Instagram
	                    }

	DocumentSearchRequest = "DocumentSearchRequest"
	SearchMatchRetriever = "SearchMatchRetriever"
	ArrayOfFullTextDocument = "ArrayOfFullTextDocument"
	FullTextDocument = "FullTextDocument"
	AllQuery = "AllQuery"
	ArrayOfstring = "ArrayOfstring"
	RangeDateField = "RangeDateField"
	Query = "AQuery"
	QueryItem = "AQueryItem"
	BooleanQuery = "BooleanQuery"
	BooleanSet = "BooleanSet"
	ArrayOfAQueryItem = "ArrayOfAQueryItem"
	BooleanQuery = "BooleanQuery"
	BooleanSetOperators = "BooleanSetOperators"

	def __init__(self):
		"init"

		self._index = CSW_Index_News
		self._setup_soap_objects()
		self._new_search()
		self._ops = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.BooleanSetOperators])

	def _setup_soap_objects(self):
		self._objects = {CSWCommand.DocumentSearchRequest: None,
		                 CSWCommand.SearchMatchRetriever: None,
		                 CSWCommand.ArrayOfFullTextDocument: None,
		                 CSWCommand.FullTextDocument: None,
		                 CSWCommand.AllQuery: None,
		                 CSWCommand.ArrayOfstring: None,
		                 CSWCommand.RangeDateField: None,
		                 CSWCommand.Query: None,
		                 CSWCommand.QueryItem: None,
		                 CSWCommand.BooleanQuery: None,
		                 CSWCommand.BooleanSet: None,
		                 CSWCommand.ArrayOfAQueryItem: None,
		                 CSWCommand.BooleanQuery: None,
		                 CSWCommand.BooleanSetOperators: None,
		                 }
		for line in str(CWSOAPCLIENT).split("\n"):
			line = line.strip()
			fields = line.split(":")
			if len(fields) <= 1:
				continue
			for key in self._objects.iterkeys():

				if fields[1] == key:
					self._objects[key] = line

	def _new_search(self, page_size=20):
		"""initialise settings"""
		self._results = None
		self._page_nbr = 0
		self._total_rows = None
		self._page_size = page_size

	def _create_default_connection(self):
		"create default connection "
		self._searchrequest = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.DocumentSearchRequest])
		self._searchrequest.Id = uuid.uuid4()
		self._searchrequest.UserApiKey = Constants.USERAPIKEY
		self._searchrequest.AppKey = Constants.APIKEY
		self._searchrequest.PageNumber = self._page_nbr
		self._searchrequest.PageSize = self._page_size
		self._searchrequest.IncludeItemsOfOtherUsers = False
		self._searchrequest.Index = self._index

	def _create_default_retriever(self):
		"_create_default_retriever"

		retriever = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.SearchMatchRetriever])
		retriever.Documents = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.ArrayOfFullTextDocument])
		retriever.Documents.FullTextDocument.append(CWSOAPCLIENT.factory.create(self._objects[CSWCommand.FullTextDocument]))
		self._searchrequest.Retriever = retriever

	def search_all(self, index=CSW_Index_News, start_date=None, keywords=None, extra_search=None, field=None, search_phrase=False):
		# setup and do a basic all search
		self._new_search()
		self._index = index
		self._create_default_connection()
		self._create_default_retriever()

		# setup query
		query = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.BooleanSet])
		query.Operator = self._ops.And
		query.Items = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.ArrayOfAQueryItem])

		# add search selements
		for search in extra_search if extra_search else []:
			queryitem = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.BooleanQuery])
			queryitem.Value = search
			queryitem.CaseSensitive = False
			query.Items.AQueryItem.append(queryitem)

		if search_phrase:
			query = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.AllQuery])
			query.Values = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.ArrayOfstring])
			query.Values.string = keywords[0]
			query.Field = field
			query.CaseSensitive = False
		else:
			for word in keywords if keywords else []:
				queryitem = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.BooleanQuery])
				queryitem.Value = word
				if field:
					queryitem.Field = field
				queryitem.CaseSensitive = False
				query.Items.AQueryItem.append(queryitem)

		# restrict date range
		if start_date:
			rangeobject = CWSOAPCLIENT.factory.create(self._objects[CSWCommand.RangeDateField])
			rangeobject.Min = start_date
			self._searchrequest.Range = rangeobject

		self._searchrequest.Query = query

	def do_search(self, result_handler):
		"do actual search and setup results"

		result_handler.pre_query()

		self._results = CWSOAPCLIENT.service.Search(self._searchrequest)
		if self._results.TotalCount:
			# do first page of results
			for doc in self._results.Retriever.Documents.FullTextDocument:
				result_handler.hand_result(doc, self._index)

			# get each of the other pages
			nbrpages = int(math.ceil(self._results.TotalCount/float(self._page_size)))
			for page in xrange(1, nbrpages):
				# do search
				self._searchrequest.PageNumber = page
				self._results = CWSOAPCLIENT.service.Search(self._searchrequest)
				# do results
				for doc in self._results.Retriever.Documents.FullTextDocument:
					result_handler.hand_result(doc, self._index)

		result_handler.post_query(self._results.TotalCount)

class CSWSearchResult(CSWResult):
	"CSWSearchResult"
	def __init__(self):
		"""Set of simple filters """

		self._total = 0


	@property
	def nbrrows(self):
		return self._total

class CSWResultTextView(CSWSearchResult):
	"""Debug handler just get details as string """
	def __init__(self, no_print=False):
		self._count = 0
		self._duplicates = 0
		self._dict = {}
		self._no_print = no_print
		CSWSearchResult.__init__(self)

	def hand_result(self, doc, index):

		if not CSWSearchResult.hand_result(self, doc, index):
			return

		for key in doc.__keylist__:
			if key == CSW_METAELEMENTS and doc[key]:
				for (key2, values) in self.metatags(doc[key].MetaElement).items():
					if key2 == "source":
						for value in values:
							if self._no_print == False:
								print (key2, value[0], value[1])
				continue

			if self._no_print == False:
				if isinstance(doc[key], StringTypes):
					print (key, u" : ", doc[key].encode("utf-8") if doc[key] else "")
				else:
					print (key, u" : ", doc[key] if doc[key] else "")

		if doc.Id not in self._dict:
			self._dict[doc.Id] = True
		else:
			self._duplicates += 1
		self._count += 1

	def pre_query(self):
		pass

	def post_query(self, query_count):
		print ("Results Analysed %d ducplicates (%d) query_count (%d)" % (self._count, self._duplicates, query_count))


class CSWNoseTest(CSWSearchResult):
	"""Debug handler just get details as string """
	def __init__(self):
		self._count = 0
		self._duplicates = 0
		self._dict = {}
		CSWSearchResult.__init__(self)

	def hand_result(self, doc, index):

		if not CSWSearchResult.hand_result(self, doc):
			return

		if doc.Id not in self._dict:
			self._dict[doc.Id] = True
		else:
			self._duplicates += 1
		self._count += 1

	def pre_query(self):
		pass

	def post_query(self, query_count):
		self._total = query_count
