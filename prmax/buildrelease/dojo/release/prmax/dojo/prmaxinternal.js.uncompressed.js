/*
	Copyright (c) 2004-2011, The Dojo Foundation All Rights Reserved.
	Available via Academic Free License >= 2.1 OR the modified BSD license.
	see: http://dojotoolkit.org/license for details
*/

/*
	This is an optimized version of Dojo, built for deployment and not for
	development. To get sources and documentation, please visit:

		http://dojotoolkit.org
*/

if(!dojo._hasResource["dijit._base.manager"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.manager"] = true;
dojo.provide("dijit._base.manager");



dojo.declare("dijit.WidgetSet", null, {
	// summary:
	//		A set of widgets indexed by id. A default instance of this class is
	//		available as `dijit.registry`
	//
	// example:
	//		Create a small list of widgets:
	//		|	var ws = new dijit.WidgetSet();
	//		|	ws.add(dijit.byId("one"));
	//		| 	ws.add(dijit.byId("two"));
	//		|	// destroy both:
	//		|	ws.forEach(function(w){ w.destroy(); });
	//
	// example:
	//		Using dijit.registry:
	//		|	dijit.registry.forEach(function(w){ /* do something */ });

	constructor: function(){
		this._hash = {};
		this.length = 0;
	},

	add: function(/*dijit._Widget*/ widget){
		// summary:
		//		Add a widget to this list. If a duplicate ID is detected, a error is thrown.
		//
		// widget: dijit._Widget
		//		Any dijit._Widget subclass.
		if(this._hash[widget.id]){
			throw new Error("Tried to register widget with id==" + widget.id + " but that id is already registered");
		}
		this._hash[widget.id] = widget;
		this.length++;
	},

	remove: function(/*String*/ id){
		// summary:
		//		Remove a widget from this WidgetSet. Does not destroy the widget; simply
		//		removes the reference.
		if(this._hash[id]){
			delete this._hash[id];
			this.length--;
		}
	},

	forEach: function(/*Function*/ func, /* Object? */thisObj){
		// summary:
		//		Call specified function for each widget in this set.
		//
		// func:
		//		A callback function to run for each item. Is passed the widget, the index
		//		in the iteration, and the full hash, similar to `dojo.forEach`.
		//
		// thisObj:
		//		An optional scope parameter
		//
		// example:
		//		Using the default `dijit.registry` instance:
		//		|	dijit.registry.forEach(function(widget){
		//		|		console.log(widget.declaredClass);
		//		|	});
		//
		// returns:
		//		Returns self, in order to allow for further chaining.

		thisObj = thisObj || dojo.global;
		var i = 0, id;
		for(id in this._hash){
			func.call(thisObj, this._hash[id], i++, this._hash);
		}
		return this;	// dijit.WidgetSet
	},

	filter: function(/*Function*/ filter, /* Object? */thisObj){
		// summary:
		//		Filter down this WidgetSet to a smaller new WidgetSet
		//		Works the same as `dojo.filter` and `dojo.NodeList.filter`
		//
		// filter:
		//		Callback function to test truthiness. Is passed the widget
		//		reference and the pseudo-index in the object.
		//
		// thisObj: Object?
		//		Option scope to use for the filter function.
		//
		// example:
		//		Arbitrary: select the odd widgets in this list
		//		|	dijit.registry.filter(function(w, i){
		//		|		return i % 2 == 0;
		//		|	}).forEach(function(w){ /* odd ones */ });

		thisObj = thisObj || dojo.global;
		var res = new dijit.WidgetSet(), i = 0, id;
		for(id in this._hash){
			var w = this._hash[id];
			if(filter.call(thisObj, w, i++, this._hash)){
				res.add(w);
			}
		}
		return res; // dijit.WidgetSet
	},

	byId: function(/*String*/ id){
		// summary:
		//		Find a widget in this list by it's id.
		// example:
		//		Test if an id is in a particular WidgetSet
		//		| var ws = new dijit.WidgetSet();
		//		| ws.add(dijit.byId("bar"));
		//		| var t = ws.byId("bar") // returns a widget
		//		| var x = ws.byId("foo"); // returns undefined

		return this._hash[id];	// dijit._Widget
	},

	byClass: function(/*String*/ cls){
		// summary:
		//		Reduce this widgetset to a new WidgetSet of a particular `declaredClass`
		//
		// cls: String
		//		The Class to scan for. Full dot-notated string.
		//
		// example:
		//		Find all `dijit.TitlePane`s in a page:
		//		|	dijit.registry.byClass("dijit.TitlePane").forEach(function(tp){ tp.close(); });

		var res = new dijit.WidgetSet(), id, widget;
		for(id in this._hash){
			widget = this._hash[id];
			if(widget.declaredClass == cls){
				res.add(widget);
			}
		 }
		 return res; // dijit.WidgetSet
},

	toArray: function(){
		// summary:
		//		Convert this WidgetSet into a true Array
		//
		// example:
		//		Work with the widget .domNodes in a real Array
		//		|	dojo.map(dijit.registry.toArray(), function(w){ return w.domNode; });

		var ar = [];
		for(var id in this._hash){
			ar.push(this._hash[id]);
		}
		return ar;	// dijit._Widget[]
},

	map: function(/* Function */func, /* Object? */thisObj){
		// summary:
		//		Create a new Array from this WidgetSet, following the same rules as `dojo.map`
		// example:
		//		|	var nodes = dijit.registry.map(function(w){ return w.domNode; });
		//
		// returns:
		//		A new array of the returned values.
		return dojo.map(this.toArray(), func, thisObj); // Array
	},

	every: function(func, thisObj){
		// summary:
		// 		A synthetic clone of `dojo.every` acting explicitly on this WidgetSet
		//
		// func: Function
		//		A callback function run for every widget in this list. Exits loop
		//		when the first false return is encountered.
		//
		// thisObj: Object?
		//		Optional scope parameter to use for the callback

		thisObj = thisObj || dojo.global;
		var x = 0, i;
		for(i in this._hash){
			if(!func.call(thisObj, this._hash[i], x++, this._hash)){
				return false; // Boolean
			}
		}
		return true; // Boolean
	},

	some: function(func, thisObj){
		// summary:
		// 		A synthetic clone of `dojo.some` acting explictly on this WidgetSet
		//
		// func: Function
		//		A callback function run for every widget in this list. Exits loop
		//		when the first true return is encountered.
		//
		// thisObj: Object?
		//		Optional scope parameter to use for the callback

		thisObj = thisObj || dojo.global;
		var x = 0, i;
		for(i in this._hash){
			if(func.call(thisObj, this._hash[i], x++, this._hash)){
				return true; // Boolean
			}
		}
		return false; // Boolean
	}

});

(function(){

	/*=====
	dijit.registry = {
		// summary:
		//		A list of widgets on a page.
		// description:
		//		Is an instance of `dijit.WidgetSet`
	};
	=====*/
	dijit.registry = new dijit.WidgetSet();

	var hash = dijit.registry._hash,
		attr = dojo.attr,
		hasAttr = dojo.hasAttr,
		style = dojo.style;

	dijit.byId = function(/*String|dijit._Widget*/ id){
		// summary:
		//		Returns a widget by it's id, or if passed a widget, no-op (like dojo.byId())
		return typeof id == "string" ? hash[id] : id; // dijit._Widget
	};

	var _widgetTypeCtr = {};
	dijit.getUniqueId = function(/*String*/widgetType){
		// summary:
		//		Generates a unique id for a given widgetType
	
		var id;
		do{
			id = widgetType + "_" +
				(widgetType in _widgetTypeCtr ?
					++_widgetTypeCtr[widgetType] : _widgetTypeCtr[widgetType] = 0);
		}while(hash[id]);
		return dijit._scopeName == "dijit" ? id : dijit._scopeName + "_" + id; // String
	};
	
	dijit.findWidgets = function(/*DomNode*/ root){
		// summary:
		//		Search subtree under root returning widgets found.
		//		Doesn't search for nested widgets (ie, widgets inside other widgets).
	
		var outAry = [];
	
		function getChildrenHelper(root){
			for(var node = root.firstChild; node; node = node.nextSibling){
				if(node.nodeType == 1){
					var widgetId = node.getAttribute("widgetId");
					if(widgetId){
						var widget = hash[widgetId];
						if(widget){	// may be null on page w/multiple dojo's loaded
							outAry.push(widget);
						}
					}else{
						getChildrenHelper(node);
					}
				}
			}
		}
	
		getChildrenHelper(root);
		return outAry;
	};
	
	dijit._destroyAll = function(){
		// summary:
		//		Code to destroy all widgets and do other cleanup on page unload
	
		// Clean up focus manager lingering references to widgets and nodes
		dijit._curFocus = null;
		dijit._prevFocus = null;
		dijit._activeStack = [];
	
		// Destroy all the widgets, top down
		dojo.forEach(dijit.findWidgets(dojo.body()), function(widget){
			// Avoid double destroy of widgets like Menu that are attached to <body>
			// even though they are logically children of other widgets.
			if(!widget._destroyed){
				if(widget.destroyRecursive){
					widget.destroyRecursive();
				}else if(widget.destroy){
					widget.destroy();
				}
			}
		});
	};
	
	if(dojo.isIE){
		// Only run _destroyAll() for IE because we think it's only necessary in that case,
		// and because it causes problems on FF.  See bug #3531 for details.
		dojo.addOnWindowUnload(function(){
			dijit._destroyAll();
		});
	}
	
	dijit.byNode = function(/*DOMNode*/ node){
		// summary:
		//		Returns the widget corresponding to the given DOMNode
		return hash[node.getAttribute("widgetId")]; // dijit._Widget
	};
	
	dijit.getEnclosingWidget = function(/*DOMNode*/ node){
		// summary:
		//		Returns the widget whose DOM tree contains the specified DOMNode, or null if
		//		the node is not contained within the DOM tree of any widget
		while(node){
			var id = node.getAttribute && node.getAttribute("widgetId");
			if(id){
				return hash[id];
			}
			node = node.parentNode;
		}
		return null;
	};

	var shown = (dijit._isElementShown = function(/*Element*/ elem){
		var s = style(elem);
		return (s.visibility != "hidden")
			&& (s.visibility != "collapsed")
			&& (s.display != "none")
			&& (attr(elem, "type") != "hidden");
	});
	
	dijit.hasDefaultTabStop = function(/*Element*/ elem){
		// summary:
		//		Tests if element is tab-navigable even without an explicit tabIndex setting
	
		// No explicit tabIndex setting, need to investigate node type
		switch(elem.nodeName.toLowerCase()){
			case "a":
				// An <a> w/out a tabindex is only navigable if it has an href
				return hasAttr(elem, "href");
			case "area":
			case "button":
			case "input":
			case "object":
			case "select":
			case "textarea":
				// These are navigable by default
				return true;
			case "iframe":
				// If it's an editor <iframe> then it's tab navigable.
				var body;
				try{
					// non-IE
					var contentDocument = elem.contentDocument;
					if("designMode" in contentDocument && contentDocument.designMode == "on"){
						return true;
					}
					body = contentDocument.body;
				}catch(e1){
					// contentWindow.document isn't accessible within IE7/8
					// if the iframe.src points to a foreign url and this
					// page contains an element, that could get focus
					try{
						body = elem.contentWindow.document.body;
					}catch(e2){
						return false;
					}
				}
				return body.contentEditable == 'true' || (body.firstChild && body.firstChild.contentEditable == 'true');
			default:
				return elem.contentEditable == 'true';
		}
	};
	
	var isTabNavigable = (dijit.isTabNavigable = function(/*Element*/ elem){
		// summary:
		//		Tests if an element is tab-navigable
	
		// TODO: convert (and rename method) to return effective tabIndex; will save time in _getTabNavigable()
		if(attr(elem, "disabled")){
			return false;
		}else if(hasAttr(elem, "tabIndex")){
			// Explicit tab index setting
			return attr(elem, "tabIndex") >= 0; // boolean
		}else{
			// No explicit tabIndex setting, so depends on node type
			return dijit.hasDefaultTabStop(elem);
		}
	});

	dijit._getTabNavigable = function(/*DOMNode*/ root){
		// summary:
		//		Finds descendants of the specified root node.
		//
		// description:
		//		Finds the following descendants of the specified root node:
		//		* the first tab-navigable element in document order
		//		  without a tabIndex or with tabIndex="0"
		//		* the last tab-navigable element in document order
		//		  without a tabIndex or with tabIndex="0"
		//		* the first element in document order with the lowest
		//		  positive tabIndex value
		//		* the last element in document order with the highest
		//		  positive tabIndex value
		var first, last, lowest, lowestTabindex, highest, highestTabindex, radioSelected = {};
		function radioName(node) {
			// If this element is part of a radio button group, return the name for that group.
			return node && node.tagName.toLowerCase() == "input" &&
				node.type && node.type.toLowerCase() == "radio" &&
				node.name && node.name.toLowerCase();
		}
		var walkTree = function(/*DOMNode*/parent){
			dojo.query("> *", parent).forEach(function(child){
				// Skip hidden elements, and also non-HTML elements (those in custom namespaces) in IE,
				// since show() invokes getAttribute("type"), which crash on VML nodes in IE.
				if((dojo.isIE && child.scopeName!=="HTML") || !shown(child)){
					return;
				}

				if(isTabNavigable(child)){
					var tabindex = attr(child, "tabIndex");
					if(!hasAttr(child, "tabIndex") || tabindex == 0){
						if(!first){ first = child; }
						last = child;
					}else if(tabindex > 0){
						if(!lowest || tabindex < lowestTabindex){
							lowestTabindex = tabindex;
							lowest = child;
						}
						if(!highest || tabindex >= highestTabindex){
							highestTabindex = tabindex;
							highest = child;
						}
					}
					var rn = radioName(child);
					if(dojo.attr(child, "checked") && rn) {
						radioSelected[rn] = child;
					}
				}
				if(child.nodeName.toUpperCase() != 'SELECT'){
					walkTree(child);
				}
			});
		};
		if(shown(root)){ walkTree(root) }
		function rs(node) {
			// substitute checked radio button for unchecked one, if there is a checked one with the same name.
			return radioSelected[radioName(node)] || node;
		}
		return { first: rs(first), last: rs(last), lowest: rs(lowest), highest: rs(highest) };
	}
	dijit.getFirstInTabbingOrder = function(/*String|DOMNode*/ root){
		// summary:
		//		Finds the descendant of the specified root node
		//		that is first in the tabbing order
		var elems = dijit._getTabNavigable(dojo.byId(root));
		return elems.lowest ? elems.lowest : elems.first; // DomNode
	};
	
	dijit.getLastInTabbingOrder = function(/*String|DOMNode*/ root){
		// summary:
		//		Finds the descendant of the specified root node
		//		that is last in the tabbing order
		var elems = dijit._getTabNavigable(dojo.byId(root));
		return elems.last ? elems.last : elems.highest; // DomNode
	};
	
	/*=====
	dojo.mixin(dijit, {
		// defaultDuration: Integer
		//		The default animation speed (in ms) to use for all Dijit
		//		transitional animations, unless otherwise specified
		//		on a per-instance basis. Defaults to 200, overrided by
		//		`djConfig.defaultDuration`
		defaultDuration: 200
	});
	=====*/
	
	dijit.defaultDuration = dojo.config["defaultDuration"] || 200;

})();

}

if(!dojo._hasResource["dojo.Stateful"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.Stateful"] = true;
dojo.provide("dojo.Stateful");



dojo.declare("dojo.Stateful", null, {
	// summary:
	//		Base class for objects that provide named properties with optional getter/setter
	//		control and the ability to watch for property changes
	// example:
	//	|	var obj = new dojo.Stateful();
	//	|	obj.watch("foo", function(){
	//	|		console.log("foo changed to " + this.get("foo"));
	//	|	});
	//	|	obj.set("foo","bar");
	postscript: function(mixin){
		if(mixin){
			dojo.mixin(this, mixin);
		}
	},
	
	get: function(/*String*/name){
		// summary:
		//		Get a property on a Stateful instance.
		//	name:
		//		The property to get.
		// description:
		//		Get a named property on a Stateful object. The property may
		//		potentially be retrieved via a getter method in subclasses. In the base class
		// 		this just retrieves the object's property.
		// 		For example:
		//	|	stateful = new dojo.Stateful({foo: 3});
		//	|	stateful.get("foo") // returns 3
		//	|	stateful.foo // returns 3
		
		return this[name];
	},
	set: function(/*String*/name, /*Object*/value){
		// summary:
		//		Set a property on a Stateful instance
		//	name:
		//		The property to set.
		//	value:
		//		The value to set in the property.
		// description:
		//		Sets named properties on a stateful object and notifies any watchers of
		// 		the property. A programmatic setter may be defined in subclasses.
		// 		For example:
		//	|	stateful = new dojo.Stateful();
		//	|	stateful.watch(function(name, oldValue, value){
		//	|		// this will be called on the set below
		//	|	}
		//	|	stateful.set(foo, 5);
		//
		//	set() may also be called with a hash of name/value pairs, ex:
		//	|	myObj.set({
		//	|		foo: "Howdy",
		//	|		bar: 3
		//	|	})
		//	This is equivalent to calling set(foo, "Howdy") and set(bar, 3)
		if(typeof name === "object"){
			for(var x in name){
				this.set(x, name[x]);
			}
			return this;
		}
		var oldValue = this[name];
		this[name] = value;
		if(this._watchCallbacks){
			this._watchCallbacks(name, oldValue, value);
		}
		return this;
	},
	watch: function(/*String?*/name, /*Function*/callback){
		// summary:
		//		Watches a property for changes
		//	name:
		//		Indicates the property to watch. This is optional (the callback may be the
		// 		only parameter), and if omitted, all the properties will be watched
		// returns:
		//		An object handle for the watch. The unwatch method of this object
		// 		can be used to discontinue watching this property:
		//		|	var watchHandle = obj.watch("foo", callback);
		//		|	watchHandle.unwatch(); // callback won't be called now
		//	callback:
		//		The function to execute when the property changes. This will be called after
		//		the property has been changed. The callback will be called with the |this|
		//		set to the instance, the first argument as the name of the property, the
		// 		second argument as the old value and the third argument as the new value.
		
		var callbacks = this._watchCallbacks;
		if(!callbacks){
			var self = this;
			callbacks = this._watchCallbacks = function(name, oldValue, value, ignoreCatchall){
				var notify = function(propertyCallbacks){
					if(propertyCallbacks){
                        propertyCallbacks = propertyCallbacks.slice();
						for(var i = 0, l = propertyCallbacks.length; i < l; i++){
							try{
								propertyCallbacks[i].call(self, name, oldValue, value);
							}catch(e){
								console.error(e);
							}
						}
					}
				};
				notify(callbacks['_' + name]);
				if(!ignoreCatchall){
					notify(callbacks["*"]); // the catch-all
				}
			}; // we use a function instead of an object so it will be ignored by JSON conversion
		}
		if(!callback && typeof name === "function"){
			callback = name;
			name = "*";
		}else{
			// prepend with dash to prevent name conflicts with function (like "name" property)
			name = '_' + name;
		}
		var propertyCallbacks = callbacks[name];
		if(typeof propertyCallbacks !== "object"){
			propertyCallbacks = callbacks[name] = [];
		}
		propertyCallbacks.push(callback);
		return {
			unwatch: function(){
				propertyCallbacks.splice(dojo.indexOf(propertyCallbacks, callback), 1);
			}
		};
	}
	
});

}

if(!dojo._hasResource["dijit._WidgetBase"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._WidgetBase"] = true;
dojo.provide("dijit._WidgetBase");





(function(){

dojo.declare("dijit._WidgetBase", dojo.Stateful, {
	// summary:
	//		Future base class for all Dijit widgets.
	//		_Widget extends this class adding support for various features needed by desktop.

	// id: [const] String
	//		A unique, opaque ID string that can be assigned by users or by the
	//		system. If the developer passes an ID which is known not to be
	//		unique, the specified ID is ignored and the system-generated ID is
	//		used instead.
	id: "",

	// lang: [const] String
	//		Rarely used.  Overrides the default Dojo locale used to render this widget,
	//		as defined by the [HTML LANG](http://www.w3.org/TR/html401/struct/dirlang.html#adef-lang) attribute.
	//		Value must be among the list of locales specified during by the Dojo bootstrap,
	//		formatted according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt) (like en-us).
	lang: "",

	// dir: [const] String
	//		Bi-directional support, as defined by the [HTML DIR](http://www.w3.org/TR/html401/struct/dirlang.html#adef-dir)
	//		attribute. Either left-to-right "ltr" or right-to-left "rtl".  If undefined, widgets renders in page's
	//		default direction.
	dir: "",

	// class: String
	//		HTML class attribute
	"class": "",

	// style: String||Object
	//		HTML style attributes as cssText string or name/value hash
	style: "",

	// title: String
	//		HTML title attribute.
	//
	//		For form widgets this specifies a tooltip to display when hovering over
	//		the widget (just like the native HTML title attribute).
	//
	//		For TitlePane or for when this widget is a child of a TabContainer, AccordionContainer,
	//		etc., it's used to specify the tab label, accordion pane title, etc.
	title: "",

	// tooltip: String
	//		When this widget's title attribute is used to for a tab label, accordion pane title, etc.,
	//		this specifies the tooltip to appear when the mouse is hovered over that text.
	tooltip: "",

	// baseClass: [protected] String
	//		Root CSS class of the widget (ex: dijitTextBox), used to construct CSS classes to indicate
	//		widget state.
	baseClass: "",

	// srcNodeRef: [readonly] DomNode
	//		pointer to original DOM node
	srcNodeRef: null,

	// domNode: [readonly] DomNode
	//		This is our visible representation of the widget! Other DOM
	//		Nodes may by assigned to other properties, usually through the
	//		template system's dojoAttachPoint syntax, but the domNode
	//		property is the canonical "top level" node in widget UI.
	domNode: null,

	// containerNode: [readonly] DomNode
	//		Designates where children of the source DOM node will be placed.
	//		"Children" in this case refers to both DOM nodes and widgets.
	//		For example, for myWidget:
	//
	//		|	<div dojoType=myWidget>
	//		|		<b> here's a plain DOM node
	//		|		<span dojoType=subWidget>and a widget</span>
	//		|		<i> and another plain DOM node </i>
	//		|	</div>
	//
	//		containerNode would point to:
	//
	//		|		<b> here's a plain DOM node
	//		|		<span dojoType=subWidget>and a widget</span>
	//		|		<i> and another plain DOM node </i>
	//
	//		In templated widgets, "containerNode" is set via a
	//		dojoAttachPoint assignment.
	//
	//		containerNode must be defined for any widget that accepts innerHTML
	//		(like ContentPane or BorderContainer or even Button), and conversely
	//		is null for widgets that don't, like TextBox.
	containerNode: null,

/*=====
	// _started: Boolean
	//		startup() has completed.
	_started: false,
=====*/

	// attributeMap: [protected] Object
	//		attributeMap sets up a "binding" between attributes (aka properties)
	//		of the widget and the widget's DOM.
	//		Changes to widget attributes listed in attributeMap will be
	//		reflected into the DOM.
	//
	//		For example, calling set('title', 'hello')
	//		on a TitlePane will automatically cause the TitlePane's DOM to update
	//		with the new title.
	//
	//		attributeMap is a hash where the key is an attribute of the widget,
	//		and the value reflects a binding to a:
	//
	//		- DOM node attribute
	// |		focus: {node: "focusNode", type: "attribute"}
	// 		Maps this.focus to this.focusNode.focus
	//
	//		- DOM node innerHTML
	//	|		title: { node: "titleNode", type: "innerHTML" }
	//		Maps this.title to this.titleNode.innerHTML
	//
	//		- DOM node innerText
	//	|		title: { node: "titleNode", type: "innerText" }
	//		Maps this.title to this.titleNode.innerText
	//
	//		- DOM node CSS class
	// |		myClass: { node: "domNode", type: "class" }
	//		Maps this.myClass to this.domNode.className
	//
	//		If the value is an array, then each element in the array matches one of the
	//		formats of the above list.
	//
	//		There are also some shorthands for backwards compatibility:
	//		- string --> { node: string, type: "attribute" }, for example:
	//	|	"focusNode" ---> { node: "focusNode", type: "attribute" }
	//		- "" --> { node: "domNode", type: "attribute" }
	attributeMap: {id:"", dir:"", lang:"", "class":"", style:"", title:""},

	// _blankGif: [protected] String
	//		Path to a blank 1x1 image.
	//		Used by <img> nodes in templates that really get their image via CSS background-image.
	_blankGif: (dojo.config.blankGif || dojo.moduleUrl("dojo", "resources/blank.gif")).toString(),

	//////////// INITIALIZATION METHODS ///////////////////////////////////////

	postscript: function(/*Object?*/params, /*DomNode|String*/srcNodeRef){
		// summary:
		//		Kicks off widget instantiation.  See create() for details.
		// tags:
		//		private
		this.create(params, srcNodeRef);
	},

	create: function(/*Object?*/params, /*DomNode|String?*/srcNodeRef){
		// summary:
		//		Kick off the life-cycle of a widget
		// params:
		//		Hash of initialization parameters for widget, including
		//		scalar values (like title, duration etc.) and functions,
		//		typically callbacks like onClick.
		// srcNodeRef:
		//		If a srcNodeRef (DOM node) is specified:
		//			- use srcNodeRef.innerHTML as my contents
		//			- if this is a behavioral widget then apply behavior
		//			  to that srcNodeRef
		//			- otherwise, replace srcNodeRef with my generated DOM
		//			  tree
		// description:
		//		Create calls a number of widget methods (postMixInProperties, buildRendering, postCreate,
		//		etc.), some of which of you'll want to override. See http://docs.dojocampus.org/dijit/_Widget
		//		for a discussion of the widget creation lifecycle.
		//
		//		Of course, adventurous developers could override create entirely, but this should
		//		only be done as a last resort.
		// tags:
		//		private

		// store pointer to original DOM tree
		this.srcNodeRef = dojo.byId(srcNodeRef);

		// For garbage collection.  An array of handles returned by Widget.connect()
		// Each handle returned from Widget.connect() is an array of handles from dojo.connect()
		this._connects = [];

		// For garbage collection.  An array of handles returned by Widget.subscribe()
		// The handle returned from Widget.subscribe() is the handle returned from dojo.subscribe()
		this._subscribes = [];

		// mix in our passed parameters
		if(this.srcNodeRef && (typeof this.srcNodeRef.id == "string")){ this.id = this.srcNodeRef.id; }
		if(params){
			this.params = params;
			dojo._mixin(this, params);
		}
		this.postMixInProperties();

		// generate an id for the widget if one wasn't specified
		// (be sure to do this before buildRendering() because that function might
		// expect the id to be there.)
		if(!this.id){
			this.id = dijit.getUniqueId(this.declaredClass.replace(/\./g,"_"));
		}
		dijit.registry.add(this);

		this.buildRendering();

		if(this.domNode){
			// Copy attributes listed in attributeMap into the [newly created] DOM for the widget.
			// Also calls custom setters for all attributes with custom setters.
			this._applyAttributes();

			// If srcNodeRef was specified, then swap out original srcNode for this widget's DOM tree.
			// For 2.0, move this after postCreate().  postCreate() shouldn't depend on the
			// widget being attached to the DOM since it isn't when a widget is created programmatically like
			// new MyWidget({}).   See #11635.
			var source = this.srcNodeRef;
			if(source && source.parentNode && this.domNode !== source){
				source.parentNode.replaceChild(this.domNode, source);
			}
		}

		if(this.domNode){
			// Note: for 2.0 may want to rename widgetId to dojo._scopeName + "_widgetId",
			// assuming that dojo._scopeName even exists in 2.0
			this.domNode.setAttribute("widgetId", this.id);
		}
		this.postCreate();

		// If srcNodeRef has been processed and removed from the DOM (e.g. TemplatedWidget) then delete it to allow GC.
		if(this.srcNodeRef && !this.srcNodeRef.parentNode){
			delete this.srcNodeRef;
		}

		this._created = true;
	},

	_applyAttributes: function(){
		// summary:
		//		Step during widget creation to copy all widget attributes to the
		//		DOM as per attributeMap and _setXXXAttr functions.
		// description:
		//		Skips over blank/false attribute values, unless they were explicitly specified
		//		as parameters to the widget, since those are the default anyway,
		//		and setting tabIndex="" is different than not setting tabIndex at all.
		//
		//		It processes the attributes in the attribute map first, and then
		//		it goes through and processes the attributes for the _setXXXAttr
		//		functions that have been specified
		// tags:
		//		private
		var condAttrApply = function(attr, scope){
			if((scope.params && attr in scope.params) || scope[attr]){
				scope.set(attr, scope[attr]);
			}
		};

		// Do the attributes in attributeMap
		for(var attr in this.attributeMap){
			condAttrApply(attr, this);
		}

		// And also any attributes with custom setters
		dojo.forEach(this._getSetterAttributes(), function(a){
			if(!(a in this.attributeMap)){
				condAttrApply(a, this);
			}
		}, this);
	},

	_getSetterAttributes: function(){
		// summary:
		//		Returns list of attributes with custom setters for this widget
		var ctor = this.constructor;
		if(!ctor._setterAttrs){
			var r = (ctor._setterAttrs = []),
				attrs,
				proto = ctor.prototype;
			for(var fxName in proto){
				if(dojo.isFunction(proto[fxName]) && (attrs = fxName.match(/^_set([a-zA-Z]*)Attr$/)) && attrs[1]){
					r.push(attrs[1].charAt(0).toLowerCase() + attrs[1].substr(1));
				}
			}
		}
		return ctor._setterAttrs;	// String[]
	},

	postMixInProperties: function(){
		// summary:
		//		Called after the parameters to the widget have been read-in,
		//		but before the widget template is instantiated. Especially
		//		useful to set properties that are referenced in the widget
		//		template.
		// tags:
		//		protected
	},

	buildRendering: function(){
		// summary:
		//		Construct the UI for this widget, setting this.domNode
		// description:
		//		Most widgets will mixin `dijit._Templated`, which implements this
		//		method.
		// tags:
		//		protected

		if(!this.domNode){
			// Create root node if it wasn't created by _Templated
			this.domNode = this.srcNodeRef || dojo.create('div');
		}

		// baseClass is a single class name or occasionally a space-separated list of names.
		// Add those classes to the DOMNode.  If RTL mode then also add with Rtl suffix.
		// TODO: make baseClass custom setter
		if(this.baseClass){
			var classes = this.baseClass.split(" ");
			if(!this.isLeftToRight()){
				classes = classes.concat( dojo.map(classes, function(name){ return name+"Rtl"; }));
			}
			dojo.addClass(this.domNode, classes);
		}
	},

	postCreate: function(){
		// summary:
		//		Processing after the DOM fragment is created
		// description:
		//		Called after the DOM fragment has been created, but not necessarily
		//		added to the document.  Do not include any operations which rely on
		//		node dimensions or placement.
		// tags:
		//		protected
	},

	startup: function(){
		// summary:
		//		Processing after the DOM fragment is added to the document
		// description:
		//		Called after a widget and its children have been created and added to the page,
		//		and all related widgets have finished their create() cycle, up through postCreate().
		//		This is useful for composite widgets that need to control or layout sub-widgets.
		//		Many layout widgets can use this as a wiring phase.
		this._started = true;
	},

	//////////// DESTROY FUNCTIONS ////////////////////////////////

	destroyRecursive: function(/*Boolean?*/ preserveDom){
		// summary:
		// 		Destroy this widget and its descendants
		// description:
		//		This is the generic "destructor" function that all widget users
		// 		should call to cleanly discard with a widget. Once a widget is
		// 		destroyed, it is removed from the manager object.
		// preserveDom:
		//		If true, this method will leave the original DOM structure
		//		alone of descendant Widgets. Note: This will NOT work with
		//		dijit._Templated widgets.

		this._beingDestroyed = true;
		this.destroyDescendants(preserveDom);
		this.destroy(preserveDom);
	},

	destroy: function(/*Boolean*/ preserveDom){
		// summary:
		// 		Destroy this widget, but not its descendants.
		//		This method will, however, destroy internal widgets such as those used within a template.
		// preserveDom: Boolean
		//		If true, this method will leave the original DOM structure alone.
		//		Note: This will not yet work with _Templated widgets

		this._beingDestroyed = true;
		this.uninitialize();
		var d = dojo,
			dfe = d.forEach,
			dun = d.unsubscribe;
		dfe(this._connects, function(array){
			dfe(array, d.disconnect);
		});
		dfe(this._subscribes, function(handle){
			dun(handle);
		});

		// destroy widgets created as part of template, etc.
		dfe(this._supportingWidgets || [], function(w){
			if(w.destroyRecursive){
				w.destroyRecursive();
			}else if(w.destroy){
				w.destroy();
			}
		});

		this.destroyRendering(preserveDom);
		dijit.registry.remove(this.id);
		this._destroyed = true;
	},

	destroyRendering: function(/*Boolean?*/ preserveDom){
		// summary:
		//		Destroys the DOM nodes associated with this widget
		// preserveDom:
		//		If true, this method will leave the original DOM structure alone
		//		during tear-down. Note: this will not work with _Templated
		//		widgets yet.
		// tags:
		//		protected

		if(this.bgIframe){
			this.bgIframe.destroy(preserveDom);
			delete this.bgIframe;
		}

		if(this.domNode){
			if(preserveDom){
				dojo.removeAttr(this.domNode, "widgetId");
			}else{
				dojo.destroy(this.domNode);
			}
			delete this.domNode;
		}

		if(this.srcNodeRef){
			if(!preserveDom){
				dojo.destroy(this.srcNodeRef);
			}
			delete this.srcNodeRef;
		}
	},

	destroyDescendants: function(/*Boolean?*/ preserveDom){
		// summary:
		//		Recursively destroy the children of this widget and their
		//		descendants.
		// preserveDom:
		//		If true, the preserveDom attribute is passed to all descendant
		//		widget's .destroy() method. Not for use with _Templated
		//		widgets.

		// get all direct descendants and destroy them recursively
		dojo.forEach(this.getChildren(), function(widget){
			if(widget.destroyRecursive){
				widget.destroyRecursive(preserveDom);
			}
		});
	},

	uninitialize: function(){
		// summary:
		//		Stub function. Override to implement custom widget tear-down
		//		behavior.
		// tags:
		//		protected
		return false;
	},

	////////////////// GET/SET, CUSTOM SETTERS, ETC. ///////////////////

	_setClassAttr: function(/*String*/ value){
		// summary:
		//		Custom setter for the CSS "class" attribute
		// tags:
		//		protected
		var mapNode = this[this.attributeMap["class"] || 'domNode'];
		dojo.replaceClass(mapNode, value, this["class"]);
		this._set("class", value);
	},

	_setStyleAttr: function(/*String||Object*/ value){
		// summary:
		//		Sets the style attribute of the widget according to value,
		//		which is either a hash like {height: "5px", width: "3px"}
		//		or a plain string
		// description:
		//		Determines which node to set the style on based on style setting
		//		in attributeMap.
		// tags:
		//		protected

		var mapNode = this[this.attributeMap.style || 'domNode'];

		// Note: technically we should revert any style setting made in a previous call
		// to his method, but that's difficult to keep track of.

		if(dojo.isObject(value)){
			dojo.style(mapNode, value);
		}else{
			if(mapNode.style.cssText){
				mapNode.style.cssText += "; " + value;
			}else{
				mapNode.style.cssText = value;
			}
		}

		this._set("style", value);
	},

	_attrToDom: function(/*String*/ attr, /*String*/ value){
		// summary:
		//		Reflect a widget attribute (title, tabIndex, duration etc.) to
		//		the widget DOM, as specified in attributeMap.
		//		Note some attributes like "type"
		//		cannot be processed this way as they are not mutable.
		//
		// tags:
		//		private

		var commands = this.attributeMap[attr];
		dojo.forEach(dojo.isArray(commands) ? commands : [commands], function(command){

			// Get target node and what we are doing to that node
			var mapNode = this[command.node || command || "domNode"];	// DOM node
			var type = command.type || "attribute";	// class, innerHTML, innerText, or attribute

			switch(type){
				case "attribute":
					if(dojo.isFunction(value)){ // functions execute in the context of the widget
						value = dojo.hitch(this, value);
					}

					// Get the name of the DOM node attribute; usually it's the same
					// as the name of the attribute in the widget (attr), but can be overridden.
					// Also maps handler names to lowercase, like onSubmit --> onsubmit
					var attrName = command.attribute ? command.attribute :
						(/^on[A-Z][a-zA-Z]*$/.test(attr) ? attr.toLowerCase() : attr);

					dojo.attr(mapNode, attrName, value);
					break;
				case "innerText":
					mapNode.innerHTML = "";
					mapNode.appendChild(dojo.doc.createTextNode(value));
					break;
				case "innerHTML":
					mapNode.innerHTML = value;
					break;
				case "class":
					dojo.replaceClass(mapNode, value, this[attr]);
					break;
			}
		}, this);
	},

	get: function(name){
		// summary:
		//		Get a property from a widget.
		//	name:
		//		The property to get.
		// description:
		//		Get a named property from a widget. The property may
		//		potentially be retrieved via a getter method. If no getter is defined, this
		// 		just retrieves the object's property.
		// 		For example, if the widget has a properties "foo"
		//		and "bar" and a method named "_getFooAttr", calling:
		//	|	myWidget.get("foo");
		//		would be equivalent to writing:
		//	|	widget._getFooAttr();
		//		and:
		//	|	myWidget.get("bar");
		//		would be equivalent to writing:
		//	|	widget.bar;
		var names = this._getAttrNames(name);
		return this[names.g] ? this[names.g]() : this[name];
	},
	
	set: function(name, value){
		// summary:
		//		Set a property on a widget
		//	name:
		//		The property to set.
		//	value:
		//		The value to set in the property.
		// description:
		//		Sets named properties on a widget which may potentially be handled by a
		// 		setter in the widget.
		// 		For example, if the widget has a properties "foo"
		//		and "bar" and a method named "_setFooAttr", calling:
		//	|	myWidget.set("foo", "Howdy!");
		//		would be equivalent to writing:
		//	|	widget._setFooAttr("Howdy!");
		//		and:
		//	|	myWidget.set("bar", 3);
		//		would be equivalent to writing:
		//	|	widget.bar = 3;
		//
		//	set() may also be called with a hash of name/value pairs, ex:
		//	|	myWidget.set({
		//	|		foo: "Howdy",
		//	|		bar: 3
		//	|	})
		//	This is equivalent to calling set(foo, "Howdy") and set(bar, 3)

		if(typeof name === "object"){
			for(var x in name){
				this.set(x, name[x]);
			}
			return this;
		}
		var names = this._getAttrNames(name);
		if(this[names.s]){
			// use the explicit setter
			var result = this[names.s].apply(this, Array.prototype.slice.call(arguments, 1));
		}else{
			// if param is specified as DOM node attribute, copy it
			if(name in this.attributeMap){
				this._attrToDom(name, value);
			}
			this._set(name, value);
		}
		return result || this;
	},
	
	_attrPairNames: {},		// shared between all widgets
	_getAttrNames: function(name){
		// summary:
		//		Helper function for get() and set().
		//		Caches attribute name values so we don't do the string ops every time.
		// tags:
		//		private

		var apn = this._attrPairNames;
		if(apn[name]){ return apn[name]; }
		var uc = name.charAt(0).toUpperCase() + name.substr(1);
		return (apn[name] = {
			n: name+"Node",
			s: "_set"+uc+"Attr",
			g: "_get"+uc+"Attr"
		});
	},

	_set: function(/*String*/ name, /*anything*/ value){
		// summary:
		//		Helper function to set new value for specified attribute, and call handlers
		//		registered with watch() if the value has changed.
		var oldValue = this[name];
		this[name] = value;
		if(this._watchCallbacks && this._created && value !== oldValue){
			this._watchCallbacks(name, oldValue, value);
		}
	},

	toString: function(){
		// summary:
		//		Returns a string that represents the widget
		// description:
		//		When a widget is cast to a string, this method will be used to generate the
		//		output. Currently, it does not implement any sort of reversible
		//		serialization.
		return '[Widget ' + this.declaredClass + ', ' + (this.id || 'NO ID') + ']'; // String
	},

	getDescendants: function(){
		// summary:
		//		Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode.
		//		This method should generally be avoided as it returns widgets declared in templates, which are
		//		supposed to be internal/hidden, but it's left here for back-compat reasons.

		return this.containerNode ? dojo.query('[widgetId]', this.containerNode).map(dijit.byNode) : []; // dijit._Widget[]
	},

	getChildren: function(){
		// summary:
		//		Returns all the widgets contained by this, i.e., all widgets underneath this.containerNode.
		//		Does not return nested widgets, nor widgets that are part of this widget's template.
		return this.containerNode ? dijit.findWidgets(this.containerNode) : []; // dijit._Widget[]
	},

	connect: function(
			/*Object|null*/ obj,
			/*String|Function*/ event,
			/*String|Function*/ method){
		// summary:
		//		Connects specified obj/event to specified method of this object
		//		and registers for disconnect() on widget destroy.
		// description:
		//		Provide widget-specific analog to dojo.connect, except with the
		//		implicit use of this widget as the target object.
		//		Events connected with `this.connect` are disconnected upon
		//		destruction.
		// returns:
		//		A handle that can be passed to `disconnect` in order to disconnect before
		//		the widget is destroyed.
		// example:
		//	|	var btn = new dijit.form.Button();
		//	|	// when foo.bar() is called, call the listener we're going to
		//	|	// provide in the scope of btn
		//	|	btn.connect(foo, "bar", function(){
		//	|		console.debug(this.toString());
		//	|	});
		// tags:
		//		protected

		var handles = [dojo._connect(obj, event, this, method)];
		this._connects.push(handles);
		return handles;		// _Widget.Handle
	},

	disconnect: function(/* _Widget.Handle */ handles){
		// summary:
		//		Disconnects handle created by `connect`.
		//		Also removes handle from this widget's list of connects.
		// tags:
		//		protected
		for(var i=0; i<this._connects.length; i++){
			if(this._connects[i] == handles){
				dojo.forEach(handles, dojo.disconnect);
				this._connects.splice(i, 1);
				return;
			}
		}
	},

	subscribe: function(
			/*String*/ topic,
			/*String|Function*/ method){
		// summary:
		//		Subscribes to the specified topic and calls the specified method
		//		of this object and registers for unsubscribe() on widget destroy.
		// description:
		//		Provide widget-specific analog to dojo.subscribe, except with the
		//		implicit use of this widget as the target object.
		// example:
		//	|	var btn = new dijit.form.Button();
		//	|	// when /my/topic is published, this button changes its label to
		//	|   // be the parameter of the topic.
		//	|	btn.subscribe("/my/topic", function(v){
		//	|		this.set("label", v);
		//	|	});
		var handle = dojo.subscribe(topic, this, method);

		// return handles for Any widget that may need them
		this._subscribes.push(handle);
		return handle;
	},

	unsubscribe: function(/*Object*/ handle){
		// summary:
		//		Unsubscribes handle created by this.subscribe.
		//		Also removes handle from this widget's list of subscriptions
		for(var i=0; i<this._subscribes.length; i++){
			if(this._subscribes[i] == handle){
				dojo.unsubscribe(handle);
				this._subscribes.splice(i, 1);
				return;
			}
		}
	},

	isLeftToRight: function(){
		// summary:
		//		Return this widget's explicit or implicit orientation (true for LTR, false for RTL)
		// tags:
		//		protected
		return this.dir ? (this.dir == "ltr") : dojo._isBodyLtr(); //Boolean
	},

	placeAt: function(/* String|DomNode|_Widget */reference, /* String?|Int? */position){
		// summary:
		//		Place this widget's domNode reference somewhere in the DOM based
		//		on standard dojo.place conventions, or passing a Widget reference that
		//		contains and addChild member.
		//
		// description:
		//		A convenience function provided in all _Widgets, providing a simple
		//		shorthand mechanism to put an existing (or newly created) Widget
		//		somewhere in the dom, and allow chaining.
		//
		// reference:
		//		The String id of a domNode, a domNode reference, or a reference to a Widget posessing
		//		an addChild method.
		//
		// position:
		//		If passed a string or domNode reference, the position argument
		//		accepts a string just as dojo.place does, one of: "first", "last",
		//		"before", or "after".
		//
		//		If passed a _Widget reference, and that widget reference has an ".addChild" method,
		//		it will be called passing this widget instance into that method, supplying the optional
		//		position index passed.
		//
		// returns:
		//		dijit._Widget
		//		Provides a useful return of the newly created dijit._Widget instance so you
		//		can "chain" this function by instantiating, placing, then saving the return value
		//		to a variable.
		//
		// example:
		// | 	// create a Button with no srcNodeRef, and place it in the body:
		// | 	var button = new dijit.form.Button({ label:"click" }).placeAt(dojo.body());
		// | 	// now, 'button' is still the widget reference to the newly created button
		// | 	dojo.connect(button, "onClick", function(e){ console.log('click'); });
		//
		// example:
		// |	// create a button out of a node with id="src" and append it to id="wrapper":
		// | 	var button = new dijit.form.Button({},"src").placeAt("wrapper");
		//
		// example:
		// |	// place a new button as the first element of some div
		// |	var button = new dijit.form.Button({ label:"click" }).placeAt("wrapper","first");
		//
		// example:
		// |	// create a contentpane and add it to a TabContainer
		// |	var tc = dijit.byId("myTabs");
		// |	new dijit.layout.ContentPane({ href:"foo.html", title:"Wow!" }).placeAt(tc)

		if(reference.declaredClass && reference.addChild){
			reference.addChild(this, position);
		}else{
			dojo.place(this.domNode, reference, position);
		}
		return this;
	}
});

})();

}

if(!dojo._hasResource["dojo.window"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.window"] = true;
dojo.provide("dojo.window");


dojo.getObject("window", true, dojo);

dojo.window.getBox = function(){
	// summary:
	//		Returns the dimensions and scroll position of the viewable area of a browser window

	var scrollRoot = (dojo.doc.compatMode == 'BackCompat') ? dojo.body() : dojo.doc.documentElement;

	// get scroll position
	var scroll = dojo._docScroll(); // scrollRoot.scrollTop/Left should work
	return { w: scrollRoot.clientWidth, h: scrollRoot.clientHeight, l: scroll.x, t: scroll.y };
};

dojo.window.get = function(doc){
	// summary:
	// 		Get window object associated with document doc

	// In some IE versions (at least 6.0), document.parentWindow does not return a
	// reference to the real window object (maybe a copy), so we must fix it as well
	// We use IE specific execScript to attach the real window reference to
	// document._parentWindow for later use
	if(dojo.isIE && window !== document.parentWindow){
		/*
		In IE 6, only the variable "window" can be used to connect events (others
		may be only copies).
		*/
		doc.parentWindow.execScript("document._parentWindow = window;", "Javascript");
		//to prevent memory leak, unset it after use
		//another possibility is to add an onUnload handler which seems overkill to me (liucougar)
		var win = doc._parentWindow;
		doc._parentWindow = null;
		return win;	//	Window
	}

	return doc.parentWindow || doc.defaultView;	//	Window
};

dojo.window.scrollIntoView = function(/*DomNode*/ node, /*Object?*/ pos){
	// summary:
	//		Scroll the passed node into view, if it is not already.
	
	// don't rely on node.scrollIntoView working just because the function is there

	try{ // catch unexpected/unrecreatable errors (#7808) since we can recover using a semi-acceptable native method
		node = dojo.byId(node);
		var doc = node.ownerDocument || dojo.doc,
			body = doc.body || dojo.body(),
			html = doc.documentElement || body.parentNode,
			isIE = dojo.isIE, isWK = dojo.isWebKit;
		// if an untested browser, then use the native method
		if((!(dojo.isMoz || isIE || isWK || dojo.isOpera) || node == body || node == html) && (typeof node.scrollIntoView != "undefined")){
			node.scrollIntoView(false); // short-circuit to native if possible
			return;
		}
		var backCompat = doc.compatMode == 'BackCompat',
			clientAreaRoot = (isIE >= 9 && node.ownerDocument.parentWindow.frameElement)
				? ((html.clientHeight > 0 && html.clientWidth > 0 && (body.clientHeight == 0 || body.clientWidth == 0 || body.clientHeight > html.clientHeight || body.clientWidth > html.clientWidth)) ? html : body)
				: (backCompat ? body : html),
			scrollRoot = isWK ? body : clientAreaRoot,
			rootWidth = clientAreaRoot.clientWidth,
			rootHeight = clientAreaRoot.clientHeight,
			rtl = !dojo._isBodyLtr(),
			nodePos = pos || dojo.position(node),
			el = node.parentNode,
			isFixed = function(el){
				return ((isIE <= 6 || (isIE && backCompat))? false : (dojo.style(el, 'position').toLowerCase() == "fixed"));
			};
		if(isFixed(node)){ return; } // nothing to do

		while(el){
			if(el == body){ el = scrollRoot; }
			var elPos = dojo.position(el),
				fixedPos = isFixed(el);
	
			if(el == scrollRoot){
				elPos.w = rootWidth; elPos.h = rootHeight;
				if(scrollRoot == html && isIE && rtl){ elPos.x += scrollRoot.offsetWidth-elPos.w; } // IE workaround where scrollbar causes negative x
				if(elPos.x < 0 || !isIE){ elPos.x = 0; } // IE can have values > 0
				if(elPos.y < 0 || !isIE){ elPos.y = 0; }
			}else{
				var pb = dojo._getPadBorderExtents(el);
				elPos.w -= pb.w; elPos.h -= pb.h; elPos.x += pb.l; elPos.y += pb.t;
				var clientSize = el.clientWidth,
					scrollBarSize = elPos.w - clientSize;
				if(clientSize > 0 && scrollBarSize > 0){
					elPos.w = clientSize;
					elPos.x += (rtl && (isIE || el.clientLeft > pb.l/*Chrome*/)) ? scrollBarSize : 0;
				}
				clientSize = el.clientHeight;
				scrollBarSize = elPos.h - clientSize;
				if(clientSize > 0 && scrollBarSize > 0){
					elPos.h = clientSize;
				}
			}
			if(fixedPos){ // bounded by viewport, not parents
				if(elPos.y < 0){
					elPos.h += elPos.y; elPos.y = 0;
				}
				if(elPos.x < 0){
					elPos.w += elPos.x; elPos.x = 0;
				}
				if(elPos.y + elPos.h > rootHeight){
					elPos.h = rootHeight - elPos.y;
				}
				if(elPos.x + elPos.w > rootWidth){
					elPos.w = rootWidth - elPos.x;
				}
			}
			// calculate overflow in all 4 directions
			var l = nodePos.x - elPos.x, // beyond left: < 0
				t = nodePos.y - Math.max(elPos.y, 0), // beyond top: < 0
				r = l + nodePos.w - elPos.w, // beyond right: > 0
				bot = t + nodePos.h - elPos.h; // beyond bottom: > 0
			if(r * l > 0){
				var s = Math[l < 0? "max" : "min"](l, r);
				if(rtl && ((isIE == 8 && !backCompat) || isIE >= 9)){ s = -s; }
				nodePos.x += el.scrollLeft;
				el.scrollLeft += s;
				nodePos.x -= el.scrollLeft;
			}
			if(bot * t > 0){
				nodePos.y += el.scrollTop;
				el.scrollTop += Math[t < 0? "max" : "min"](t, bot);
				nodePos.y -= el.scrollTop;
			}
			el = (el != scrollRoot) && !fixedPos && el.parentNode;
		}
	}catch(error){
		console.error('scrollIntoView: ' + error);
		node.scrollIntoView(false);
	}
};

}

if(!dojo._hasResource["dijit._base.focus"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.focus"] = true;
dojo.provide("dijit._base.focus");





// summary:
//		These functions are used to query or set the focus and selection.
//
//		Also, they trace when widgets become activated/deactivated,
//		so that the widget can fire _onFocus/_onBlur events.
//		"Active" here means something similar to "focused", but
//		"focus" isn't quite the right word because we keep track of
//		a whole stack of "active" widgets.  Example: ComboButton --> Menu -->
//		MenuItem.  The onBlur event for ComboButton doesn't fire due to focusing
//		on the Menu or a MenuItem, since they are considered part of the
//		ComboButton widget.  It only happens when focus is shifted
//		somewhere completely different.

dojo.mixin(dijit, {
	// _curFocus: DomNode
	//		Currently focused item on screen
	_curFocus: null,

	// _prevFocus: DomNode
	//		Previously focused item on screen
	_prevFocus: null,

	isCollapsed: function(){
		// summary:
		//		Returns true if there is no text selected
		return dijit.getBookmark().isCollapsed;
	},

	getBookmark: function(){
		// summary:
		//		Retrieves a bookmark that can be used with moveToBookmark to return to the same range
		var bm, rg, tg, sel = dojo.doc.selection, cf = dijit._curFocus;

		if(dojo.global.getSelection){
			//W3C Range API for selections.
			sel = dojo.global.getSelection();
			if(sel){
				if(sel.isCollapsed){
					tg = cf? cf.tagName : "";
					if(tg){
						//Create a fake rangelike item to restore selections.
						tg = tg.toLowerCase();
						if(tg == "textarea" ||
								(tg == "input" && (!cf.type || cf.type.toLowerCase() == "text"))){
							sel = {
								start: cf.selectionStart,
								end: cf.selectionEnd,
								node: cf,
								pRange: true
							};
							return {isCollapsed: (sel.end <= sel.start), mark: sel}; //Object.
						}
					}
					bm = {isCollapsed:true};
					if(sel.rangeCount){
						bm.mark = sel.getRangeAt(0).cloneRange();
					}
				}else{
					rg = sel.getRangeAt(0);
					bm = {isCollapsed: false, mark: rg.cloneRange()};
				}
			}
		}else if(sel){
			// If the current focus was a input of some sort and no selection, don't bother saving
			// a native bookmark.  This is because it causes issues with dialog/page selection restore.
			// So, we need to create psuedo bookmarks to work with.
			tg = cf ? cf.tagName : "";
			tg = tg.toLowerCase();
			if(cf && tg && (tg == "button" || tg == "textarea" || tg == "input")){
				if(sel.type && sel.type.toLowerCase() == "none"){
					return {
						isCollapsed: true,
						mark: null
					}
				}else{
					rg = sel.createRange();
					return {
						isCollapsed: rg.text && rg.text.length?false:true,
						mark: {
							range: rg,
							pRange: true
						}
					};
				}
			}
			bm = {};

			//'IE' way for selections.
			try{
				// createRange() throws exception when dojo in iframe
				//and nothing selected, see #9632
				rg = sel.createRange();
				bm.isCollapsed = !(sel.type == 'Text' ? rg.htmlText.length : rg.length);
			}catch(e){
				bm.isCollapsed = true;
				return bm;
			}
			if(sel.type.toUpperCase() == 'CONTROL'){
				if(rg.length){
					bm.mark=[];
					var i=0,len=rg.length;
					while(i<len){
						bm.mark.push(rg.item(i++));
					}
				}else{
					bm.isCollapsed = true;
					bm.mark = null;
				}
			}else{
				bm.mark = rg.getBookmark();
			}
		}else{
			console.warn("No idea how to store the current selection for this browser!");
		}
		return bm; // Object
	},

	moveToBookmark: function(/*Object*/bookmark){
		// summary:
		//		Moves current selection to a bookmark
		// bookmark:
		//		This should be a returned object from dijit.getBookmark()

		var _doc = dojo.doc,
			mark = bookmark.mark;
		if(mark){
			if(dojo.global.getSelection){
				//W3C Rangi API (FF, WebKit, Opera, etc)
				var sel = dojo.global.getSelection();
				if(sel && sel.removeAllRanges){
					if(mark.pRange){
						var r = mark;
						var n = r.node;
						n.selectionStart = r.start;
						n.selectionEnd = r.end;
					}else{
						sel.removeAllRanges();
						sel.addRange(mark);
					}
				}else{
					console.warn("No idea how to restore selection for this browser!");
				}
			}else if(_doc.selection && mark){
				//'IE' way.
				var rg;
				if(mark.pRange){
					rg = mark.range;
				}else if(dojo.isArray(mark)){
					rg = _doc.body.createControlRange();
					//rg.addElement does not have call/apply method, so can not call it directly
					//rg is not available in "range.addElement(item)", so can't use that either
					dojo.forEach(mark, function(n){
						rg.addElement(n);
					});
				}else{
					rg = _doc.body.createTextRange();
					rg.moveToBookmark(mark);
				}
				rg.select();
			}
		}
	},

	getFocus: function(/*Widget?*/ menu, /*Window?*/ openedForWindow){
		// summary:
		//		Called as getFocus(), this returns an Object showing the current focus
		//		and selected text.
		//
		//		Called as getFocus(widget), where widget is a (widget representing) a button
		//		that was just pressed, it returns where focus was before that button
		//		was pressed.   (Pressing the button may have either shifted focus to the button,
		//		or removed focus altogether.)   In this case the selected text is not returned,
		//		since it can't be accurately determined.
		//
		// menu: dijit._Widget or {domNode: DomNode} structure
		//		The button that was just pressed.  If focus has disappeared or moved
		//		to this button, returns the previous focus.  In this case the bookmark
		//		information is already lost, and null is returned.
		//
		// openedForWindow:
		//		iframe in which menu was opened
		//
		// returns:
		//		A handle to restore focus/selection, to be passed to `dijit.focus`
		var node = !dijit._curFocus || (menu && dojo.isDescendant(dijit._curFocus, menu.domNode)) ? dijit._prevFocus : dijit._curFocus;
		return {
			node: node,
			bookmark: (node == dijit._curFocus) && dojo.withGlobal(openedForWindow || dojo.global, dijit.getBookmark),
			openedForWindow: openedForWindow
		}; // Object
	},

	focus: function(/*Object || DomNode */ handle){
		// summary:
		//		Sets the focused node and the selection according to argument.
		//		To set focus to an iframe's content, pass in the iframe itself.
		// handle:
		//		object returned by get(), or a DomNode

		if(!handle){ return; }

		var node = "node" in handle ? handle.node : handle,		// because handle is either DomNode or a composite object
			bookmark = handle.bookmark,
			openedForWindow = handle.openedForWindow,
			collapsed = bookmark ? bookmark.isCollapsed : false;

		// Set the focus
		// Note that for iframe's we need to use the <iframe> to follow the parentNode chain,
		// but we need to set focus to iframe.contentWindow
		if(node){
			var focusNode = (node.tagName.toLowerCase() == "iframe") ? node.contentWindow : node;
			if(focusNode && focusNode.focus){
				try{
					// Gecko throws sometimes if setting focus is impossible,
					// node not displayed or something like that
					focusNode.focus();
				}catch(e){/*quiet*/}
			}
			dijit._onFocusNode(node);
		}

		// set the selection
		// do not need to restore if current selection is not empty
		// (use keyboard to select a menu item) or if previous selection was collapsed
		// as it may cause focus shift (Esp in IE).
		if(bookmark && dojo.withGlobal(openedForWindow || dojo.global, dijit.isCollapsed) && !collapsed){
			if(openedForWindow){
				openedForWindow.focus();
			}
			try{
				dojo.withGlobal(openedForWindow || dojo.global, dijit.moveToBookmark, null, [bookmark]);
			}catch(e2){
				/*squelch IE internal error, see http://trac.dojotoolkit.org/ticket/1984 */
			}
		}
	},

	// _activeStack: dijit._Widget[]
	//		List of currently active widgets (focused widget and it's ancestors)
	_activeStack: [],

	registerIframe: function(/*DomNode*/ iframe){
		// summary:
		//		Registers listeners on the specified iframe so that any click
		//		or focus event on that iframe (or anything in it) is reported
		//		as a focus/click event on the <iframe> itself.
		// description:
		//		Currently only used by editor.
		// returns:
		//		Handle to pass to unregisterIframe()
		return dijit.registerWin(iframe.contentWindow, iframe);
	},

	unregisterIframe: function(/*Object*/ handle){
		// summary:
		//		Unregisters listeners on the specified iframe created by registerIframe.
		//		After calling be sure to delete or null out the handle itself.
		// handle:
		//		Handle returned by registerIframe()

		dijit.unregisterWin(handle);
	},

	registerWin: function(/*Window?*/targetWindow, /*DomNode?*/ effectiveNode){
		// summary:
		//		Registers listeners on the specified window (either the main
		//		window or an iframe's window) to detect when the user has clicked somewhere
		//		or focused somewhere.
		// description:
		//		Users should call registerIframe() instead of this method.
		// targetWindow:
		//		If specified this is the window associated with the iframe,
		//		i.e. iframe.contentWindow.
		// effectiveNode:
		//		If specified, report any focus events inside targetWindow as
		//		an event on effectiveNode, rather than on evt.target.
		// returns:
		//		Handle to pass to unregisterWin()

		// TODO: make this function private in 2.0; Editor/users should call registerIframe(),

		var mousedownListener = function(evt){
			dijit._justMouseDowned = true;
			setTimeout(function(){ dijit._justMouseDowned = false; }, 0);
			
			// workaround weird IE bug where the click is on an orphaned node
			// (first time clicking a Select/DropDownButton inside a TooltipDialog)
			if(dojo.isIE && evt && evt.srcElement && evt.srcElement.parentNode == null){
				return;
			}

			dijit._onTouchNode(effectiveNode || evt.target || evt.srcElement, "mouse");
		};
		//dojo.connect(targetWindow, "onscroll", ???);

		// Listen for blur and focus events on targetWindow's document.
		// IIRC, I'm using attachEvent() rather than dojo.connect() because focus/blur events don't bubble
		// through dojo.connect(), and also maybe to catch the focus events early, before onfocus handlers
		// fire.
		// Connect to <html> (rather than document) on IE to avoid memory leaks, but document on other browsers because
		// (at least for FF) the focus event doesn't fire on <html> or <body>.
		var doc = dojo.isIE ? targetWindow.document.documentElement : targetWindow.document;
		if(doc){
			if(dojo.isIE){
				targetWindow.document.body.attachEvent('onmousedown', mousedownListener);
				var activateListener = function(evt){
					// IE reports that nodes like <body> have gotten focus, even though they have tabIndex=-1,
					// Should consider those more like a mouse-click than a focus....
					if(evt.srcElement.tagName.toLowerCase() != "#document" &&
						dijit.isTabNavigable(evt.srcElement)){
						dijit._onFocusNode(effectiveNode || evt.srcElement);
					}else{
						dijit._onTouchNode(effectiveNode || evt.srcElement);
					}
				};
				doc.attachEvent('onactivate', activateListener);
				var deactivateListener =  function(evt){
					dijit._onBlurNode(effectiveNode || evt.srcElement);
				};
				doc.attachEvent('ondeactivate', deactivateListener);

				return function(){
					targetWindow.document.detachEvent('onmousedown', mousedownListener);
					doc.detachEvent('onactivate', activateListener);
					doc.detachEvent('ondeactivate', deactivateListener);
					doc = null;	// prevent memory leak (apparent circular reference via closure)
				};
			}else{
				doc.body.addEventListener('mousedown', mousedownListener, true);
				var focusListener = function(evt){
					dijit._onFocusNode(effectiveNode || evt.target);
				};
				doc.addEventListener('focus', focusListener, true);
				var blurListener = function(evt){
					dijit._onBlurNode(effectiveNode || evt.target);
				};
				doc.addEventListener('blur', blurListener, true);

				return function(){
					doc.body.removeEventListener('mousedown', mousedownListener, true);
					doc.removeEventListener('focus', focusListener, true);
					doc.removeEventListener('blur', blurListener, true);
					doc = null;	// prevent memory leak (apparent circular reference via closure)
				};
			}
		}
	},

	unregisterWin: function(/*Handle*/ handle){
		// summary:
		//		Unregisters listeners on the specified window (either the main
		//		window or an iframe's window) according to handle returned from registerWin().
		//		After calling be sure to delete or null out the handle itself.

		// Currently our handle is actually a function
		handle && handle();
	},

	_onBlurNode: function(/*DomNode*/ node){
		// summary:
		// 		Called when focus leaves a node.
		//		Usually ignored, _unless_ it *isn't* follwed by touching another node,
		//		which indicates that we tabbed off the last field on the page,
		//		in which case every widget is marked inactive
		dijit._prevFocus = dijit._curFocus;
		dijit._curFocus = null;

		if(dijit._justMouseDowned){
			// the mouse down caused a new widget to be marked as active; this blur event
			// is coming late, so ignore it.
			return;
		}

		// if the blur event isn't followed by a focus event then mark all widgets as inactive.
		if(dijit._clearActiveWidgetsTimer){
			clearTimeout(dijit._clearActiveWidgetsTimer);
		}
		dijit._clearActiveWidgetsTimer = setTimeout(function(){
			delete dijit._clearActiveWidgetsTimer;
			dijit._setStack([]);
			dijit._prevFocus = null;
		}, 100);
	},

	_onTouchNode: function(/*DomNode*/ node, /*String*/ by){
		// summary:
		//		Callback when node is focused or mouse-downed
		// node:
		//		The node that was touched.
		// by:
		//		"mouse" if the focus/touch was caused by a mouse down event

		// ignore the recent blurNode event
		if(dijit._clearActiveWidgetsTimer){
			clearTimeout(dijit._clearActiveWidgetsTimer);
			delete dijit._clearActiveWidgetsTimer;
		}

		// compute stack of active widgets (ex: ComboButton --> Menu --> MenuItem)
		var newStack=[];
		try{
			while(node){
				var popupParent = dojo.attr(node, "dijitPopupParent");
				if(popupParent){
					node=dijit.byId(popupParent).domNode;
				}else if(node.tagName && node.tagName.toLowerCase() == "body"){
					// is this the root of the document or just the root of an iframe?
					if(node === dojo.body()){
						// node is the root of the main document
						break;
					}
					// otherwise, find the iframe this node refers to (can't access it via parentNode,
					// need to do this trick instead). window.frameElement is supported in IE/FF/Webkit
					node=dojo.window.get(node.ownerDocument).frameElement;
				}else{
					// if this node is the root node of a widget, then add widget id to stack,
					// except ignore clicks on disabled widgets (actually focusing a disabled widget still works,
					// to support MenuItem)
					var id = node.getAttribute && node.getAttribute("widgetId"),
						widget = id && dijit.byId(id);
					if(widget && !(by == "mouse" && widget.get("disabled"))){
						newStack.unshift(id);
					}
					node=node.parentNode;
				}
			}
		}catch(e){ /* squelch */ }

		dijit._setStack(newStack, by);
	},

	_onFocusNode: function(/*DomNode*/ node){
		// summary:
		//		Callback when node is focused

		if(!node){
			return;
		}

		if(node.nodeType == 9){
			// Ignore focus events on the document itself.  This is here so that
			// (for example) clicking the up/down arrows of a spinner
			// (which don't get focus) won't cause that widget to blur. (FF issue)
			return;
		}

		dijit._onTouchNode(node);

		if(node == dijit._curFocus){ return; }
		if(dijit._curFocus){
			dijit._prevFocus = dijit._curFocus;
		}
		dijit._curFocus = node;
		dojo.publish("focusNode", [node]);
	},

	_setStack: function(/*String[]*/ newStack, /*String*/ by){
		// summary:
		//		The stack of active widgets has changed.  Send out appropriate events and records new stack.
		// newStack:
		//		array of widget id's, starting from the top (outermost) widget
		// by:
		//		"mouse" if the focus/touch was caused by a mouse down event

		var oldStack = dijit._activeStack;
		dijit._activeStack = newStack;

		// compare old stack to new stack to see how many elements they have in common
		for(var nCommon=0; nCommon<Math.min(oldStack.length, newStack.length); nCommon++){
			if(oldStack[nCommon] != newStack[nCommon]){
				break;
			}
		}

		var widget;
		// for all elements that have gone out of focus, send blur event
		for(var i=oldStack.length-1; i>=nCommon; i--){
			widget = dijit.byId(oldStack[i]);
			if(widget){
				widget._focused = false;
				widget.set("focused", false);
				widget._hasBeenBlurred = true;
				if(widget._onBlur){
					widget._onBlur(by);
				}
				dojo.publish("widgetBlur", [widget, by]);
			}
		}

		// for all element that have come into focus, send focus event
		for(i=nCommon; i<newStack.length; i++){
			widget = dijit.byId(newStack[i]);
			if(widget){
				widget._focused = true;
				widget.set("focused", true);
				if(widget._onFocus){
					widget._onFocus(by);
				}
				dojo.publish("widgetFocus", [widget, by]);
			}
		}
	}
});

// register top window and all the iframes it contains
dojo.addOnLoad(function(){
	var handle = dijit.registerWin(window);
	if(dojo.isIE){
		dojo.addOnWindowUnload(function(){
			dijit.unregisterWin(handle);
			handle = null;
		})
	}
});

}

if(!dojo._hasResource["dojo.AdapterRegistry"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.AdapterRegistry"] = true;
dojo.provide("dojo.AdapterRegistry");



dojo.AdapterRegistry = function(/*Boolean?*/ returnWrappers){
	//	summary:
	//		A registry to make contextual calling/searching easier.
	//	description:
	//		Objects of this class keep list of arrays in the form [name, check,
	//		wrap, directReturn] that are used to determine what the contextual
	//		result of a set of checked arguments is. All check/wrap functions
	//		in this registry should be of the same arity.
	//	example:
	//	|	// create a new registry
	//	|	var reg = new dojo.AdapterRegistry();
	//	|	reg.register("handleString",
	//	|		dojo.isString,
	//	|		function(str){
	//	|			// do something with the string here
	//	|		}
	//	|	);
	//	|	reg.register("handleArr",
	//	|		dojo.isArray,
	//	|		function(arr){
	//	|			// do something with the array here
	//	|		}
	//	|	);
	//	|
	//	|	// now we can pass reg.match() *either* an array or a string and
	//	|	// the value we pass will get handled by the right function
	//	|	reg.match("someValue"); // will call the first function
	//	|	reg.match(["someValue"]); // will call the second

	this.pairs = [];
	this.returnWrappers = returnWrappers || false; // Boolean
};

dojo.extend(dojo.AdapterRegistry, {
	register: function(/*String*/ name, /*Function*/ check, /*Function*/ wrap, /*Boolean?*/ directReturn, /*Boolean?*/ override){
		//	summary:
		//		register a check function to determine if the wrap function or
		//		object gets selected
		//	name:
		//		a way to identify this matcher.
		//	check:
		//		a function that arguments are passed to from the adapter's
		//		match() function.  The check function should return true if the
		//		given arguments are appropriate for the wrap function.
		//	directReturn:
		//		If directReturn is true, the value passed in for wrap will be
		//		returned instead of being called. Alternately, the
		//		AdapterRegistry can be set globally to "return not call" using
		//		the returnWrappers property. Either way, this behavior allows
		//		the registry to act as a "search" function instead of a
		//		function interception library.
		//	override:
		//		If override is given and true, the check function will be given
		//		highest priority. Otherwise, it will be the lowest priority
		//		adapter.
		this.pairs[((override) ? "unshift" : "push")]([name, check, wrap, directReturn]);
	},

	match: function(/* ... */){
		// summary:
		//		Find an adapter for the given arguments. If no suitable adapter
		//		is found, throws an exception. match() accepts any number of
		//		arguments, all of which are passed to all matching functions
		//		from the registered pairs.
		for(var i = 0; i < this.pairs.length; i++){
			var pair = this.pairs[i];
			if(pair[1].apply(this, arguments)){
				if((pair[3])||(this.returnWrappers)){
					return pair[2];
				}else{
					return pair[2].apply(this, arguments);
				}
			}
		}
		throw new Error("No match found");
	},

	unregister: function(name){
		// summary: Remove a named adapter from the registry

		// FIXME: this is kind of a dumb way to handle this. On a large
		// registry this will be slow-ish and we can use the name as a lookup
		// should we choose to trade memory for speed.
		for(var i = 0; i < this.pairs.length; i++){
			var pair = this.pairs[i];
			if(pair[0] == name){
				this.pairs.splice(i, 1);
				return true;
			}
		}
		return false;
	}
});

}

if(!dojo._hasResource["dijit._base.place"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.place"] = true;
dojo.provide("dijit._base.place");





dijit.getViewport = function(){
	// summary:
	//		Returns the dimensions and scroll position of the viewable area of a browser window

	return dojo.window.getBox();
};

/*=====
dijit.__Position = function(){
	// x: Integer
	//		horizontal coordinate in pixels, relative to document body
	// y: Integer
	//		vertical coordinate in pixels, relative to document body

	thix.x = x;
	this.y = y;
}
=====*/


dijit.placeOnScreen = function(
	/* DomNode */			node,
	/* dijit.__Position */	pos,
	/* String[] */			corners,
	/* dijit.__Position? */	padding){
	// summary:
	//		Positions one of the node's corners at specified position
	//		such that node is fully visible in viewport.
	// description:
	//		NOTE: node is assumed to be absolutely or relatively positioned.
	//	pos:
	//		Object like {x: 10, y: 20}
	//	corners:
	//		Array of Strings representing order to try corners in, like ["TR", "BL"].
	//		Possible values are:
	//			* "BL" - bottom left
	//			* "BR" - bottom right
	//			* "TL" - top left
	//			* "TR" - top right
	//	padding:
	//		set padding to put some buffer around the element you want to position.
	// example:
	//		Try to place node's top right corner at (10,20).
	//		If that makes node go (partially) off screen, then try placing
	//		bottom left corner at (10,20).
	//	|	placeOnScreen(node, {x: 10, y: 20}, ["TR", "BL"])

	var choices = dojo.map(corners, function(corner){
		var c = { corner: corner, pos: {x:pos.x,y:pos.y} };
		if(padding){
			c.pos.x += corner.charAt(1) == 'L' ? padding.x : -padding.x;
			c.pos.y += corner.charAt(0) == 'T' ? padding.y : -padding.y;
		}
		return c;
	});

	return dijit._place(node, choices);
}

dijit._place = function(/*DomNode*/ node, choices, layoutNode, /*Object*/ aroundNodeCoords){
	// summary:
	//		Given a list of spots to put node, put it at the first spot where it fits,
	//		of if it doesn't fit anywhere then the place with the least overflow
	// choices: Array
	//		Array of elements like: {corner: 'TL', pos: {x: 10, y: 20} }
	//		Above example says to put the top-left corner of the node at (10,20)
	// layoutNode: Function(node, aroundNodeCorner, nodeCorner, size)
	//		for things like tooltip, they are displayed differently (and have different dimensions)
	//		based on their orientation relative to the parent.   This adjusts the popup based on orientation.
	//		It also passes in the available size for the popup, which is useful for tooltips to
	//		tell them that their width is limited to a certain amount.   layoutNode() may return a value expressing
	//		how much the popup had to be modified to fit into the available space.   This is used to determine
	//		what the best placement is.
	// aroundNodeCoords: Object
	//		Size of aroundNode, ex: {w: 200, h: 50}

	// get {x: 10, y: 10, w: 100, h:100} type obj representing position of
	// viewport over document
	var view = dojo.window.getBox();

	// This won't work if the node is inside a <div style="position: relative">,
	// so reattach it to dojo.doc.body.   (Otherwise, the positioning will be wrong
	// and also it might get cutoff)
	if(!node.parentNode || String(node.parentNode.tagName).toLowerCase() != "body"){
		dojo.body().appendChild(node);
	}

	var best = null;
	dojo.some(choices, function(choice){
		var corner = choice.corner;
		var pos = choice.pos;
		var overflow = 0;

		// calculate amount of space available given specified position of node
		var spaceAvailable = {
			w: corner.charAt(1) == 'L' ? (view.l + view.w) - pos.x : pos.x - view.l,
			h: corner.charAt(1) == 'T' ? (view.t + view.h) - pos.y : pos.y - view.t
		};

		// configure node to be displayed in given position relative to button
		// (need to do this in order to get an accurate size for the node, because
		// a tooltip's size changes based on position, due to triangle)
		if(layoutNode){
			var res = layoutNode(node, choice.aroundCorner, corner, spaceAvailable, aroundNodeCoords);
			overflow = typeof res == "undefined" ? 0 : res;
		}

		// get node's size
		var style = node.style;
		var oldDisplay = style.display;
		var oldVis = style.visibility;
		style.visibility = "hidden";
		style.display = "";
		var mb = dojo.marginBox(node);
		style.display = oldDisplay;
		style.visibility = oldVis;

		// coordinates and size of node with specified corner placed at pos,
		// and clipped by viewport
		var startX = Math.max(view.l, corner.charAt(1) == 'L' ? pos.x : (pos.x - mb.w)),
			startY = Math.max(view.t, corner.charAt(0) == 'T' ? pos.y : (pos.y - mb.h)),
			endX = Math.min(view.l + view.w, corner.charAt(1) == 'L' ? (startX + mb.w) : pos.x),
			endY = Math.min(view.t + view.h, corner.charAt(0) == 'T' ? (startY + mb.h) : pos.y),
			width = endX - startX,
			height = endY - startY;

		overflow += (mb.w - width) + (mb.h - height);

		if(best == null || overflow < best.overflow){
			best = {
				corner: corner,
				aroundCorner: choice.aroundCorner,
				x: startX,
				y: startY,
				w: width,
				h: height,
				overflow: overflow,
				spaceAvailable: spaceAvailable
			};
		}
		
		return !overflow;
	});

	// In case the best position is not the last one we checked, need to call
	// layoutNode() again.
	if(best.overflow && layoutNode){
		layoutNode(node, best.aroundCorner, best.corner, best.spaceAvailable, aroundNodeCoords);
	}

	// And then position the node.   Do this last, after the layoutNode() above
	// has sized the node, due to browser quirks when the viewport is scrolled
	// (specifically that a Tooltip will shrink to fit as though the window was
	// scrolled to the left).
	//
	// In RTL mode, set style.right rather than style.left so in the common case,
	// window resizes move the popup along with the aroundNode.
	var l = dojo._isBodyLtr(),
		s = node.style;
	s.top = best.y + "px";
	s[l ? "left" : "right"] = (l ? best.x : view.w - best.x - best.w) + "px";
	
	return best;
}

dijit.placeOnScreenAroundNode = function(
	/* DomNode */		node,
	/* DomNode */		aroundNode,
	/* Object */		aroundCorners,
	/* Function? */		layoutNode){

	// summary:
	//		Position node adjacent or kitty-corner to aroundNode
	//		such that it's fully visible in viewport.
	//
	// description:
	//		Place node such that corner of node touches a corner of
	//		aroundNode, and that node is fully visible.
	//
	// aroundCorners:
	//		Ordered list of pairs of corners to try matching up.
	//		Each pair of corners is represented as a key/value in the hash,
	//		where the key corresponds to the aroundNode's corner, and
	//		the value corresponds to the node's corner:
	//
	//	|	{ aroundNodeCorner1: nodeCorner1, aroundNodeCorner2: nodeCorner2, ...}
	//
	//		The following strings are used to represent the four corners:
	//			* "BL" - bottom left
	//			* "BR" - bottom right
	//			* "TL" - top left
	//			* "TR" - top right
	//
	// layoutNode: Function(node, aroundNodeCorner, nodeCorner)
	//		For things like tooltip, they are displayed differently (and have different dimensions)
	//		based on their orientation relative to the parent.   This adjusts the popup based on orientation.
	//
	// example:
	//	|	dijit.placeOnScreenAroundNode(node, aroundNode, {'BL':'TL', 'TR':'BR'});
	//		This will try to position node such that node's top-left corner is at the same position
	//		as the bottom left corner of the aroundNode (ie, put node below
	//		aroundNode, with left edges aligned).  If that fails it will try to put
	// 		the bottom-right corner of node where the top right corner of aroundNode is
	//		(ie, put node above aroundNode, with right edges aligned)
	//

	// get coordinates of aroundNode
	aroundNode = dojo.byId(aroundNode);
	var aroundNodePos = dojo.position(aroundNode, true);

	// place the node around the calculated rectangle
	return dijit._placeOnScreenAroundRect(node,
		aroundNodePos.x, aroundNodePos.y, aroundNodePos.w, aroundNodePos.h,	// rectangle
		aroundCorners, layoutNode);
};

/*=====
dijit.__Rectangle = function(){
	// x: Integer
	//		horizontal offset in pixels, relative to document body
	// y: Integer
	//		vertical offset in pixels, relative to document body
	// width: Integer
	//		width in pixels
	// height: Integer
	//		height in pixels

	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
}
=====*/


dijit.placeOnScreenAroundRectangle = function(
	/* DomNode */			node,
	/* dijit.__Rectangle */	aroundRect,
	/* Object */			aroundCorners,
	/* Function */			layoutNode){

	// summary:
	//		Like dijit.placeOnScreenAroundNode(), except that the "around"
	//		parameter is an arbitrary rectangle on the screen (x, y, width, height)
	//		instead of a dom node.

	return dijit._placeOnScreenAroundRect(node,
		aroundRect.x, aroundRect.y, aroundRect.width, aroundRect.height,	// rectangle
		aroundCorners, layoutNode);
};

dijit._placeOnScreenAroundRect = function(
	/* DomNode */		node,
	/* Number */		x,
	/* Number */		y,
	/* Number */		width,
	/* Number */		height,
	/* Object */		aroundCorners,
	/* Function */		layoutNode){

	// summary:
	//		Like dijit.placeOnScreenAroundNode(), except it accepts coordinates
	//		of a rectangle to place node adjacent to.

	// TODO: combine with placeOnScreenAroundRectangle()

	// Generate list of possible positions for node
	var choices = [];
	for(var nodeCorner in aroundCorners){
		choices.push( {
			aroundCorner: nodeCorner,
			corner: aroundCorners[nodeCorner],
			pos: {
				x: x + (nodeCorner.charAt(1) == 'L' ? 0 : width),
				y: y + (nodeCorner.charAt(0) == 'T' ? 0 : height)
			}
		});
	}

	return dijit._place(node, choices, layoutNode, {w: width, h: height});
};

dijit.placementRegistry= new dojo.AdapterRegistry();
dijit.placementRegistry.register("node",
	function(n, x){
		return typeof x == "object" &&
			typeof x.offsetWidth != "undefined" && typeof x.offsetHeight != "undefined";
	},
	dijit.placeOnScreenAroundNode);
dijit.placementRegistry.register("rect",
	function(n, x){
		return typeof x == "object" &&
			"x" in x && "y" in x && "width" in x && "height" in x;
	},
	dijit.placeOnScreenAroundRectangle);

dijit.placeOnScreenAroundElement = function(
	/* DomNode */		node,
	/* Object */		aroundElement,
	/* Object */		aroundCorners,
	/* Function */		layoutNode){

	// summary:
	//		Like dijit.placeOnScreenAroundNode(), except it accepts an arbitrary object
	//		for the "around" argument and finds a proper processor to place a node.

	return dijit.placementRegistry.match.apply(dijit.placementRegistry, arguments);
};

dijit.getPopupAroundAlignment = function(/*Array*/ position, /*Boolean*/ leftToRight){
	// summary:
	//		Transforms the passed array of preferred positions into a format suitable for passing as the aroundCorners argument to dijit.placeOnScreenAroundElement.
	//
	// position: String[]
	//		This variable controls the position of the drop down.
	//		It's an array of strings with the following values:
	//
	//			* before: places drop down to the left of the target node/widget, or to the right in
	//			  the case of RTL scripts like Hebrew and Arabic
	//			* after: places drop down to the right of the target node/widget, or to the left in
	//			  the case of RTL scripts like Hebrew and Arabic
	//			* above: drop down goes above target node
	//			* below: drop down goes below target node
	//
	//		The list is positions is tried, in order, until a position is found where the drop down fits
	//		within the viewport.
	//
	// leftToRight: Boolean
	//		Whether the popup will be displaying in leftToRight mode.
	//
	var align = {};
	dojo.forEach(position, function(pos){
		switch(pos){
			case "after":
				align[leftToRight ? "BR" : "BL"] = leftToRight ? "BL" : "BR";
				break;
			case "before":
				align[leftToRight ? "BL" : "BR"] = leftToRight ? "BR" : "BL";
				break;
			case "below-alt":
				leftToRight = !leftToRight;
				// fall through
			case "below":
				// first try to align left borders, next try to align right borders (or reverse for RTL mode)
				align[leftToRight ? "BL" : "BR"] = leftToRight ? "TL" : "TR";
				align[leftToRight ? "BR" : "BL"] = leftToRight ? "TR" : "TL";
				break;
			case "above-alt":
				leftToRight = !leftToRight;
				// fall through
			case "above":
			default:
				// first try to align left borders, next try to align right borders (or reverse for RTL mode)
				align[leftToRight ? "TL" : "TR"] = leftToRight ? "BL" : "BR";
				align[leftToRight ? "TR" : "TL"] = leftToRight ? "BR" : "BL";
				break;
		}
	});
	return align;
};

}

if(!dojo._hasResource["dijit._base.window"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.window"] = true;
dojo.provide("dijit._base.window");




dijit.getDocumentWindow = function(doc){
	return dojo.window.get(doc);
};

}

if(!dojo._hasResource["dijit._base.popup"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.popup"] = true;
dojo.provide("dijit._base.popup");






/*=====
dijit.popup.__OpenArgs = function(){
	// popup: Widget
	//		widget to display
	// parent: Widget
	//		the button etc. that is displaying this popup
	// around: DomNode
	//		DOM node (typically a button); place popup relative to this node.  (Specify this *or* "x" and "y" parameters.)
	// x: Integer
	//		Absolute horizontal position (in pixels) to place node at.  (Specify this *or* "around" parameter.)
	// y: Integer
	//		Absolute vertical position (in pixels) to place node at.  (Specify this *or* "around" parameter.)
	// orient: Object|String
	//		When the around parameter is specified, orient should be an
	//		ordered list of tuples of the form (around-node-corner, popup-node-corner).
	//		dijit.popup.open() tries to position the popup according to each tuple in the list, in order,
	//		until the popup appears fully within the viewport.
	//
	//		The default value is {BL:'TL', TL:'BL'}, which represents a list of two tuples:
	//			1. (BL, TL)
	//			2. (TL, BL)
	//		where BL means "bottom left" and "TL" means "top left".
	//		So by default, it first tries putting the popup below the around node, left-aligning them,
	//		and then tries to put it above the around node, still left-aligning them.   Note that the
	//		default is horizontally reversed when in RTL mode.
	//
	//		When an (x,y) position is specified rather than an around node, orient is either
	//		"R" or "L".  R (for right) means that it tries to put the popup to the right of the mouse,
	//		specifically positioning the popup's top-right corner at the mouse position, and if that doesn't
	//		fit in the viewport, then it tries, in order, the bottom-right corner, the top left corner,
	//		and the top-right corner.
	// onCancel: Function
	//		callback when user has canceled the popup by
	//			1. hitting ESC or
	//			2. by using the popup widget's proprietary cancel mechanism (like a cancel button in a dialog);
	//			   i.e. whenever popupWidget.onCancel() is called, args.onCancel is called
	// onClose: Function
	//		callback whenever this popup is closed
	// onExecute: Function
	//		callback when user "executed" on the popup/sub-popup by selecting a menu choice, etc. (top menu only)
	// padding: dijit.__Position
	//		adding a buffer around the opening position. This is only useful when around is not set.
	this.popup = popup;
	this.parent = parent;
	this.around = around;
	this.x = x;
	this.y = y;
	this.orient = orient;
	this.onCancel = onCancel;
	this.onClose = onClose;
	this.onExecute = onExecute;
	this.padding = padding;
}
=====*/

dijit.popup = {
	// summary:
	//		This singleton is used to show/hide widgets as popups.

	// _stack: dijit._Widget[]
	//		Stack of currently popped up widgets.
	//		(someone opened _stack[0], and then it opened _stack[1], etc.)
	_stack: [],
	
	// _beginZIndex: Number
	//		Z-index of the first popup.   (If first popup opens other
	//		popups they get a higher z-index.)
	_beginZIndex: 1000,

	_idGen: 1,

	_createWrapper: function(/*Widget || DomNode*/ widget){
		// summary:
		//		Initialization for widgets that will be used as popups.
		//		Puts widget inside a wrapper DIV (if not already in one),
		//		and returns pointer to that wrapper DIV.

		var wrapper = widget.declaredClass ? widget._popupWrapper : (widget.parentNode && dojo.hasClass(widget.parentNode, "dijitPopup")),
			node = widget.domNode || widget;

		if(!wrapper){
			// Create wrapper <div> for when this widget [in the future] will be used as a popup.
			// This is done early because of IE bugs where creating/moving DOM nodes causes focus
			// to go wonky, see tests/robot/Toolbar.html to reproduce
			wrapper = dojo.create("div",{
				"class":"dijitPopup",
				style:{ display: "none"},
				role: "presentation"
			}, dojo.body());
			wrapper.appendChild(node);

			var s = node.style;
			s.display = "";
			s.visibility = "";
			s.position = "";
			s.top = "0px";

			if(widget.declaredClass){		// TODO: in 2.0 change signature to always take widget, then remove if()
				widget._popupWrapper = wrapper;
				dojo.connect(widget, "destroy", function(){
					dojo.destroy(wrapper);
					delete widget._popupWrapper;
				});
			}
		}
		
		return wrapper;
	},

	moveOffScreen: function(/*Widget || DomNode*/ widget){
		// summary:
		//		Moves the popup widget off-screen.
		//		Do not use this method to hide popups when not in use, because
		//		that will create an accessibility issue: the offscreen popup is
		//		still in the tabbing order.

		// Create wrapper if not already there
		var wrapper = this._createWrapper(widget);

		dojo.style(wrapper, {
			visibility: "hidden",
			top: "-9999px",		// prevent transient scrollbar causing misalign (#5776), and initial flash in upper left (#10111)
			display: ""
		});
	},

	hide: function(/*dijit._Widget*/ widget){
		// summary:
		//		Hide this popup widget (until it is ready to be shown).
		//		Initialization for widgets that will be used as popups
		//
		// 		Also puts widget inside a wrapper DIV (if not already in one)
		//
		//		If popup widget needs to layout it should
		//		do so when it is made visible, and popup._onShow() is called.

		// Create wrapper if not already there
		var wrapper = this._createWrapper(widget);

		dojo.style(wrapper, "display", "none");
	},
		
	getTopPopup: function(){
		// summary:
		//		Compute the closest ancestor popup that's *not* a child of another popup.
		//		Ex: For a TooltipDialog with a button that spawns a tree of menus, find the popup of the button.
		var stack = this._stack;
		for(var pi=stack.length-1; pi > 0 && stack[pi].parent === stack[pi-1].widget; pi--){
			/* do nothing, just trying to get right value for pi */
		}
		return stack[pi];
	},

	open: function(/*dijit.popup.__OpenArgs*/ args){
		// summary:
		//		Popup the widget at the specified position
		//
		// example:
		//		opening at the mouse position
		//		|		dijit.popup.open({popup: menuWidget, x: evt.pageX, y: evt.pageY});
		//
		// example:
		//		opening the widget as a dropdown
		//		|		dijit.popup.open({parent: this, popup: menuWidget, around: this.domNode, onClose: function(){...}});
		//
		//		Note that whatever widget called dijit.popup.open() should also listen to its own _onBlur callback
		//		(fired from _base/focus.js) to know that focus has moved somewhere else and thus the popup should be closed.

		var stack = this._stack,
			widget = args.popup,
			orient = args.orient || (
				(args.parent ? args.parent.isLeftToRight() : dojo._isBodyLtr()) ?
				{'BL':'TL', 'BR':'TR', 'TL':'BL', 'TR':'BR'} :
				{'BR':'TR', 'BL':'TL', 'TR':'BR', 'TL':'BL'}
			),
			around = args.around,
			id = (args.around && args.around.id) ? (args.around.id+"_dropdown") : ("popup_"+this._idGen++);

		// If we are opening a new popup that isn't a child of a currently opened popup, then
		// close currently opened popup(s).   This should happen automatically when the old popups
		// gets the _onBlur() event, except that the _onBlur() event isn't reliable on IE, see [22198].
		while(stack.length && (!args.parent || !dojo.isDescendant(args.parent.domNode, stack[stack.length-1].widget.domNode))){
			dijit.popup.close(stack[stack.length-1].widget);
		}

		// Get pointer to popup wrapper, and create wrapper if it doesn't exist
		var wrapper = this._createWrapper(widget);


		dojo.attr(wrapper, {
			id: id,
			style: {
				zIndex: this._beginZIndex + stack.length
			},
			"class": "dijitPopup " + (widget.baseClass || widget["class"] || "").split(" ")[0] +"Popup",
			dijitPopupParent: args.parent ? args.parent.id : ""
		});

		if(dojo.isIE || dojo.isMoz){
			if(!widget.bgIframe){
				// setting widget.bgIframe triggers cleanup in _Widget.destroy()
				widget.bgIframe = new dijit.BackgroundIframe(wrapper);
			}
		}

		// position the wrapper node and make it visible
		var best = around ?
			dijit.placeOnScreenAroundElement(wrapper, around, orient, widget.orient ? dojo.hitch(widget, "orient") : null) :
			dijit.placeOnScreen(wrapper, args, orient == 'R' ? ['TR','BR','TL','BL'] : ['TL','BL','TR','BR'], args.padding);

		wrapper.style.display = "";
		wrapper.style.visibility = "visible";
		widget.domNode.style.visibility = "visible";	// counteract effects from _HasDropDown

		var handlers = [];

		// provide default escape and tab key handling
		// (this will work for any widget, not just menu)
		handlers.push(dojo.connect(wrapper, "onkeypress", this, function(evt){
			if(evt.charOrCode == dojo.keys.ESCAPE && args.onCancel){
				dojo.stopEvent(evt);
				args.onCancel();
			}else if(evt.charOrCode === dojo.keys.TAB){
				dojo.stopEvent(evt);
				var topPopup = this.getTopPopup();
				if(topPopup && topPopup.onCancel){
					topPopup.onCancel();
				}
			}
		}));

		// watch for cancel/execute events on the popup and notify the caller
		// (for a menu, "execute" means clicking an item)
		if(widget.onCancel){
			handlers.push(dojo.connect(widget, "onCancel", args.onCancel));
		}

		handlers.push(dojo.connect(widget, widget.onExecute ? "onExecute" : "onChange", this, function(){
			var topPopup = this.getTopPopup();
			if(topPopup && topPopup.onExecute){
				topPopup.onExecute();
			}
		}));

		stack.push({
			widget: widget,
			parent: args.parent,
			onExecute: args.onExecute,
			onCancel: args.onCancel,
 			onClose: args.onClose,
			handlers: handlers
		});

		if(widget.onOpen){
			// TODO: in 2.0 standardize onShow() (used by StackContainer) and onOpen() (used here)
			widget.onOpen(best);
		}

		return best;
	},

	close: function(/*dijit._Widget?*/ popup){
		// summary:
		//		Close specified popup and any popups that it parented.
		//		If no popup is specified, closes all popups.

		var stack = this._stack;

		// Basically work backwards from the top of the stack closing popups
		// until we hit the specified popup, but IIRC there was some issue where closing
		// a popup would cause others to close too.  Thus if we are trying to close B in [A,B,C]
		// closing C might close B indirectly and then the while() condition will run where stack==[A]...
		// so the while condition is constructed defensively.
		while((popup && dojo.some(stack, function(elem){return elem.widget == popup;})) ||
			(!popup && stack.length)){
			var top = stack.pop(),
				widget = top.widget,
				onClose = top.onClose;

			if(widget.onClose){
				// TODO: in 2.0 standardize onHide() (used by StackContainer) and onClose() (used here)
				widget.onClose();
			}
			dojo.forEach(top.handlers, dojo.disconnect);

			// Hide the widget and it's wrapper unless it has already been destroyed in above onClose() etc.
			if(widget && widget.domNode){
				this.hide(widget);
			}
                        
			if(onClose){
				onClose();
			}
		}
	}
};

// TODO: remove dijit._frames, it isn't being used much, since popups never release their
// iframes (see [22236])
dijit._frames = new function(){
	// summary:
	//		cache of iframes

	var queue = [];

	this.pop = function(){
		var iframe;
		if(queue.length){
			iframe = queue.pop();
			iframe.style.display="";
		}else{
			if(dojo.isIE < 9){
				var burl = dojo.config["dojoBlankHtmlUrl"] || (dojo.moduleUrl("dojo", "resources/blank.html")+"") || "javascript:\"\"";
				var html="<iframe src='" + burl + "'"
					+ " style='position: absolute; left: 0px; top: 0px;"
					+ "z-index: -1; filter:Alpha(Opacity=\"0\");'>";
				iframe = dojo.doc.createElement(html);
			}else{
			 	iframe = dojo.create("iframe");
				iframe.src = 'javascript:""';
				iframe.className = "dijitBackgroundIframe";
				dojo.style(iframe, "opacity", 0.1);
			}
			iframe.tabIndex = -1; // Magic to prevent iframe from getting focus on tab keypress - as style didn't work.
			dijit.setWaiRole(iframe,"presentation");
		}
		return iframe;
	};

	this.push = function(iframe){
		iframe.style.display="none";
		queue.push(iframe);
	}
}();


dijit.BackgroundIframe = function(/*DomNode*/ node){
	// summary:
	//		For IE/FF z-index schenanigans. id attribute is required.
	//
	// description:
	//		new dijit.BackgroundIframe(node)
	//			Makes a background iframe as a child of node, that fills
	//			area (and position) of node

	if(!node.id){ throw new Error("no id"); }
	if(dojo.isIE || dojo.isMoz){
		var iframe = (this.iframe = dijit._frames.pop());
		node.appendChild(iframe);
		if(dojo.isIE<7 || dojo.isQuirks){
			this.resize(node);
			this._conn = dojo.connect(node, 'onresize', this, function(){
				this.resize(node);
			});
		}else{
			dojo.style(iframe, {
				width: '100%',
				height: '100%'
			});
		}
	}
};

dojo.extend(dijit.BackgroundIframe, {
	resize: function(node){
		// summary:
		// 		Resize the iframe so it's the same size as node.
		//		Needed on IE6 and IE/quirks because height:100% doesn't work right.
		if(this.iframe){
			dojo.style(this.iframe, {
				width: node.offsetWidth + 'px',
				height: node.offsetHeight + 'px'
			});
		}
	},
	destroy: function(){
		// summary:
		//		destroy the iframe
		if(this._conn){
			dojo.disconnect(this._conn);
			this._conn = null;
		}
		if(this.iframe){
			dijit._frames.push(this.iframe);
			delete this.iframe;
		}
	}
});

}

if(!dojo._hasResource["dijit._base.scroll"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.scroll"] = true;
dojo.provide("dijit._base.scroll");




dijit.scrollIntoView = function(/*DomNode*/ node, /*Object?*/ pos){
	// summary:
	//		Scroll the passed node into view, if it is not already.
	//		Deprecated, use `dojo.window.scrollIntoView` instead.
	
	dojo.window.scrollIntoView(node, pos);
};

}

if(!dojo._hasResource["dojo.uacss"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.uacss"] = true;
dojo.provide("dojo.uacss");



(function(){
	// summary:
	//		Applies pre-set CSS classes to the top-level HTML node, based on:
	// 			- browser (ex: dj_ie)
	//			- browser version (ex: dj_ie6)
	//			- box model (ex: dj_contentBox)
	//			- text direction (ex: dijitRtl)
	//
	//		In addition, browser, browser version, and box model are
	//		combined with an RTL flag when browser text is RTL.  ex: dj_ie-rtl.

	var d = dojo,
		html = d.doc.documentElement,
		ie = d.isIE,
		opera = d.isOpera,
		maj = Math.floor,
		ff = d.isFF,
		boxModel = d.boxModel.replace(/-/,''),

		classes = {
			dj_ie: ie,
			dj_ie6: maj(ie) == 6,
			dj_ie7: maj(ie) == 7,
			dj_ie8: maj(ie) == 8,
			dj_ie9: maj(ie) == 9,
			dj_quirks: d.isQuirks,
			dj_iequirks: ie && d.isQuirks,

			// NOTE: Opera not supported by dijit
			dj_opera: opera,

			dj_khtml: d.isKhtml,

			dj_webkit: d.isWebKit,
			dj_safari: d.isSafari,
			dj_chrome: d.isChrome,

			dj_gecko: d.isMozilla,
			dj_ff3: maj(ff) == 3
		}; // no dojo unsupported browsers

	classes["dj_" + boxModel] = true;

	// apply browser, browser version, and box model class names
	var classStr = "";
	for(var clz in classes){
		if(classes[clz]){
			classStr += clz + " ";
		}
	}
	html.className = d.trim(html.className + " " + classStr);

	// If RTL mode, then add dj_rtl flag plus repeat existing classes with -rtl extension.
	// We can't run the code below until the <body> tag has loaded (so we can check for dir=rtl).
	// Unshift() is to run sniff code before the parser.
	dojo._loaders.unshift(function(){
		if(!dojo._isBodyLtr()){
			var rtlClassStr = "dj_rtl dijitRtl " + classStr.replace(/ /g, "-rtl ")
			html.className = d.trim(html.className + " " + rtlClassStr);
		}
	});
})();

}

if(!dojo._hasResource["dijit._base.sniff"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.sniff"] = true;
dojo.provide("dijit._base.sniff");




// summary:
//		Applies pre-set CSS classes to the top-level HTML node, see
//		`dojo.uacss` for details.
//
//		Simply doing a require on this module will
//		establish this CSS.  Modified version of Morris' CSS hack.

}

if(!dojo._hasResource["dijit._base.typematic"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.typematic"] = true;
dojo.provide("dijit._base.typematic");



dijit.typematic = {
	// summary:
	//		These functions are used to repetitively call a user specified callback
	//		method when a specific key or mouse click over a specific DOM node is
	//		held down for a specific amount of time.
	//		Only 1 such event is allowed to occur on the browser page at 1 time.

	_fireEventAndReload: function(){
		this._timer = null;
		this._callback(++this._count, this._node, this._evt);
		
		// Schedule next event, timer is at most minDelay (default 10ms) to avoid
		// browser overload (particularly avoiding starving DOH robot so it never gets to send a mouseup)
		this._currentTimeout = Math.max(
			this._currentTimeout < 0 ? this._initialDelay :
				(this._subsequentDelay > 1 ? this._subsequentDelay : Math.round(this._currentTimeout * this._subsequentDelay)),
			this._minDelay);
		this._timer = setTimeout(dojo.hitch(this, "_fireEventAndReload"), this._currentTimeout);
	},

	trigger: function(/*Event*/ evt, /*Object*/ _this, /*DOMNode*/ node, /*Function*/ callback, /*Object*/ obj, /*Number*/ subsequentDelay, /*Number*/ initialDelay, /*Number?*/ minDelay){
		// summary:
		//		Start a timed, repeating callback sequence.
		//		If already started, the function call is ignored.
		//		This method is not normally called by the user but can be
		//		when the normal listener code is insufficient.
		// evt:
		//		key or mouse event object to pass to the user callback
		// _this:
		//		pointer to the user's widget space.
		// node:
		//		the DOM node object to pass the the callback function
		// callback:
		//		function to call until the sequence is stopped called with 3 parameters:
		// count:
		//		integer representing number of repeated calls (0..n) with -1 indicating the iteration has stopped
		// node:
		//		the DOM node object passed in
		// evt:
		//		key or mouse event object
		// obj:
		//		user space object used to uniquely identify each typematic sequence
		// subsequentDelay (optional):
		//		if > 1, the number of milliseconds until the 3->n events occur
		//		or else the fractional time multiplier for the next event's delay, default=0.9
		// initialDelay (optional):
		//		the number of milliseconds until the 2nd event occurs, default=500ms
		// minDelay (optional):
		//		the maximum delay in milliseconds for event to fire, default=10ms
		if(obj != this._obj){
			this.stop();
			this._initialDelay = initialDelay || 500;
			this._subsequentDelay = subsequentDelay || 0.90;
			this._minDelay = minDelay || 10;
			this._obj = obj;
			this._evt = evt;
			this._node = node;
			this._currentTimeout = -1;
			this._count = -1;
			this._callback = dojo.hitch(_this, callback);
			this._fireEventAndReload();
			this._evt = dojo.mixin({faux: true}, evt);
		}
	},

	stop: function(){
		// summary:
		//		Stop an ongoing timed, repeating callback sequence.
		if(this._timer){
			clearTimeout(this._timer);
			this._timer = null;
		}
		if(this._obj){
			this._callback(-1, this._node, this._evt);
			this._obj = null;
		}
	},

	addKeyListener: function(/*DOMNode*/ node, /*Object*/ keyObject, /*Object*/ _this, /*Function*/ callback, /*Number*/ subsequentDelay, /*Number*/ initialDelay, /*Number?*/ minDelay){
		// summary:
		//		Start listening for a specific typematic key.
		//		See also the trigger method for other parameters.
		// keyObject:
		//		an object defining the key to listen for:
		// 		charOrCode:
		//			the printable character (string) or keyCode (number) to listen for.
		// 		keyCode:
		//			(deprecated - use charOrCode) the keyCode (number) to listen for (implies charCode = 0).
		// 		charCode:
		//			(deprecated - use charOrCode) the charCode (number) to listen for.
		// 		ctrlKey:
		//			desired ctrl key state to initiate the callback sequence:
		//			- pressed (true)
		//			- released (false)
		//			- either (unspecified)
		// 		altKey:
		//			same as ctrlKey but for the alt key
		// 		shiftKey:
		//			same as ctrlKey but for the shift key
		// returns:
		//		an array of dojo.connect handles
		if(keyObject.keyCode){
			keyObject.charOrCode = keyObject.keyCode;
			dojo.deprecated("keyCode attribute parameter for dijit.typematic.addKeyListener is deprecated. Use charOrCode instead.", "", "2.0");
		}else if(keyObject.charCode){
			keyObject.charOrCode = String.fromCharCode(keyObject.charCode);
			dojo.deprecated("charCode attribute parameter for dijit.typematic.addKeyListener is deprecated. Use charOrCode instead.", "", "2.0");
		}
		return [
			dojo.connect(node, "onkeypress", this, function(evt){
				if(evt.charOrCode == keyObject.charOrCode &&
				(keyObject.ctrlKey === undefined || keyObject.ctrlKey == evt.ctrlKey) &&
				(keyObject.altKey === undefined || keyObject.altKey == evt.altKey) &&
				(keyObject.metaKey === undefined || keyObject.metaKey == (evt.metaKey || false)) && // IE doesn't even set metaKey
				(keyObject.shiftKey === undefined || keyObject.shiftKey == evt.shiftKey)){
					dojo.stopEvent(evt);
					dijit.typematic.trigger(evt, _this, node, callback, keyObject, subsequentDelay, initialDelay, minDelay);
				}else if(dijit.typematic._obj == keyObject){
					dijit.typematic.stop();
				}
			}),
			dojo.connect(node, "onkeyup", this, function(evt){
				if(dijit.typematic._obj == keyObject){
					dijit.typematic.stop();
				}
			})
		];
	},

	addMouseListener: function(/*DOMNode*/ node, /*Object*/ _this, /*Function*/ callback, /*Number*/ subsequentDelay, /*Number*/ initialDelay, /*Number?*/ minDelay){
		// summary:
		//		Start listening for a typematic mouse click.
		//		See the trigger method for other parameters.
		// returns:
		//		an array of dojo.connect handles
		var dc = dojo.connect;
		return [
			dc(node, "mousedown", this, function(evt){
				dojo.stopEvent(evt);
				dijit.typematic.trigger(evt, _this, node, callback, node, subsequentDelay, initialDelay, minDelay);
			}),
			dc(node, "mouseup", this, function(evt){
				dojo.stopEvent(evt);
				dijit.typematic.stop();
			}),
			dc(node, "mouseout", this, function(evt){
				dojo.stopEvent(evt);
				dijit.typematic.stop();
			}),
			dc(node, "mousemove", this, function(evt){
				evt.preventDefault();
			}),
			dc(node, "dblclick", this, function(evt){
				dojo.stopEvent(evt);
				if(dojo.isIE){
					dijit.typematic.trigger(evt, _this, node, callback, node, subsequentDelay, initialDelay, minDelay);
					setTimeout(dojo.hitch(this, dijit.typematic.stop), 50);
				}
			})
		];
	},

	addListener: function(/*Node*/ mouseNode, /*Node*/ keyNode, /*Object*/ keyObject, /*Object*/ _this, /*Function*/ callback, /*Number*/ subsequentDelay, /*Number*/ initialDelay, /*Number?*/ minDelay){
		// summary:
		//		Start listening for a specific typematic key and mouseclick.
		//		This is a thin wrapper to addKeyListener and addMouseListener.
		//		See the addMouseListener and addKeyListener methods for other parameters.
		// mouseNode:
		//		the DOM node object to listen on for mouse events.
		// keyNode:
		//		the DOM node object to listen on for key events.
		// returns:
		//		an array of dojo.connect handles
		return this.addKeyListener(keyNode, keyObject, _this, callback, subsequentDelay, initialDelay, minDelay).concat(
			this.addMouseListener(mouseNode, _this, callback, subsequentDelay, initialDelay, minDelay));
	}
};

}

if(!dojo._hasResource["dijit._base.wai"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base.wai"] = true;
dojo.provide("dijit._base.wai");



dijit.wai = {
	onload: function(){
		// summary:
		//		Detects if we are in high-contrast mode or not

		// This must be a named function and not an anonymous
		// function, so that the widget parsing code can make sure it
		// registers its onload function after this function.
		// DO NOT USE "this" within this function.

		// create div for testing if high contrast mode is on or images are turned off
		var div = dojo.create("div",{
			id: "a11yTestNode",
			style:{
				cssText:'border: 1px solid;'
					+ 'border-color:red green;'
					+ 'position: absolute;'
					+ 'height: 5px;'
					+ 'top: -999px;'
					+ 'background-image: url("' + (dojo.config.blankGif || dojo.moduleUrl("dojo", "resources/blank.gif")) + '");'
			}
		}, dojo.body());

		// test it
		var cs = dojo.getComputedStyle(div);
		if(cs){
			var bkImg = cs.backgroundImage;
			var needsA11y = (cs.borderTopColor == cs.borderRightColor) || (bkImg != null && (bkImg == "none" || bkImg == "url(invalid-url:)" ));
			dojo[needsA11y ? "addClass" : "removeClass"](dojo.body(), "dijit_a11y");
			if(dojo.isIE){
				div.outerHTML = "";		// prevent mixed-content warning, see http://support.microsoft.com/kb/925014
			}else{
				dojo.body().removeChild(div);
			}
		}
	}
};

// Test if computer is in high contrast mode.
// Make sure the a11y test runs first, before widgets are instantiated.
if(dojo.isIE || dojo.isMoz){	// NOTE: checking in Safari messes things up
	dojo._loaders.unshift(dijit.wai.onload);
}

dojo.mixin(dijit, {
	hasWaiRole: function(/*Element*/ elem, /*String?*/ role){
		// summary:
		//		Determines if an element has a particular role.
		// returns:
		//		True if elem has the specific role attribute and false if not.
		// 		For backwards compatibility if role parameter not provided,
		// 		returns true if has a role
		var waiRole = this.getWaiRole(elem);
		return role ? (waiRole.indexOf(role) > -1) : (waiRole.length > 0);
	},

	getWaiRole: function(/*Element*/ elem){
		// summary:
		//		Gets the role for an element (which should be a wai role).
		// returns:
		//		The role of elem or an empty string if elem
		//		does not have a role.
		 return dojo.trim((dojo.attr(elem, "role") || "").replace("wairole:",""));
	},

	setWaiRole: function(/*Element*/ elem, /*String*/ role){
		// summary:
		//		Sets the role on an element.
		// description:
		//		Replace existing role attribute with new role.

			dojo.attr(elem, "role", role);
	},

	removeWaiRole: function(/*Element*/ elem, /*String*/ role){
		// summary:
		//		Removes the specified role from an element.
		// 		Removes role attribute if no specific role provided (for backwards compat.)

		var roleValue = dojo.attr(elem, "role");
		if(!roleValue){ return; }
		if(role){
			var t = dojo.trim((" " + roleValue + " ").replace(" " + role + " ", " "));
			dojo.attr(elem, "role", t);
		}else{
			elem.removeAttribute("role");
		}
	},

	hasWaiState: function(/*Element*/ elem, /*String*/ state){
		// summary:
		//		Determines if an element has a given state.
		// description:
		//		Checks for an attribute called "aria-"+state.
		// returns:
		//		true if elem has a value for the given state and
		//		false if it does not.

		return elem.hasAttribute ? elem.hasAttribute("aria-"+state) : !!elem.getAttribute("aria-"+state);
	},

	getWaiState: function(/*Element*/ elem, /*String*/ state){
		// summary:
		//		Gets the value of a state on an element.
		// description:
		//		Checks for an attribute called "aria-"+state.
		// returns:
		//		The value of the requested state on elem
		//		or an empty string if elem has no value for state.

		return elem.getAttribute("aria-"+state) || "";
	},

	setWaiState: function(/*Element*/ elem, /*String*/ state, /*String*/ value){
		// summary:
		//		Sets a state on an element.
		// description:
		//		Sets an attribute called "aria-"+state.

		elem.setAttribute("aria-"+state, value);
	},

	removeWaiState: function(/*Element*/ elem, /*String*/ state){
		// summary:
		//		Removes a state from an element.
		// description:
		//		Sets an attribute called "aria-"+state.

		elem.removeAttribute("aria-"+state);
	}
});

}

if(!dojo._hasResource["dijit._base"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._base"] = true;
dojo.provide("dijit._base");












}

if(!dojo._hasResource["dijit._Widget"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._Widget"] = true;
dojo.provide("dijit._Widget");






////////////////// DEFERRED CONNECTS ///////////////////

// This code is to assist deferring dojo.connect() calls in widgets (connecting to events on the widgets'
// DOM nodes) until someone actually needs to monitor that event.
dojo.connect(dojo, "_connect",
	function(/*dijit._Widget*/ widget, /*String*/ event){
		if(widget && dojo.isFunction(widget._onConnect)){
			widget._onConnect(event);
		}
	});

dijit._connectOnUseEventHandler = function(/*Event*/ event){};

////////////////// ONDIJITCLICK SUPPORT ///////////////////

// Keep track of where the last keydown event was, to help avoid generating
// spurious ondijitclick events when:
// 1. focus is on a <button> or <a>
// 2. user presses then releases the ENTER key
// 3. onclick handler fires and shifts focus to another node, with an ondijitclick handler
// 4. onkeyup event fires, causing the ondijitclick handler to fire
dijit._lastKeyDownNode = null;
if(dojo.isIE){
	(function(){
		var keydownCallback = function(evt){
			dijit._lastKeyDownNode = evt.srcElement;
		};
		dojo.doc.attachEvent('onkeydown', keydownCallback);
		dojo.addOnWindowUnload(function(){
			dojo.doc.detachEvent('onkeydown', keydownCallback);
		});
	})();
}else{
	dojo.doc.addEventListener('keydown', function(evt){
		dijit._lastKeyDownNode = evt.target;
	}, true);
}

(function(){

dojo.declare("dijit._Widget", dijit._WidgetBase, {
	// summary:
	//		Base class for all Dijit widgets.
	//
	//		Extends _WidgetBase, adding support for:
	//			- deferred connections
	//				A call like dojo.connect(myWidget, "onMouseMove", func)
	//				will essentially do a dojo.connect(myWidget.domNode, "onMouseMove", func)
	//			- ondijitclick
	//				Support new dojoAttachEvent="ondijitclick: ..." that is triggered by a mouse click or a SPACE/ENTER keypress
	//			- focus related functions
	//				In particular, the onFocus()/onBlur() callbacks.   Driven internally by
	//				dijit/_base/focus.js.
	//			- deprecated methods
	//			- onShow(), onHide(), onClose()
	//
	//		Also, by loading code in dijit/_base, turns on:
	//			- browser sniffing (putting browser id like .dj_ie on <html> node)
	//			- high contrast mode sniffing (add .dijit_a11y class to <body> if machine is in high contrast mode)
	

	////////////////// DEFERRED CONNECTS ///////////////////

	// _deferredConnects: [protected] Object
	//		attributeMap addendum for event handlers that should be connected only on first use
	_deferredConnects: {
		onClick: "",
		onDblClick: "",
		onKeyDown: "",
		onKeyPress: "",
		onKeyUp: "",
		onMouseMove: "",
		onMouseDown: "",
		onMouseOut: "",
		onMouseOver: "",
		onMouseLeave: "",
		onMouseEnter: "",
		onMouseUp: ""
	},

	onClick: dijit._connectOnUseEventHandler,
	/*=====
	onClick: function(event){
		// summary:
		//		Connect to this function to receive notifications of mouse click events.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onDblClick: dijit._connectOnUseEventHandler,
	/*=====
	onDblClick: function(event){
		// summary:
		//		Connect to this function to receive notifications of mouse double click events.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onKeyDown: dijit._connectOnUseEventHandler,
	/*=====
	onKeyDown: function(event){
		// summary:
		//		Connect to this function to receive notifications of keys being pressed down.
		// event:
		//		key Event
		// tags:
		//		callback
	},
	=====*/
	onKeyPress: dijit._connectOnUseEventHandler,
	/*=====
	onKeyPress: function(event){
		// summary:
		//		Connect to this function to receive notifications of printable keys being typed.
		// event:
		//		key Event
		// tags:
		//		callback
	},
	=====*/
	onKeyUp: dijit._connectOnUseEventHandler,
	/*=====
	onKeyUp: function(event){
		// summary:
		//		Connect to this function to receive notifications of keys being released.
		// event:
		//		key Event
		// tags:
		//		callback
	},
	=====*/
	onMouseDown: dijit._connectOnUseEventHandler,
	/*=====
	onMouseDown: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse button is pressed down.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseMove: dijit._connectOnUseEventHandler,
	/*=====
	onMouseMove: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves over nodes contained within this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseOut: dijit._connectOnUseEventHandler,
	/*=====
	onMouseOut: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves off of nodes contained within this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseOver: dijit._connectOnUseEventHandler,
	/*=====
	onMouseOver: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves onto nodes contained within this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseLeave: dijit._connectOnUseEventHandler,
	/*=====
	onMouseLeave: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves off of this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseEnter: dijit._connectOnUseEventHandler,
	/*=====
	onMouseEnter: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse moves onto this widget.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/
	onMouseUp: dijit._connectOnUseEventHandler,
	/*=====
	onMouseUp: function(event){
		// summary:
		//		Connect to this function to receive notifications of when the mouse button is released.
		// event:
		//		mouse Event
		// tags:
		//		callback
	},
	=====*/

	create: function(/*Object?*/params, /*DomNode|String?*/srcNodeRef){
		// To avoid double-connects, remove entries from _deferredConnects
		// that have been setup manually by a subclass (ex, by dojoAttachEvent).
		// If a subclass has redefined a callback (ex: onClick) then assume it's being
		// connected to manually.
		this._deferredConnects = dojo.clone(this._deferredConnects);
		for(var attr in this.attributeMap){
			delete this._deferredConnects[attr]; // can't be in both attributeMap and _deferredConnects
		}
		for(attr in this._deferredConnects){
			if(this[attr] !== dijit._connectOnUseEventHandler){
				delete this._deferredConnects[attr];	// redefined, probably dojoAttachEvent exists
			}
		}

		this.inherited(arguments);

		if(this.domNode){
			// If the developer has specified a handler as a widget parameter
			// (ex: new Button({onClick: ...})
			// then naturally need to connect from DOM node to that handler immediately,
			for(attr in this.params){
				this._onConnect(attr);
			}
		}
	},

	_onConnect: function(/*String*/ event){
		// summary:
		//		Called when someone connects to one of my handlers.
		//		"Turn on" that handler if it isn't active yet.
		//
		//		This is also called for every single initialization parameter
		//		so need to do nothing for parameters like "id".
		// tags:
		//		private
		if(event in this._deferredConnects){
			var mapNode = this[this._deferredConnects[event] || 'domNode'];
			this.connect(mapNode, event.toLowerCase(), event);
			delete this._deferredConnects[event];
		}
	},

	////////////////// FOCUS RELATED ///////////////////
	// _onFocus() and _onBlur() are called by the focus manager

	// focused: [readonly] Boolean
	//		This widget or a widget it contains has focus, or is "active" because
	//		it was recently clicked.
	focused: false,

	isFocusable: function(){
		// summary:
		//		Return true if this widget can currently be focused
		//		and false if not
		return this.focus && (dojo.style(this.domNode, "display") != "none");
	},

	onFocus: function(){
		// summary:
		//		Called when the widget becomes "active" because
		//		it or a widget inside of it either has focus, or has recently
		//		been clicked.
		// tags:
		//		callback
	},

	onBlur: function(){
		// summary:
		//		Called when the widget stops being "active" because
		//		focus moved to something outside of it, or the user
		//		clicked somewhere outside of it, or the widget was
		//		hidden.
		// tags:
		//		callback
	},

	_onFocus: function(e){
		// summary:
		//		This is where widgets do processing for when they are active,
		//		such as changing CSS classes.  See onFocus() for more details.
		// tags:
		//		protected
		this.onFocus();
	},

	_onBlur: function(){
		// summary:
		//		This is where widgets do processing for when they stop being active,
		//		such as changing CSS classes.  See onBlur() for more details.
		// tags:
		//		protected
		this.onBlur();
	},

	////////////////// DEPRECATED METHODS ///////////////////

	setAttribute: function(/*String*/ attr, /*anything*/ value){
		// summary:
		//		Deprecated.  Use set() instead.
		// tags:
		//		deprecated
		dojo.deprecated(this.declaredClass+"::setAttribute(attr, value) is deprecated. Use set() instead.", "", "2.0");
		this.set(attr, value);
	},

	attr: function(/*String|Object*/name, /*Object?*/value){
		// summary:
		//		Set or get properties on a widget instance.
		//	name:
		//		The property to get or set. If an object is passed here and not
		//		a string, its keys are used as names of attributes to be set
		//		and the value of the object as values to set in the widget.
		//	value:
		//		Optional. If provided, attr() operates as a setter. If omitted,
		//		the current value of the named property is returned.
		// description:
		//		This method is deprecated, use get() or set() directly.

		// Print deprecation warning but only once per calling function
		if(dojo.config.isDebug){
			var alreadyCalledHash = arguments.callee._ach || (arguments.callee._ach = {}),
				caller = (arguments.callee.caller || "unknown caller").toString();
			if(!alreadyCalledHash[caller]){
				dojo.deprecated(this.declaredClass + "::attr() is deprecated. Use get() or set() instead, called from " +
				caller, "", "2.0");
				alreadyCalledHash[caller] = true;
			}
		}

		var args = arguments.length;
		if(args >= 2 || typeof name === "object"){ // setter
			return this.set.apply(this, arguments);
		}else{ // getter
			return this.get(name);
		}
	},
	
	////////////////// ONDIJITCLICK SUPPORT ///////////////////

	// nodesWithKeyClick: [private] String[]
	//		List of nodes that correctly handle click events via native browser support,
	//		and don't need dijit's help
	nodesWithKeyClick: ["input", "button"],

	connect: function(
			/*Object|null*/ obj,
			/*String|Function*/ event,
			/*String|Function*/ method){
		// summary:
		//		Connects specified obj/event to specified method of this object
		//		and registers for disconnect() on widget destroy.
		// description:
		//		Provide widget-specific analog to dojo.connect, except with the
		//		implicit use of this widget as the target object.
		//		This version of connect also provides a special "ondijitclick"
		//		event which triggers on a click or space or enter keyup.
		//		Events connected with `this.connect` are disconnected upon
		//		destruction.
		// returns:
		//		A handle that can be passed to `disconnect` in order to disconnect before
		//		the widget is destroyed.
		// example:
		//	|	var btn = new dijit.form.Button();
		//	|	// when foo.bar() is called, call the listener we're going to
		//	|	// provide in the scope of btn
		//	|	btn.connect(foo, "bar", function(){
		//	|		console.debug(this.toString());
		//	|	});
		// tags:
		//		protected

		var d = dojo,
			dc = d._connect,
			handles = this.inherited(arguments, [obj, event == "ondijitclick" ? "onclick" : event, method]);

		if(event == "ondijitclick"){
			// add key based click activation for unsupported nodes.
			// do all processing onkey up to prevent spurious clicks
			// for details see comments at top of this file where _lastKeyDownNode is defined
			if(d.indexOf(this.nodesWithKeyClick, obj.nodeName.toLowerCase()) == -1){ // is NOT input or button
				var m = d.hitch(this, method);
				handles.push(
					dc(obj, "onkeydown", this, function(e){
						//console.log(this.id + ": onkeydown, e.target = ", e.target, ", lastKeyDownNode was ", dijit._lastKeyDownNode, ", equality is ", (e.target === dijit._lastKeyDownNode));
						if((e.keyCode == d.keys.ENTER || e.keyCode == d.keys.SPACE) &&
							!e.ctrlKey && !e.shiftKey && !e.altKey && !e.metaKey){
							// needed on IE for when focus changes between keydown and keyup - otherwise dropdown menus do not work
							dijit._lastKeyDownNode = e.target;
							
							// Stop event to prevent scrolling on space key in IE.
							// But don't do this for _HasDropDown because it surpresses the onkeypress
							// event needed to open the drop down when the user presses the SPACE key.
							if(!("openDropDown" in this && obj == this._buttonNode)){
								e.preventDefault();
							}
						}
			 		}),
					dc(obj, "onkeyup", this, function(e){
						//console.log(this.id + ": onkeyup, e.target = ", e.target, ", lastKeyDownNode was ", dijit._lastKeyDownNode, ", equality is ", (e.target === dijit._lastKeyDownNode));
						if( (e.keyCode == d.keys.ENTER || e.keyCode == d.keys.SPACE) &&
							e.target == dijit._lastKeyDownNode &&	// === breaks greasemonkey
							!e.ctrlKey && !e.shiftKey && !e.altKey && !e.metaKey){
								//need reset here or have problems in FF when focus returns to trigger element after closing popup/alert
								dijit._lastKeyDownNode = null;
								return m(e);
						}
					})
				);
			}
		}

		return handles;		// _Widget.Handle
	},

	////////////////// MISCELLANEOUS METHODS ///////////////////

	_onShow: function(){
		// summary:
		//		Internal method called when this widget is made visible.
		//		See `onShow` for details.
		this.onShow();
	},

	onShow: function(){
		// summary:
		//		Called when this widget becomes the selected pane in a
		//		`dijit.layout.TabContainer`, `dijit.layout.StackContainer`,
		//		`dijit.layout.AccordionContainer`, etc.
		//
		//		Also called to indicate display of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.
		// tags:
		//		callback
	},

	onHide: function(){
		// summary:
			//		Called when another widget becomes the selected pane in a
			//		`dijit.layout.TabContainer`, `dijit.layout.StackContainer`,
			//		`dijit.layout.AccordionContainer`, etc.
			//
			//		Also called to indicate hide of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.
			// tags:
			//		callback
	},

	onClose: function(){
		// summary:
		//		Called when this widget is being displayed as a popup (ex: a Calendar popped
		//		up from a DateTextBox), and it is hidden.
		//		This is called from the dijit.popup code, and should not be called directly.
		//
		//		Also used as a parameter for children of `dijit.layout.StackContainer` or subclasses.
		//		Callback if a user tries to close the child.   Child will be closed if this function returns true.
		// tags:
		//		extension

		return true;		// Boolean
	}
});

})();

}

if(!dojo._hasResource["dojo.string"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.string"] = true;
dojo.provide("dojo.string");


dojo.getObject("string", true, dojo);

/*=====
dojo.string = {
	// summary: String utilities for Dojo
};
=====*/

dojo.string.rep = function(/*String*/str, /*Integer*/num){
	//	summary:
	//		Efficiently replicate a string `n` times.
	//	str:
	//		the string to replicate
	//	num:
	//		number of times to replicate the string
	
	if(num <= 0 || !str){ return ""; }
	
	var buf = [];
	for(;;){
		if(num & 1){
			buf.push(str);
		}
		if(!(num >>= 1)){ break; }
		str += str;
	}
	return buf.join("");	// String
};

dojo.string.pad = function(/*String*/text, /*Integer*/size, /*String?*/ch, /*Boolean?*/end){
	//	summary:
	//		Pad a string to guarantee that it is at least `size` length by
	//		filling with the character `ch` at either the start or end of the
	//		string. Pads at the start, by default.
	//	text:
	//		the string to pad
	//	size:
	//		length to provide padding
	//	ch:
	//		character to pad, defaults to '0'
	//	end:
	//		adds padding at the end if true, otherwise pads at start
	//	example:
	//	|	// Fill the string to length 10 with "+" characters on the right.  Yields "Dojo++++++".
	//	|	dojo.string.pad("Dojo", 10, "+", true);

	if(!ch){
		ch = '0';
	}
	var out = String(text),
		pad = dojo.string.rep(ch, Math.ceil((size - out.length) / ch.length));
	return end ? out + pad : pad + out;	// String
};

dojo.string.substitute = function(	/*String*/		template,
									/*Object|Array*/map,
									/*Function?*/	transform,
									/*Object?*/		thisObject){
	//	summary:
	//		Performs parameterized substitutions on a string. Throws an
	//		exception if any parameter is unmatched.
	//	template:
	//		a string with expressions in the form `${key}` to be replaced or
	//		`${key:format}` which specifies a format function. keys are case-sensitive.
	//	map:
	//		hash to search for substitutions
	//	transform:
	//		a function to process all parameters before substitution takes
	//		place, e.g. mylib.encodeXML
	//	thisObject:
	//		where to look for optional format function; default to the global
	//		namespace
	//	example:
	//		Substitutes two expressions in a string from an Array or Object
	//	|	// returns "File 'foo.html' is not found in directory '/temp'."
	//	|	// by providing substitution data in an Array
	//	|	dojo.string.substitute(
	//	|		"File '${0}' is not found in directory '${1}'.",
	//	|		["foo.html","/temp"]
	//	|	);
	//	|
	//	|	// also returns "File 'foo.html' is not found in directory '/temp'."
	//	|	// but provides substitution data in an Object structure.  Dotted
	//	|	// notation may be used to traverse the structure.
	//	|	dojo.string.substitute(
	//	|		"File '${name}' is not found in directory '${info.dir}'.",
	//	|		{ name: "foo.html", info: { dir: "/temp" } }
	//	|	);
	//	example:
	//		Use a transform function to modify the values:
	//	|	// returns "file 'foo.html' is not found in directory '/temp'."
	//	|	dojo.string.substitute(
	//	|		"${0} is not found in ${1}.",
	//	|		["foo.html","/temp"],
	//	|		function(str){
	//	|			// try to figure out the type
	//	|			var prefix = (str.charAt(0) == "/") ? "directory": "file";
	//	|			return prefix + " '" + str + "'";
	//	|		}
	//	|	);
	//	example:
	//		Use a formatter
	//	|	// returns "thinger -- howdy"
	//	|	dojo.string.substitute(
	//	|		"${0:postfix}", ["thinger"], null, {
	//	|			postfix: function(value, key){
	//	|				return value + " -- howdy";
	//	|			}
	//	|		}
	//	|	);

	thisObject = thisObject || dojo.global;
	transform = transform ?
		dojo.hitch(thisObject, transform) : function(v){ return v; };

	return template.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g,
		function(match, key, format){
			var value = dojo.getObject(key, false, map);
			if(format){
				value = dojo.getObject(format, false, thisObject).call(thisObject, value, key);
			}
			return transform(value, key).toString();
		}); // String
};

/*=====
dojo.string.trim = function(str){
	//	summary:
	//		Trims whitespace from both sides of the string
	//	str: String
	//		String to be trimmed
	//	returns: String
	//		Returns the trimmed string
	//	description:
	//		This version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript).
	//		The short yet performant version of this function is dojo.trim(),
	//		which is part of Dojo base.  Uses String.prototype.trim instead, if available.
	return "";	// String
}
=====*/

dojo.string.trim = String.prototype.trim ?
	dojo.trim : // aliasing to the native function
	function(str){
		str = str.replace(/^\s+/, '');
		for(var i = str.length - 1; i >= 0; i--){
			if(/\S/.test(str.charAt(i))){
				str = str.substring(0, i + 1);
				break;
			}
		}
		return str;
	};

}

if(!dojo._hasResource["dojo.date.stamp"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.date.stamp"] = true;
dojo.provide("dojo.date.stamp");


dojo.getObject("date.stamp", true, dojo);

// Methods to convert dates to or from a wire (string) format using well-known conventions

dojo.date.stamp.fromISOString = function(/*String*/formattedString, /*Number?*/defaultTime){
	//	summary:
	//		Returns a Date object given a string formatted according to a subset of the ISO-8601 standard.
	//
	//	description:
	//		Accepts a string formatted according to a profile of ISO8601 as defined by
	//		[RFC3339](http://www.ietf.org/rfc/rfc3339.txt), except that partial input is allowed.
	//		Can also process dates as specified [by the W3C](http://www.w3.org/TR/NOTE-datetime)
	//		The following combinations are valid:
	//
	//			* dates only
	//			|	* yyyy
	//			|	* yyyy-MM
	//			|	* yyyy-MM-dd
	// 			* times only, with an optional time zone appended
	//			|	* THH:mm
	//			|	* THH:mm:ss
	//			|	* THH:mm:ss.SSS
	// 			* and "datetimes" which could be any combination of the above
	//
	//		timezones may be specified as Z (for UTC) or +/- followed by a time expression HH:mm
	//		Assumes the local time zone if not specified.  Does not validate.  Improperly formatted
	//		input may return null.  Arguments which are out of bounds will be handled
	// 		by the Date constructor (e.g. January 32nd typically gets resolved to February 1st)
	//		Only years between 100 and 9999 are supported.
	//
  	//	formattedString:
	//		A string such as 2005-06-30T08:05:00-07:00 or 2005-06-30 or T08:05:00
	//
	//	defaultTime:
	//		Used for defaults for fields omitted in the formattedString.
	//		Uses 1970-01-01T00:00:00.0Z by default.

	if(!dojo.date.stamp._isoRegExp){
		dojo.date.stamp._isoRegExp =
//TODO: could be more restrictive and check for 00-59, etc.
			/^(?:(\d{4})(?:-(\d{2})(?:-(\d{2}))?)?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(.\d+)?)?((?:[+-](\d{2}):(\d{2}))|Z)?)?$/;
	}

	var match = dojo.date.stamp._isoRegExp.exec(formattedString),
		result = null;

	if(match){
		match.shift();
		if(match[1]){match[1]--;} // Javascript Date months are 0-based
		if(match[6]){match[6] *= 1000;} // Javascript Date expects fractional seconds as milliseconds

		if(defaultTime){
			// mix in defaultTime.  Relatively expensive, so use || operators for the fast path of defaultTime === 0
			defaultTime = new Date(defaultTime);
			dojo.forEach(dojo.map(["FullYear", "Month", "Date", "Hours", "Minutes", "Seconds", "Milliseconds"], function(prop){
				return defaultTime["get" + prop]();
			}), function(value, index){
				match[index] = match[index] || value;
			});
		}
		result = new Date(match[0]||1970, match[1]||0, match[2]||1, match[3]||0, match[4]||0, match[5]||0, match[6]||0); //TODO: UTC defaults
		if(match[0] < 100){
			result.setFullYear(match[0] || 1970);
		}

		var offset = 0,
			zoneSign = match[7] && match[7].charAt(0);
		if(zoneSign != 'Z'){
			offset = ((match[8] || 0) * 60) + (Number(match[9]) || 0);
			if(zoneSign != '-'){ offset *= -1; }
		}
		if(zoneSign){
			offset -= result.getTimezoneOffset();
		}
		if(offset){
			result.setTime(result.getTime() + offset * 60000);
		}
	}

	return result; // Date or null
};

/*=====
	dojo.date.stamp.__Options = function(){
		//	selector: String
		//		"date" or "time" for partial formatting of the Date object.
		//		Both date and time will be formatted by default.
		//	zulu: Boolean
		//		if true, UTC/GMT is used for a timezone
		//	milliseconds: Boolean
		//		if true, output milliseconds
		this.selector = selector;
		this.zulu = zulu;
		this.milliseconds = milliseconds;
	}
=====*/

dojo.date.stamp.toISOString = function(/*Date*/dateObject, /*dojo.date.stamp.__Options?*/options){
	//	summary:
	//		Format a Date object as a string according a subset of the ISO-8601 standard
	//
	//	description:
	//		When options.selector is omitted, output follows [RFC3339](http://www.ietf.org/rfc/rfc3339.txt)
	//		The local time zone is included as an offset from GMT, except when selector=='time' (time without a date)
	//		Does not check bounds.  Only years between 100 and 9999 are supported.
	//
	//	dateObject:
	//		A Date object

	var _ = function(n){ return (n < 10) ? "0" + n : n; };
	options = options || {};
	var formattedDate = [],
		getter = options.zulu ? "getUTC" : "get",
		date = "";
	if(options.selector != "time"){
		var year = dateObject[getter+"FullYear"]();
		date = ["0000".substr((year+"").length)+year, _(dateObject[getter+"Month"]()+1), _(dateObject[getter+"Date"]())].join('-');
	}
	formattedDate.push(date);
	if(options.selector != "date"){
		var time = [_(dateObject[getter+"Hours"]()), _(dateObject[getter+"Minutes"]()), _(dateObject[getter+"Seconds"]())].join(':');
		var millis = dateObject[getter+"Milliseconds"]();
		if(options.milliseconds){
			time += "."+ (millis < 100 ? "0" : "") + _(millis);
		}
		if(options.zulu){
			time += "Z";
		}else if(options.selector != "time"){
			var timezoneOffset = dateObject.getTimezoneOffset();
			var absOffset = Math.abs(timezoneOffset);
			time += (timezoneOffset > 0 ? "-" : "+") +
				_(Math.floor(absOffset/60)) + ":" + _(absOffset%60);
		}
		formattedDate.push(time);
	}
	return formattedDate.join('T'); // String
};

}

if(!dojo._hasResource["dojo.parser"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.parser"] = true;
dojo.provide("dojo.parser");




new Date("X"); // workaround for #11279, new Date("") == NaN

dojo.parser = new function(){
	// summary:
	//		The Dom/Widget parsing package

	var d = dojo;

	function val2type(/*Object*/ value){
		// summary:
		//		Returns name of type of given value.

		if(d.isString(value)){ return "string"; }
		if(typeof value == "number"){ return "number"; }
		if(typeof value == "boolean"){ return "boolean"; }
		if(d.isFunction(value)){ return "function"; }
		if(d.isArray(value)){ return "array"; } // typeof [] == "object"
		if(value instanceof Date) { return "date"; } // assume timestamp
		if(value instanceof d._Url){ return "url"; }
		return "object";
	}

	function str2obj(/*String*/ value, /*String*/ type){
		// summary:
		//		Convert given string value to given type
		switch(type){
			case "string":
				return value;
			case "number":
				return value.length ? Number(value) : NaN;
			case "boolean":
				// for checked/disabled value might be "" or "checked".	 interpret as true.
				return typeof value == "boolean" ? value : !(value.toLowerCase()=="false");
			case "function":
				if(d.isFunction(value)){
					// IE gives us a function, even when we say something like onClick="foo"
					// (in which case it gives us an invalid function "function(){ foo }").
					//	Therefore, convert to string
					value=value.toString();
					value=d.trim(value.substring(value.indexOf('{')+1, value.length-1));
				}
				try{
					if(value === "" || value.search(/[^\w\.]+/i) != -1){
						// The user has specified some text for a function like "return x+5"
						return new Function(value);
					}else{
						// The user has specified the name of a function like "myOnClick"
						// or a single word function "return"
						return d.getObject(value, false) || new Function(value);
					}
				}catch(e){ return new Function(); }
			case "array":
				return value ? value.split(/\s*,\s*/) : [];
			case "date":
				switch(value){
					case "": return new Date("");	// the NaN of dates
					case "now": return new Date();	// current date
					default: return d.date.stamp.fromISOString(value);
				}
			case "url":
				return d.baseUrl + value;
			default:
				return d.fromJson(value);
		}
	}

	var dummyClass = {}, instanceClasses = {
		// map from fully qualified name (like "dijit.Button") to structure like
		// { cls: dijit.Button, params: {label: "string", disabled: "boolean"} }
	};

	// Widgets like BorderContainer add properties to _Widget via dojo.extend().
	// If BorderContainer is loaded after _Widget's parameter list has been cached,
	// we need to refresh that parameter list (for _Widget and all widgets that extend _Widget).
	// TODO: remove this in 2.0, when we stop caching parameters.
	d.connect(d, "extend", function(){
		instanceClasses = {};
	});

	function getProtoInfo(cls, params){
		// cls: A prototype
		//		The prototype of the class to check props on
		// params: Object
		//		The parameters object to mix found parameters onto.
		for(var name in cls){
			if(name.charAt(0)=="_"){ continue; }	// skip internal properties
			if(name in dummyClass){ continue; }		// skip "constructor" and "toString"
			params[name] = val2type(cls[name]);
		}
		return params;
	}

	function getClassInfo(/*String*/ className, /*Boolean*/ skipParamsLookup){
		// summary:
		//		Maps a widget name string like "dijit.form.Button" to the widget constructor itself,
		//		and a list of that widget's parameters and their types
		// className:
		//		fully qualified name (like "dijit.form.Button")
		// returns:
		//		structure like
		//			{
		//				cls: dijit.Button,
		//				params: { label: "string", disabled: "boolean"}
		//			}

		var c = instanceClasses[className];
		if(!c){
			// get pointer to widget class
			var cls = d.getObject(className), params = null;
			if(!cls){ return null; }		// class not defined [yet]
			if(!skipParamsLookup){ // from fastpath, we don't need to lookup the attrs on the proto because they are explicit
				params = getProtoInfo(cls.prototype, {})
			}
			c = { cls: cls, params: params };
			
		}else if(!skipParamsLookup && !c.params){
			// if we're calling getClassInfo and have a cls proto, but no params info, scan that cls for params now
			// and update the pointer in instanceClasses[className]. This happens when a widget appears in another
			// widget's template which still uses dojoType, but an instance of the widget appears prior with a data-dojo-type,
			// skipping this lookup the first time.
			c.params = getProtoInfo(c.cls.prototype, {});
		}
		
		return c;
	}

	this._functionFromScript = function(script, attrData){
		// summary:
		//		Convert a <script type="dojo/method" args="a, b, c"> ... </script>
		//		into a function
		// script: DOMNode
		//		The <script> DOMNode
		// attrData: String
		//		For HTML5 compliance, searches for attrData + "args" (typically
		//		"data-dojo-args") instead of "args"
		var preamble = "";
		var suffix = "";
		var argsStr = (script.getAttribute(attrData + "args") || script.getAttribute("args"));
		if(argsStr){
			d.forEach(argsStr.split(/\s*,\s*/), function(part, idx){
				preamble += "var "+part+" = arguments["+idx+"]; ";
			});
		}
		var withStr = script.getAttribute("with");
		if(withStr && withStr.length){
			d.forEach(withStr.split(/\s*,\s*/), function(part){
				preamble += "with("+part+"){";
				suffix += "}";
			});
		}
		return new Function(preamble+script.innerHTML+suffix);
	};

	this.instantiate = function(/* Array */nodes, /* Object? */mixin, /* Object? */args){
		// summary:
		//		Takes array of nodes, and turns them into class instances and
		//		potentially calls a startup method to allow them to connect with
		//		any children.
		// nodes: Array
		//		Array of nodes or objects like
		//	|		{
		//	|			type: "dijit.form.Button",
		//	|			node: DOMNode,
		//	|			scripts: [ ... ],	// array of <script type="dojo/..."> children of node
		//	|			inherited: { ... }	// settings inherited from ancestors like dir, theme, etc.
		//	|		}
		// mixin: Object?
		//		An object that will be mixed in with each node in the array.
		//		Values in the mixin will override values in the node, if they
		//		exist.
		// args: Object?
		//		An object used to hold kwArgs for instantiation.
		//		See parse.args argument for details.

		var thelist = [],
		mixin = mixin||{};
		args = args||{};

		// TODO: for 2.0 default to data-dojo- regardless of scopeName (or maybe scopeName won't exist in 2.0)
		var attrName = (args.scope || d._scopeName) + "Type",	// typically "dojoType"
			attrData = "data-" + (args.scope || d._scopeName) + "-";	// typically "data-dojo-"

		d.forEach(nodes, function(obj){
			if(!obj){ return; }

			// Get pointers to DOMNode, dojoType string, and clsInfo (metadata about the dojoType), etc.
			var node, type, clsInfo, clazz, scripts, fastpath;
			if(obj.node){
				// new format of nodes[] array, object w/lots of properties pre-computed for me
				node = obj.node;
				type = obj.type;
				fastpath = obj.fastpath;
				clsInfo = obj.clsInfo || (type && getClassInfo(type, fastpath));
				clazz = clsInfo && clsInfo.cls;
				scripts = obj.scripts;
			}else{
				// old (backwards compatible) format of nodes[] array, simple array of DOMNodes. no fastpath/data-dojo-type support here.
				node = obj;
				type = attrName in mixin ? mixin[attrName] : node.getAttribute(attrName);
				clsInfo = type && getClassInfo(type);
				clazz = clsInfo && clsInfo.cls;
				scripts = (clazz && (clazz._noScript || clazz.prototype._noScript) ? [] :
							d.query("> script[type^='dojo/']", node));
			}
			if(!clsInfo){
				throw new Error("Could not load class '" + type);
			}

			// Setup hash to hold parameter settings for this widget.	Start with the parameter
			// settings inherited from ancestors ("dir" and "lang").
			// Inherited setting may later be overridden by explicit settings on node itself.
			var params = {};
				
			if(args.defaults){
				// settings for the document itself (or whatever subtree is being parsed)
				d._mixin(params, args.defaults);
			}
			if(obj.inherited){
				// settings from dir=rtl or lang=... on a node above this node
				d._mixin(params, obj.inherited);
			}
			
			// mix things found in data-dojo-props into the params
			if(fastpath){
				var extra = node.getAttribute(attrData + "props");
				if(extra && extra.length){
					try{
						extra = d.fromJson.call(args.propsThis, "{" + extra + "}");
						d._mixin(params, extra);
					}catch(e){
						// give the user a pointer to their invalid parameters. FIXME: can we kill this in production?
						throw new Error(e.toString() + " in data-dojo-props='" + extra + "'");
					}
				}

				// For the benefit of _Templated, check if node has data-dojo-attach-point/data-dojo-attach-event
				// and mix those in as though they were parameters
				var attachPoint = node.getAttribute(attrData + "attach-point");
				if(attachPoint){
					params.dojoAttachPoint = attachPoint;
				}
				var attachEvent = node.getAttribute(attrData + "attach-event");
				if(attachEvent){
					params.dojoAttachEvent = attachEvent;
				}
				dojo.mixin(params, mixin);
			}else{
				// FIXME: we need something like "deprecateOnce()" to throw dojo.deprecation for something.
				// remove this logic in 2.0
				// read parameters (ie, attributes) specified on DOMNode

				var attributes = node.attributes;

				// clsInfo.params lists expected params like {"checked": "boolean", "n": "number"}
				for(var name in clsInfo.params){
					var item = name in mixin ? { value:mixin[name], specified:true } : attributes.getNamedItem(name);
					if(!item || (!item.specified && (!dojo.isIE || name.toLowerCase()!="value"))){ continue; }
					var value = item.value;
					// Deal with IE quirks for 'class' and 'style'
					switch(name){
					case "class":
						value = "className" in mixin ? mixin.className : node.className;
						break;
					case "style":
						value = "style" in mixin ? mixin.style : (node.style && node.style.cssText); // FIXME: Opera?
					}
					var _type = clsInfo.params[name];
					if(typeof value == "string"){
						params[name] = str2obj(value, _type);
					}else{
						params[name] = value;
					}
				}
			}

			// Process <script type="dojo/*"> script tags
			// <script type="dojo/method" event="foo"> tags are added to params, and passed to
			// the widget on instantiation.
			// <script type="dojo/method"> tags (with no event) are executed after instantiation
			// <script type="dojo/connect" event="foo"> tags are dojo.connected after instantiation
			// note: dojo/* script tags cannot exist in self closing widgets, like <input />
			var connects = [],	// functions to connect after instantiation
				calls = [];		// functions to call after instantiation

			d.forEach(scripts, function(script){
				node.removeChild(script);
				// FIXME: drop event="" support in 2.0. use data-dojo-event="" instead
				var event = (script.getAttribute(attrData + "event") || script.getAttribute("event")),
					type = script.getAttribute("type"),
					nf = d.parser._functionFromScript(script, attrData);
				if(event){
					if(type == "dojo/connect"){
						connects.push({event: event, func: nf});
					}else{
						params[event] = nf;
					}
				}else{
					calls.push(nf);
				}
			});

			var markupFactory = clazz.markupFactory || clazz.prototype && clazz.prototype.markupFactory;
			// create the instance
			var instance = markupFactory ? markupFactory(params, node, clazz) : new clazz(params, node);
			thelist.push(instance);

			// map it to the JS namespace if that makes sense
			// FIXME: in 2.0, drop jsId support. use data-dojo-id instead
			var jsname = (node.getAttribute(attrData + "id") || node.getAttribute("jsId"));
			if(jsname){
				d.setObject(jsname, instance);
			}

			// process connections and startup functions
			d.forEach(connects, function(connect){
				d.connect(instance, connect.event, null, connect.func);
			});
			d.forEach(calls, function(func){
				func.call(instance);
			});
		});

		// Call startup on each top level instance if it makes sense (as for
		// widgets).  Parent widgets will recursively call startup on their
		// (non-top level) children
		if(!mixin._started){
			// TODO: for 2.0, when old instantiate() API is desupported, store parent-child
			// relationships in the nodes[] array so that no getParent() call is needed.
			// Note that will  require a parse() call from ContentPane setting a param that the
			// ContentPane is the parent widget (so that the parse doesn't call startup() on the
			// ContentPane's children)
			d.forEach(thelist, function(instance){
				if( !args.noStart && instance  &&
					dojo.isFunction(instance.startup) &&
					!instance._started &&
					(!instance.getParent || !instance.getParent())
				){
					instance.startup();
				}
			});
		}
		return thelist;
	};

	this.parse = function(rootNode, args){
		// summary:
		//		Scan the DOM for class instances, and instantiate them.
		//
		// description:
		//		Search specified node (or root node) recursively for class instances,
		//		and instantiate them. Searches for either data-dojo-type="Class" or
		//		dojoType="Class" where "Class" is a a fully qualified class name,
		//		like `dijit.form.Button`
		//
		//		Using `data-dojo-type`:
		//		Attributes using can be mixed into the parameters used to instantitate the
		//		Class by using a `data-dojo-props` attribute on the node being converted.
		//		`data-dojo-props` should be a string attribute to be converted from JSON.
		//
		//		Using `dojoType`:
		//		Attributes are read from the original domNode and converted to appropriate
		//		types by looking up the Class prototype values. This is the default behavior
		//		from Dojo 1.0 to Dojo 1.5. `dojoType` support is deprecated, and will
		//		go away in Dojo 2.0.
		//
		// rootNode: DomNode?
		//		A default starting root node from which to start the parsing. Can be
		//		omitted, defaulting to the entire document. If omitted, the `args`
		//		object can be passed in this place. If the `args` object has a
		//		`rootNode` member, that is used.
		//
		// args: Object
		//		a kwArgs object passed along to instantiate()
		//
		//			* noStart: Boolean?
		//				when set will prevent the parser from calling .startup()
		//				when locating the nodes.
		//			* rootNode: DomNode?
		//				identical to the function's `rootNode` argument, though
		//				allowed to be passed in via this `args object.
		//			* template: Boolean
		//				If true, ignores ContentPane's stopParser flag and parses contents inside of
		//				a ContentPane inside of a template.   This allows dojoAttachPoint on widgets/nodes
		//				nested inside the ContentPane to work.
		//			* inherited: Object
		//				Hash possibly containing dir and lang settings to be applied to
		//				parsed widgets, unless there's another setting on a sub-node that overrides
		//			* scope: String
		//				Root for attribute names to search for.   If scopeName is dojo,
		//				will search for data-dojo-type (or dojoType).   For backwards compatibility
		//				reasons defaults to dojo._scopeName (which is "dojo" except when
		//				multi-version support is used, when it will be something like dojo16, dojo20, etc.)
		//			* propsThis: Object
		//				If specified, "this" referenced from data-dojo-props will refer to propsThis.
		//				Intended for use from the widgets-in-template feature of `dijit._Templated`
		//
		// example:
		//		Parse all widgets on a page:
		//	|		dojo.parser.parse();
		//
		// example:
		//		Parse all classes within the node with id="foo"
		//	|		dojo.parser.parse(dojo.byId('foo'));
		//
		// example:
		//		Parse all classes in a page, but do not call .startup() on any
		//		child
		//	|		dojo.parser.parse({ noStart: true })
		//
		// example:
		//		Parse all classes in a node, but do not call .startup()
		//	|		dojo.parser.parse(someNode, { noStart:true });
		//	|		// or
		//	|		dojo.parser.parse({ noStart:true, rootNode: someNode });

		// determine the root node based on the passed arguments.
		var root;
		if(!args && rootNode && rootNode.rootNode){
			args = rootNode;
			root = args.rootNode;
		}else{
			root = rootNode;
		}
		root = root ? dojo.byId(root) : dojo.body();
		args = args || {};

		var attrName = (args.scope || d._scopeName) + "Type",		// typically "dojoType"
			attrData = "data-" + (args.scope || d._scopeName) + "-";	// typically "data-dojo-"

		function scan(parent, list){
			// summary:
			//		Parent is an Object representing a DOMNode, with or without a dojoType specified.
			//		Scan parent's children looking for nodes with dojoType specified, storing in list[].
			//		If parent has a dojoType, also collects <script type=dojo/*> children and stores in parent.scripts[].
			// parent: Object
			//		Object representing the parent node, like
			//	|	{
			//	|		node: DomNode,			// scan children of this node
			//	|		inherited: {dir: "rtl"},	// dir/lang setting inherited from above node
			//	|
			//	|		// attributes only set if node has dojoType specified
			//	|		scripts: [],			// empty array, put <script type=dojo/*> in here
			//	|		clsInfo: { cls: dijit.form.Button, ...}
			//	|	}
			// list: DomNode[]
			//		Output array of objects (same format as parent) representing nodes to be turned into widgets

			// Effective dir and lang settings on parent node, either set directly or inherited from grandparent
			var inherited = dojo.clone(parent.inherited);
			dojo.forEach(["dir", "lang"], function(name){
				// TODO: what if this is a widget and dir/lang are declared in data-dojo-props?
				var val = parent.node.getAttribute(name);
				if(val){
					inherited[name] = val;
				}
			});

			// if parent is a widget, then search for <script type=dojo/*> tags and put them in scripts[].
			var scripts = parent.clsInfo && !parent.clsInfo.cls.prototype._noScript ? parent.scripts : null;

			// unless parent is a widget with the stopParser flag set, continue search for dojoType, recursively
			var recurse = (!parent.clsInfo || !parent.clsInfo.cls.prototype.stopParser) || (args && args.template);

			// scan parent's children looking for dojoType and <script type=dojo/*>
			for(var child = parent.node.firstChild; child; child = child.nextSibling){
				if(child.nodeType == 1){
					// FIXME: desupport dojoType in 2.0. use data-dojo-type instead
					var type, html5 = recurse && child.getAttribute(attrData + "type");
					if(html5){
						type = html5;
					}else{
						// fallback to backward compatible mode, using dojoType. remove in 2.0
						type = recurse && child.getAttribute(attrName);
					}
					
					var fastpath = html5 == type;

					if(type){
						// if dojoType/data-dojo-type specified, add to output array of nodes to instantiate
						var params = {
							"type": type,
							fastpath: fastpath,
							clsInfo: getClassInfo(type, fastpath), // note: won't find classes declared via dojo.Declaration
							node: child,
							scripts: [], // <script> nodes that are parent's children
							inherited: inherited // dir & lang attributes inherited from parent
						};
						list.push(params);

						// Recurse, collecting <script type="dojo/..."> children, and also looking for
						// descendant nodes with dojoType specified (unless the widget has the stopParser flag),
						scan(params, list);
					}else if(scripts && child.nodeName.toLowerCase() == "script"){
						// if <script type="dojo/...">, save in scripts[]
						type = child.getAttribute("type");
						if (type && /^dojo\/\w/i.test(type)) {
							scripts.push(child);
						}
					}else if(recurse){
						// Recurse, looking for grandchild nodes with dojoType specified
						scan({
							node: child,
							inherited: inherited
						}, list);
					}
				}
			}
		}

		// Ignore bogus entries in inherited hash like {dir: ""}
		var inherited = {};
		if(args && args.inherited){
			for(var key in args.inherited){
				if(args.inherited[key]){ inherited[key] = args.inherited[key]; }
			}
		}

		// Make list of all nodes on page w/dojoType specified
		var list = [];
		scan({
			node: root,
			inherited: inherited
		}, list);

		// go build the object instances
		var mixin = args && args.template ? {template: true} : null;
		return this.instantiate(list, mixin, args); // Array
	};
}();

//Register the parser callback. It should be the first callback
//after the a11y test.

(function(){
	var parseRunner = function(){
		if(dojo.config.parseOnLoad){
			dojo.parser.parse();
		}
	};

	// FIXME: need to clobber cross-dependency!!
	if(dojo.getObject("dijit.wai.onload") === dojo._loaders[0]){
		dojo._loaders.splice(1, 0, parseRunner);
	}else{
		dojo._loaders.unshift(parseRunner);
	}
})();

}

if(!dojo._hasResource["dojo.cache"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.cache"] = true;
dojo.provide("dojo.cache");



/*=====
dojo.cache = {
	// summary:
	// 		A way to cache string content that is fetchable via `dojo.moduleUrl`.
};
=====*/

	var cache = {};
	dojo.cache = function(/*String||Object*/module, /*String*/url, /*String||Object?*/value){
		// summary:
		// 		A getter and setter for storing the string content associated with the
		// 		module and url arguments.
		// description:
		// 		module and url are used to call `dojo.moduleUrl()` to generate a module URL.
		// 		If value is specified, the cache value for the moduleUrl will be set to
		// 		that value. Otherwise, dojo.cache will fetch the moduleUrl and store it
		// 		in its internal cache and return that cached value for the URL. To clear
		// 		a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the
		// 		the URL contents, only modules on the same domain of the page can use this capability.
		// 		The build system can inline the cache values though, to allow for xdomain hosting.
		// module: String||Object
		// 		If a String, the module name to use for the base part of the URL, similar to module argument
		// 		to `dojo.moduleUrl`. If an Object, something that has a .toString() method that
		// 		generates a valid path for the cache item. For example, a dojo._Url object.
		// url: String
		// 		The rest of the path to append to the path derived from the module argument. If
		// 		module is an object, then this second argument should be the "value" argument instead.
		// value: String||Object?
		// 		If a String, the value to use in the cache for the module/url combination.
		// 		If an Object, it can have two properties: value and sanitize. The value property
		// 		should be the value to use in the cache, and sanitize can be set to true or false,
		// 		to indicate if XML declarations should be removed from the value and if the HTML
		// 		inside a body tag in the value should be extracted as the real value. The value argument
		// 		or the value property on the value argument are usually only used by the build system
		// 		as it inlines cache content.
		//	example:
		//		To ask dojo.cache to fetch content and store it in the cache (the dojo["cache"] style
		// 		of call is used to avoid an issue with the build system erroneously trying to intern
		// 		this example. To get the build system to intern your dojo.cache calls, use the
		// 		"dojo.cache" style of call):
		// 		|	//If template.html contains "<h1>Hello</h1>" that will be
		// 		|	//the value for the text variable.
		//		|	var text = dojo["cache"]("my.module", "template.html");
		//	example:
		//		To ask dojo.cache to fetch content and store it in the cache, and sanitize the input
		// 		 (the dojo["cache"] style of call is used to avoid an issue with the build system
		// 		erroneously trying to intern this example. To get the build system to intern your
		// 		dojo.cache calls, use the "dojo.cache" style of call):
		// 		|	//If template.html contains "<html><body><h1>Hello</h1></body></html>", the
		// 		|	//text variable will contain just "<h1>Hello</h1>".
		//		|	var text = dojo["cache"]("my.module", "template.html", {sanitize: true});
		//	example:
		//		Same example as previous, but demostrates how an object can be passed in as
		//		the first argument, then the value argument can then be the second argument.
		// 		|	//If template.html contains "<html><body><h1>Hello</h1></body></html>", the
		// 		|	//text variable will contain just "<h1>Hello</h1>".
		//		|	var text = dojo["cache"](new dojo._Url("my/module/template.html"), {sanitize: true});

		//Module could be a string, or an object that has a toString() method
		//that will return a useful path. If it is an object, then the "url" argument
		//will actually be the value argument.
		if(typeof module == "string"){
			var pathObj = dojo.moduleUrl(module, url);
		}else{
			pathObj = module;
			value = url;
		}
		var key = pathObj.toString();

		var val = value;
		if(value != undefined && !dojo.isString(value)){
			val = ("value" in value ? value.value : undefined);
		}

		var sanitize = value && value.sanitize ? true : false;

		if(typeof val == "string"){
			//We have a string, set cache value
			val = cache[key] = sanitize ? dojo.cache._sanitize(val) : val;
		}else if(val === null){
			//Remove cached value
			delete cache[key];
		}else{
			//Allow cache values to be empty strings. If key property does
			//not exist, fetch it.
			if(!(key in cache)){
				val = dojo._getText(key);
				cache[key] = sanitize ? dojo.cache._sanitize(val) : val;
			}
			val = cache[key];
		}
		return val; //String
	};

	dojo.cache._sanitize = function(/*String*/val){
		// summary:
		//		Strips <?xml ...?> declarations so that external SVG and XML
		// 		documents can be added to a document without worry. Also, if the string
		//		is an HTML document, only the part inside the body tag is returned.
		// description:
		// 		Copied from dijit._Templated._sanitizeTemplateString.
		if(val){
			val = val.replace(/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, "");
			var matches = val.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
			if(matches){
				val = matches[1];
			}
		}else{
			val = "";
		}
		return val; //String
	};

}

if(!dojo._hasResource["dijit._Templated"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._Templated"] = true;
dojo.provide("dijit._Templated");







dojo.declare("dijit._Templated",
	null,
	{
		// summary:
		//		Mixin for widgets that are instantiated from a template

		// templateString: [protected] String
		//		A string that represents the widget template. Pre-empts the
		//		templatePath. In builds that have their strings "interned", the
		//		templatePath is converted to an inline templateString, thereby
		//		preventing a synchronous network call.
		//
		//		Use in conjunction with dojo.cache() to load from a file.
		templateString: null,

		// templatePath: [protected deprecated] String
		//		Path to template (HTML file) for this widget relative to dojo.baseUrl.
		//		Deprecated: use templateString with dojo.cache() instead.
		templatePath: null,

		// widgetsInTemplate: [protected] Boolean
		//		Should we parse the template to find widgets that might be
		//		declared in markup inside it?  False by default.
		widgetsInTemplate: false,

		// skipNodeCache: [protected] Boolean
		//		If using a cached widget template node poses issues for a
		//		particular widget class, it can set this property to ensure
		//		that its template is always re-built from a string
		_skipNodeCache: false,

		// _earlyTemplatedStartup: Boolean
		//		A fallback to preserve the 1.0 - 1.3 behavior of children in
		//		templates having their startup called before the parent widget
		//		fires postCreate. Defaults to 'false', causing child widgets to
		//		have their .startup() called immediately before a parent widget
		//		.startup(), but always after the parent .postCreate(). Set to
		//		'true' to re-enable to previous, arguably broken, behavior.
		_earlyTemplatedStartup: false,

/*=====
		// _attachPoints: [private] String[]
		//		List of widget attribute names associated with dojoAttachPoint=... in the
		//		template, ex: ["containerNode", "labelNode"]
 		_attachPoints: [],
 =====*/

/*=====
		// _attachEvents: [private] Handle[]
		//		List of connections associated with dojoAttachEvent=... in the
		//		template
 		_attachEvents: [],
 =====*/

		constructor: function(){
			this._attachPoints = [];
			this._attachEvents = [];
		},

		_stringRepl: function(tmpl){
			// summary:
			//		Does substitution of ${foo} type properties in template string
			// tags:
			//		private
			var className = this.declaredClass, _this = this;
			// Cache contains a string because we need to do property replacement
			// do the property replacement
			return dojo.string.substitute(tmpl, this, function(value, key){
				if(key.charAt(0) == '!'){ value = dojo.getObject(key.substr(1), false, _this); }
				if(typeof value == "undefined"){ throw new Error(className+" template:"+key); } // a debugging aide
				if(value == null){ return ""; }

				// Substitution keys beginning with ! will skip the transform step,
				// in case a user wishes to insert unescaped markup, e.g. ${!foo}
				return key.charAt(0) == "!" ? value :
					// Safer substitution, see heading "Attribute values" in
					// http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.3.2
					value.toString().replace(/"/g,"&quot;"); //TODO: add &amp? use encodeXML method?
			}, this);
		},

		buildRendering: function(){
			// summary:
			//		Construct the UI for this widget from a template, setting this.domNode.
			// tags:
			//		protected

			// Lookup cached version of template, and download to cache if it
			// isn't there already.  Returns either a DomNode or a string, depending on
			// whether or not the template contains ${foo} replacement parameters.
			var cached = dijit._Templated.getCachedTemplate(this.templatePath, this.templateString, this._skipNodeCache);

			var node;
			if(dojo.isString(cached)){
				node = dojo._toDom(this._stringRepl(cached));
				if(node.nodeType != 1){
					// Flag common problems such as templates with multiple top level nodes (nodeType == 11)
					throw new Error("Invalid template: " + cached);
				}
			}else{
				// if it's a node, all we have to do is clone it
				node = cached.cloneNode(true);
			}

			this.domNode = node;

			// Call down to _Widget.buildRendering() to get base classes assigned
			// TODO: change the baseClass assignment to attributeMap
			this.inherited(arguments);

			// recurse through the node, looking for, and attaching to, our
			// attachment points and events, which should be defined on the template node.
			this._attachTemplateNodes(node);

			if(this.widgetsInTemplate){
				// Store widgets that we need to start at a later point in time
				var cw = (this._startupWidgets = dojo.parser.parse(node, {
					noStart: !this._earlyTemplatedStartup,
					template: true,
					inherited: {dir: this.dir, lang: this.lang},
					propsThis: this,	// so data-dojo-props of widgets in the template can reference "this" to refer to me
					scope: "dojo"	// even in multi-version mode templates use dojoType/data-dojo-type
				}));

				this._supportingWidgets = dijit.findWidgets(node);

				this._attachTemplateNodes(cw, function(n,p){
					return n[p];
				});
			}

			this._fillContent(this.srcNodeRef);
		},

		_fillContent: function(/*DomNode*/ source){
			// summary:
			//		Relocate source contents to templated container node.
			//		this.containerNode must be able to receive children, or exceptions will be thrown.
			// tags:
			//		protected
			var dest = this.containerNode;
			if(source && dest){
				while(source.hasChildNodes()){
					dest.appendChild(source.firstChild);
				}
			}
		},

		_attachTemplateNodes: function(rootNode, getAttrFunc){
			// summary:
			//		Iterate through the template and attach functions and nodes accordingly.
			//		Alternately, if rootNode is an array of widgets, then will process dojoAttachPoint
			//		etc. for those widgets.
			// description:
			//		Map widget properties and functions to the handlers specified in
			//		the dom node and it's descendants. This function iterates over all
			//		nodes and looks for these properties:
			//			* dojoAttachPoint
			//			* dojoAttachEvent
			//			* waiRole
			//			* waiState
			// rootNode: DomNode|Array[Widgets]
			//		the node to search for properties. All children will be searched.
			// getAttrFunc: Function?
			//		a function which will be used to obtain property for a given
			//		DomNode/Widget
			// tags:
			//		private

			getAttrFunc = getAttrFunc || function(n,p){ return n.getAttribute(p); };

			var nodes = dojo.isArray(rootNode) ? rootNode : (rootNode.all || rootNode.getElementsByTagName("*"));
			var x = dojo.isArray(rootNode) ? 0 : -1;
			for(; x<nodes.length; x++){
				var baseNode = (x == -1) ? rootNode : nodes[x];
				if(this.widgetsInTemplate && (getAttrFunc(baseNode, "dojoType") || getAttrFunc(baseNode, "data-dojo-type"))){
					continue;
				}
				// Process dojoAttachPoint
				var attachPoint = getAttrFunc(baseNode, "dojoAttachPoint") || getAttrFunc(baseNode, "data-dojo-attach-point");
				if(attachPoint){
					var point, points = attachPoint.split(/\s*,\s*/);
					while((point = points.shift())){
						if(dojo.isArray(this[point])){
							this[point].push(baseNode);
						}else{
							this[point]=baseNode;
						}
						this._attachPoints.push(point);
					}
				}

				// Process dojoAttachEvent
				var attachEvent = getAttrFunc(baseNode, "dojoAttachEvent") || getAttrFunc(baseNode, "data-dojo-attach-event");;
				if(attachEvent){
					// NOTE: we want to support attributes that have the form
					// "domEvent: nativeEvent; ..."
					var event, events = attachEvent.split(/\s*,\s*/);
					var trim = dojo.trim;
					while((event = events.shift())){
						if(event){
							var thisFunc = null;
							if(event.indexOf(":") != -1){
								// oh, if only JS had tuple assignment
								var funcNameArr = event.split(":");
								event = trim(funcNameArr[0]);
								thisFunc = trim(funcNameArr[1]);
							}else{
								event = trim(event);
							}
							if(!thisFunc){
								thisFunc = event;
							}
							this._attachEvents.push(this.connect(baseNode, event, thisFunc));
						}
					}
				}

				// waiRole, waiState
				// TODO: remove this in 2.0, templates are now using role=... and aria-XXX=... attributes directicly
				var role = getAttrFunc(baseNode, "waiRole");
				if(role){
					dijit.setWaiRole(baseNode, role);
				}
				var values = getAttrFunc(baseNode, "waiState");
				if(values){
					dojo.forEach(values.split(/\s*,\s*/), function(stateValue){
						if(stateValue.indexOf('-') != -1){
							var pair = stateValue.split('-');
							dijit.setWaiState(baseNode, pair[0], pair[1]);
						}
					});
				}
			}
		},

		startup: function(){
			dojo.forEach(this._startupWidgets, function(w){
				if(w && !w._started && w.startup){
					w.startup();
				}
			});
			this.inherited(arguments);
		},

		destroyRendering: function(){
			// Delete all attach points to prevent IE6 memory leaks.
			dojo.forEach(this._attachPoints, function(point){
				delete this[point];
			}, this);
			this._attachPoints = [];

			// And same for event handlers
			dojo.forEach(this._attachEvents, this.disconnect, this);
			this._attachEvents = [];
			
			this.inherited(arguments);
		}
	}
);

// key is either templatePath or templateString; object is either string or DOM tree
dijit._Templated._templateCache = {};

dijit._Templated.getCachedTemplate = function(templatePath, templateString, alwaysUseString){
	// summary:
	//		Static method to get a template based on the templatePath or
	//		templateString key
	// templatePath: String||dojo.uri.Uri
	//		The URL to get the template from.
	// templateString: String?
	//		a string to use in lieu of fetching the template from a URL. Takes precedence
	//		over templatePath
	// returns: Mixed
	//		Either string (if there are ${} variables that need to be replaced) or just
	//		a DOM tree (if the node can be cloned directly)

	// is it already cached?
	var tmplts = dijit._Templated._templateCache;
	var key = templateString || templatePath;
	var cached = tmplts[key];
	if(cached){
		try{
			// if the cached value is an innerHTML string (no ownerDocument) or a DOM tree created within the current document, then use the current cached value
			if(!cached.ownerDocument || cached.ownerDocument == dojo.doc){
				// string or node of the same document
				return cached;
			}
		}catch(e){ /* squelch */ } // IE can throw an exception if cached.ownerDocument was reloaded
		dojo.destroy(cached);
	}

	// If necessary, load template string from template path
	if(!templateString){
		templateString = dojo.cache(templatePath, {sanitize: true});
	}
	templateString = dojo.string.trim(templateString);

	if(alwaysUseString || templateString.match(/\$\{([^\}]+)\}/g)){
		// there are variables in the template so all we can do is cache the string
		return (tmplts[key] = templateString); //String
	}else{
		// there are no variables in the template so we can cache the DOM tree
		var node = dojo._toDom(templateString);
		if(node.nodeType != 1){
			throw new Error("Invalid template: " + templateString);
		}
		return (tmplts[key] = node); //Node
	}
};

if(dojo.isIE){
	dojo.addOnWindowUnload(function(){
		var cache = dijit._Templated._templateCache;
		for(var key in cache){
			var value = cache[key];
			if(typeof value == "object"){ // value is either a string or a DOM node template
				dojo.destroy(value);
			}
			delete cache[key];
		}
	});
}

// These arguments can be specified for widgets which are used in templates.
// Since any widget can be specified as sub widgets in template, mix it
// into the base widget class.  (This is a hack, but it's effective.)
dojo.extend(dijit._Widget,{
	dojoAttachEvent: "",
	dojoAttachPoint: "",
	waiRole: "",
	waiState:""
});

}

if(!dojo._hasResource["dijit._Container"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._Container"] = true;
dojo.provide("dijit._Container");



dojo.declare("dijit._Container",
	null,
	{
		// summary:
		//		Mixin for widgets that contain a set of widget children.
		// description:
		//		Use this mixin for widgets that needs to know about and
		//		keep track of their widget children. Suitable for widgets like BorderContainer
		//		and TabContainer which contain (only) a set of child widgets.
		//
		//		It's not suitable for widgets like ContentPane
		//		which contains mixed HTML (plain DOM nodes in addition to widgets),
		//		and where contained widgets are not necessarily directly below
		//		this.containerNode.   In that case calls like addChild(node, position)
		//		wouldn't make sense.

		// isContainer: [protected] Boolean
		//		Indicates that this widget acts as a "parent" to the descendant widgets.
		//		When the parent is started it will call startup() on the child widgets.
		//		See also `isLayoutContainer`.
		isContainer: true,

		buildRendering: function(){
			this.inherited(arguments);
			if(!this.containerNode){
				// all widgets with descendants must set containerNode
	 				this.containerNode = this.domNode;
			}
		},

		addChild: function(/*dijit._Widget*/ widget, /*int?*/ insertIndex){
			// summary:
			//		Makes the given widget a child of this widget.
			// description:
			//		Inserts specified child widget's dom node as a child of this widget's
			//		container node, and possibly does other processing (such as layout).

			var refNode = this.containerNode;
			if(insertIndex && typeof insertIndex == "number"){
				var children = this.getChildren();
				if(children && children.length >= insertIndex){
					refNode = children[insertIndex-1].domNode;
					insertIndex = "after";
				}
			}
			dojo.place(widget.domNode, refNode, insertIndex);

			// If I've been started but the child widget hasn't been started,
			// start it now.  Make sure to do this after widget has been
			// inserted into the DOM tree, so it can see that it's being controlled by me,
			// so it doesn't try to size itself.
			if(this._started && !widget._started){
				widget.startup();
			}
		},

		removeChild: function(/*Widget or int*/ widget){
			// summary:
			//		Removes the passed widget instance from this widget but does
			//		not destroy it.  You can also pass in an integer indicating
			//		the index within the container to remove

			if(typeof widget == "number"){
				widget = this.getChildren()[widget];
			}

			if(widget){
				var node = widget.domNode;
				if(node && node.parentNode){
					node.parentNode.removeChild(node); // detach but don't destroy
				}
			}
		},

		hasChildren: function(){
			// summary:
			//		Returns true if widget has children, i.e. if this.containerNode contains something.
			return this.getChildren().length > 0;	// Boolean
		},

		destroyDescendants: function(/*Boolean*/ preserveDom){
			// summary:
			//      Destroys all the widgets inside this.containerNode,
			//      but not this widget itself
			dojo.forEach(this.getChildren(), function(child){ child.destroyRecursive(preserveDom); });
		},

		_getSiblingOfChild: function(/*dijit._Widget*/ child, /*int*/ dir){
			// summary:
			//		Get the next or previous widget sibling of child
			// dir:
			//		if 1, get the next sibling
			//		if -1, get the previous sibling
			// tags:
			//      private
			var node = child.domNode,
				which = (dir>0 ? "nextSibling" : "previousSibling");
			do{
				node = node[which];
			}while(node && (node.nodeType != 1 || !dijit.byNode(node)));
			return node && dijit.byNode(node);	// dijit._Widget
		},

		getIndexOfChild: function(/*dijit._Widget*/ child){
			// summary:
			//		Gets the index of the child in this container or -1 if not found
			return dojo.indexOf(this.getChildren(), child);	// int
		},

		startup: function(){
			// summary:
			//		Called after all the widgets have been instantiated and their
			//		dom nodes have been inserted somewhere under dojo.doc.body.
			//
			//		Widgets should override this method to do any initialization
			//		dependent on other widgets existing, and then call
			//		this superclass method to finish things off.
			//
			//		startup() in subclasses shouldn't do anything
			//		size related because the size of the widget hasn't been set yet.

			if(this._started){ return; }

			// Startup all children of this widget
			dojo.forEach(this.getChildren(), function(child){ child.startup(); });

			this.inherited(arguments);
		}
	}
);

}

if(!dojo._hasResource["dojo.data.util.filter"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.data.util.filter"] = true;
dojo.provide("dojo.data.util.filter");


dojo.getObject("data.util.filter", true, dojo);

dojo.data.util.filter.patternToRegExp = function(/*String*/pattern, /*boolean?*/ ignoreCase){
	//	summary:
	//		Helper function to convert a simple pattern to a regular expression for matching.
	//	description:
	//		Returns a regular expression object that conforms to the defined conversion rules.
	//		For example:
	//			ca*   -> /^ca.*$/
	//			*ca*  -> /^.*ca.*$/
	//			*c\*a*  -> /^.*c\*a.*$/
	//			*c\*a?*  -> /^.*c\*a..*$/
	//			and so on.
	//
	//	pattern: string
	//		A simple matching pattern to convert that follows basic rules:
	//			* Means match anything, so ca* means match anything starting with ca
	//			? Means match single character.  So, b?b will match to bob and bab, and so on.
	//      	\ is an escape character.  So for example, \* means do not treat * as a match, but literal character *.
	//				To use a \ as a character in the string, it must be escaped.  So in the pattern it should be
	//				represented by \\ to be treated as an ordinary \ character instead of an escape.
	//
	//	ignoreCase:
	//		An optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing
	//		By default, it is assumed case sensitive.

	var rxp = "^";
	var c = null;
	for(var i = 0; i < pattern.length; i++){
		c = pattern.charAt(i);
		switch(c){
			case '\\':
				rxp += c;
				i++;
				rxp += pattern.charAt(i);
				break;
			case '*':
				rxp += ".*"; break;
			case '?':
				rxp += "."; break;
			case '$':
			case '^':
			case '/':
			case '+':
			case '.':
			case '|':
			case '(':
			case ')':
			case '{':
			case '}':
			case '[':
			case ']':
				rxp += "\\"; //fallthrough
			default:
				rxp += c;
		}
	}
	rxp += "$";
	if(ignoreCase){
		return new RegExp(rxp,"mi"); //RegExp
	}else{
		return new RegExp(rxp,"m"); //RegExp
	}
	
};

}

if(!dojo._hasResource["dojo.data.util.sorter"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.data.util.sorter"] = true;
dojo.provide("dojo.data.util.sorter");


dojo.getObject("data.util.sorter", true, dojo);

dojo.data.util.sorter.basicComparator = function(	/*anything*/ a,
													/*anything*/ b){
	//	summary:
	//		Basic comparision function that compares if an item is greater or less than another item
	//	description:
	//		returns 1 if a > b, -1 if a < b, 0 if equal.
	//		'null' values (null, undefined) are treated as larger values so that they're pushed to the end of the list.
	//		And compared to each other, null is equivalent to undefined.
	
	//null is a problematic compare, so if null, we set to undefined.
	//Makes the check logic simple, compact, and consistent
	//And (null == undefined) === true, so the check later against null
	//works for undefined and is less bytes.
	var r = -1;
	if(a === null){
		a = undefined;
	}
	if(b === null){
		b = undefined;
	}
	if(a == b){
		r = 0;
	}else if(a > b || a == null){
		r = 1;
	}
	return r; //int {-1,0,1}
};

dojo.data.util.sorter.createSortFunction = function(	/* attributes array */sortSpec,
														/*dojo.data.core.Read*/ store){
	//	summary:
	//		Helper function to generate the sorting function based off the list of sort attributes.
	//	description:
	//		The sort function creation will look for a property on the store called 'comparatorMap'.  If it exists
	//		it will look in the mapping for comparisons function for the attributes.  If one is found, it will
	//		use it instead of the basic comparator, which is typically used for strings, ints, booleans, and dates.
	//		Returns the sorting function for this particular list of attributes and sorting directions.
	//
	//	sortSpec: array
	//		A JS object that array that defines out what attribute names to sort on and whether it should be descenting or asending.
	//		The objects should be formatted as follows:
	//		{
	//			attribute: "attributeName-string" || attribute,
	//			descending: true|false;   // Default is false.
	//		}
	//	store: object
	//		The datastore object to look up item values from.
	//
	var sortFunctions=[];

	function createSortFunction(attr, dir, comp, s){
		//Passing in comp and s (comparator and store), makes this
		//function much faster.
		return function(itemA, itemB){
			var a = s.getValue(itemA, attr);
			var b = s.getValue(itemB, attr);
			return dir * comp(a,b); //int
		};
	}
	var sortAttribute;
	var map = store.comparatorMap;
	var bc = dojo.data.util.sorter.basicComparator;
	for(var i = 0; i < sortSpec.length; i++){
		sortAttribute = sortSpec[i];
		var attr = sortAttribute.attribute;
		if(attr){
			var dir = (sortAttribute.descending) ? -1 : 1;
			var comp = bc;
			if(map){
				if(typeof attr !== "string" && ("toString" in attr)){
					 attr = attr.toString();
				}
				comp = map[attr] || bc;
			}
			sortFunctions.push(createSortFunction(attr,
				dir, comp, store));
		}
	}
	return function(rowA, rowB){
		var i=0;
		while(i < sortFunctions.length){
			var ret = sortFunctions[i++](rowA, rowB);
			if(ret !== 0){
				return ret;//int
			}
		}
		return 0; //int
	}; // Function
};

}

if(!dojo._hasResource["dojo.data.util.simpleFetch"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.data.util.simpleFetch"] = true;
dojo.provide("dojo.data.util.simpleFetch");



dojo.getObject("data.util.simpleFetch", true, dojo);

dojo.data.util.simpleFetch.fetch = function(/* Object? */ request){
	//	summary:
	//		The simpleFetch mixin is designed to serve as a set of function(s) that can
	//		be mixed into other datastore implementations to accelerate their development.
	//		The simpleFetch mixin should work well for any datastore that can respond to a _fetchItems()
	//		call by returning an array of all the found items that matched the query.  The simpleFetch mixin
	//		is not designed to work for datastores that respond to a fetch() call by incrementally
	//		loading items, or sequentially loading partial batches of the result
	//		set.  For datastores that mixin simpleFetch, simpleFetch
	//		implements a fetch method that automatically handles eight of the fetch()
	//		arguments -- onBegin, onItem, onComplete, onError, start, count, sort and scope
	//		The class mixing in simpleFetch should not implement fetch(),
	//		but should instead implement a _fetchItems() method.  The _fetchItems()
	//		method takes three arguments, the keywordArgs object that was passed
	//		to fetch(), a callback function to be called when the result array is
	//		available, and an error callback to be called if something goes wrong.
	//		The _fetchItems() method should ignore any keywordArgs parameters for
	//		start, count, onBegin, onItem, onComplete, onError, sort, and scope.
	//		The _fetchItems() method needs to correctly handle any other keywordArgs
	//		parameters, including the query parameter and any optional parameters
	//		(such as includeChildren).  The _fetchItems() method should create an array of
	//		result items and pass it to the fetchHandler along with the original request object
	//		-- or, the _fetchItems() method may, if it wants to, create an new request object
	//		with other specifics about the request that are specific to the datastore and pass
	//		that as the request object to the handler.
	//
	//		For more information on this specific function, see dojo.data.api.Read.fetch()
	request = request || {};
	if(!request.store){
		request.store = this;
	}
	var self = this;

	var _errorHandler = function(errorData, requestObject){
		if(requestObject.onError){
			var scope = requestObject.scope || dojo.global;
			requestObject.onError.call(scope, errorData, requestObject);
		}
	};

	var _fetchHandler = function(items, requestObject){
		var oldAbortFunction = requestObject.abort || null;
		var aborted = false;

		var startIndex = requestObject.start?requestObject.start:0;
		var endIndex = (requestObject.count && (requestObject.count !== Infinity))?(startIndex + requestObject.count):items.length;

		requestObject.abort = function(){
			aborted = true;
			if(oldAbortFunction){
				oldAbortFunction.call(requestObject);
			}
		};

		var scope = requestObject.scope || dojo.global;
		if(!requestObject.store){
			requestObject.store = self;
		}
		if(requestObject.onBegin){
			requestObject.onBegin.call(scope, items.length, requestObject);
		}
		if(requestObject.sort){
			items.sort(dojo.data.util.sorter.createSortFunction(requestObject.sort, self));
		}
		if(requestObject.onItem){
			for(var i = startIndex; (i < items.length) && (i < endIndex); ++i){
				var item = items[i];
				if(!aborted){
					requestObject.onItem.call(scope, item, requestObject);
				}
			}
		}
		if(requestObject.onComplete && !aborted){
			var subset = null;
			if(!requestObject.onItem){
				subset = items.slice(startIndex, endIndex);
			}
			requestObject.onComplete.call(scope, subset, requestObject);
		}
	};
	this._fetchItems(request, _fetchHandler, _errorHandler);
	return request;	// Object
};

}

if(!dojo._hasResource["dojo.data.ItemFileReadStore"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.data.ItemFileReadStore"] = true;
dojo.provide("dojo.data.ItemFileReadStore");






dojo.declare("dojo.data.ItemFileReadStore", null,{
	//	summary:
	//		The ItemFileReadStore implements the dojo.data.api.Read API and reads
	//		data from JSON files that have contents in this format --
	//		{ items: [
	//			{ name:'Kermit', color:'green', age:12, friends:['Gonzo', {_reference:{name:'Fozzie Bear'}}]},
	//			{ name:'Fozzie Bear', wears:['hat', 'tie']},
	//			{ name:'Miss Piggy', pets:'Foo-Foo'}
	//		]}
	//		Note that it can also contain an 'identifer' property that specified which attribute on the items
	//		in the array of items that acts as the unique identifier for that item.
	//
	constructor: function(/* Object */ keywordParameters){
		//	summary: constructor
		//	keywordParameters: {url: String}
		//	keywordParameters: {data: jsonObject}
		//	keywordParameters: {typeMap: object)
		//		The structure of the typeMap object is as follows:
		//		{
		//			type0: function || object,
		//			type1: function || object,
		//			...
		//			typeN: function || object
		//		}
		//		Where if it is a function, it is assumed to be an object constructor that takes the
		//		value of _value as the initialization parameters.  If it is an object, then it is assumed
		//		to be an object of general form:
		//		{
		//			type: function, //constructor.
		//			deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.
		//		}

		this._arrayOfAllItems = [];
		this._arrayOfTopLevelItems = [];
		this._loadFinished = false;
		this._jsonFileUrl = keywordParameters.url;
		this._ccUrl = keywordParameters.url;
		this.url = keywordParameters.url;
		this._jsonData = keywordParameters.data;
		this.data = null;
		this._datatypeMap = keywordParameters.typeMap || {};
		if(!this._datatypeMap['Date']){
			//If no default mapping for dates, then set this as default.
			//We use the dojo.date.stamp here because the ISO format is the 'dojo way'
			//of generically representing dates.
			this._datatypeMap['Date'] = {
											type: Date,
											deserialize: function(value){
												return dojo.date.stamp.fromISOString(value);
											}
										};
		}
		this._features = {'dojo.data.api.Read':true, 'dojo.data.api.Identity':true};
		this._itemsByIdentity = null;
		this._storeRefPropName = "_S"; // Default name for the store reference to attach to every item.
		this._itemNumPropName = "_0"; // Default Item Id for isItem to attach to every item.
		this._rootItemPropName = "_RI"; // Default Item Id for isItem to attach to every item.
		this._reverseRefMap = "_RRM"; // Default attribute for constructing a reverse reference map for use with reference integrity
		this._loadInProgress = false; //Got to track the initial load to prevent duelling loads of the dataset.
		this._queuedFetches = [];
		if(keywordParameters.urlPreventCache !== undefined){
			this.urlPreventCache = keywordParameters.urlPreventCache?true:false;
		}
		if(keywordParameters.hierarchical !== undefined){
			this.hierarchical = keywordParameters.hierarchical?true:false;
		}
		else
		{
			this.urlPreventCache = true;
		}
		if(keywordParameters.clearOnClose){
			this.clearOnClose = true;
		}
		if("failOk" in keywordParameters){
			this.failOk = keywordParameters.failOk?true:false;
		}
	},

	url: "",	// use "" rather than undefined for the benefit of the parser (#3539)

	//Internal var, crossCheckUrl.  Used so that setting either url or _jsonFileUrl, can still trigger a reload
	//when clearOnClose and close is used.
	_ccUrl: "",

	data: null,	// define this so that the parser can populate it

	typeMap: null, //Define so parser can populate.

	//Parameter to allow users to specify if a close call should force a reload or not.
	//By default, it retains the old behavior of not clearing if close is called.  But
	//if set true, the store will be reset to default state.  Note that by doing this,
	//all item handles will become invalid and a new fetch must be issued.
	clearOnClose: false,

	//Parameter to allow specifying if preventCache should be passed to the xhrGet call or not when loading data from a url.
	//Note this does not mean the store calls the server on each fetch, only that the data load has preventCache set as an option.
	//Added for tracker: #6072
	urlPreventCache: false,

	//Parameter for specifying that it is OK for the xhrGet call to fail silently.
	failOk: false,

	//Parameter to indicate to process data from the url as hierarchical
	//(data items can contain other data items in js form).  Default is true
	//for backwards compatibility.  False means only root items are processed
	//as items, all child objects outside of type-mapped objects and those in
	//specific reference format, are left straight JS data objects.
	hierarchical: true,

	_assertIsItem: function(/* item */ item){
		//	summary:
		//		This function tests whether the item passed in is indeed an item in the store.
		//	item:
		//		The item to test for being contained by the store.
		if(!this.isItem(item)){
			throw new Error("dojo.data.ItemFileReadStore: Invalid item argument.");
		}
	},

	_assertIsAttribute: function(/* attribute-name-string */ attribute){
		//	summary:
		//		This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.
		//	attribute:
		//		The attribute to test for being contained by the store.
		if(typeof attribute !== "string"){
			throw new Error("dojo.data.ItemFileReadStore: Invalid attribute argument.");
		}
	},

	getValue: function(	/* item */ item,
						/* attribute-name-string */ attribute,
						/* value? */ defaultValue){
		//	summary:
		//		See dojo.data.api.Read.getValue()
		var values = this.getValues(item, attribute);
		return (values.length > 0)?values[0]:defaultValue; // mixed
	},

	getValues: function(/* item */ item,
						/* attribute-name-string */ attribute){
		//	summary:
		//		See dojo.data.api.Read.getValues()

		this._assertIsItem(item);
		this._assertIsAttribute(attribute);
		// Clone it before returning.  refs: #10474
		return (item[attribute] || []).slice(0); // Array
	},

	getAttributes: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Read.getAttributes()
		this._assertIsItem(item);
		var attributes = [];
		for(var key in item){
			// Save off only the real item attributes, not the special id marks for O(1) isItem.
			if((key !== this._storeRefPropName) && (key !== this._itemNumPropName) && (key !== this._rootItemPropName) && (key !== this._reverseRefMap)){
				attributes.push(key);
			}
		}
		return attributes; // Array
	},

	hasAttribute: function(	/* item */ item,
							/* attribute-name-string */ attribute){
		//	summary:
		//		See dojo.data.api.Read.hasAttribute()
		this._assertIsItem(item);
		this._assertIsAttribute(attribute);
		return (attribute in item);
	},

	containsValue: function(/* item */ item,
							/* attribute-name-string */ attribute,
							/* anything */ value){
		//	summary:
		//		See dojo.data.api.Read.containsValue()
		var regexp = undefined;
		if(typeof value === "string"){
			regexp = dojo.data.util.filter.patternToRegExp(value, false);
		}
		return this._containsValue(item, attribute, value, regexp); //boolean.
	},

	_containsValue: function(	/* item */ item,
								/* attribute-name-string */ attribute,
								/* anything */ value,
								/* RegExp?*/ regexp){
		//	summary:
		//		Internal function for looking at the values contained by the item.
		//	description:
		//		Internal function for looking at the values contained by the item.  This
		//		function allows for denoting if the comparison should be case sensitive for
		//		strings or not (for handling filtering cases where string case should not matter)
		//
		//	item:
		//		The data item to examine for attribute values.
		//	attribute:
		//		The attribute to inspect.
		//	value:
		//		The value to match.
		//	regexp:
		//		Optional regular expression generated off value if value was of string type to handle wildcarding.
		//		If present and attribute values are string, then it can be used for comparison instead of 'value'
		return dojo.some(this.getValues(item, attribute), function(possibleValue){
			if(possibleValue !== null && !dojo.isObject(possibleValue) && regexp){
				if(possibleValue.toString().match(regexp)){
					return true; // Boolean
				}
			}else if(value === possibleValue){
				return true; // Boolean
			}
		});
	},

	isItem: function(/* anything */ something){
		//	summary:
		//		See dojo.data.api.Read.isItem()
		if(something && something[this._storeRefPropName] === this){
			if(this._arrayOfAllItems[something[this._itemNumPropName]] === something){
				return true;
			}
		}
		return false; // Boolean
	},

	isItemLoaded: function(/* anything */ something){
		//	summary:
		//		See dojo.data.api.Read.isItemLoaded()
		return this.isItem(something); //boolean
	},

	loadItem: function(/* object */ keywordArgs){
		//	summary:
		//		See dojo.data.api.Read.loadItem()
		this._assertIsItem(keywordArgs.item);
	},

	getFeatures: function(){
		//	summary:
		//		See dojo.data.api.Read.getFeatures()
		return this._features; //Object
	},

	getLabel: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Read.getLabel()
		if(this._labelAttr && this.isItem(item)){
			return this.getValue(item,this._labelAttr); //String
		}
		return undefined; //undefined
	},

	getLabelAttributes: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Read.getLabelAttributes()
		if(this._labelAttr){
			return [this._labelAttr]; //array
		}
		return null; //null
	},

	_fetchItems: function(	/* Object */ keywordArgs,
							/* Function */ findCallback,
							/* Function */ errorCallback){
		//	summary:
		//		See dojo.data.util.simpleFetch.fetch()
		var self = this,
		    filter = function(requestArgs, arrayOfItems){
			var items = [],
			    i, key;
			if(requestArgs.query){
				var value,
				    ignoreCase = requestArgs.queryOptions ? requestArgs.queryOptions.ignoreCase : false;

				//See if there are any string values that can be regexp parsed first to avoid multiple regexp gens on the
				//same value for each item examined.  Much more efficient.
				var regexpList = {};
				for(key in requestArgs.query){
					value = requestArgs.query[key];
					if(typeof value === "string"){
						regexpList[key] = dojo.data.util.filter.patternToRegExp(value, ignoreCase);
					}else if(value instanceof RegExp){
						regexpList[key] = value;
					}
				}
				for(i = 0; i < arrayOfItems.length; ++i){
					var match = true;
					var candidateItem = arrayOfItems[i];
					if(candidateItem === null){
						match = false;
					}else{
						for(key in requestArgs.query){
							value = requestArgs.query[key];
							if(!self._containsValue(candidateItem, key, value, regexpList[key])){
								match = false;
							}
						}
					}
					if(match){
						items.push(candidateItem);
					}
				}
				findCallback(items, requestArgs);
			}else{
				// We want a copy to pass back in case the parent wishes to sort the array.
				// We shouldn't allow resort of the internal list, so that multiple callers
				// can get lists and sort without affecting each other.  We also need to
				// filter out any null values that have been left as a result of deleteItem()
				// calls in ItemFileWriteStore.
				for(i = 0; i < arrayOfItems.length; ++i){
					var item = arrayOfItems[i];
					if(item !== null){
						items.push(item);
					}
				}
				findCallback(items, requestArgs);
			}
		};

		if(this._loadFinished){
			filter(keywordArgs, this._getItemsArray(keywordArgs.queryOptions));
		}else{
			//Do a check on the JsonFileUrl and crosscheck it.
			//If it doesn't match the cross-check, it needs to be updated
			//This allows for either url or _jsonFileUrl to he changed to
			//reset the store load location.  Done this way for backwards
			//compatibility.  People use _jsonFileUrl (even though officially
			//private.
			if(this._jsonFileUrl !== this._ccUrl){
				dojo.deprecated("dojo.data.ItemFileReadStore: ",
					"To change the url, set the url property of the store," +
					" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
				this._ccUrl = this._jsonFileUrl;
				this.url = this._jsonFileUrl;
			}else if(this.url !== this._ccUrl){
				this._jsonFileUrl = this.url;
				this._ccUrl = this.url;
			}

			//See if there was any forced reset of data.
			if(this.data != null){
				this._jsonData = this.data;
				this.data = null;
			}

			if(this._jsonFileUrl){
				//If fetches come in before the loading has finished, but while
				//a load is in progress, we have to defer the fetching to be
				//invoked in the callback.
				if(this._loadInProgress){
					this._queuedFetches.push({args: keywordArgs, filter: filter});
				}else{
					this._loadInProgress = true;
					var getArgs = {
							url: self._jsonFileUrl,
							handleAs: "json-comment-optional",
							preventCache: this.urlPreventCache,
							failOk: this.failOk
						};
					var getHandler = dojo.xhrGet(getArgs);
					getHandler.addCallback(function(data){
						try{
							self._getItemsFromLoadedData(data);
							self._loadFinished = true;
							self._loadInProgress = false;

							filter(keywordArgs, self._getItemsArray(keywordArgs.queryOptions));
							self._handleQueuedFetches();
						}catch(e){
							self._loadFinished = true;
							self._loadInProgress = false;
							errorCallback(e, keywordArgs);
						}
					});
					getHandler.addErrback(function(error){
						self._loadInProgress = false;
						errorCallback(error, keywordArgs);
					});

					//Wire up the cancel to abort of the request
					//This call cancel on the deferred if it hasn't been called
					//yet and then will chain to the simple abort of the
					//simpleFetch keywordArgs
					var oldAbort = null;
					if(keywordArgs.abort){
						oldAbort = keywordArgs.abort;
					}
					keywordArgs.abort = function(){
						var df = getHandler;
						if(df && df.fired === -1){
							df.cancel();
							df = null;
						}
						if(oldAbort){
							oldAbort.call(keywordArgs);
						}
					};
				}
			}else if(this._jsonData){
				try{
					this._loadFinished = true;
					this._getItemsFromLoadedData(this._jsonData);
					this._jsonData = null;
					filter(keywordArgs, this._getItemsArray(keywordArgs.queryOptions));
				}catch(e){
					errorCallback(e, keywordArgs);
				}
			}else{
				errorCallback(new Error("dojo.data.ItemFileReadStore: No JSON source data was provided as either URL or a nested Javascript object."), keywordArgs);
			}
		}
	},

	_handleQueuedFetches: function(){
		//	summary:
		//		Internal function to execute delayed request in the store.
		//Execute any deferred fetches now.
		if(this._queuedFetches.length > 0){
			for(var i = 0; i < this._queuedFetches.length; i++){
				var fData = this._queuedFetches[i],
				    delayedQuery = fData.args,
				    delayedFilter = fData.filter;
				if(delayedFilter){
					delayedFilter(delayedQuery, this._getItemsArray(delayedQuery.queryOptions));
				}else{
					this.fetchItemByIdentity(delayedQuery);
				}
			}
			this._queuedFetches = [];
		}
	},

	_getItemsArray: function(/*object?*/queryOptions){
		//	summary:
		//		Internal function to determine which list of items to search over.
		//	queryOptions: The query options parameter, if any.
		if(queryOptions && queryOptions.deep){
			return this._arrayOfAllItems;
		}
		return this._arrayOfTopLevelItems;
	},

	close: function(/*dojo.data.api.Request || keywordArgs || null */ request){
		 //	summary:
		 //		See dojo.data.api.Read.close()
		 if(this.clearOnClose &&
			this._loadFinished &&
			!this._loadInProgress){
			 //Reset all internalsback to default state.  This will force a reload
			 //on next fetch.  This also checks that the data or url param was set
			 //so that the store knows it can get data.  Without one of those being set,
			 //the next fetch will trigger an error.

			 if(((this._jsonFileUrl == "" || this._jsonFileUrl == null) &&
				 (this.url == "" || this.url == null)
				) && this.data == null){
				 console.debug("dojo.data.ItemFileReadStore: WARNING!  Data reload " +
					" information has not been provided." +
					"  Please set 'url' or 'data' to the appropriate value before" +
					" the next fetch");
			 }
			 this._arrayOfAllItems = [];
			 this._arrayOfTopLevelItems = [];
			 this._loadFinished = false;
			 this._itemsByIdentity = null;
			 this._loadInProgress = false;
			 this._queuedFetches = [];
		 }
	},

	_getItemsFromLoadedData: function(/* Object */ dataObject){
		//	summary:
		//		Function to parse the loaded data into item format and build the internal items array.
		//	description:
		//		Function to parse the loaded data into item format and build the internal items array.
		//
		//	dataObject:
		//		The JS data object containing the raw data to convery into item format.
		//
		// 	returns: array
		//		Array of items in store item format.

		// First, we define a couple little utility functions...
		var addingArrays = false,
		    self = this;

		function valueIsAnItem(/* anything */ aValue){
			// summary:
			//		Given any sort of value that could be in the raw json data,
			//		return true if we should interpret the value as being an
			//		item itself, rather than a literal value or a reference.
			// example:
			// 	|	false == valueIsAnItem("Kermit");
			// 	|	false == valueIsAnItem(42);
			// 	|	false == valueIsAnItem(new Date());
			// 	|	false == valueIsAnItem({_type:'Date', _value:'1802-05-14'});
			// 	|	false == valueIsAnItem({_reference:'Kermit'});
			// 	|	true == valueIsAnItem({name:'Kermit', color:'green'});
			// 	|	true == valueIsAnItem({iggy:'pop'});
			// 	|	true == valueIsAnItem({foo:42});
			var isItem = (
				(aValue !== null) &&
				(typeof aValue === "object") &&
				(!dojo.isArray(aValue) || addingArrays) &&
				(!dojo.isFunction(aValue)) &&
				(aValue.constructor == Object || dojo.isArray(aValue)) &&
				(typeof aValue._reference === "undefined") &&
				(typeof aValue._type === "undefined") &&
				(typeof aValue._value === "undefined") &&
				self.hierarchical
			);
			return isItem;
		}

		function addItemAndSubItemsToArrayOfAllItems(/* Item */ anItem){
			self._arrayOfAllItems.push(anItem);
			for(var attribute in anItem){
				var valueForAttribute = anItem[attribute];
				if(valueForAttribute){
					if(dojo.isArray(valueForAttribute)){
						var valueArray = valueForAttribute;
						for(var k = 0; k < valueArray.length; ++k){
							var singleValue = valueArray[k];
							if(valueIsAnItem(singleValue)){
								addItemAndSubItemsToArrayOfAllItems(singleValue);
							}
						}
					}else{
						if(valueIsAnItem(valueForAttribute)){
							addItemAndSubItemsToArrayOfAllItems(valueForAttribute);
						}
					}
				}
			}
		}

		this._labelAttr = dataObject.label;

		// We need to do some transformations to convert the data structure
		// that we read from the file into a format that will be convenient
		// to work with in memory.

		// Step 1: Walk through the object hierarchy and build a list of all items
		var i,
		    item;
		this._arrayOfAllItems = [];
		this._arrayOfTopLevelItems = dataObject.items;

		for(i = 0; i < this._arrayOfTopLevelItems.length; ++i){
			item = this._arrayOfTopLevelItems[i];
			if(dojo.isArray(item)){
				addingArrays = true;
			}
			addItemAndSubItemsToArrayOfAllItems(item);
			item[this._rootItemPropName]=true;
		}

		// Step 2: Walk through all the attribute values of all the items,
		// and replace single values with arrays.  For example, we change this:
		//		{ name:'Miss Piggy', pets:'Foo-Foo'}
		// into this:
		//		{ name:['Miss Piggy'], pets:['Foo-Foo']}
		//
		// We also store the attribute names so we can validate our store
		// reference and item id special properties for the O(1) isItem
		var allAttributeNames = {},
		    key;

		for(i = 0; i < this._arrayOfAllItems.length; ++i){
			item = this._arrayOfAllItems[i];
			for(key in item){
				if(key !== this._rootItemPropName){
					var value = item[key];
					if(value !== null){
						if(!dojo.isArray(value)){
							item[key] = [value];
						}
					}else{
						item[key] = [null];
					}
				}
				allAttributeNames[key]=key;
			}
		}

		// Step 3: Build unique property names to use for the _storeRefPropName and _itemNumPropName
		// This should go really fast, it will generally never even run the loop.
		while(allAttributeNames[this._storeRefPropName]){
			this._storeRefPropName += "_";
		}
		while(allAttributeNames[this._itemNumPropName]){
			this._itemNumPropName += "_";
		}
		while(allAttributeNames[this._reverseRefMap]){
			this._reverseRefMap += "_";
		}

		// Step 4: Some data files specify an optional 'identifier', which is
		// the name of an attribute that holds the identity of each item.
		// If this data file specified an identifier attribute, then build a
		// hash table of items keyed by the identity of the items.
		var arrayOfValues;

		var identifier = dataObject.identifier;
		if(identifier){
			this._itemsByIdentity = {};
			this._features['dojo.data.api.Identity'] = identifier;
			for(i = 0; i < this._arrayOfAllItems.length; ++i){
				item = this._arrayOfAllItems[i];
				arrayOfValues = item[identifier];
				var identity = arrayOfValues[0];
				if(!Object.hasOwnProperty.call(this._itemsByIdentity, identity)){
					this._itemsByIdentity[identity] = item;
				}else{
					if(this._jsonFileUrl){
						throw new Error("dojo.data.ItemFileReadStore:  The json data as specified by: [" + this._jsonFileUrl + "] is malformed.  Items within the list have identifier: [" + identifier + "].  Value collided: [" + identity + "]");
					}else if(this._jsonData){
						throw new Error("dojo.data.ItemFileReadStore:  The json data provided by the creation arguments is malformed.  Items within the list have identifier: [" + identifier + "].  Value collided: [" + identity + "]");
					}
				}
			}
		}else{
			this._features['dojo.data.api.Identity'] = Number;
		}

		// Step 5: Walk through all the items, and set each item's properties
		// for _storeRefPropName and _itemNumPropName, so that store.isItem() will return true.
		for(i = 0; i < this._arrayOfAllItems.length; ++i){
			item = this._arrayOfAllItems[i];
			item[this._storeRefPropName] = this;
			item[this._itemNumPropName] = i;
		}

		// Step 6: We walk through all the attribute values of all the items,
		// looking for type/value literals and item-references.
		//
		// We replace item-references with pointers to items.  For example, we change:
		//		{ name:['Kermit'], friends:[{_reference:{name:'Miss Piggy'}}] }
		// into this:
		//		{ name:['Kermit'], friends:[miss_piggy] }
		// (where miss_piggy is the object representing the 'Miss Piggy' item).
		//
		// We replace type/value pairs with typed-literals.  For example, we change:
		//		{ name:['Nelson Mandela'], born:[{_type:'Date', _value:'1918-07-18'}] }
		// into this:
		//		{ name:['Kermit'], born:(new Date(1918, 6, 18)) }
		//
		// We also generate the associate map for all items for the O(1) isItem function.
		for(i = 0; i < this._arrayOfAllItems.length; ++i){
			item = this._arrayOfAllItems[i]; // example: { name:['Kermit'], friends:[{_reference:{name:'Miss Piggy'}}] }
			for(key in item){
				arrayOfValues = item[key]; // example: [{_reference:{name:'Miss Piggy'}}]
				for(var j = 0; j < arrayOfValues.length; ++j){
					value = arrayOfValues[j]; // example: {_reference:{name:'Miss Piggy'}}
					if(value !== null && typeof value == "object"){
						if(("_type" in value) && ("_value" in value)){
							var type = value._type; // examples: 'Date', 'Color', or 'ComplexNumber'
							var mappingObj = this._datatypeMap[type]; // examples: Date, dojo.Color, foo.math.ComplexNumber, {type: dojo.Color, deserialize(value){ return new dojo.Color(value)}}
							if(!mappingObj){
								throw new Error("dojo.data.ItemFileReadStore: in the typeMap constructor arg, no object class was specified for the datatype '" + type + "'");
							}else if(dojo.isFunction(mappingObj)){
								arrayOfValues[j] = new mappingObj(value._value);
							}else if(dojo.isFunction(mappingObj.deserialize)){
								arrayOfValues[j] = mappingObj.deserialize(value._value);
							}else{
								throw new Error("dojo.data.ItemFileReadStore: Value provided in typeMap was neither a constructor, nor a an object with a deserialize function");
							}
						}
						if(value._reference){
							var referenceDescription = value._reference; // example: {name:'Miss Piggy'}
							if(!dojo.isObject(referenceDescription)){
								// example: 'Miss Piggy'
								// from an item like: { name:['Kermit'], friends:[{_reference:'Miss Piggy'}]}
								arrayOfValues[j] = this._getItemByIdentity(referenceDescription);
							}else{
								// example: {name:'Miss Piggy'}
								// from an item like: { name:['Kermit'], friends:[{_reference:{name:'Miss Piggy'}}] }
								for(var k = 0; k < this._arrayOfAllItems.length; ++k){
									var candidateItem = this._arrayOfAllItems[k],
									    found = true;
									for(var refKey in referenceDescription){
										if(candidateItem[refKey] != referenceDescription[refKey]){
											found = false;
										}
									}
									if(found){
										arrayOfValues[j] = candidateItem;
									}
								}
							}
							if(this.referenceIntegrity){
								var refItem = arrayOfValues[j];
								if(this.isItem(refItem)){
									this._addReferenceToMap(refItem, item, key);
								}
							}
						}else if(this.isItem(value)){
							//It's a child item (not one referenced through _reference).
							//We need to treat this as a referenced item, so it can be cleaned up
							//in a write store easily.
							if(this.referenceIntegrity){
								this._addReferenceToMap(value, item, key);
							}
						}
					}
				}
			}
		}
	},

	_addReferenceToMap: function(/*item*/ refItem, /*item*/ parentItem, /*string*/ attribute){
		 //	summary:
		 //		Method to add an reference map entry for an item and attribute.
		 //	description:
		 //		Method to add an reference map entry for an item and attribute. 		 //
		 //	refItem:
		 //		The item that is referenced.
		 //	parentItem:
		 //		The item that holds the new reference to refItem.
		 //	attribute:
		 //		The attribute on parentItem that contains the new reference.

		 //Stub function, does nothing.  Real processing is in ItemFileWriteStore.
	},

	getIdentity: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Identity.getIdentity()
		var identifier = this._features['dojo.data.api.Identity'];
		if(identifier === Number){
			return item[this._itemNumPropName]; // Number
		}else{
			var arrayOfValues = item[identifier];
			if(arrayOfValues){
				return arrayOfValues[0]; // Object || String
			}
		}
		return null; // null
	},

	fetchItemByIdentity: function(/* Object */ keywordArgs){
		//	summary:
		//		See dojo.data.api.Identity.fetchItemByIdentity()

		// Hasn't loaded yet, we have to trigger the load.
		var item,
		    scope;
		if(!this._loadFinished){
			var self = this;
			//Do a check on the JsonFileUrl and crosscheck it.
			//If it doesn't match the cross-check, it needs to be updated
			//This allows for either url or _jsonFileUrl to he changed to
			//reset the store load location.  Done this way for backwards
			//compatibility.  People use _jsonFileUrl (even though officially
			//private.
			if(this._jsonFileUrl !== this._ccUrl){
				dojo.deprecated("dojo.data.ItemFileReadStore: ",
					"To change the url, set the url property of the store," +
					" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
				this._ccUrl = this._jsonFileUrl;
				this.url = this._jsonFileUrl;
			}else if(this.url !== this._ccUrl){
				this._jsonFileUrl = this.url;
				this._ccUrl = this.url;
			}

			//See if there was any forced reset of data.
			if(this.data != null && this._jsonData == null){
				this._jsonData = this.data;
				this.data = null;
			}

			if(this._jsonFileUrl){

				if(this._loadInProgress){
					this._queuedFetches.push({args: keywordArgs});
				}else{
					this._loadInProgress = true;
					var getArgs = {
							url: self._jsonFileUrl,
							handleAs: "json-comment-optional",
							preventCache: this.urlPreventCache,
							failOk: this.failOk
					};
					var getHandler = dojo.xhrGet(getArgs);
					getHandler.addCallback(function(data){
						var scope = keywordArgs.scope?keywordArgs.scope:dojo.global;
						try{
							self._getItemsFromLoadedData(data);
							self._loadFinished = true;
							self._loadInProgress = false;
							item = self._getItemByIdentity(keywordArgs.identity);
							if(keywordArgs.onItem){
								keywordArgs.onItem.call(scope, item);
							}
							self._handleQueuedFetches();
						}catch(error){
							self._loadInProgress = false;
							if(keywordArgs.onError){
								keywordArgs.onError.call(scope, error);
							}
						}
					});
					getHandler.addErrback(function(error){
						self._loadInProgress = false;
						if(keywordArgs.onError){
							var scope = keywordArgs.scope?keywordArgs.scope:dojo.global;
							keywordArgs.onError.call(scope, error);
						}
					});
				}

			}else if(this._jsonData){
				// Passed in data, no need to xhr.
				self._getItemsFromLoadedData(self._jsonData);
				self._jsonData = null;
				self._loadFinished = true;
				item = self._getItemByIdentity(keywordArgs.identity);
				if(keywordArgs.onItem){
					scope = keywordArgs.scope?keywordArgs.scope:dojo.global;
					keywordArgs.onItem.call(scope, item);
				}
			}
		}else{
			// Already loaded.  We can just look it up and call back.
			item = this._getItemByIdentity(keywordArgs.identity);
			if(keywordArgs.onItem){
				scope = keywordArgs.scope?keywordArgs.scope:dojo.global;
				keywordArgs.onItem.call(scope, item);
			}
		}
	},

	_getItemByIdentity: function(/* Object */ identity){
		//	summary:
		//		Internal function to look an item up by its identity map.
		var item = null;
		if(this._itemsByIdentity &&
		   Object.hasOwnProperty.call(this._itemsByIdentity, identity)){
			item = this._itemsByIdentity[identity];
		}else if (Object.hasOwnProperty.call(this._arrayOfAllItems, identity)){
			item = this._arrayOfAllItems[identity];
		}
		if(item === undefined){
			item = null;
		}
		return item; // Object
	},

	getIdentityAttributes: function(/* item */ item){
		//	summary:
		//		See dojo.data.api.Identity.getIdentityAttributes()

		var identifier = this._features['dojo.data.api.Identity'];
		if(identifier === Number){
			// If (identifier === Number) it means getIdentity() just returns
			// an integer item-number for each item.  The dojo.data.api.Identity
			// spec says we need to return null if the identity is not composed
			// of attributes
			return null; // null
		}else{
			return [identifier]; // Array
		}
	},

	_forceLoad: function(){
		//	summary:
		//		Internal function to force a load of the store if it hasn't occurred yet.  This is required
		//		for specific functions to work properly.
		var self = this;
		//Do a check on the JsonFileUrl and crosscheck it.
		//If it doesn't match the cross-check, it needs to be updated
		//This allows for either url or _jsonFileUrl to he changed to
		//reset the store load location.  Done this way for backwards
		//compatibility.  People use _jsonFileUrl (even though officially
		//private.
		if(this._jsonFileUrl !== this._ccUrl){
			dojo.deprecated("dojo.data.ItemFileReadStore: ",
				"To change the url, set the url property of the store," +
				" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
			this._ccUrl = this._jsonFileUrl;
			this.url = this._jsonFileUrl;
		}else if(this.url !== this._ccUrl){
			this._jsonFileUrl = this.url;
			this._ccUrl = this.url;
		}

		//See if there was any forced reset of data.
		if(this.data != null){
			this._jsonData = this.data;
			this.data = null;
		}

		if(this._jsonFileUrl){
				var getArgs = {
					url: this._jsonFileUrl,
					handleAs: "json-comment-optional",
					preventCache: this.urlPreventCache,
					failOk: this.failOk,
					sync: true
				};
			var getHandler = dojo.xhrGet(getArgs);
			getHandler.addCallback(function(data){
				try{
					//Check to be sure there wasn't another load going on concurrently
					//So we don't clobber data that comes in on it.  If there is a load going on
					//then do not save this data.  It will potentially clobber current data.
					//We mainly wanted to sync/wait here.
					//TODO:  Revisit the loading scheme of this store to improve multi-initial
					//request handling.
					if(self._loadInProgress !== true && !self._loadFinished){
						self._getItemsFromLoadedData(data);
						self._loadFinished = true;
					}else if(self._loadInProgress){
						//Okay, we hit an error state we can't recover from.  A forced load occurred
						//while an async load was occurring.  Since we cannot block at this point, the best
						//that can be managed is to throw an error.
						throw new Error("dojo.data.ItemFileReadStore:  Unable to perform a synchronous load, an async load is in progress.");
					}
				}catch(e){
					console.log(e);
					throw e;
				}
			});
			getHandler.addErrback(function(error){
				throw error;
			});
		}else if(this._jsonData){
			self._getItemsFromLoadedData(self._jsonData);
			self._jsonData = null;
			self._loadFinished = true;
		}
	}
});
//Mix in the simple fetch implementation to this class.
dojo.extend(dojo.data.ItemFileReadStore,dojo.data.util.simpleFetch);

}

if(!dojo._hasResource["dojo.data.ItemFileWriteStore"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.data.ItemFileWriteStore"] = true;
dojo.provide("dojo.data.ItemFileWriteStore");




dojo.declare("dojo.data.ItemFileWriteStore", dojo.data.ItemFileReadStore, {
	constructor: function(/* object */ keywordParameters){
		//	keywordParameters: {typeMap: object)
		//		The structure of the typeMap object is as follows:
		//		{
		//			type0: function || object,
		//			type1: function || object,
		//			...
		//			typeN: function || object
		//		}
		//		Where if it is a function, it is assumed to be an object constructor that takes the
		//		value of _value as the initialization parameters.  It is serialized assuming object.toString()
		//		serialization.  If it is an object, then it is assumed
		//		to be an object of general form:
		//		{
		//			type: function, //constructor.
		//			deserialize:	function(value) //The function that parses the value and constructs the object defined by type appropriately.
		//			serialize:	function(object) //The function that converts the object back into the proper file format form.
		//		}

		// ItemFileWriteStore extends ItemFileReadStore to implement these additional dojo.data APIs
		this._features['dojo.data.api.Write'] = true;
		this._features['dojo.data.api.Notification'] = true;
		
		// For keeping track of changes so that we can implement isDirty and revert
		this._pending = {
			_newItems:{},
			_modifiedItems:{},
			_deletedItems:{}
		};

		if(!this._datatypeMap['Date'].serialize){
			this._datatypeMap['Date'].serialize = function(obj){
				return dojo.date.stamp.toISOString(obj, {zulu:true});
			};
		}
		//Disable only if explicitly set to false.
		if(keywordParameters && (keywordParameters.referenceIntegrity === false)){
			this.referenceIntegrity = false;
		}

		// this._saveInProgress is set to true, briefly, from when save() is first called to when it completes
		this._saveInProgress = false;
	},

	referenceIntegrity: true, //Flag that defaultly enabled reference integrity tracking.  This way it can also be disabled pogrammatially or declaratively.

	_assert: function(/* boolean */ condition){
		if(!condition){
			throw new Error("assertion failed in ItemFileWriteStore");
		}
	},

	_getIdentifierAttribute: function(){
		var identifierAttribute = this.getFeatures()['dojo.data.api.Identity'];
		// this._assert((identifierAttribute === Number) || (dojo.isString(identifierAttribute)));
		return identifierAttribute;
	},
	
	
/* dojo.data.api.Write */

	newItem: function(/* Object? */ keywordArgs, /* Object? */ parentInfo){
		// summary: See dojo.data.api.Write.newItem()

		this._assert(!this._saveInProgress);

		if(!this._loadFinished){
			// We need to do this here so that we'll be able to find out what
			// identifierAttribute was specified in the data file.
			this._forceLoad();
		}

		if(typeof keywordArgs != "object" && typeof keywordArgs != "undefined"){
			throw new Error("newItem() was passed something other than an object");
		}
		var newIdentity = null;
		var identifierAttribute = this._getIdentifierAttribute();
		if(identifierAttribute === Number){
			newIdentity = this._arrayOfAllItems.length;
		}else{
			newIdentity = keywordArgs[identifierAttribute];
			if(typeof newIdentity === "undefined"){
				throw new Error("newItem() was not passed an identity for the new item");
			}
			if(dojo.isArray(newIdentity)){
				throw new Error("newItem() was not passed an single-valued identity");
			}
		}
		
		// make sure this identity is not already in use by another item, if identifiers were
		// defined in the file.  Otherwise it would be the item count,
		// which should always be unique in this case.
		if(this._itemsByIdentity){
			this._assert(typeof this._itemsByIdentity[newIdentity] === "undefined");
		}
		this._assert(typeof this._pending._newItems[newIdentity] === "undefined");
		this._assert(typeof this._pending._deletedItems[newIdentity] === "undefined");
		
		var newItem = {};
		newItem[this._storeRefPropName] = this;
		newItem[this._itemNumPropName] = this._arrayOfAllItems.length;
		if(this._itemsByIdentity){
			this._itemsByIdentity[newIdentity] = newItem;
			//We have to set the identifier now, otherwise we can't look it
			//up at calls to setValueorValues in parentInfo handling.
			newItem[identifierAttribute] = [newIdentity];
		}
		this._arrayOfAllItems.push(newItem);

		//We need to construct some data for the onNew call too...
		var pInfo = null;
		
		// Now we need to check to see where we want to assign this thingm if any.
		if(parentInfo && parentInfo.parent && parentInfo.attribute){
			pInfo = {
				item: parentInfo.parent,
				attribute: parentInfo.attribute,
				oldValue: undefined
			};

			//See if it is multi-valued or not and handle appropriately
			//Generally, all attributes are multi-valued for this store
			//So, we only need to append if there are already values present.
			var values = this.getValues(parentInfo.parent, parentInfo.attribute);
			if(values && values.length > 0){
				var tempValues = values.slice(0, values.length);
				if(values.length === 1){
					pInfo.oldValue = values[0];
				}else{
					pInfo.oldValue = values.slice(0, values.length);
				}
				tempValues.push(newItem);
				this._setValueOrValues(parentInfo.parent, parentInfo.attribute, tempValues, false);
				pInfo.newValue = this.getValues(parentInfo.parent, parentInfo.attribute);
			}else{
				this._setValueOrValues(parentInfo.parent, parentInfo.attribute, newItem, false);
				pInfo.newValue = newItem;
			}
		}else{
			//Toplevel item, add to both top list as well as all list.
			newItem[this._rootItemPropName]=true;
			this._arrayOfTopLevelItems.push(newItem);
		}
		
		this._pending._newItems[newIdentity] = newItem;
		
		//Clone over the properties to the new item
		for(var key in keywordArgs){
			if(key === this._storeRefPropName || key === this._itemNumPropName){
				// Bummer, the user is trying to do something like
				// newItem({_S:"foo"}).  Unfortunately, our superclass,
				// ItemFileReadStore, is already using _S in each of our items
				// to hold private info.  To avoid a naming collision, we
				// need to move all our private info to some other property
				// of all the items/objects.  So, we need to iterate over all
				// the items and do something like:
				//    item.__S = item._S;
				//    item._S = undefined;
				// But first we have to make sure the new "__S" variable is
				// not in use, which means we have to iterate over all the
				// items checking for that.
				throw new Error("encountered bug in ItemFileWriteStore.newItem");
			}
			var value = keywordArgs[key];
			if(!dojo.isArray(value)){
				value = [value];
			}
			newItem[key] = value;
			if(this.referenceIntegrity){
				for(var i = 0; i < value.length; i++){
					var val = value[i];
					if(this.isItem(val)){
						this._addReferenceToMap(val, newItem, key);
					}
				}
			}
		}
		this.onNew(newItem, pInfo); // dojo.data.api.Notification call
		return newItem; // item
	},
	
	_removeArrayElement: function(/* Array */ array, /* anything */ element){
		var index = dojo.indexOf(array, element);
		if(index != -1){
			array.splice(index, 1);
			return true;
		}
		return false;
	},
	
	deleteItem: function(/* item */ item){
		// summary: See dojo.data.api.Write.deleteItem()
		this._assert(!this._saveInProgress);
		this._assertIsItem(item);

		// Remove this item from the _arrayOfAllItems, but leave a null value in place
		// of the item, so as not to change the length of the array, so that in newItem()
		// we can still safely do: newIdentity = this._arrayOfAllItems.length;
		var indexInArrayOfAllItems = item[this._itemNumPropName];
		var identity = this.getIdentity(item);

		//If we have reference integrity on, we need to do reference cleanup for the deleted item
		if(this.referenceIntegrity){
			//First scan all the attributes of this items for references and clean them up in the map
			//As this item is going away, no need to track its references anymore.

			//Get the attributes list before we generate the backup so it
			//doesn't pollute the attributes list.
			var attributes = this.getAttributes(item);

			//Backup the map, we'll have to restore it potentially, in a revert.
			if(item[this._reverseRefMap]){
				item["backup_" + this._reverseRefMap] = dojo.clone(item[this._reverseRefMap]);
			}
			
			//TODO:  This causes a reversion problem.  This list won't be restored on revert since it is
			//attached to the 'value'. item, not ours.  Need to back tese up somehow too.
			//Maybe build a map of the backup of the entries and attach it to the deleted item to be restored
			//later.  Or just record them and call _addReferenceToMap on them in revert.
			dojo.forEach(attributes, function(attribute){
				dojo.forEach(this.getValues(item, attribute), function(value){
					if(this.isItem(value)){
						//We have to back up all the references we had to others so they can be restored on a revert.
						if(!item["backupRefs_" + this._reverseRefMap]){
							item["backupRefs_" + this._reverseRefMap] = [];
						}
						item["backupRefs_" + this._reverseRefMap].push({id: this.getIdentity(value), attr: attribute});
						this._removeReferenceFromMap(value, item, attribute);
					}
				}, this);
			}, this);

			//Next, see if we have references to this item, if we do, we have to clean them up too.
			var references = item[this._reverseRefMap];
			if(references){
				//Look through all the items noted as references to clean them up.
				for(var itemId in references){
					var containingItem = null;
					if(this._itemsByIdentity){
						containingItem = this._itemsByIdentity[itemId];
					}else{
						containingItem = this._arrayOfAllItems[itemId];
					}
					//We have a reference to a containing item, now we have to process the
					//attributes and clear all references to the item being deleted.
					if(containingItem){
						for(var attribute in references[itemId]){
							var oldValues = this.getValues(containingItem, attribute) || [];
							var newValues = dojo.filter(oldValues, function(possibleItem){
								return !(this.isItem(possibleItem) && this.getIdentity(possibleItem) == identity);
							}, this);
							//Remove the note of the reference to the item and set the values on the modified attribute.
							this._removeReferenceFromMap(item, containingItem, attribute);
							if(newValues.length < oldValues.length){
								this._setValueOrValues(containingItem, attribute, newValues, true);
							}
						}
					}
				}
			}
		}

		this._arrayOfAllItems[indexInArrayOfAllItems] = null;

		item[this._storeRefPropName] = null;
		if(this._itemsByIdentity){
			delete this._itemsByIdentity[identity];
		}
		this._pending._deletedItems[identity] = item;
		
		//Remove from the toplevel items, if necessary...
		if(item[this._rootItemPropName]){
			this._removeArrayElement(this._arrayOfTopLevelItems, item);
		}
		this.onDelete(item); // dojo.data.api.Notification call
		return true;
	},

	setValue: function(/* item */ item, /* attribute-name-string */ attribute, /* almost anything */ value){
		// summary: See dojo.data.api.Write.set()
		return this._setValueOrValues(item, attribute, value, true); // boolean
	},
	
	setValues: function(/* item */ item, /* attribute-name-string */ attribute, /* array */ values){
		// summary: See dojo.data.api.Write.setValues()
		return this._setValueOrValues(item, attribute, values, true); // boolean
	},
	
	unsetAttribute: function(/* item */ item, /* attribute-name-string */ attribute){
		// summary: See dojo.data.api.Write.unsetAttribute()
		return this._setValueOrValues(item, attribute, [], true);
	},
	
	_setValueOrValues: function(/* item */ item, /* attribute-name-string */ attribute, /* anything */ newValueOrValues, /*boolean?*/ callOnSet){
		this._assert(!this._saveInProgress);
		
		// Check for valid arguments
		this._assertIsItem(item);
		this._assert(dojo.isString(attribute));
		this._assert(typeof newValueOrValues !== "undefined");

		// Make sure the user isn't trying to change the item's identity
		var identifierAttribute = this._getIdentifierAttribute();
		if(attribute == identifierAttribute){
			throw new Error("ItemFileWriteStore does not have support for changing the value of an item's identifier.");
		}

		// To implement the Notification API, we need to make a note of what
		// the old attribute value was, so that we can pass that info when
		// we call the onSet method.
		var oldValueOrValues = this._getValueOrValues(item, attribute);

		var identity = this.getIdentity(item);
		if(!this._pending._modifiedItems[identity]){
			// Before we actually change the item, we make a copy of it to
			// record the original state, so that we'll be able to revert if
			// the revert method gets called.  If the item has already been
			// modified then there's no need to do this now, since we already
			// have a record of the original state.
			var copyOfItemState = {};
			for(var key in item){
				if((key === this._storeRefPropName) || (key === this._itemNumPropName) || (key === this._rootItemPropName)){
					copyOfItemState[key] = item[key];
				}else if(key === this._reverseRefMap){
					copyOfItemState[key] = dojo.clone(item[key]);
				}else{
					copyOfItemState[key] = item[key].slice(0, item[key].length);
				}
			}
			// Now mark the item as dirty, and save the copy of the original state
			this._pending._modifiedItems[identity] = copyOfItemState;
		}
		
		// Okay, now we can actually change this attribute on the item
		var success = false;
		
		if(dojo.isArray(newValueOrValues) && newValueOrValues.length === 0){
			
			// If we were passed an empty array as the value, that counts
			// as "unsetting" the attribute, so we need to remove this
			// attribute from the item.
			success = delete item[attribute];
			newValueOrValues = undefined; // used in the onSet Notification call below

			if(this.referenceIntegrity && oldValueOrValues){
				var oldValues = oldValueOrValues;
				if(!dojo.isArray(oldValues)){
					oldValues = [oldValues];
				}
				for(var i = 0; i < oldValues.length; i++){
					var value = oldValues[i];
					if(this.isItem(value)){
						this._removeReferenceFromMap(value, item, attribute);
					}
				}
			}
		}else{
			var newValueArray;
			if(dojo.isArray(newValueOrValues)){
				var newValues = newValueOrValues;
				// Unfortunately, it's not safe to just do this:
				//    newValueArray = newValues;
				// Instead, we need to copy the array, which slice() does very nicely.
				// This is so that our internal data structure won't
				// get corrupted if the user mucks with the values array *after*
				// calling setValues().
				newValueArray = newValueOrValues.slice(0, newValueOrValues.length);
			}else{
				newValueArray = [newValueOrValues];
			}

			//We need to handle reference integrity if this is on.
			//In the case of set, we need to see if references were added or removed
			//and update the reference tracking map accordingly.
			if(this.referenceIntegrity){
				if(oldValueOrValues){
					var oldValues = oldValueOrValues;
					if(!dojo.isArray(oldValues)){
						oldValues = [oldValues];
					}
					//Use an associative map to determine what was added/removed from the list.
					//Should be O(n) performant.  First look at all the old values and make a list of them
					//Then for any item not in the old list, we add it.  If it was already present, we remove it.
					//Then we pass over the map and any references left it it need to be removed (IE, no match in
					//the new values list).
					var map = {};
					dojo.forEach(oldValues, function(possibleItem){
						if(this.isItem(possibleItem)){
							var id = this.getIdentity(possibleItem);
							map[id.toString()] = true;
						}
					}, this);
					dojo.forEach(newValueArray, function(possibleItem){
						if(this.isItem(possibleItem)){
							var id = this.getIdentity(possibleItem);
							if(map[id.toString()]){
								delete map[id.toString()];
							}else{
								this._addReferenceToMap(possibleItem, item, attribute);
							}
						}
					}, this);
					for(var rId in map){
						var removedItem;
						if(this._itemsByIdentity){
							removedItem = this._itemsByIdentity[rId];
						}else{
							removedItem = this._arrayOfAllItems[rId];
						}
						this._removeReferenceFromMap(removedItem, item, attribute);
					}
				}else{
					//Everything is new (no old values) so we have to just
					//insert all the references, if any.
					for(var i = 0; i < newValueArray.length; i++){
						var value = newValueArray[i];
						if(this.isItem(value)){
							this._addReferenceToMap(value, item, attribute);
						}
					}
				}
			}
			item[attribute] = newValueArray;
			success = true;
		}

		// Now we make the dojo.data.api.Notification call
		if(callOnSet){
			this.onSet(item, attribute, oldValueOrValues, newValueOrValues);
		}
		return success; // boolean
	},

	_addReferenceToMap: function(/*item*/ refItem, /*item*/ parentItem, /*string*/ attribute){
		//	summary:
		//		Method to add an reference map entry for an item and attribute.
		//	description:
		//		Method to add an reference map entry for an item and attribute. 		 //
		//	refItem:
		//		The item that is referenced.
		//	parentItem:
		//		The item that holds the new reference to refItem.
		//	attribute:
		//		The attribute on parentItem that contains the new reference.
		 
		var parentId = this.getIdentity(parentItem);
		var references = refItem[this._reverseRefMap];

		if(!references){
			references = refItem[this._reverseRefMap] = {};
		}
		var itemRef = references[parentId];
		if(!itemRef){
			itemRef = references[parentId] = {};
		}
		itemRef[attribute] = true;
	},

	_removeReferenceFromMap: function(/* item */ refItem, /* item */ parentItem, /*strin*/ attribute){
		//	summary:
		//		Method to remove an reference map entry for an item and attribute.
		//	description:
		//		Method to remove an reference map entry for an item and attribute.  This will
		//		also perform cleanup on the map such that if there are no more references at all to
		//		the item, its reference object and entry are removed.
		//
		//	refItem:
		//		The item that is referenced.
		//	parentItem:
		//		The item holding a reference to refItem.
		//	attribute:
		//		The attribute on parentItem that contains the reference.
		var identity = this.getIdentity(parentItem);
		var references = refItem[this._reverseRefMap];
		var itemId;
		if(references){
			for(itemId in references){
				if(itemId == identity){
					delete references[itemId][attribute];
					if(this._isEmpty(references[itemId])){
						delete references[itemId];
					}
				}
			}
			if(this._isEmpty(references)){
				delete refItem[this._reverseRefMap];
			}
		}
	},

	_dumpReferenceMap: function(){
		//	summary:
		//		Function to dump the reverse reference map of all items in the store for debug purposes.
		//	description:
		//		Function to dump the reverse reference map of all items in the store for debug purposes.
		var i;
		for(i = 0; i < this._arrayOfAllItems.length; i++){
			var item = this._arrayOfAllItems[i];
			if(item && item[this._reverseRefMap]){
				console.log("Item: [" + this.getIdentity(item) + "] is referenced by: " + dojo.toJson(item[this._reverseRefMap]));
			}
		}
	},
	
	_getValueOrValues: function(/* item */ item, /* attribute-name-string */ attribute){
		var valueOrValues = undefined;
		if(this.hasAttribute(item, attribute)){
			var valueArray = this.getValues(item, attribute);
			if(valueArray.length == 1){
				valueOrValues = valueArray[0];
			}else{
				valueOrValues = valueArray;
			}
		}
		return valueOrValues;
	},
	
	_flatten: function(/* anything */ value){
		if(this.isItem(value)){
			var item = value;
			// Given an item, return an serializable object that provides a
			// reference to the item.
			// For example, given kermit:
			//    var kermit = store.newItem({id:2, name:"Kermit"});
			// we want to return
			//    {_reference:2}
			var identity = this.getIdentity(item);
			var referenceObject = {_reference: identity};
			return referenceObject;
		}else{
			if(typeof value === "object"){
				for(var type in this._datatypeMap){
					var typeMap = this._datatypeMap[type];
					if(dojo.isObject(typeMap) && !dojo.isFunction(typeMap)){
						if(value instanceof typeMap.type){
							if(!typeMap.serialize){
								throw new Error("ItemFileWriteStore:  No serializer defined for type mapping: [" + type + "]");
							}
							return {_type: type, _value: typeMap.serialize(value)};
						}
					} else if(value instanceof typeMap){
						//SImple mapping, therefore, return as a toString serialization.
						return {_type: type, _value: value.toString()};
					}
				}
			}
			return value;
		}
	},
	
	_getNewFileContentString: function(){
		// summary:
		//		Generate a string that can be saved to a file.
		//		The result should look similar to:
		//		http://trac.dojotoolkit.org/browser/dojo/trunk/tests/data/countries.json
		var serializableStructure = {};
		
		var identifierAttribute = this._getIdentifierAttribute();
		if(identifierAttribute !== Number){
			serializableStructure.identifier = identifierAttribute;
		}
		if(this._labelAttr){
			serializableStructure.label = this._labelAttr;
		}
		serializableStructure.items = [];
		for(var i = 0; i < this._arrayOfAllItems.length; ++i){
			var item = this._arrayOfAllItems[i];
			if(item !== null){
				var serializableItem = {};
				for(var key in item){
					if(key !== this._storeRefPropName && key !== this._itemNumPropName && key !== this._reverseRefMap && key !== this._rootItemPropName){
						var attribute = key;
						var valueArray = this.getValues(item, attribute);
						if(valueArray.length == 1){
							serializableItem[attribute] = this._flatten(valueArray[0]);
						}else{
							var serializableArray = [];
							for(var j = 0; j < valueArray.length; ++j){
								serializableArray.push(this._flatten(valueArray[j]));
								serializableItem[attribute] = serializableArray;
							}
						}
					}
				}
				serializableStructure.items.push(serializableItem);
			}
		}
		var prettyPrint = true;
		return dojo.toJson(serializableStructure, prettyPrint);
	},

	_isEmpty: function(something){
		//	summary:
		//		Function to determine if an array or object has no properties or values.
		//	something:
		//		The array or object to examine.
		var empty = true;
		if(dojo.isObject(something)){
			var i;
			for(i in something){
				empty = false;
				break;
			}
		}else if(dojo.isArray(something)){
			if(something.length > 0){
				empty = false;
			}
		}
		return empty; //boolean
	},
	
	save: function(/* object */ keywordArgs){
		// summary: See dojo.data.api.Write.save()
		this._assert(!this._saveInProgress);
		
		// this._saveInProgress is set to true, briefly, from when save is first called to when it completes
		this._saveInProgress = true;
		
		var self = this;
		var saveCompleteCallback = function(){
			self._pending = {
				_newItems:{},
				_modifiedItems:{},
				_deletedItems:{}
			};

			self._saveInProgress = false; // must come after this._pending is cleared, but before any callbacks
			if(keywordArgs && keywordArgs.onComplete){
				var scope = keywordArgs.scope || dojo.global;
				keywordArgs.onComplete.call(scope);
			}
		};
		var saveFailedCallback = function(err){
			self._saveInProgress = false;
			if(keywordArgs && keywordArgs.onError){
				var scope = keywordArgs.scope || dojo.global;
				keywordArgs.onError.call(scope, err);
			}
		};
		
		if(this._saveEverything){
			var newFileContentString = this._getNewFileContentString();
			this._saveEverything(saveCompleteCallback, saveFailedCallback, newFileContentString);
		}
		if(this._saveCustom){
			this._saveCustom(saveCompleteCallback, saveFailedCallback);
		}
		if(!this._saveEverything && !this._saveCustom){
			// Looks like there is no user-defined save-handler function.
			// That's fine, it just means the datastore is acting as a "mock-write"
			// store -- changes get saved in memory but don't get saved to disk.
			saveCompleteCallback();
		}
	},
	
	revert: function(){
		// summary: See dojo.data.api.Write.revert()
		this._assert(!this._saveInProgress);

		var identity;
		for(identity in this._pending._modifiedItems){
			// find the original item and the modified item that replaced it
			var copyOfItemState = this._pending._modifiedItems[identity];
			var modifiedItem = null;
			if(this._itemsByIdentity){
				modifiedItem = this._itemsByIdentity[identity];
			}else{
				modifiedItem = this._arrayOfAllItems[identity];
			}
	
			// Restore the original item into a full-fledged item again, we want to try to
			// keep the same object instance as if we don't it, causes bugs like #9022.
			copyOfItemState[this._storeRefPropName] = this;
			for(key in modifiedItem){
				delete modifiedItem[key];
			}
			dojo.mixin(modifiedItem, copyOfItemState);
		}
		var deletedItem;
		for(identity in this._pending._deletedItems){
			deletedItem = this._pending._deletedItems[identity];
			deletedItem[this._storeRefPropName] = this;
			var index = deletedItem[this._itemNumPropName];

			//Restore the reverse refererence map, if any.
			if(deletedItem["backup_" + this._reverseRefMap]){
				deletedItem[this._reverseRefMap] = deletedItem["backup_" + this._reverseRefMap];
				delete deletedItem["backup_" + this._reverseRefMap];
			}
			this._arrayOfAllItems[index] = deletedItem;
			if(this._itemsByIdentity){
				this._itemsByIdentity[identity] = deletedItem;
			}
			if(deletedItem[this._rootItemPropName]){
				this._arrayOfTopLevelItems.push(deletedItem);
			}
		}
		//We have to pass through it again and restore the reference maps after all the
		//undeletes have occurred.
		for(identity in this._pending._deletedItems){
			deletedItem = this._pending._deletedItems[identity];
			if(deletedItem["backupRefs_" + this._reverseRefMap]){
				dojo.forEach(deletedItem["backupRefs_" + this._reverseRefMap], function(reference){
					var refItem;
					if(this._itemsByIdentity){
						refItem = this._itemsByIdentity[reference.id];
					}else{
						refItem = this._arrayOfAllItems[reference.id];
					}
					this._addReferenceToMap(refItem, deletedItem, reference.attr);
				}, this);
				delete deletedItem["backupRefs_" + this._reverseRefMap];
			}
		}

		for(identity in this._pending._newItems){
			var newItem = this._pending._newItems[identity];
			newItem[this._storeRefPropName] = null;
			// null out the new item, but don't change the array index so
			// so we can keep using _arrayOfAllItems.length.
			this._arrayOfAllItems[newItem[this._itemNumPropName]] = null;
			if(newItem[this._rootItemPropName]){
				this._removeArrayElement(this._arrayOfTopLevelItems, newItem);
			}
			if(this._itemsByIdentity){
				delete this._itemsByIdentity[identity];
			}
		}

		this._pending = {
			_newItems:{},
			_modifiedItems:{},
			_deletedItems:{}
		};
		return true; // boolean
	},
	
	isDirty: function(/* item? */ item){
		// summary: See dojo.data.api.Write.isDirty()
		if(item){
			// return true if the item is dirty
			var identity = this.getIdentity(item);
			return new Boolean(this._pending._newItems[identity] ||
				this._pending._modifiedItems[identity] ||
				this._pending._deletedItems[identity]).valueOf(); // boolean
		}else{
			// return true if the store is dirty -- which means return true
			// if there are any new items, dirty items, or modified items
			if(!this._isEmpty(this._pending._newItems) ||
				!this._isEmpty(this._pending._modifiedItems) ||
				!this._isEmpty(this._pending._deletedItems)){
				return true;
			}
			return false; // boolean
		}
	},

/* dojo.data.api.Notification */

	onSet: function(/* item */ item,
					/*attribute-name-string*/ attribute,
					/*object | array*/ oldValue,
					/*object | array*/ newValue){
		// summary: See dojo.data.api.Notification.onSet()
		
		// No need to do anything. This method is here just so that the
		// client code can connect observers to it.
	},

	onNew: function(/* item */ newItem, /*object?*/ parentInfo){
		// summary: See dojo.data.api.Notification.onNew()
		
		// No need to do anything. This method is here just so that the
		// client code can connect observers to it.
	},

	onDelete: function(/* item */ deletedItem){
		// summary: See dojo.data.api.Notification.onDelete()
		
		// No need to do anything. This method is here just so that the
		// client code can connect observers to it.
	},

	close: function(/* object? */ request){
		 // summary:
		 //		Over-ride of base close function of ItemFileReadStore to add in check for store state.
		 // description:
		 //		Over-ride of base close function of ItemFileReadStore to add in check for store state.
		 //		If the store is still dirty (unsaved changes), then an error will be thrown instead of
		 //		clearing the internal state for reload from the url.

		 //Clear if not dirty ... or throw an error
		 if(this.clearOnClose){
			 if(!this.isDirty()){
				 this.inherited(arguments);
			 }else{
				 //Only throw an error if the store was dirty and we were loading from a url (cannot reload from url until state is saved).
				 throw new Error("dojo.data.ItemFileWriteStore: There are unsaved changes present in the store.  Please save or revert the changes before invoking close.");
			 }
		 }
	}
});

}

if(!dojo._hasResource["dojo.fx.easing"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.fx.easing"] = true;
dojo.provide("dojo.fx.easing");


dojo.getObject("fx.easing", true, dojo);

dojo.fx.easing = {
	// summary:
	//		Collection of easing functions to use beyond the default
	//		`dojo._defaultEasing` function.
	//
	// description:
	//
	//		Easing functions are used to manipulate the iteration through
	//		an `dojo.Animation`s _Line. _Line being the properties of an Animation,
	//		and the easing function progresses through that Line determing
	//		how quickly (or slowly) it should go. Or more accurately: modify
	//		the value of the _Line based on the percentage of animation completed.
	//
	//		All functions follow a simple naming convention of "ease type" + "when".
	//		If the name of the function ends in Out, the easing described appears
	//		towards the end of the animation. "In" means during the beginning,
	//		and InOut means both ranges of the Animation will applied, both
	//		beginning and end.
	//
	//		One does not call the easing function directly, it must be passed to
	//		the `easing` property of an animation.
	//
	//	example:
	//	|	
	//	|	var anim = dojo.fadeOut({
	//	|		node: 'node',
	//	|		duration: 2000,
	//	|		//	note there is no ()
	//	|		easing: dojo.fx.easing.quadIn
	//	|	}).play();
	//
	
	linear: function(/* Decimal? */n){
		// summary: A linear easing function
		return n;
	},

	quadIn: function(/* Decimal? */n){
		return Math.pow(n, 2);
	},

	quadOut: function(/* Decimal? */n){
		return n * (n - 2) * -1;
	},

	quadInOut: function(/* Decimal? */n){
		n = n * 2;
		if(n < 1){ return Math.pow(n, 2) / 2; }
		return -1 * ((--n) * (n - 2) - 1) / 2;
	},

	cubicIn: function(/* Decimal? */n){
		return Math.pow(n, 3);
	},

	cubicOut: function(/* Decimal? */n){
		return Math.pow(n - 1, 3) + 1;
	},

	cubicInOut: function(/* Decimal? */n){
		n = n * 2;
		if(n < 1){ return Math.pow(n, 3) / 2; }
		n -= 2;
		return (Math.pow(n, 3) + 2) / 2;
	},

	quartIn: function(/* Decimal? */n){
		return Math.pow(n, 4);
	},

	quartOut: function(/* Decimal? */n){
		return -1 * (Math.pow(n - 1, 4) - 1);
	},

	quartInOut: function(/* Decimal? */n){
		n = n * 2;
		if(n < 1){ return Math.pow(n, 4) / 2; }
		n -= 2;
		return -1 / 2 * (Math.pow(n, 4) - 2);
	},

	quintIn: function(/* Decimal? */n){
		return Math.pow(n, 5);
	},

	quintOut: function(/* Decimal? */n){
		return Math.pow(n - 1, 5) + 1;
	},

	quintInOut: function(/* Decimal? */n){
		n = n * 2;
		if(n < 1){ return Math.pow(n, 5) / 2; };
		n -= 2;
		return (Math.pow(n, 5) + 2) / 2;
	},

	sineIn: function(/* Decimal? */n){
		return -1 * Math.cos(n * (Math.PI / 2)) + 1;
	},

	sineOut: function(/* Decimal? */n){
		return Math.sin(n * (Math.PI / 2));
	},

	sineInOut: function(/* Decimal? */n){
		return -1 * (Math.cos(Math.PI * n) - 1) / 2;
	},

	expoIn: function(/* Decimal? */n){
		return (n == 0) ? 0 : Math.pow(2, 10 * (n - 1));
	},

	expoOut: function(/* Decimal? */n){
		return (n == 1) ? 1 : (-1 * Math.pow(2, -10 * n) + 1);
	},

	expoInOut: function(/* Decimal? */n){
		if(n == 0){ return 0; }
		if(n == 1){ return 1; }
		n = n * 2;
		if(n < 1){ return Math.pow(2, 10 * (n - 1)) / 2; }
		--n;
		return (-1 * Math.pow(2, -10 * n) + 2) / 2;
	},

	circIn: function(/* Decimal? */n){
		return -1 * (Math.sqrt(1 - Math.pow(n, 2)) - 1);
	},

	circOut: function(/* Decimal? */n){
		n = n - 1;
		return Math.sqrt(1 - Math.pow(n, 2));
	},

	circInOut: function(/* Decimal? */n){
		n = n * 2;
		if(n < 1){ return -1 / 2 * (Math.sqrt(1 - Math.pow(n, 2)) - 1); }
		n -= 2;
		return 1 / 2 * (Math.sqrt(1 - Math.pow(n, 2)) + 1);
	},

	backIn: function(/* Decimal? */n){
		// summary:
		//		An easing function that starts away from the target,
		//		and quickly accelerates towards the end value.
		//
		//		Use caution when the easing will cause values to become
		//		negative as some properties cannot be set to negative values.
		var s = 1.70158;
		return Math.pow(n, 2) * ((s + 1) * n - s);
	},

	backOut: function(/* Decimal? */n){
		// summary:
		//		An easing function that pops past the range briefly, and slowly comes back.
		//
		// description:
		//		An easing function that pops past the range briefly, and slowly comes back.
		//
		//		Use caution when the easing will cause values to become negative as some
		//		properties cannot be set to negative values.
		
		n = n - 1;
		var s = 1.70158;
		return Math.pow(n, 2) * ((s + 1) * n + s) + 1;
	},

	backInOut: function(/* Decimal? */n){
		// summary:
		//		An easing function combining the effects of `backIn` and `backOut`
		//
		// description:
		//		An easing function combining the effects of `backIn` and `backOut`.
		//		Use caution when the easing will cause values to become negative
		//		as some properties cannot be set to negative values.
		var s = 1.70158 * 1.525;
		n = n * 2;
		if(n < 1){ return (Math.pow(n, 2) * ((s + 1) * n - s)) / 2; }
		n-=2;
		return (Math.pow(n, 2) * ((s + 1) * n + s) + 2) / 2;
	},

	elasticIn: function(/* Decimal? */n){
		// summary:
		//		An easing function the elastically snaps from the start value
		//
		// description:
		//		An easing function the elastically snaps from the start value
		//
		//		Use caution when the elasticity will cause values to become negative
		//		as some properties cannot be set to negative values.
		if(n == 0 || n == 1){ return n; }
		var p = .3;
		var s = p / 4;
		n = n - 1;
		return -1 * Math.pow(2, 10 * n) * Math.sin((n - s) * (2 * Math.PI) / p);
	},

	elasticOut: function(/* Decimal? */n){
		// summary:
		//		An easing function that elasticly snaps around the target value,
		//		near the end of the Animation
		//
		// description:
		//		An easing function that elasticly snaps around the target value,
		//		near the end of the Animation
		//
		//		Use caution when the elasticity will cause values to become
		//		negative as some properties cannot be set to negative values.
		if(n==0 || n == 1){ return n; }
		var p = .3;
		var s = p / 4;
		return Math.pow(2, -10 * n) * Math.sin((n - s) * (2 * Math.PI) / p) + 1;
	},

	elasticInOut: function(/* Decimal? */n){
		// summary:
		//		An easing function that elasticly snaps around the value, near
		//		the beginning and end of the Animation.
		//
		// description:
		//		An easing function that elasticly snaps around the value, near
		//		the beginning and end of the Animation.
		//
		//		Use caution when the elasticity will cause values to become
		//		negative as some properties cannot be set to negative values.
		if(n == 0) return 0;
		n = n * 2;
		if(n == 2) return 1;
		var p = .3 * 1.5;
		var s = p / 4;
		if(n < 1){
			n -= 1;
			return -.5 * (Math.pow(2, 10 * n) * Math.sin((n - s) * (2 * Math.PI) / p));
		}
		n -= 1;
		return .5 * (Math.pow(2, -10 * n) * Math.sin((n - s) * (2 * Math.PI) / p)) + 1;
	},

	bounceIn: function(/* Decimal? */n){
		// summary:
		//		An easing function that 'bounces' near the beginning of an Animation
		return (1 - dojo.fx.easing.bounceOut(1 - n)); // Decimal
	},

	bounceOut: function(/* Decimal? */n){
		// summary:
		//		An easing function that 'bounces' near the end of an Animation
		var s = 7.5625;
		var p = 2.75;
		var l;
		if(n < (1 / p)){
			l = s * Math.pow(n, 2);
		}else if(n < (2 / p)){
			n -= (1.5 / p);
			l = s * Math.pow(n, 2) + .75;
		}else if(n < (2.5 / p)){
			n -= (2.25 / p);
			l = s * Math.pow(n, 2) + .9375;
		}else{
			n -= (2.625 / p);
			l = s * Math.pow(n, 2) + .984375;
		}
		return l;
	},

	bounceInOut: function(/* Decimal? */n){
		// summary:
		//		An easing function that 'bounces' at the beginning and end of the Animation
		if(n < 0.5){ return dojo.fx.easing.bounceIn(n * 2) / 2; }
		return (dojo.fx.easing.bounceOut(n * 2 - 1) / 2) + 0.5; // Decimal
	}
};

}

if(!dojo._hasResource["dijit._Contained"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._Contained"] = true;
dojo.provide("dijit._Contained");



dojo.declare("dijit._Contained",
		null,
		{
			// summary:
			//		Mixin for widgets that are children of a container widget
			//
			// example:
			// | 	// make a basic custom widget that knows about it's parents
			// |	dojo.declare("my.customClass",[dijit._Widget,dijit._Contained],{});

			getParent: function(){
				// summary:
				//		Returns the parent widget of this widget, assuming the parent
				//		specifies isContainer
				var parent = dijit.getEnclosingWidget(this.domNode.parentNode);
				return parent && parent.isContainer ? parent : null;
			},

			_getSibling: function(/*String*/ which){
				// summary:
				//      Returns next or previous sibling
				// which:
				//      Either "next" or "previous"
				// tags:
				//      private
				var node = this.domNode;
				do{
					node = node[which+"Sibling"];
				}while(node && node.nodeType != 1);
				return node && dijit.byNode(node);	// dijit._Widget
			},

			getPreviousSibling: function(){
				// summary:
				//		Returns null if this is the first child of the parent,
				//		otherwise returns the next element sibling to the "left".

				return this._getSibling("previous"); // dijit._Widget
			},

			getNextSibling: function(){
				// summary:
				//		Returns null if this is the last child of the parent,
				//		otherwise returns the next element sibling to the "right".

				return this._getSibling("next"); // dijit._Widget
			},

			getIndexInParent: function(){
				// summary:
				//		Returns the index of this widget within its container parent.
				//		It returns -1 if the parent does not exist, or if the parent
				//		is not a dijit._Container

				var p = this.getParent();
				if(!p || !p.getIndexOfChild){
					return -1; // int
				}
				return p.getIndexOfChild(this); // int
			}
		}
	);

}

if(!dojo._hasResource["dijit.layout._LayoutWidget"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout._LayoutWidget"] = true;
dojo.provide("dijit.layout._LayoutWidget");






dojo.declare("dijit.layout._LayoutWidget",
	[dijit._Widget, dijit._Container, dijit._Contained],
	{
		// summary:
		//		Base class for a _Container widget which is responsible for laying out its children.
		//		Widgets which mixin this code must define layout() to manage placement and sizing of the children.

		// baseClass: [protected extension] String
		//		This class name is applied to the widget's domNode
		//		and also may be used to generate names for sub nodes,
		//		for example dijitTabContainer-content.
		baseClass: "dijitLayoutContainer",

		// isLayoutContainer: [protected] Boolean
		//		Indicates that this widget is going to call resize() on its
		//		children widgets, setting their size, when they become visible.
		isLayoutContainer: true,

		buildRendering: function(){
			this.inherited(arguments);
			dojo.addClass(this.domNode, "dijitContainer");
		},

		startup: function(){
			// summary:
			//		Called after all the widgets have been instantiated and their
			//		dom nodes have been inserted somewhere under dojo.doc.body.
			//
			//		Widgets should override this method to do any initialization
			//		dependent on other widgets existing, and then call
			//		this superclass method to finish things off.
			//
			//		startup() in subclasses shouldn't do anything
			//		size related because the size of the widget hasn't been set yet.

			if(this._started){ return; }

			// Need to call inherited first - so that child widgets get started
			// up correctly
			this.inherited(arguments);

			// If I am a not being controlled by a parent layout widget...
			var parent = this.getParent && this.getParent()
			if(!(parent && parent.isLayoutContainer)){
				// Do recursive sizing and layout of all my descendants
				// (passing in no argument to resize means that it has to glean the size itself)
				this.resize();

				// Since my parent isn't a layout container, and my style *may be* width=height=100%
				// or something similar (either set directly or via a CSS class),
				// monitor when my size changes so that I can re-layout.
				// For browsers where I can't directly monitor when my size changes,
				// monitor when the viewport changes size, which *may* indicate a size change for me.
				this.connect(dojo.isIE ? this.domNode : dojo.global, 'onresize', function(){
					// Using function(){} closure to ensure no arguments to resize.
					this.resize();
				});
			}
		},

		resize: function(changeSize, resultSize){
			// summary:
			//		Call this to resize a widget, or after its size has changed.
			// description:
			//		Change size mode:
			//			When changeSize is specified, changes the marginBox of this widget
			//			and forces it to relayout its contents accordingly.
			//			changeSize may specify height, width, or both.
			//
			//			If resultSize is specified it indicates the size the widget will
			//			become after changeSize has been applied.
			//
			//		Notification mode:
			//			When changeSize is null, indicates that the caller has already changed
			//			the size of the widget, or perhaps it changed because the browser
			//			window was resized.  Tells widget to relayout its contents accordingly.
			//
			//			If resultSize is also specified it indicates the size the widget has
			//			become.
			//
			//		In either mode, this method also:
			//			1. Sets this._borderBox and this._contentBox to the new size of
			//				the widget.  Queries the current domNode size if necessary.
			//			2. Calls layout() to resize contents (and maybe adjust child widgets).
			//
			// changeSize: Object?
			//		Sets the widget to this margin-box size and position.
			//		May include any/all of the following properties:
			//	|	{w: int, h: int, l: int, t: int}
			//
			// resultSize: Object?
			//		The margin-box size of this widget after applying changeSize (if
			//		changeSize is specified).  If caller knows this size and
			//		passes it in, we don't need to query the browser to get the size.
			//	|	{w: int, h: int}

			var node = this.domNode;

			// set margin box size, unless it wasn't specified, in which case use current size
			if(changeSize){
				dojo.marginBox(node, changeSize);

				// set offset of the node
				if(changeSize.t){ node.style.top = changeSize.t + "px"; }
				if(changeSize.l){ node.style.left = changeSize.l + "px"; }
			}

			// If either height or width wasn't specified by the user, then query node for it.
			// But note that setting the margin box and then immediately querying dimensions may return
			// inaccurate results, so try not to depend on it.
			var mb = resultSize || {};
			dojo.mixin(mb, changeSize || {});	// changeSize overrides resultSize
			if( !("h" in mb) || !("w" in mb) ){
				mb = dojo.mixin(dojo.marginBox(node), mb);	// just use dojo.marginBox() to fill in missing values
			}

			// Compute and save the size of my border box and content box
			// (w/out calling dojo.contentBox() since that may fail if size was recently set)
			var cs = dojo.getComputedStyle(node);
			var me = dojo._getMarginExtents(node, cs);
			var be = dojo._getBorderExtents(node, cs);
			var bb = (this._borderBox = {
				w: mb.w - (me.w + be.w),
				h: mb.h - (me.h + be.h)
			});
			var pe = dojo._getPadExtents(node, cs);
			this._contentBox = {
				l: dojo._toPixelValue(node, cs.paddingLeft),
				t: dojo._toPixelValue(node, cs.paddingTop),
				w: bb.w - pe.w,
				h: bb.h - pe.h
			};

			// Callback for widget to adjust size of its children
			this.layout();
		},

		layout: function(){
			// summary:
			//		Widgets override this method to size and position their contents/children.
			//		When this is called this._contentBox is guaranteed to be set (see resize()).
			//
			//		This is called after startup(), and also when the widget's size has been
			//		changed.
			// tags:
			//		protected extension
		},

		_setupChild: function(/*dijit._Widget*/child){
			// summary:
			//		Common setup for initial children and children which are added after startup
			// tags:
			//		protected extension

			var cls = this.baseClass + "-child "
				+ (child.baseClass ? this.baseClass + "-" + child.baseClass : "");
			dojo.addClass(child.domNode, cls);
		},

		addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
			// Overrides _Container.addChild() to call _setupChild()
			this.inherited(arguments);
			if(this._started){
				this._setupChild(child);
			}
		},

		removeChild: function(/*dijit._Widget*/ child){
			// Overrides _Container.removeChild() to remove class added by _setupChild()
			var cls = this.baseClass + "-child"
					+ (child.baseClass ?
						" " + this.baseClass + "-" + child.baseClass : "");
			dojo.removeClass(child.domNode, cls);
			
			this.inherited(arguments);
		}
	}
);

dijit.layout.marginBox2contentBox = function(/*DomNode*/ node, /*Object*/ mb){
	// summary:
	//		Given the margin-box size of a node, return its content box size.
	//		Functions like dojo.contentBox() but is more reliable since it doesn't have
	//		to wait for the browser to compute sizes.
	var cs = dojo.getComputedStyle(node);
	var me = dojo._getMarginExtents(node, cs);
	var pb = dojo._getPadBorderExtents(node, cs);
	return {
		l: dojo._toPixelValue(node, cs.paddingLeft),
		t: dojo._toPixelValue(node, cs.paddingTop),
		w: mb.w - (me.w + pb.w),
		h: mb.h - (me.h + pb.h)
	};
};

(function(){
	var capitalize = function(word){
		return word.substring(0,1).toUpperCase() + word.substring(1);
	};

	var size = function(widget, dim){
		// size the child
		var newSize = widget.resize ? widget.resize(dim) : dojo.marginBox(widget.domNode, dim);

		// record child's size
		if(newSize){
			// if the child returned it's new size then use that
			dojo.mixin(widget, newSize);
		}else{
			// otherwise, call marginBox(), but favor our own numbers when we have them.
			// the browser lies sometimes
			dojo.mixin(widget, dojo.marginBox(widget.domNode));
			dojo.mixin(widget, dim);
		}
	};

	dijit.layout.layoutChildren = function(/*DomNode*/ container, /*Object*/ dim, /*Widget[]*/ children,
			/*String?*/ changedRegionId, /*Number?*/ changedRegionSize){
		// summary
		//		Layout a bunch of child dom nodes within a parent dom node
		// container:
		//		parent node
		// dim:
		//		{l, t, w, h} object specifying dimensions of container into which to place children
		// children:
		//		an array of Widgets or at least objects containing:
		//			* domNode: pointer to DOM node to position
		//			* region or layoutAlign: position to place DOM node
		//			* resize(): (optional) method to set size of node
		//			* id: (optional) Id of widgets, referenced from resize object, below.
		// changedRegionId:
		//		If specified, the slider for the region with the specified id has been dragged, and thus
		//		the region's height or width should be adjusted according to changedRegionSize
		// changedRegionSize:
		//		See changedRegionId.

		// copy dim because we are going to modify it
		dim = dojo.mixin({}, dim);

		dojo.addClass(container, "dijitLayoutContainer");

		// Move "client" elements to the end of the array for layout.  a11y dictates that the author
		// needs to be able to put them in the document in tab-order, but this algorithm requires that
		// client be last.    TODO: move these lines to LayoutContainer?   Unneeded other places I think.
		children = dojo.filter(children, function(item){ return item.region != "center" && item.layoutAlign != "client"; })
			.concat(dojo.filter(children, function(item){ return item.region == "center" || item.layoutAlign == "client"; }));

		// set positions/sizes
		dojo.forEach(children, function(child){
			var elm = child.domNode,
				pos = (child.region || child.layoutAlign);

			// set elem to upper left corner of unused space; may move it later
			var elmStyle = elm.style;
			elmStyle.left = dim.l+"px";
			elmStyle.top = dim.t+"px";
			elmStyle.position = "absolute";

			dojo.addClass(elm, "dijitAlign" + capitalize(pos));

			// Size adjustments to make to this child widget
			var sizeSetting = {};

			// Check for optional size adjustment due to splitter drag (height adjustment for top/bottom align
			// panes and width adjustment for left/right align panes.
			if(changedRegionId && changedRegionId == child.id){
				sizeSetting[child.region == "top" || child.region == "bottom" ? "h" : "w"] = changedRegionSize;
			}

			// set size && adjust record of remaining space.
			// note that setting the width of a <div> may affect its height.
			if(pos == "top" || pos == "bottom"){
				sizeSetting.w = dim.w;
				size(child, sizeSetting);
				dim.h -= child.h;
				if(pos == "top"){
					dim.t += child.h;
				}else{
					elmStyle.top = dim.t + dim.h + "px";
				}
			}else if(pos == "left" || pos == "right"){
				sizeSetting.h = dim.h;
				size(child, sizeSetting);
				dim.w -= child.w;
				if(pos == "left"){
					dim.l += child.w;
				}else{
					elmStyle.left = dim.l + dim.w + "px";
				}
			}else if(pos == "client" || pos == "center"){
				size(child, dim);
			}
		});
	};

})();

}

if(!dojo._hasResource["dojo.regexp"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.regexp"] = true;
dojo.provide("dojo.regexp");


dojo.getObject("regexp", true, dojo);

/*=====
dojo.regexp = {
	// summary: Regular expressions and Builder resources
};
=====*/

dojo.regexp.escapeString = function(/*String*/str, /*String?*/except){
	//	summary:
	//		Adds escape sequences for special characters in regular expressions
	// except:
	//		a String with special characters to be left unescaped

	return str.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, function(ch){
		if(except && except.indexOf(ch) != -1){
			return ch;
		}
		return "\\" + ch;
	}); // String
};

dojo.regexp.buildGroupRE = function(/*Object|Array*/arr, /*Function*/re, /*Boolean?*/nonCapture){
	//	summary:
	//		Builds a regular expression that groups subexpressions
	//	description:
	//		A utility function used by some of the RE generators. The
	//		subexpressions are constructed by the function, re, in the second
	//		parameter.  re builds one subexpression for each elem in the array
	//		a, in the first parameter. Returns a string for a regular
	//		expression that groups all the subexpressions.
	// arr:
	//		A single value or an array of values.
	// re:
	//		A function. Takes one parameter and converts it to a regular
	//		expression.
	// nonCapture:
	//		If true, uses non-capturing match, otherwise matches are retained
	//		by regular expression. Defaults to false

	// case 1: a is a single value.
	if(!(arr instanceof Array)){
		return re(arr); // String
	}

	// case 2: a is an array
	var b = [];
	for(var i = 0; i < arr.length; i++){
		// convert each elem to a RE
		b.push(re(arr[i]));
	}

	 // join the REs as alternatives in a RE group.
	return dojo.regexp.group(b.join("|"), nonCapture); // String
};

dojo.regexp.group = function(/*String*/expression, /*Boolean?*/nonCapture){
	// summary:
	//		adds group match to expression
	// nonCapture:
	//		If true, uses non-capturing match, otherwise matches are retained
	//		by regular expression.
	return "(" + (nonCapture ? "?:":"") + expression + ")"; // String
};

}

if(!dojo._hasResource["dojo.cookie"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.cookie"] = true;
dojo.provide("dojo.cookie");




/*=====
dojo.__cookieProps = function(){
	//	expires: Date|String|Number?
	//		If a number, the number of days from today at which the cookie
	//		will expire. If a date, the date past which the cookie will expire.
	//		If expires is in the past, the cookie will be deleted.
	//		If expires is omitted or is 0, the cookie will expire when the browser closes. << FIXME: 0 seems to disappear right away? FF3.
	//	path: String?
	//		The path to use for the cookie.
	//	domain: String?
	//		The domain to use for the cookie.
	//	secure: Boolean?
	//		Whether to only send the cookie on secure connections
	this.expires = expires;
	this.path = path;
	this.domain = domain;
	this.secure = secure;
}
=====*/


dojo.cookie = function(/*String*/name, /*String?*/value, /*dojo.__cookieProps?*/props){
	//	summary:
	//		Get or set a cookie.
	//	description:
	// 		If one argument is passed, returns the value of the cookie
	// 		For two or more arguments, acts as a setter.
	//	name:
	//		Name of the cookie
	//	value:
	//		Value for the cookie
	//	props:
	//		Properties for the cookie
	//	example:
	//		set a cookie with the JSON-serialized contents of an object which
	//		will expire 5 days from now:
	//	|	dojo.cookie("configObj", dojo.toJson(config), { expires: 5 });
	//
	//	example:
	//		de-serialize a cookie back into a JavaScript object:
	//	|	var config = dojo.fromJson(dojo.cookie("configObj"));
	//
	//	example:
	//		delete a cookie:
	//	|	dojo.cookie("configObj", null, {expires: -1});
	var c = document.cookie;
	if(arguments.length == 1){
		var matches = c.match(new RegExp("(?:^|; )" + dojo.regexp.escapeString(name) + "=([^;]*)"));
		return matches ? decodeURIComponent(matches[1]) : undefined; // String or undefined
	}else{
		props = props || {};
// FIXME: expires=0 seems to disappear right away, not on close? (FF3)  Change docs?
		var exp = props.expires;
		if(typeof exp == "number"){
			var d = new Date();
			d.setTime(d.getTime() + exp*24*60*60*1000);
			exp = props.expires = d;
		}
		if(exp && exp.toUTCString){ props.expires = exp.toUTCString(); }

		value = encodeURIComponent(value);
		var updatedCookie = name + "=" + value, propName;
		for(propName in props){
			updatedCookie += "; " + propName;
			var propValue = props[propName];
			if(propValue !== true){ updatedCookie += "=" + propValue; }
		}
		document.cookie = updatedCookie;
	}
};

dojo.cookie.isSupported = function(){
	//	summary:
	//		Use to determine if the current browser supports cookies or not.
	//
	//		Returns true if user allows cookies.
	//		Returns false if user doesn't allow cookies.

	if(!("cookieEnabled" in navigator)){
		this("__djCookieTest__", "CookiesAllowed");
		navigator.cookieEnabled = this("__djCookieTest__") == "CookiesAllowed";
		if(navigator.cookieEnabled){
			this("__djCookieTest__", "", {expires: -1});
		}
	}
	return navigator.cookieEnabled;
};

}

if(!dojo._hasResource["dijit.layout.BorderContainer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.BorderContainer"] = true;
dojo.provide("dijit.layout.BorderContainer");






dojo.declare(
	"dijit.layout.BorderContainer",
	dijit.layout._LayoutWidget,
{
	// summary:
	//		Provides layout in up to 5 regions, a mandatory center with optional borders along its 4 sides.
	//
	// description:
	//		A BorderContainer is a box with a specified size, such as style="width: 500px; height: 500px;",
	//		that contains a child widget marked region="center" and optionally children widgets marked
	//		region equal to "top", "bottom", "leading", "trailing", "left" or "right".
	//		Children along the edges will be laid out according to width or height dimensions and may
	//		include optional splitters (splitter="true") to make them resizable by the user.  The remaining
	//		space is designated for the center region.
	//
	//		The outer size must be specified on the BorderContainer node.  Width must be specified for the sides
	//		and height for the top and bottom, respectively.  No dimensions should be specified on the center;
	//		it will fill the remaining space.  Regions named "leading" and "trailing" may be used just like
	//		"left" and "right" except that they will be reversed in right-to-left environments.
	//
	//		For complex layouts, multiple children can be specified for a single region.   In this case, the
	//		layoutPriority flag on the children determines which child is closer to the edge (low layoutPriority)
	//		and which child is closer to the center (high layoutPriority).   layoutPriority can also be used
	//		instead of the design attribute to conrol layout precedence of horizontal vs. vertical panes.
	// example:
	// |	<div dojoType="dijit.layout.BorderContainer" design="sidebar" gutters="false"
	// |            style="width: 400px; height: 300px;">
	// |		<div dojoType="dijit.layout.ContentPane" region="top">header text</div>
	// |		<div dojoType="dijit.layout.ContentPane" region="right" splitter="true" style="width: 200px;">table of contents</div>
	// |		<div dojoType="dijit.layout.ContentPane" region="center">client area</div>
	// |	</div>

	// design: String
	//		Which design is used for the layout:
	//			- "headline" (default) where the top and bottom extend
	//				the full width of the container
	//			- "sidebar" where the left and right sides extend from top to bottom.
	design: "headline",

	// gutters: [const] Boolean
	//		Give each pane a border and margin.
	//		Margin determined by domNode.paddingLeft.
	//		When false, only resizable panes have a gutter (i.e. draggable splitter) for resizing.
	gutters: true,

	// liveSplitters: [const] Boolean
	//		Specifies whether splitters resize as you drag (true) or only upon mouseup (false)
	liveSplitters: true,

	// persist: Boolean
	//		Save splitter positions in a cookie.
	persist: false,

	baseClass: "dijitBorderContainer",

	// _splitterClass: String
	// 		Optional hook to override the default Splitter widget used by BorderContainer
	_splitterClass: "dijit.layout._Splitter",

	postMixInProperties: function(){
		// change class name to indicate that BorderContainer is being used purely for
		// layout (like LayoutContainer) rather than for pretty formatting.
		if(!this.gutters){
			this.baseClass += "NoGutter";
		}
		this.inherited(arguments);
	},

	startup: function(){
		if(this._started){ return; }
		dojo.forEach(this.getChildren(), this._setupChild, this);
		this.inherited(arguments);
	},

	_setupChild: function(/*dijit._Widget*/ child){
		// Override _LayoutWidget._setupChild().

		var region = child.region;
		if(region){
			this.inherited(arguments);

			dojo.addClass(child.domNode, this.baseClass+"Pane");

			var ltr = this.isLeftToRight();
			if(region == "leading"){ region = ltr ? "left" : "right"; }
			if(region == "trailing"){ region = ltr ? "right" : "left"; }

			// Create draggable splitter for resizing pane,
			// or alternately if splitter=false but BorderContainer.gutters=true then
			// insert dummy div just for spacing
			if(region != "center" && (child.splitter || this.gutters) && !child._splitterWidget){
				var _Splitter = dojo.getObject(child.splitter ? this._splitterClass : "dijit.layout._Gutter");
				var splitter = new _Splitter({
					id: child.id + "_splitter",
					container: this,
					child: child,
					region: region,
					live: this.liveSplitters
				});
				splitter.isSplitter = true;
				child._splitterWidget = splitter;

				dojo.place(splitter.domNode, child.domNode, "after");

				// Splitters aren't added as Contained children, so we need to call startup explicitly
				splitter.startup();
			}
			child.region = region;	// TODO: technically wrong since it overwrites "trailing" with "left" etc.
		}
	},

	layout: function(){
		// Implement _LayoutWidget.layout() virtual method.
		this._layoutChildren();
	},

	addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
		// Override _LayoutWidget.addChild().
		this.inherited(arguments);
		if(this._started){
			this.layout(); //OPT
		}
	},

	removeChild: function(/*dijit._Widget*/ child){
		// Override _LayoutWidget.removeChild().

		var region = child.region;
		var splitter = child._splitterWidget
		if(splitter){
			splitter.destroy();
			delete child._splitterWidget;
		}
		this.inherited(arguments);
		
		if(this._started){
			this._layoutChildren();
		}
		// Clean up whatever style changes we made to the child pane.
		// Unclear how height and width should be handled.
		dojo.removeClass(child.domNode, this.baseClass+"Pane");
		dojo.style(child.domNode, {
			top: "auto",
			bottom: "auto",
			left: "auto",
			right: "auto",
			position: "static"
		});
		dojo.style(child.domNode, region == "top" || region == "bottom" ? "width" : "height", "auto");
	},

	getChildren: function(){
		// Override _LayoutWidget.getChildren() to only return real children, not the splitters.
		return dojo.filter(this.inherited(arguments), function(widget){
			return !widget.isSplitter;
		});
	},

	// TODO: remove in 2.0
	getSplitter: function(/*String*/region){
		// summary:
		//		Returns the widget responsible for rendering the splitter associated with region
		// tags:
		//		deprecated
		return dojo.filter(this.getChildren(), function(child){
			return child.region == region;
		})[0]._splitterWidget;
	},

	resize: function(newSize, currentSize){
		// Overrides _LayoutWidget.resize().

		// resetting potential padding to 0px to provide support for 100% width/height + padding
		// TODO: this hack doesn't respect the box model and is a temporary fix
		if(!this.cs || !this.pe){
			var node = this.domNode;
			this.cs = dojo.getComputedStyle(node);
			this.pe = dojo._getPadExtents(node, this.cs);
			this.pe.r = dojo._toPixelValue(node, this.cs.paddingRight);
			this.pe.b = dojo._toPixelValue(node, this.cs.paddingBottom);

			dojo.style(node, "padding", "0px");
		}

		this.inherited(arguments);
	},

	_layoutChildren: function(/*String?*/ changedChildId, /*Number?*/ changedChildSize){
		// summary:
		//		This is the main routine for setting size/position of each child.
		// description:
		//		With no arguments, measures the height of top/bottom panes, the width
		//		of left/right panes, and then sizes all panes accordingly.
		//
		//		With changedRegion specified (as "left", "top", "bottom", or "right"),
		//		it changes that region's width/height to changedRegionSize and
		//		then resizes other regions that were affected.
		// changedChildId:
		//		Id of the child which should be resized because splitter was dragged.
		// changedChildSize:
		//		The new width/height (in pixels) to make specified child

		if(!this._borderBox || !this._borderBox.h){
			// We are currently hidden, or we haven't been sized by our parent yet.
			// Abort.   Someone will resize us later.
			return;
		}

		// Generate list of wrappers of my children in the order that I want layoutChildren()
		// to process them (i.e. from the outside to the inside)
		var wrappers = dojo.map(this.getChildren(), function(child, idx){
			return {
				pane: child,
				weight: [
					child.region == "center" ? Infinity : 0,
					child.layoutPriority,
					(this.design == "sidebar" ? 1 : -1) * (/top|bottom/.test(child.region) ? 1 : -1),
					idx
				]
			};
		}, this);
		wrappers.sort(function(a, b){
			var aw = a.weight, bw = b.weight;
			for(var i=0; i<aw.length; i++){
				if(aw[i] != bw[i]){
					return aw[i] - bw[i];
				}
			}
			return 0;
		});

		// Make new list, combining the externally specified children with splitters and gutters
		var childrenAndSplitters = [];
		dojo.forEach(wrappers, function(wrapper){
			var pane = wrapper.pane;
			childrenAndSplitters.push(pane);
			if(pane._splitterWidget){
				childrenAndSplitters.push(pane._splitterWidget);
			}
		});

		// Compute the box in which to lay out my children
		var dim = {
			l: this.pe.l,
			t: this.pe.t,
			w: this._borderBox.w - this.pe.w,
			h: this._borderBox.h - this.pe.h
		};

		// Layout the children, possibly changing size due to a splitter drag
		dijit.layout.layoutChildren(this.domNode, dim, childrenAndSplitters,
			changedChildId, changedChildSize);
	},

	destroyRecursive: function(){
		// Destroy splitters first, while getChildren() still works
		dojo.forEach(this.getChildren(), function(child){
			var splitter = child._splitterWidget;
			if(splitter){
				splitter.destroy();
			}
			delete child._splitterWidget;
		});

		// Then destroy the real children, and myself
		this.inherited(arguments);
	}
});

// This argument can be specified for the children of a BorderContainer.
// Since any widget can be specified as a LayoutContainer child, mix it
// into the base widget class.  (This is a hack, but it's effective.)
dojo.extend(dijit._Widget, {
	// region: [const] String
	//		Parameter for children of `dijit.layout.BorderContainer`.
	//		Values: "top", "bottom", "leading", "trailing", "left", "right", "center".
	//		See the `dijit.layout.BorderContainer` description for details.
	region: '',

	// layoutPriority: [const] Number
	//		Parameter for children of `dijit.layout.BorderContainer`.
	//		Children with a higher layoutPriority will be placed closer to the BorderContainer center,
	//		between children with a lower layoutPriority.
	layoutPriority: 0,

	// splitter: [const] Boolean
	//		Parameter for child of `dijit.layout.BorderContainer` where region != "center".
	//		If true, enables user to resize the widget by putting a draggable splitter between
	//		this widget and the region=center widget.
	splitter: false,

	// minSize: [const] Number
	//		Parameter for children of `dijit.layout.BorderContainer`.
	//		Specifies a minimum size (in pixels) for this widget when resized by a splitter.
	minSize: 0,

	// maxSize: [const] Number
	//		Parameter for children of `dijit.layout.BorderContainer`.
	//		Specifies a maximum size (in pixels) for this widget when resized by a splitter.
	maxSize: Infinity
});

dojo.declare("dijit.layout._Splitter", [ dijit._Widget, dijit._Templated ],
{
	// summary:
	//		A draggable spacer between two items in a `dijit.layout.BorderContainer`.
	// description:
	//		This is instantiated by `dijit.layout.BorderContainer`.  Users should not
	//		create it directly.
	// tags:
	//		private

/*=====
 	// container: [const] dijit.layout.BorderContainer
 	//		Pointer to the parent BorderContainer
	container: null,

	// child: [const] dijit.layout._LayoutWidget
	//		Pointer to the pane associated with this splitter
	child: null,

	// region: [const] String
	//		Region of pane associated with this splitter.
	//		"top", "bottom", "left", "right".
	region: null,
=====*/

	// live: [const] Boolean
	//		If true, the child's size changes and the child widget is redrawn as you drag the splitter;
	//		otherwise, the size doesn't change until you drop the splitter (by mouse-up)
	live: true,

	templateString: '<div class="dijitSplitter" dojoAttachEvent="onkeypress:_onKeyPress,onmousedown:_startDrag,onmouseenter:_onMouse,onmouseleave:_onMouse" tabIndex="0" role="separator"><div class="dijitSplitterThumb"></div></div>',

	postMixInProperties: function(){
		this.inherited(arguments);

		this.horizontal = /top|bottom/.test(this.region);
		this._factor = /top|left/.test(this.region) ? 1 : -1;
		this._cookieName = this.container.id + "_" + this.region;
	},

	buildRendering: function(){
		this.inherited(arguments);

		dojo.addClass(this.domNode, "dijitSplitter" + (this.horizontal ? "H" : "V"));

		if(this.container.persist){
			// restore old size
			var persistSize = dojo.cookie(this._cookieName);
			if(persistSize){
				this.child.domNode.style[this.horizontal ? "height" : "width"] = persistSize;
			}
		}
	},

	_computeMaxSize: function(){
		// summary:
		//		Return the maximum size that my corresponding pane can be set to

		var dim = this.horizontal ? 'h' : 'w',
			childSize = dojo.marginBox(this.child.domNode)[dim],
			center = dojo.filter(this.container.getChildren(), function(child){ return child.region == "center";})[0],
			spaceAvailable = dojo.marginBox(center.domNode)[dim];	// can expand until center is crushed to 0

		return Math.min(this.child.maxSize, childSize + spaceAvailable);
	},

	_startDrag: function(e){
		if(!this.cover){
			this.cover = dojo.doc.createElement('div');
			dojo.addClass(this.cover, "dijitSplitterCover");
			dojo.place(this.cover, this.child.domNode, "after");
		}
		dojo.addClass(this.cover, "dijitSplitterCoverActive");

		// Safeguard in case the stop event was missed.  Shouldn't be necessary if we always get the mouse up.
		if(this.fake){ dojo.destroy(this.fake); }
		if(!(this._resize = this.live)){ //TODO: disable live for IE6?
			// create fake splitter to display at old position while we drag
			(this.fake = this.domNode.cloneNode(true)).removeAttribute("id");
			dojo.addClass(this.domNode, "dijitSplitterShadow");
			dojo.place(this.fake, this.domNode, "after");
		}
		dojo.addClass(this.domNode, "dijitSplitterActive dijitSplitter" + (this.horizontal ? "H" : "V") + "Active");
		if(this.fake){
			dojo.removeClass(this.fake, "dijitSplitterHover dijitSplitter" + (this.horizontal ? "H" : "V") + "Hover");
		}

		//Performance: load data info local vars for onmousevent function closure
		var factor = this._factor,
			isHorizontal = this.horizontal,
			axis = isHorizontal ? "pageY" : "pageX",
			pageStart = e[axis],
			splitterStyle = this.domNode.style,
			dim = isHorizontal ? 'h' : 'w',
			childStart = dojo.marginBox(this.child.domNode)[dim],
			max = this._computeMaxSize(),
			min = this.child.minSize || 20,
			region = this.region,
			splitterAttr = region == "top" || region == "bottom" ? "top" : "left",	// style attribute of splitter to adjust
			splitterStart = parseInt(splitterStyle[splitterAttr], 10),
			resize = this._resize,
			layoutFunc = dojo.hitch(this.container, "_layoutChildren", this.child.id),
			de = dojo.doc;

		this._handlers = (this._handlers || []).concat([
			dojo.connect(de, "onmousemove", this._drag = function(e, forceResize){
				var delta = e[axis] - pageStart,
					childSize = factor * delta + childStart,
					boundChildSize = Math.max(Math.min(childSize, max), min);

				if(resize || forceResize){
					layoutFunc(boundChildSize);
				}
				// TODO: setting style directly (usually) sets content box size, need to set margin box size
				splitterStyle[splitterAttr] = delta + splitterStart + factor*(boundChildSize - childSize) + "px";
			}),
			dojo.connect(de, "ondragstart", dojo.stopEvent),
			dojo.connect(dojo.body(), "onselectstart", dojo.stopEvent),
			dojo.connect(de, "onmouseup", this, "_stopDrag")
		]);
		dojo.stopEvent(e);
	},

	_onMouse: function(e){
		var o = (e.type == "mouseover" || e.type == "mouseenter");
		dojo.toggleClass(this.domNode, "dijitSplitterHover", o);
		dojo.toggleClass(this.domNode, "dijitSplitter" + (this.horizontal ? "H" : "V") + "Hover", o);
	},

	_stopDrag: function(e){
		try{
			if(this.cover){
				dojo.removeClass(this.cover, "dijitSplitterCoverActive");
			}
			if(this.fake){ dojo.destroy(this.fake); }
			dojo.removeClass(this.domNode, "dijitSplitterActive dijitSplitter"
				+ (this.horizontal ? "H" : "V") + "Active dijitSplitterShadow");
			this._drag(e); //TODO: redundant with onmousemove?
			this._drag(e, true);
		}finally{
			this._cleanupHandlers();
			delete this._drag;
		}

		if(this.container.persist){
			dojo.cookie(this._cookieName, this.child.domNode.style[this.horizontal ? "height" : "width"], {expires:365});
		}
	},

	_cleanupHandlers: function(){
		dojo.forEach(this._handlers, dojo.disconnect);
		delete this._handlers;
	},

	_onKeyPress: function(/*Event*/ e){
		// should we apply typematic to this?
		this._resize = true;
		var horizontal = this.horizontal;
		var tick = 1;
		var dk = dojo.keys;
		switch(e.charOrCode){
			case horizontal ? dk.UP_ARROW : dk.LEFT_ARROW:
				tick *= -1;
//				break;
			case horizontal ? dk.DOWN_ARROW : dk.RIGHT_ARROW:
				break;
			default:
//				this.inherited(arguments);
				return;
		}
		var childSize = dojo._getMarginSize(this.child.domNode)[ horizontal ? 'h' : 'w' ] + this._factor * tick;
		this.container._layoutChildren(this.child.id, Math.max(Math.min(childSize, this._computeMaxSize()), this.child.minSize));
		dojo.stopEvent(e);
	},

	destroy: function(){
		this._cleanupHandlers();
		delete this.child;
		delete this.container;
		delete this.cover;
		delete this.fake;
		this.inherited(arguments);
	}
});

dojo.declare("dijit.layout._Gutter", [dijit._Widget, dijit._Templated],
{
	// summary:
	// 		Just a spacer div to separate side pane from center pane.
	//		Basically a trick to lookup the gutter/splitter width from the theme.
	// description:
	//		Instantiated by `dijit.layout.BorderContainer`.  Users should not
	//		create directly.
	// tags:
	//		private

	templateString: '<div class="dijitGutter" role="presentation"></div>',

	postMixInProperties: function(){
		this.inherited(arguments);
		this.horizontal = /top|bottom/.test(this.region);
	},

	buildRendering: function(){
		this.inherited(arguments);
		dojo.addClass(this.domNode, "dijitGutter" + (this.horizontal ? "H" : "V"));
	}
});

}

if(!dojo._hasResource["dijit._CssStateMixin"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._CssStateMixin"] = true;
dojo.provide("dijit._CssStateMixin");



dojo.declare("dijit._CssStateMixin", [], {
	// summary:
	//		Mixin for widgets to set CSS classes on the widget DOM nodes depending on hover/mouse press/focus
	//		state changes, and also higher-level state changes such becoming disabled or selected.
	//
	// description:
	//		By mixing this class into your widget, and setting the this.baseClass attribute, it will automatically
	//		maintain CSS classes on the widget root node (this.domNode) depending on hover,
	//		active, focus, etc. state.   Ex: with a baseClass of dijitButton, it will apply the classes
	//		dijitButtonHovered and dijitButtonActive, as the user moves the mouse over the widget and clicks it.
	//
	//		It also sets CSS like dijitButtonDisabled based on widget semantic state.
	//
	//		By setting the cssStateNodes attribute, a widget can also track events on subnodes (like buttons
	//		within the widget).

	// cssStateNodes: [protected] Object
	//		List of sub-nodes within the widget that need CSS classes applied on mouse hover/press and focus
	//.
	//		Each entry in the hash is a an attachpoint names (like "upArrowButton") mapped to a CSS class names
	//		(like "dijitUpArrowButton"). Example:
	//	|		{
	//	|			"upArrowButton": "dijitUpArrowButton",
	//	|			"downArrowButton": "dijitDownArrowButton"
	//	|		}
	//		The above will set the CSS class dijitUpArrowButton to the this.upArrowButton DOMNode when it
	//		is hovered, etc.
	cssStateNodes: {},

	// hovering: [readonly] Boolean
	//		True if cursor is over this widget
	hovering: false,
	
	// active: [readonly] Boolean
	//		True if mouse was pressed while over this widget, and hasn't been released yet
	active: false,

	_applyAttributes: function(){
		// This code would typically be in postCreate(), but putting in _applyAttributes() for
		// performance: so the class changes happen before DOM is inserted into the document.
		// Change back to postCreate() in 2.0.  See #11635.

		this.inherited(arguments);

		// Automatically monitor mouse events (essentially :hover and :active) on this.domNode
		dojo.forEach(["onmouseenter", "onmouseleave", "onmousedown"], function(e){
			this.connect(this.domNode, e, "_cssMouseEvent");
		}, this);
		
		// Monitoring changes to disabled, readonly, etc. state, and update CSS class of root node
		dojo.forEach(["disabled", "readOnly", "checked", "selected", "focused", "state", "hovering", "active"], function(attr){
			this.watch(attr, dojo.hitch(this, "_setStateClass"));
		}, this);

		// Events on sub nodes within the widget
		for(var ap in this.cssStateNodes){
			this._trackMouseState(this[ap], this.cssStateNodes[ap]);
		}
		// Set state initially; there's probably no hover/active/focus state but widget might be
		// disabled/readonly/checked/selected so we want to set CSS classes for those conditions.
		this._setStateClass();
	},

	_cssMouseEvent: function(/*Event*/ event){
		// summary:
		//	Sets hovering and active properties depending on mouse state,
		//	which triggers _setStateClass() to set appropriate CSS classes for this.domNode.

		if(!this.disabled){
			switch(event.type){
				case "mouseenter":
				case "mouseover":	// generated on non-IE browsers even though we connected to mouseenter
					this._set("hovering", true);
					this._set("active", this._mouseDown);
					break;

				case "mouseleave":
				case "mouseout":	// generated on non-IE browsers even though we connected to mouseleave
					this._set("hovering", false);
					this._set("active", false);
					break;

				case "mousedown" :
					this._set("active", true);
					this._mouseDown = true;
					// Set a global event to handle mouseup, so it fires properly
					// even if the cursor leaves this.domNode before the mouse up event.
					// Alternately could set active=false on mouseout.
					var mouseUpConnector = this.connect(dojo.body(), "onmouseup", function(){
						this._mouseDown = false;
						this._set("active", false);
						this.disconnect(mouseUpConnector);
					});
					break;
			}
		}
	},

	_setStateClass: function(){
		// summary:
		//		Update the visual state of the widget by setting the css classes on this.domNode
		//		(or this.stateNode if defined) by combining this.baseClass with
		//		various suffixes that represent the current widget state(s).
		//
		// description:
		//		In the case where a widget has multiple
		//		states, it sets the class based on all possible
		//	 	combinations.  For example, an invalid form widget that is being hovered
		//		will be "dijitInput dijitInputInvalid dijitInputHover dijitInputInvalidHover".
		//
		//		The widget may have one or more of the following states, determined
		//		by this.state, this.checked, this.valid, and this.selected:
		//			- Error - ValidationTextBox sets this.state to "Error" if the current input value is invalid
		//			- Incomplete - ValidationTextBox sets this.state to "Incomplete" if the current input value is not finished yet
		//			- Checked - ex: a checkmark or a ToggleButton in a checked state, will have this.checked==true
		//			- Selected - ex: currently selected tab will have this.selected==true
		//
		//		In addition, it may have one or more of the following states,
		//		based on this.disabled and flags set in _onMouse (this.active, this.hovering) and from focus manager (this.focused):
		//			- Disabled	- if the widget is disabled
		//			- Active		- if the mouse (or space/enter key?) is being pressed down
		//			- Focused		- if the widget has focus
		//			- Hover		- if the mouse is over the widget

		// Compute new set of classes
		var newStateClasses = this.baseClass.split(" ");

		function multiply(modifier){
			newStateClasses = newStateClasses.concat(dojo.map(newStateClasses, function(c){ return c+modifier; }), "dijit"+modifier);
		}

		if(!this.isLeftToRight()){
			// For RTL mode we need to set an addition class like dijitTextBoxRtl.
			multiply("Rtl");
		}

		if(this.checked){
			multiply("Checked");
		}
		if(this.state){
			multiply(this.state);
		}
		if(this.selected){
			multiply("Selected");
		}

		if(this.disabled){
			multiply("Disabled");
		}else if(this.readOnly){
			multiply("ReadOnly");
		}else{
			if(this.active){
				multiply("Active");
			}else if(this.hovering){
				multiply("Hover");
			}
		}

		if(this._focused){
			multiply("Focused");
		}

		// Remove old state classes and add new ones.
		// For performance concerns we only write into domNode.className once.
		var tn = this.stateNode || this.domNode,
			classHash = {};	// set of all classes (state and otherwise) for node

		dojo.forEach(tn.className.split(" "), function(c){ classHash[c] = true; });

		if("_stateClasses" in this){
			dojo.forEach(this._stateClasses, function(c){ delete classHash[c]; });
		}

		dojo.forEach(newStateClasses, function(c){ classHash[c] = true; });

		var newClasses = [];
		for(var c in classHash){
			newClasses.push(c);
		}
		tn.className = newClasses.join(" ");

		this._stateClasses = newStateClasses;
	},

	_trackMouseState: function(/*DomNode*/ node, /*String*/ clazz){
		// summary:
		//		Track mouse/focus events on specified node and set CSS class on that node to indicate
		//		current state.   Usually not called directly, but via cssStateNodes attribute.
		// description:
		//		Given class=foo, will set the following CSS class on the node
		//			- fooActive: if the user is currently pressing down the mouse button while over the node
		//			- fooHover: if the user is hovering the mouse over the node, but not pressing down a button
		//			- fooFocus: if the node is focused
		//
		//		Note that it won't set any classes if the widget is disabled.
		// node: DomNode
		//		Should be a sub-node of the widget, not the top node (this.domNode), since the top node
		//		is handled specially and automatically just by mixing in this class.
		// clazz: String
		//		CSS class name (ex: dijitSliderUpArrow).

		// Current state of node (initially false)
		// NB: setting specifically to false because dojo.toggleClass() needs true boolean as third arg
		var hovering=false, active=false, focused=false;

		var self = this,
			cn = dojo.hitch(this, "connect", node);

		function setClass(){
			var disabled = ("disabled" in self && self.disabled) || ("readonly" in self && self.readonly);
			dojo.toggleClass(node, clazz+"Hover", hovering && !active && !disabled);
			dojo.toggleClass(node, clazz+"Active", active && !disabled);
			dojo.toggleClass(node, clazz+"Focused", focused && !disabled);
		}

		// Mouse
		cn("onmouseenter", function(){
			hovering = true;
			setClass();
		});
		cn("onmouseleave", function(){
			hovering = false;
			active = false;
			setClass();
		});
		cn("onmousedown", function(){
			active = true;
			setClass();
		});
		cn("onmouseup", function(){
			active = false;
			setClass();
		});

		// Focus
		cn("onfocus", function(){
			focused = true;
			setClass();
		});
		cn("onblur", function(){
			focused = false;
			setClass();
		});

		// Just in case widget is enabled/disabled while it has focus/hover/active state.
		// Maybe this is overkill.
		this.watch("disabled", setClass);
		this.watch("readOnly", setClass);
	}
});

}

if(!dojo._hasResource["dijit.form._FormWidget"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form._FormWidget"] = true;
dojo.provide("dijit.form._FormWidget");







dojo.declare("dijit.form._FormWidget", [dijit._Widget, dijit._Templated, dijit._CssStateMixin],
	{
	// summary:
	//		Base class for widgets corresponding to native HTML elements such as <checkbox> or <button>,
	//		which can be children of a <form> node or a `dijit.form.Form` widget.
	//
	// description:
	//		Represents a single HTML element.
	//		All these widgets should have these attributes just like native HTML input elements.
	//		You can set them during widget construction or afterwards, via `dijit._Widget.attr`.
	//
	//		They also share some common methods.

	// name: [const] String
	//		Name used when submitting form; same as "name" attribute or plain HTML elements
	name: "",

	// alt: String
	//		Corresponds to the native HTML <input> element's attribute.
	alt: "",

	// value: String
	//		Corresponds to the native HTML <input> element's attribute.
	value: "",

	// type: String
	//		Corresponds to the native HTML <input> element's attribute.
	type: "text",

	// tabIndex: Integer
	//		Order fields are traversed when user hits the tab key
	tabIndex: "0",

	// disabled: Boolean
	//		Should this widget respond to user input?
	//		In markup, this is specified as "disabled='disabled'", or just "disabled".
	disabled: false,

	// intermediateChanges: Boolean
	//		Fires onChange for each value change or only on demand
	intermediateChanges: false,

	// scrollOnFocus: Boolean
	//		On focus, should this widget scroll into view?
	scrollOnFocus: true,

	// These mixins assume that the focus node is an INPUT, as many but not all _FormWidgets are.
	attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
		value: "focusNode",
		id: "focusNode",
		tabIndex: "focusNode",
		alt: "focusNode",
		title: "focusNode"
	}),

	postMixInProperties: function(){
		// Setup name=foo string to be referenced from the template (but only if a name has been specified)
		// Unfortunately we can't use attributeMap to set the name due to IE limitations, see #8660
		// Regarding escaping, see heading "Attribute values" in
		// http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.3.2
		this.nameAttrSetting = this.name ? ('name="' + this.name.replace(/'/g, "&quot;") + '"') : '';
		this.inherited(arguments);
	},

	postCreate: function(){
		this.inherited(arguments);
		this.connect(this.domNode, "onmousedown", "_onMouseDown");
	},

	_setDisabledAttr: function(/*Boolean*/ value){
		this._set("disabled", value);
		dojo.attr(this.focusNode, 'disabled', value);
		if(this.valueNode){
			dojo.attr(this.valueNode, 'disabled', value);
		}
		dijit.setWaiState(this.focusNode, "disabled", value);

		if(value){
			// reset these, because after the domNode is disabled, we can no longer receive
			// mouse related events, see #4200
			this._set("hovering", false);
			this._set("active", false);

			// clear tab stop(s) on this widget's focusable node(s)  (ComboBox has two focusable nodes)
			var attachPointNames = "tabIndex" in this.attributeMap ? this.attributeMap.tabIndex : "focusNode";
			dojo.forEach(dojo.isArray(attachPointNames) ? attachPointNames : [attachPointNames], function(attachPointName){
				var node = this[attachPointName];
				// complex code because tabIndex=-1 on a <div> doesn't work on FF
				if(dojo.isWebKit || dijit.hasDefaultTabStop(node)){	// see #11064 about webkit bug
					node.setAttribute('tabIndex', "-1");
				}else{
					node.removeAttribute('tabIndex');
				}
			}, this);
		}else{
			if(this.tabIndex != ""){
				this.focusNode.setAttribute('tabIndex', this.tabIndex);
			}
		}
	},

	setDisabled: function(/*Boolean*/ disabled){
		// summary:
		//		Deprecated.  Use set('disabled', ...) instead.
		dojo.deprecated("setDisabled("+disabled+") is deprecated. Use set('disabled',"+disabled+") instead.", "", "2.0");
		this.set('disabled', disabled);
	},

	_onFocus: function(e){
		if(this.scrollOnFocus){
			dojo.window.scrollIntoView(this.domNode);
		}
		this.inherited(arguments);
	},

	isFocusable: function(){
		// summary:
		//		Tells if this widget is focusable or not.  Used internally by dijit.
		// tags:
		//		protected
		return !this.disabled && this.focusNode && (dojo.style(this.domNode, "display") != "none");
	},

	focus: function(){
		// summary:
		//		Put focus on this widget
		if(!this.disabled){
			dijit.focus(this.focusNode);
		}
	},

	compare: function(/*anything*/ val1, /*anything*/ val2){
		// summary:
		//		Compare 2 values (as returned by get('value') for this widget).
		// tags:
		//		protected
		if(typeof val1 == "number" && typeof val2 == "number"){
			return (isNaN(val1) && isNaN(val2)) ? 0 : val1 - val2;
		}else if(val1 > val2){
			return 1;
		}else if(val1 < val2){
			return -1;
		}else{
			return 0;
		}
	},

	onChange: function(newValue){
		// summary:
		//		Callback when this widget's value is changed.
		// tags:
		//		callback
	},

	// _onChangeActive: [private] Boolean
	//		Indicates that changes to the value should call onChange() callback.
	//		This is false during widget initialization, to avoid calling onChange()
	//		when the initial value is set.
	_onChangeActive: false,

	_handleOnChange: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){
		// summary:
		//		Called when the value of the widget is set.  Calls onChange() if appropriate
		// newValue:
		//		the new value
		// priorityChange:
		//		For a slider, for example, dragging the slider is priorityChange==false,
		//		but on mouse up, it's priorityChange==true.  If intermediateChanges==false,
		//		onChange is only called form priorityChange=true events.
		// tags:
		//		private
		if(this._lastValueReported == undefined && (priorityChange === null || !this._onChangeActive)){
			// this block executes not for a change, but during initialization,
			// and is used to store away the original value (or for ToggleButton, the original checked state)
			this._resetValue = this._lastValueReported = newValue;
		}
		this._pendingOnChange = this._pendingOnChange
			|| (typeof newValue != typeof this._lastValueReported)
			|| (this.compare(newValue, this._lastValueReported) != 0);
		if((this.intermediateChanges || priorityChange || priorityChange === undefined) && this._pendingOnChange){
			this._lastValueReported = newValue;
			this._pendingOnChange = false;
			if(this._onChangeActive){
				if(this._onChangeHandle){
					clearTimeout(this._onChangeHandle);
				}
				// setTimout allows hidden value processing to run and
				// also the onChange handler can safely adjust focus, etc
				this._onChangeHandle = setTimeout(dojo.hitch(this,
					function(){
						this._onChangeHandle = null;
						this.onChange(newValue);
					}), 0); // try to collapse multiple onChange's fired faster than can be processed
			}
		}
	},

	create: function(){
		// Overrides _Widget.create()
		this.inherited(arguments);
		this._onChangeActive = true;
	},

	destroy: function(){
		if(this._onChangeHandle){ // destroy called before last onChange has fired
			clearTimeout(this._onChangeHandle);
			this.onChange(this._lastValueReported);
		}
		this.inherited(arguments);
	},

	setValue: function(/*String*/ value){
		// summary:
		//		Deprecated.  Use set('value', ...) instead.
		dojo.deprecated("dijit.form._FormWidget:setValue("+value+") is deprecated.  Use set('value',"+value+") instead.", "", "2.0");
		this.set('value', value);
	},

	getValue: function(){
		// summary:
		//		Deprecated.  Use get('value') instead.
		dojo.deprecated(this.declaredClass+"::getValue() is deprecated. Use get('value') instead.", "", "2.0");
		return this.get('value');
	},
	
	_onMouseDown: function(e){
		// If user clicks on the button, even if the mouse is released outside of it,
		// this button should get focus (to mimics native browser buttons).
		// This is also needed on chrome because otherwise buttons won't get focus at all,
		// which leads to bizarre focus restore on Dialog close etc.
		if(!e.ctrlKey && dojo.mouseButtons.isLeft(e) && this.isFocusable()){ // !e.ctrlKey to ignore right-click on mac
			// Set a global event to handle mouseup, so it fires properly
			// even if the cursor leaves this.domNode before the mouse up event.
			var mouseUpConnector = this.connect(dojo.body(), "onmouseup", function(){
				if (this.isFocusable()) {
					this.focus();
				}
				this.disconnect(mouseUpConnector);
			});
		}
	}
});

dojo.declare("dijit.form._FormValueWidget", dijit.form._FormWidget,
{
	// summary:
	//		Base class for widgets corresponding to native HTML elements such as <input> or <select> that have user changeable values.
	// description:
	//		Each _FormValueWidget represents a single input value, and has a (possibly hidden) <input> element,
	//		to which it serializes it's input value, so that form submission (either normal submission or via FormBind?)
	//		works as expected.

	// Don't attempt to mixin the 'type', 'name' attributes here programatically -- they must be declared
	// directly in the template as read by the parser in order to function. IE is known to specifically
	// require the 'name' attribute at element creation time.  See #8484, #8660.
	// TODO: unclear what that {value: ""} is for; FormWidget.attributeMap copies value to focusNode,
	// so maybe {value: ""} is so the value *doesn't* get copied to focusNode?
	// Seems like we really want value removed from attributeMap altogether
	// (although there's no easy way to do that now)

	// readOnly: Boolean
	//		Should this widget respond to user input?
	//		In markup, this is specified as "readOnly".
	//		Similar to disabled except readOnly form values are submitted.
	readOnly: false,

	attributeMap: dojo.delegate(dijit.form._FormWidget.prototype.attributeMap, {
		value: "",
		readOnly: "focusNode"
	}),

	_setReadOnlyAttr: function(/*Boolean*/ value){
		dojo.attr(this.focusNode, 'readOnly', value);
		dijit.setWaiState(this.focusNode, "readonly", value);
		this._set("readOnly", value);
	},

	postCreate: function(){
		this.inherited(arguments);

		if(dojo.isIE < 9 || (dojo.isIE && dojo.isQuirks)){ // IE won't stop the event with keypress
			this.connect(this.focusNode || this.domNode, "onkeydown", this._onKeyDown);
		}
		// Update our reset value if it hasn't yet been set (because this.set()
		// is only called when there *is* a value)
		if(this._resetValue === undefined){
			this._lastValueReported = this._resetValue = this.value;
		}
	},

	_setValueAttr: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){
		// summary:
		//		Hook so set('value', value) works.
		// description:
		//		Sets the value of the widget.
		//		If the value has changed, then fire onChange event, unless priorityChange
		//		is specified as null (or false?)
		this._handleOnChange(newValue, priorityChange);
	},

	_handleOnChange: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){
		// summary:
		//		Called when the value of the widget has changed.  Saves the new value in this.value,
		//		and calls onChange() if appropriate.   See _FormWidget._handleOnChange() for details.
		this._set("value", newValue);
		this.inherited(arguments);
	},

	undo: function(){
		// summary:
		//		Restore the value to the last value passed to onChange
		this._setValueAttr(this._lastValueReported, false);
	},

	reset: function(){
		// summary:
		//		Reset the widget's value to what it was at initialization time
		this._hasBeenBlurred = false;
		this._setValueAttr(this._resetValue, true);
	},

	_onKeyDown: function(e){
		if(e.keyCode == dojo.keys.ESCAPE && !(e.ctrlKey || e.altKey || e.metaKey)){
			var te;
			if(dojo.isIE){
				e.preventDefault(); // default behavior needs to be stopped here since keypress is too late
				te = document.createEventObject();
				te.keyCode = dojo.keys.ESCAPE;
				te.shiftKey = e.shiftKey;
				e.srcElement.fireEvent('onkeypress', te);
			}
		}
	},

	_layoutHackIE7: function(){
		// summary:
		//		Work around table sizing bugs on IE7 by forcing redraw

		if(dojo.isIE == 7){ // fix IE7 layout bug when the widget is scrolled out of sight
			var domNode = this.domNode;
			var parent = domNode.parentNode;
			var pingNode = domNode.firstChild || domNode; // target node most unlikely to have a custom filter
			var origFilter = pingNode.style.filter; // save custom filter, most likely nothing
			var _this = this;
			while(parent && parent.clientHeight == 0){ // search for parents that haven't rendered yet
				(function ping(){
					var disconnectHandle = _this.connect(parent, "onscroll",
						function(e){
							_this.disconnect(disconnectHandle); // only call once
							pingNode.style.filter = (new Date()).getMilliseconds(); // set to anything that's unique
							setTimeout(function(){ pingNode.style.filter = origFilter }, 0); // restore custom filter, if any
						}
					);
				})();
				parent = parent.parentNode;
			}
		}
	}
});

}

if(!dojo._hasResource["dijit._HasDropDown"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._HasDropDown"] = true;
dojo.provide("dijit._HasDropDown");




dojo.declare("dijit._HasDropDown",
	null,
	{
		// summary:
		//		Mixin for widgets that need drop down ability.

		// _buttonNode: [protected] DomNode
		//		The button/icon/node to click to display the drop down.
		//		Can be set via a dojoAttachPoint assignment.
		//		If missing, then either focusNode or domNode (if focusNode is also missing) will be used.
		_buttonNode: null,

		// _arrowWrapperNode: [protected] DomNode
		//		Will set CSS class dijitUpArrow, dijitDownArrow, dijitRightArrow etc. on this node depending
		//		on where the drop down is set to be positioned.
		//		Can be set via a dojoAttachPoint assignment.
		//		If missing, then _buttonNode will be used.
		_arrowWrapperNode: null,

		// _popupStateNode: [protected] DomNode
		//		The node to set the popupActive class on.
		//		Can be set via a dojoAttachPoint assignment.
		//		If missing, then focusNode or _buttonNode (if focusNode is missing) will be used.
		_popupStateNode: null,

		// _aroundNode: [protected] DomNode
		//		The node to display the popup around.
		//		Can be set via a dojoAttachPoint assignment.
		//		If missing, then domNode will be used.
		_aroundNode: null,

		// dropDown: [protected] Widget
		//		The widget to display as a popup.  This widget *must* be
		//		defined before the startup function is called.
		dropDown: null,

		// autoWidth: [protected] Boolean
		//		Set to true to make the drop down at least as wide as this
		//		widget.  Set to false if the drop down should just be its
		//		default width
		autoWidth: true,

		// forceWidth: [protected] Boolean
		//		Set to true to make the drop down exactly as wide as this
		//		widget.  Overrides autoWidth.
		forceWidth: false,

		// maxHeight: [protected] Integer
		//		The max height for our dropdown.
		//		Any dropdown taller than this will have scrollbars.
		//		Set to 0 for no max height, or -1 to limit height to available space in viewport
		maxHeight: 0,

		// dropDownPosition: [const] String[]
		//		This variable controls the position of the drop down.
		//		It's an array of strings with the following values:
		//
		//			* before: places drop down to the left of the target node/widget, or to the right in
		//			  the case of RTL scripts like Hebrew and Arabic
		//			* after: places drop down to the right of the target node/widget, or to the left in
		//			  the case of RTL scripts like Hebrew and Arabic
		//			* above: drop down goes above target node
		//			* below: drop down goes below target node
		//
		//		The list is positions is tried, in order, until a position is found where the drop down fits
		//		within the viewport.
		//
		dropDownPosition: ["below","above"],

		// _stopClickEvents: Boolean
		//		When set to false, the click events will not be stopped, in
		//		case you want to use them in your subwidget
		_stopClickEvents: true,

		_onDropDownMouseDown: function(/*Event*/ e){
			// summary:
			//		Callback when the user mousedown's on the arrow icon

			if(this.disabled || this.readOnly){ return; }

			dojo.stopEvent(e);

			this._docHandler = this.connect(dojo.doc, "onmouseup", "_onDropDownMouseUp");

			this.toggleDropDown();
		},

		_onDropDownMouseUp: function(/*Event?*/ e){
			// summary:
			//		Callback when the user lifts their mouse after mouse down on the arrow icon.
			//		If the drop is a simple menu and the mouse is over the menu, we execute it, otherwise, we focus our
			//		dropDown node.  If the event is missing, then we are not
			//		a mouseup event.
			//
			//		This is useful for the common mouse movement pattern
			//		with native browser <select> nodes:
			//			1. mouse down on the select node (probably on the arrow)
			//			2. move mouse to a menu item while holding down the mouse button
			//			3. mouse up.  this selects the menu item as though the user had clicked it.
			if(e && this._docHandler){
				this.disconnect(this._docHandler);
			}
			var dropDown = this.dropDown, overMenu = false;

			if(e && this._opened){
				// This code deals with the corner-case when the drop down covers the original widget,
				// because it's so large.  In that case mouse-up shouldn't select a value from the menu.
				// Find out if our target is somewhere in our dropdown widget,
				// but not over our _buttonNode (the clickable node)
				var c = dojo.position(this._buttonNode, true);
				if(!(e.pageX >= c.x && e.pageX <= c.x + c.w) ||
					!(e.pageY >= c.y && e.pageY <= c.y + c.h)){
					var t = e.target;
					while(t && !overMenu){
						if(dojo.hasClass(t, "dijitPopup")){
							overMenu = true;
						}else{
							t = t.parentNode;
						}
					}
					if(overMenu){
						t = e.target;
						if(dropDown.onItemClick){
							var menuItem;
							while(t && !(menuItem = dijit.byNode(t))){
								t = t.parentNode;
							}
							if(menuItem && menuItem.onClick && menuItem.getParent){
								menuItem.getParent().onItemClick(menuItem, e);
							}
						}
						return;
					}
				}
			}
			if(this._opened && dropDown.focus && dropDown.autoFocus !== false){
				// Focus the dropdown widget - do it on a delay so that we
				// don't steal our own focus.
				window.setTimeout(dojo.hitch(dropDown, "focus"), 1);
			}
		},

		_onDropDownClick: function(/*Event*/ e){
			// the drop down was already opened on mousedown/keydown; just need to call stopEvent()
			if(this._stopClickEvents){
				dojo.stopEvent(e);
			}
		},

		buildRendering: function(){
			this.inherited(arguments);

			this._buttonNode = this._buttonNode || this.focusNode || this.domNode;
			this._popupStateNode = this._popupStateNode || this.focusNode || this._buttonNode;

			// Add a class to the "dijitDownArrowButton" type class to _buttonNode so theme can set direction of arrow
			// based on where drop down will normally appear
			var defaultPos = {
					"after" : this.isLeftToRight() ? "Right" : "Left",
					"before" : this.isLeftToRight() ? "Left" : "Right",
					"above" : "Up",
					"below" : "Down",
					"left" : "Left",
					"right" : "Right"
			}[this.dropDownPosition[0]] || this.dropDownPosition[0] || "Down";
			dojo.addClass(this._arrowWrapperNode || this._buttonNode, "dijit" + defaultPos + "ArrowButton");
		},

		postCreate: function(){
			// summary:
			//		set up nodes and connect our mouse and keypress events

			this.inherited(arguments);

			this.connect(this._buttonNode, "onmousedown", "_onDropDownMouseDown");
			this.connect(this._buttonNode, "onclick", "_onDropDownClick");
			this.connect(this.focusNode, "onkeypress", "_onKey");
			this.connect(this.focusNode, "onkeyup", "_onKeyUp");
		},

		destroy: function(){
			if(this.dropDown){
				// Destroy the drop down, unless it's already been destroyed.  This can happen because
				// the drop down is a direct child of <body> even though it's logically my child.
				if(!this.dropDown._destroyed){
					this.dropDown.destroyRecursive();
				}
				delete this.dropDown;
			}
			this.inherited(arguments);
		},

		_onKey: function(/*Event*/ e){
			// summary:
			//		Callback when the user presses a key while focused on the button node

			if(this.disabled || this.readOnly){ return; }

			var d = this.dropDown, target = e.target;
			if(d && this._opened && d.handleKey){
				if(d.handleKey(e) === false){
					/* false return code means that the drop down handled the key */
					dojo.stopEvent(e);
					return;
				}
			}
			if(d && this._opened && e.charOrCode == dojo.keys.ESCAPE){
				this.closeDropDown();
				dojo.stopEvent(e);
			}else if(!this._opened &&
					(e.charOrCode == dojo.keys.DOWN_ARROW ||
						( (e.charOrCode == dojo.keys.ENTER || e.charOrCode == " ") &&
						  //ignore enter and space if the event is for a text input
						  ((target.tagName || "").toLowerCase() !== 'input' ||
						     (target.type && target.type.toLowerCase() !== 'text'))))){
				// Toggle the drop down, but wait until keyup so that the drop down doesn't
				// get a stray keyup event, or in the case of key-repeat (because user held
				// down key for too long), stray keydown events
				this._toggleOnKeyUp = true;
				dojo.stopEvent(e);
			}
		},

		_onKeyUp: function(){
			if(this._toggleOnKeyUp){
				delete this._toggleOnKeyUp;
				this.toggleDropDown();
				var d = this.dropDown;	// drop down may not exist until toggleDropDown() call
				if(d && d.focus){
					setTimeout(dojo.hitch(d, "focus"), 1);
				}
			}
		},

		_onBlur: function(){
			// summary:
			//		Called magically when focus has shifted away from this widget and it's dropdown

			// Don't focus on button if the user has explicitly focused on something else (happens
			// when user clicks another control causing the current popup to close)..
			// But if focus is inside of the drop down then reset focus to me, because IE doesn't like
			// it when you display:none a node with focus.
			var focusMe = dijit._curFocus && this.dropDown && dojo.isDescendant(dijit._curFocus, this.dropDown.domNode);

			this.closeDropDown(focusMe);

			this.inherited(arguments);
		},

		isLoaded: function(){
			// summary:
			//		Returns whether or not the dropdown is loaded.  This can
			//		be overridden in order to force a call to loadDropDown().
			// tags:
			//		protected

			return true;
		},

		loadDropDown: function(/* Function */ loadCallback){
			// summary:
			//		Loads the data for the dropdown, and at some point, calls
			//		the given callback.   This is basically a callback when the
			//		user presses the down arrow button to open the drop down.
			// tags:
			//		protected

			loadCallback();
		},

		toggleDropDown: function(){
			// summary:
			//		Callback when the user presses the down arrow button or presses
			//		the down arrow key to open/close the drop down.
			//		Toggle the drop-down widget; if it is up, close it, if not, open it
			// tags:
			//		protected

			if(this.disabled || this.readOnly){ return; }
			if(!this._opened){
				// If we aren't loaded, load it first so there isn't a flicker
				if(!this.isLoaded()){
					this.loadDropDown(dojo.hitch(this, "openDropDown"));
					return;
				}else{
					this.openDropDown();
				}
			}else{
				this.closeDropDown();
			}
		},

		openDropDown: function(){
			// summary:
			//		Opens the dropdown for this widget.   To be called only when this.dropDown
			//		has been created and is ready to display (ie, it's data is loaded).
			// returns:
			//		return value of dijit.popup.open()
			// tags:
			//		protected

			var dropDown = this.dropDown,
				ddNode = dropDown.domNode,
				aroundNode = this._aroundNode || this.domNode,
				self = this;

			// Prepare our popup's height and honor maxHeight if it exists.

			// TODO: isn't maxHeight dependent on the return value from dijit.popup.open(),
			// ie, dependent on how much space is available (BK)

			if(!this._preparedNode){
				this._preparedNode = true;
				// Check if we have explicitly set width and height on the dropdown widget dom node
				if(ddNode.style.width){
					this._explicitDDWidth = true;
				}
				if(ddNode.style.height){
					this._explicitDDHeight = true;
				}
			}

			// Code for resizing dropdown (height limitation, or increasing width to match my width)
			if(this.maxHeight || this.forceWidth || this.autoWidth){
				var myStyle = {
					display: "",
					visibility: "hidden"
				};
				if(!this._explicitDDWidth){
					myStyle.width = "";
				}
				if(!this._explicitDDHeight){
					myStyle.height = "";
				}
				dojo.style(ddNode, myStyle);
				
				// Figure out maximum height allowed (if there is a height restriction)
				var maxHeight = this.maxHeight;
				if(maxHeight == -1){
					// limit height to space available in viewport either above or below my domNode
					// (whichever side has more room)
					var viewport = dojo.window.getBox(),
						position = dojo.position(aroundNode, false);
					maxHeight = Math.floor(Math.max(position.y, viewport.h - (position.y + position.h)));
				}

				// Attach dropDown to DOM and make make visibility:hidden rather than display:none
				// so we call startup() and also get the size
				if(dropDown.startup && !dropDown._started){
					dropDown.startup();
				}

				dijit.popup.moveOffScreen(dropDown);
				// Get size of drop down, and determine if vertical scroll bar needed
				var mb = dojo._getMarginSize(ddNode);
				var overHeight = (maxHeight && mb.h > maxHeight);
				dojo.style(ddNode, {
					overflowX: "hidden",
					overflowY: overHeight ? "auto" : "hidden"
				});
				if(overHeight){
					mb.h = maxHeight;
					if("w" in mb){
						mb.w += 16;	// room for vertical scrollbar
					}
				}else{
					delete mb.h;
				}

				// Adjust dropdown width to match or be larger than my width
				if(this.forceWidth){
					mb.w = aroundNode.offsetWidth;
				}else if(this.autoWidth){
					mb.w = Math.max(mb.w, aroundNode.offsetWidth);
				}else{
					delete mb.w;
				}
				
				// And finally, resize the dropdown to calculated height and width
				if(dojo.isFunction(dropDown.resize)){
					dropDown.resize(mb);
				}else{
					dojo.marginBox(ddNode, mb);
				}
			}

			var retVal = dijit.popup.open({
				parent: this,
				popup: dropDown,
				around: aroundNode,
				orient: dijit.getPopupAroundAlignment((this.dropDownPosition && this.dropDownPosition.length) ? this.dropDownPosition : ["below"],this.isLeftToRight()),
				onExecute: function(){
					self.closeDropDown(true);
				},
				onCancel: function(){
					self.closeDropDown(true);
				},
				onClose: function(){
					dojo.attr(self._popupStateNode, "popupActive", false);
					dojo.removeClass(self._popupStateNode, "dijitHasDropDownOpen");
					self._opened = false;
				}
			});
			dojo.attr(this._popupStateNode, "popupActive", "true");
			dojo.addClass(self._popupStateNode, "dijitHasDropDownOpen");
			this._opened=true;

			// TODO: set this.checked and call setStateClass(), to affect button look while drop down is shown
			return retVal;
		},

		closeDropDown: function(/*Boolean*/ focus){
			// summary:
			//		Closes the drop down on this widget
			// focus:
			//		If true, refocuses the button widget
			// tags:
			//		protected

			if(this._opened){
				if(focus){ this.focus(); }
				dijit.popup.close(this.dropDown);
				this._opened = false;
			}
		}

	}
);

}

if(!dojo._hasResource["dijit.form.Button"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.Button"] = true;
dojo.provide("dijit.form.Button");






dojo.declare("dijit.form.Button",
	dijit.form._FormWidget,
	{
	// summary:
	//		Basically the same thing as a normal HTML button, but with special styling.
	// description:
	//		Buttons can display a label, an icon, or both.
	//		A label should always be specified (through innerHTML) or the label
	//		attribute.  It can be hidden via showLabel=false.
	// example:
	// |	<button dojoType="dijit.form.Button" onClick="...">Hello world</button>
	//
	// example:
	// |	var button1 = new dijit.form.Button({label: "hello world", onClick: foo});
	// |	dojo.body().appendChild(button1.domNode);

	// label: HTML String
	//		Text to display in button.
	//		If the label is hidden (showLabel=false) then and no title has
	//		been specified, then label is also set as title attribute of icon.
	label: "",

	// showLabel: Boolean
	//		Set this to true to hide the label text and display only the icon.
	//		(If showLabel=false then iconClass must be specified.)
	//		Especially useful for toolbars.
	//		If showLabel=true, the label will become the title (a.k.a. tooltip/hint) of the icon.
	//
	//		The exception case is for computers in high-contrast mode, where the label
	//		will still be displayed, since the icon doesn't appear.
	showLabel: true,

	// iconClass: String
	//		Class to apply to DOMNode in button to make it display an icon
	iconClass: "",

	// type: String
	//		Defines the type of button.  "button", "submit", or "reset".
	type: "button",

	baseClass: "dijitButton",

	templateString: dojo.cache("dijit.form", "templates/Button.html", "<span class=\"dijit dijitReset dijitInline\"\r\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\r\n\t\tdojoAttachEvent=\"ondijitclick:_onButtonClick\"\r\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\r\n\t\t\tdojoAttachPoint=\"titleNode,focusNode\"\r\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\r\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" dojoAttachPoint=\"iconNode\"></span\r\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\r\n\t\t\t\tid=\"${id}_label\"\r\n\t\t\t\tdojoAttachPoint=\"containerNode\"\r\n\t\t\t></span\r\n\t\t></span\r\n\t></span\r\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\r\n\t\tdojoAttachPoint=\"valueNode\"\r\n/></span>\r\n"),

	attributeMap: dojo.delegate(dijit.form._FormWidget.prototype.attributeMap, {
		value: "valueNode"
	}),

	_onClick: function(/*Event*/ e){
		// summary:
		//		Internal function to handle click actions
		if(this.disabled){
			return false;
		}
		this._clicked(); // widget click actions
		return this.onClick(e); // user click actions
	},

	_onButtonClick: function(/*Event*/ e){
		// summary:
		//		Handler when the user activates the button portion.
		if(this._onClick(e) === false){ // returning nothing is same as true
			e.preventDefault(); // needed for checkbox
		}else if(this.type == "submit" && !(this.valueNode||this.focusNode).form){ // see if a nonform widget needs to be signalled
			for(var node=this.domNode; node.parentNode/*#5935*/; node=node.parentNode){
				var widget=dijit.byNode(node);
				if(widget && typeof widget._onSubmit == "function"){
					widget._onSubmit(e);
					break;
				}
			}
		}else if(this.valueNode){
			this.valueNode.click();
			e.preventDefault(); // cancel BUTTON click and continue with hidden INPUT click
		}
	},

	buildRendering: function(){
		this.inherited(arguments);
		dojo.setSelectable(this.focusNode, false);
	},

	_fillContent: function(/*DomNode*/ source){
		// Overrides _Templated._fillContent().
		// If button label is specified as srcNodeRef.innerHTML rather than
		// this.params.label, handle it here.
		// TODO: remove the method in 2.0, parser will do it all for me
		if(source && (!this.params || !("label" in this.params))){
			this.set('label', source.innerHTML);
		}
	},

	_setShowLabelAttr: function(val){
		if(this.containerNode){
			dojo.toggleClass(this.containerNode, "dijitDisplayNone", !val);
		}
		this._set("showLabel", val);
	},

	onClick: function(/*Event*/ e){
		// summary:
		//		Callback for when button is clicked.
		//		If type="submit", return true to perform submit, or false to cancel it.
		// type:
		//		callback
		return true;		// Boolean
	},

	_clicked: function(/*Event*/ e){
		// summary:
		//		Internal overridable function for when the button is clicked
	},

	setLabel: function(/*String*/ content){
		// summary:
		//		Deprecated.  Use set('label', ...) instead.
		dojo.deprecated("dijit.form.Button.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
		this.set("label", content);
	},

	_setLabelAttr: function(/*String*/ content){
		// summary:
		//		Hook for set('label', ...) to work.
		// description:
		//		Set the label (text) of the button; takes an HTML string.
		this._set("label", content);
		this.containerNode.innerHTML = content;
		if(this.showLabel == false && !this.params.title){
			this.titleNode.title = dojo.trim(this.containerNode.innerText || this.containerNode.textContent || '');
		}
	},

	_setIconClassAttr: function(/*String*/ val){
		// Custom method so that icon node is hidden when not in use, to avoid excess padding/margin
		// appearing around it (even if it's a 0x0 sized <img> node)

		var oldVal = this.iconClass || "dijitNoIcon",
			newVal = val || "dijitNoIcon";
		dojo.replaceClass(this.iconNode, newVal, oldVal);
		this._set("iconClass", val);
	}
});


dojo.declare("dijit.form.DropDownButton", [dijit.form.Button, dijit._Container, dijit._HasDropDown], {
	// summary:
	//		A button with a drop down
	//
	// example:
	// |	<button dojoType="dijit.form.DropDownButton" label="Hello world">
	// |		<div dojotype="dijit.Menu">...</div>
	// |	</button>
	//
	// example:
	// |	var button1 = new dijit.form.DropDownButton({ label: "hi", dropDown: new dijit.Menu(...) });
	// |	dojo.body().appendChild(button1);
	//

	baseClass : "dijitDropDownButton",

	templateString: dojo.cache("dijit.form", "templates/DropDownButton.html", "<span class=\"dijit dijitReset dijitInline\"\r\n\t><span class='dijitReset dijitInline dijitButtonNode'\r\n\t\tdojoAttachEvent=\"ondijitclick:_onButtonClick\" dojoAttachPoint=\"_buttonNode\"\r\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\r\n\t\t\tdojoAttachPoint=\"focusNode,titleNode,_arrowWrapperNode\"\r\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\r\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\r\n\t\t\t\tdojoAttachPoint=\"iconNode\"\r\n\t\t\t></span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\r\n\t\t\t\tdojoAttachPoint=\"containerNode,_popupStateNode\"\r\n\t\t\t\tid=\"${id}_label\"\r\n\t\t\t></span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\r\n\t\t></span\r\n\t></span\r\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\r\n\t\tdojoAttachPoint=\"valueNode\"\r\n/></span>\r\n"),

	_fillContent: function(){
		// Overrides Button._fillContent().
		//
		// My inner HTML contains both the button contents and a drop down widget, like
		// <DropDownButton>  <span>push me</span>  <Menu> ... </Menu> </DropDownButton>
		// The first node is assumed to be the button content. The widget is the popup.

		if(this.srcNodeRef){ // programatically created buttons might not define srcNodeRef
			//FIXME: figure out how to filter out the widget and use all remaining nodes as button
			//	content, not just nodes[0]
			var nodes = dojo.query("*", this.srcNodeRef);
			dijit.form.DropDownButton.superclass._fillContent.call(this, nodes[0]);

			// save pointer to srcNode so we can grab the drop down widget after it's instantiated
			this.dropDownContainer = this.srcNodeRef;
		}
	},

	startup: function(){
		if(this._started){ return; }

		// the child widget from srcNodeRef is the dropdown widget.  Insert it in the page DOM,
		// make it invisible, and store a reference to pass to the popup code.
		if(!this.dropDown && this.dropDownContainer){
			var dropDownNode = dojo.query("[widgetId]", this.dropDownContainer)[0];
			this.dropDown = dijit.byNode(dropDownNode);
			delete this.dropDownContainer;
		}
		if(this.dropDown){
			dijit.popup.hide(this.dropDown);
		}

		this.inherited(arguments);
	},

	isLoaded: function(){
		// Returns whether or not we are loaded - if our dropdown has an href,
		// then we want to check that.
		var dropDown = this.dropDown;
		return (!!dropDown && (!dropDown.href || dropDown.isLoaded));
	},

	loadDropDown: function(){
		// Loads our dropdown
		var dropDown = this.dropDown;
		if(!dropDown){ return; }
		if(!this.isLoaded()){
			var handler = dojo.connect(dropDown, "onLoad", this, function(){
				dojo.disconnect(handler);
				this.openDropDown();
			});
			dropDown.refresh();
		}else{
			this.openDropDown();
		}
	},

	isFocusable: function(){
		// Overridden so that focus is handled by the _HasDropDown mixin, not by
		// the _FormWidget mixin.
		return this.inherited(arguments) && !this._mouseDown;
	}
});

dojo.declare("dijit.form.ComboButton", dijit.form.DropDownButton, {
	// summary:
	//		A combination button and drop-down button.
	//		Users can click one side to "press" the button, or click an arrow
	//		icon to display the drop down.
	//
	// example:
	// |	<button dojoType="dijit.form.ComboButton" onClick="...">
	// |		<span>Hello world</span>
	// |		<div dojoType="dijit.Menu">...</div>
	// |	</button>
	//
	// example:
	// |	var button1 = new dijit.form.ComboButton({label: "hello world", onClick: foo, dropDown: "myMenu"});
	// |	dojo.body().appendChild(button1.domNode);
	//

	templateString: dojo.cache("dijit.form", "templates/ComboButton.html", "<table class=\"dijit dijitReset dijitInline dijitLeft\"\r\n\tcellspacing='0' cellpadding='0' role=\"presentation\"\r\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\r\n\t\t><td class=\"dijitReset dijitStretch dijitButtonNode\" dojoAttachPoint=\"buttonNode\" dojoAttachEvent=\"ondijitclick:_onButtonClick,onkeypress:_onButtonKeyPress\"\r\n\t\t><div id=\"${id}_button\" class=\"dijitReset dijitButtonContents\"\r\n\t\t\tdojoAttachPoint=\"titleNode\"\r\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\r\n\t\t\t><div class=\"dijitReset dijitInline dijitIcon\" dojoAttachPoint=\"iconNode\" role=\"presentation\"></div\r\n\t\t\t><div class=\"dijitReset dijitInline dijitButtonText\" id=\"${id}_label\" dojoAttachPoint=\"containerNode\" role=\"presentation\"></div\r\n\t\t></div\r\n\t\t></td\r\n\t\t><td id=\"${id}_arrow\" class='dijitReset dijitRight dijitButtonNode dijitArrowButton'\r\n\t\t\tdojoAttachPoint=\"_popupStateNode,focusNode,_buttonNode\"\r\n\t\t\tdojoAttachEvent=\"onkeypress:_onArrowKeyPress\"\r\n\t\t\ttitle=\"${optionsTitle}\"\r\n\t\t\trole=\"button\" aria-haspopup=\"true\"\r\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\r\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\r\n\t\t></td\r\n\t\t><td style=\"display:none !important;\"\r\n\t\t\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" dojoAttachPoint=\"valueNode\"\r\n\t\t/></td></tr></tbody\r\n></table>\r\n"),

	attributeMap: dojo.mixin(dojo.clone(dijit.form.Button.prototype.attributeMap), {
		id: "",
		tabIndex: ["focusNode", "titleNode"],
		title: "titleNode"
	}),

	// optionsTitle: String
	//		Text that describes the options menu (accessibility)
	optionsTitle: "",

	baseClass: "dijitComboButton",

	// Set classes like dijitButtonContentsHover or dijitArrowButtonActive depending on
	// mouse action over specified node
	cssStateNodes: {
		"buttonNode": "dijitButtonNode",
		"titleNode": "dijitButtonContents",
		"_popupStateNode": "dijitDownArrowButton"
	},

	_focusedNode: null,

	_onButtonKeyPress: function(/*Event*/ evt){
		// summary:
		//		Handler for right arrow key when focus is on left part of button
		if(evt.charOrCode == dojo.keys[this.isLeftToRight() ? "RIGHT_ARROW" : "LEFT_ARROW"]){
			dijit.focus(this._popupStateNode);
			dojo.stopEvent(evt);
		}
	},

	_onArrowKeyPress: function(/*Event*/ evt){
		// summary:
		//		Handler for left arrow key when focus is on right part of button
		if(evt.charOrCode == dojo.keys[this.isLeftToRight() ? "LEFT_ARROW" : "RIGHT_ARROW"]){
			dijit.focus(this.titleNode);
			dojo.stopEvent(evt);
		}
	},
	
	focus: function(/*String*/ position){
		// summary:
		//		Focuses this widget to according to position, if specified,
		//		otherwise on arrow node
		// position:
		//		"start" or "end"
		if(!this.disabled){
			dijit.focus(position == "start" ? this.titleNode : this._popupStateNode);
		}
	}
});

dojo.declare("dijit.form.ToggleButton", dijit.form.Button, {
	// summary:
	//		A button that can be in two states (checked or not).
	//		Can be base class for things like tabs or checkbox or radio buttons

	baseClass: "dijitToggleButton",

	// checked: Boolean
	//		Corresponds to the native HTML <input> element's attribute.
	//		In markup, specified as "checked='checked'" or just "checked".
	//		True if the button is depressed, or the checkbox is checked,
	//		or the radio button is selected, etc.
	checked: false,

	attributeMap: dojo.mixin(dojo.clone(dijit.form.Button.prototype.attributeMap), {
		checked:"focusNode"
	}),

	_clicked: function(/*Event*/ evt){
		this.set('checked', !this.checked);
	},

	_setCheckedAttr: function(/*Boolean*/ value, /*Boolean?*/ priorityChange){
		this._set("checked", value);
		dojo.attr(this.focusNode || this.domNode, "checked", value);
		dijit.setWaiState(this.focusNode || this.domNode, "pressed", value);
		this._handleOnChange(value, priorityChange);
	},

	setChecked: function(/*Boolean*/ checked){
		// summary:
		//		Deprecated.  Use set('checked', true/false) instead.
		dojo.deprecated("setChecked("+checked+") is deprecated. Use set('checked',"+checked+") instead.", "", "2.0");
		this.set('checked', checked);
	},

	reset: function(){
		// summary:
		//		Reset the widget's value to what it was at initialization time

		this._hasBeenBlurred = false;

		// set checked state to original setting
		this.set('checked', this.params.checked || false);
	}
});

}

if(!dojo._hasResource["dijit.form.ToggleButton"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.ToggleButton"] = true;
dojo.provide("dijit.form.ToggleButton");




}

if(!dojo._hasResource["dojo.i18n"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.i18n"] = true;
dojo.provide("dojo.i18n");


dojo.getObject("i18n", true, dojo);

/*=====
dojo.i18n = {
	// summary: Utility classes to enable loading of resources for internationalization (i18n)
};
=====*/

// when using a real AMD loader, dojo.i18n.getLocalization is already defined by dojo/lib/backCompat
dojo.i18n.getLocalization = dojo.i18n.getLocalization || function(/*String*/packageName, /*String*/bundleName, /*String?*/locale){
	//	summary:
	//		Returns an Object containing the localization for a given resource
	//		bundle in a package, matching the specified locale.
	//	description:
	//		Returns a hash containing name/value pairs in its prototypesuch
	//		that values can be easily overridden.  Throws an exception if the
	//		bundle is not found.  Bundle must have already been loaded by
	//		`dojo.requireLocalization()` or by a build optimization step.  NOTE:
	//		try not to call this method as part of an object property
	//		definition (`var foo = { bar: dojo.i18n.getLocalization() }`).  In
	//		some loading situations, the bundle may not be available in time
	//		for the object definition.  Instead, call this method inside a
	//		function that is run after all modules load or the page loads (like
	//		in `dojo.addOnLoad()`), or in a widget lifecycle method.
	//	packageName:
	//		package which is associated with this resource
	//	bundleName:
	//		the base filename of the resource bundle (without the ".js" suffix)
	//	locale:
	//		the variant to load (optional).  By default, the locale defined by
	//		the host environment: dojo.locale

	locale = dojo.i18n.normalizeLocale(locale);

	// look for nearest locale match
	var elements = locale.split('-');
	var module = [packageName,"nls",bundleName].join('.');
		var bundle = dojo._loadedModules[module];
	if(bundle){
		var localization;
		for(var i = elements.length; i > 0; i--){
			var loc = elements.slice(0, i).join('_');
			if(bundle[loc]){
				localization = bundle[loc];
				break;
			}
		}
		if(!localization){
			localization = bundle.ROOT;
		}

		// make a singleton prototype so that the caller won't accidentally change the values globally
		if(localization){
			var clazz = function(){};
			clazz.prototype = localization;
			return new clazz(); // Object
		}
	}

	throw new Error("Bundle not found: " + bundleName + " in " + packageName+" , locale=" + locale);
};

dojo.i18n.normalizeLocale = function(/*String?*/locale){
	//	summary:
	//		Returns canonical form of locale, as used by Dojo.
	//
	//  description:
	//		All variants are case-insensitive and are separated by '-' as specified in [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt).
	//		If no locale is specified, the dojo.locale is returned.  dojo.locale is defined by
	//		the user agent's locale unless overridden by djConfig.

	var result = locale ? locale.toLowerCase() : dojo.locale;
	if(result == "root"){
		result = "ROOT";
	}
	return result; // String
};

dojo.i18n._requireLocalization = function(/*String*/moduleName, /*String*/bundleName, /*String?*/locale, /*String?*/availableFlatLocales){
	//	summary:
	//		See dojo.requireLocalization()
	//	description:
	// 		Called by the bootstrap, but factored out so that it is only
	// 		included in the build when needed.

	var targetLocale = dojo.i18n.normalizeLocale(locale);
 	var bundlePackage = [moduleName, "nls", bundleName].join(".");
	// NOTE:
	//		When loading these resources, the packaging does not match what is
	//		on disk.  This is an implementation detail, as this is just a
	//		private data structure to hold the loaded resources.  e.g.
	//		`tests/hello/nls/en-us/salutations.js` is loaded as the object
	//		`tests.hello.nls.salutations.en_us={...}` The structure on disk is
	//		intended to be most convenient for developers and translators, but
	//		in memory it is more logical and efficient to store in a different
	//		order.  Locales cannot use dashes, since the resulting path will
	//		not evaluate as valid JS, so we translate them to underscores.

	//Find the best-match locale to load if we have available flat locales.
	var bestLocale = "";
	if(availableFlatLocales){
		var flatLocales = availableFlatLocales.split(",");
		for(var i = 0; i < flatLocales.length; i++){
			//Locale must match from start of string.
			//Using ["indexOf"] so customBase builds do not see
			//this as a dojo._base.array dependency.
			if(targetLocale["indexOf"](flatLocales[i]) == 0){
				if(flatLocales[i].length > bestLocale.length){
					bestLocale = flatLocales[i];
				}
			}
		}
		if(!bestLocale){
			bestLocale = "ROOT";
		}
	}

	//See if the desired locale is already loaded.
	var tempLocale = availableFlatLocales ? bestLocale : targetLocale;
	var bundle = dojo._loadedModules[bundlePackage];
	var localizedBundle = null;
	if(bundle){
		if(dojo.config.localizationComplete && bundle._built){return;}
		var jsLoc = tempLocale.replace(/-/g, '_');
		var translationPackage = bundlePackage+"."+jsLoc;
		localizedBundle = dojo._loadedModules[translationPackage];
	}

	if(!localizedBundle){
		bundle = dojo["provide"](bundlePackage);
		var syms = dojo._getModuleSymbols(moduleName);
		var modpath = syms.concat("nls").join("/");
		var parent;

		dojo.i18n._searchLocalePath(tempLocale, availableFlatLocales, function(loc){
			var jsLoc = loc.replace(/-/g, '_');
			var translationPackage = bundlePackage + "." + jsLoc;
			var loaded = false;
			if(!dojo._loadedModules[translationPackage]){
				// Mark loaded whether it's found or not, so that further load attempts will not be made
				dojo["provide"](translationPackage);
				var module = [modpath];
				if(loc != "ROOT"){module.push(loc);}
				module.push(bundleName);
				var filespec = module.join("/") + '.js';
				loaded = dojo._loadPath(filespec, null, function(hash){
					hash = hash.root || hash;
					// Use singleton with prototype to point to parent bundle, then mix-in result from loadPath
					var clazz = function(){};
					clazz.prototype = parent;
					bundle[jsLoc] = new clazz();
					for(var j in hash){ bundle[jsLoc][j] = hash[j]; }
				});
			}else{
				loaded = true;
			}
			if(loaded && bundle[jsLoc]){
				parent = bundle[jsLoc];
			}else{
				bundle[jsLoc] = parent;
			}

			if(availableFlatLocales){
				//Stop the locale path searching if we know the availableFlatLocales, since
				//the first call to this function will load the only bundle that is needed.
				return true;
			}
		});
	}

	//Save the best locale bundle as the target locale bundle when we know the
	//the available bundles.
	if(availableFlatLocales && targetLocale != bestLocale){
		bundle[targetLocale.replace(/-/g, '_')] = bundle[bestLocale.replace(/-/g, '_')];
	}
};

(function(){
	// If other locales are used, dojo.requireLocalization should load them as
	// well, by default.
	//
	// Override dojo.requireLocalization to do load the default bundle, then
	// iterate through the extraLocale list and load those translations as
	// well, unless a particular locale was requested.

	var extra = dojo.config.extraLocale;
	if(extra){
		if(!extra instanceof Array){
			extra = [extra];
		}

		var req = dojo.i18n._requireLocalization;
		dojo.i18n._requireLocalization = function(m, b, locale, availableFlatLocales){
			req(m,b,locale, availableFlatLocales);
			if(locale){return;}
			for(var i=0; i<extra.length; i++){
				req(m,b,extra[i], availableFlatLocales);
			}
		};
	}
})();

dojo.i18n._searchLocalePath = function(/*String*/locale, /*Boolean*/down, /*Function*/searchFunc){
	//	summary:
	//		A helper method to assist in searching for locale-based resources.
	//		Will iterate through the variants of a particular locale, either up
	//		or down, executing a callback function.  For example, "en-us" and
	//		true will try "en-us" followed by "en" and finally "ROOT".

	locale = dojo.i18n.normalizeLocale(locale);

	var elements = locale.split('-');
	var searchlist = [];
	for(var i = elements.length; i > 0; i--){
		searchlist.push(elements.slice(0, i).join('-'));
	}
	searchlist.push(false);
	if(down){searchlist.reverse();}

	for(var j = searchlist.length - 1; j >= 0; j--){
		var loc = searchlist[j] || "ROOT";
		var stop = searchFunc(loc);
		if(stop){ break; }
	}
};

dojo.i18n._preloadLocalizations = function(/*String*/bundlePrefix, /*Array*/localesGenerated){
	//	summary:
	//		Load built, flattened resource bundles, if available for all
	//		locales used in the page. Only called by built layer files.

	function preload(locale){
		locale = dojo.i18n.normalizeLocale(locale);
		dojo.i18n._searchLocalePath(locale, true, function(loc){
			for(var i=0; i<localesGenerated.length;i++){
				if(localesGenerated[i] == loc){
					dojo["require"](bundlePrefix+"_"+loc);
					return true; // Boolean
				}
			}
			return false; // Boolean
		});
	}
	preload();
	var extra = dojo.config.extraLocale||[];
	for(var i=0; i<extra.length; i++){
		preload(extra[i]);
	}
};

}

if(!dojo._hasResource["dijit.layout.StackController"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.StackController"] = true;
dojo.provide("dijit.layout.StackController");








dojo.declare(
		"dijit.layout.StackController",
		[dijit._Widget, dijit._Templated, dijit._Container],
		{
			// summary:
			//		Set of buttons to select a page in a page list.
			// description:
			//		Monitors the specified StackContainer, and whenever a page is
			//		added, deleted, or selected, updates itself accordingly.

			templateString: "<span role='tablist' dojoAttachEvent='onkeypress' class='dijitStackController'></span>",

			// containerId: [const] String
			//		The id of the page container that I point to
			containerId: "",

			// buttonWidget: [const] String
			//		The name of the button widget to create to correspond to each page
			buttonWidget: "dijit.layout._StackButton",

			constructor: function(){
				this.pane2button = {};		// mapping from pane id to buttons
				this.pane2connects = {};	// mapping from pane id to this.connect() handles
				this.pane2watches = {};		// mapping from pane id to watch() handles
			},

			buildRendering: function(){
				this.inherited(arguments);
				dijit.setWaiRole(this.domNode, "tablist");	// TODO: unneeded?   it's in template above.
			},

			postCreate: function(){
				this.inherited(arguments);

				// Listen to notifications from StackContainer
				this.subscribe(this.containerId+"-startup", "onStartup");
				this.subscribe(this.containerId+"-addChild", "onAddChild");
				this.subscribe(this.containerId+"-removeChild", "onRemoveChild");
				this.subscribe(this.containerId+"-selectChild", "onSelectChild");
				this.subscribe(this.containerId+"-containerKeyPress", "onContainerKeyPress");
			},

			onStartup: function(/*Object*/ info){
				// summary:
				//		Called after StackContainer has finished initializing
				// tags:
				//		private
				dojo.forEach(info.children, this.onAddChild, this);
				if(info.selected){
					// Show button corresponding to selected pane (unless selected
					// is null because there are no panes)
					this.onSelectChild(info.selected);
				}
			},

			destroy: function(){
				for(var pane in this.pane2button){
					this.onRemoveChild(dijit.byId(pane));
				}
				this.inherited(arguments);
			},

			onAddChild: function(/*dijit._Widget*/ page, /*Integer?*/ insertIndex){
				// summary:
				//		Called whenever a page is added to the container.
				//		Create button corresponding to the page.
				// tags:
				//		private

				// create an instance of the button widget
				var cls = dojo.getObject(this.buttonWidget);
				var button = new cls({
					id: this.id + "_" + page.id,
					label: page.title,
					dir: page.dir,
					lang: page.lang,
					showLabel: page.showTitle,
					iconClass: page.iconClass,
					closeButton: page.closable,
					title: page.tooltip
				});
				dijit.setWaiState(button.focusNode,"selected", "false");


				// map from page attribute to corresponding tab button attribute
				var pageAttrList = ["title", "showTitle", "iconClass", "closable", "tooltip"],
					buttonAttrList = ["label", "showLabel", "iconClass", "closeButton", "title"];

				// watch() so events like page title changes are reflected in tab button
				this.pane2watches[page.id] = dojo.map(pageAttrList, function(pageAttr, idx){
					return page.watch(pageAttr, function(name, oldVal, newVal){
						button.set(buttonAttrList[idx], newVal);
					});
				});
					
				// connections so that clicking a tab button selects the corresponding page
				this.pane2connects[page.id] = [
					this.connect(button, 'onClick', dojo.hitch(this,"onButtonClick", page)),
					this.connect(button, 'onClickCloseButton', dojo.hitch(this,"onCloseButtonClick", page))
				];

				this.addChild(button, insertIndex);
				this.pane2button[page.id] = button;
				page.controlButton = button;	// this value might be overwritten if two tabs point to same container
				if(!this._currentChild){ // put the first child into the tab order
					button.focusNode.setAttribute("tabIndex", "0");
					dijit.setWaiState(button.focusNode, "selected", "true");
					this._currentChild = page;
				}
				// make sure all tabs have the same length
				if(!this.isLeftToRight() && dojo.isIE && this._rectifyRtlTabList){
					this._rectifyRtlTabList();
				}
			},

			onRemoveChild: function(/*dijit._Widget*/ page){
				// summary:
				//		Called whenever a page is removed from the container.
				//		Remove the button corresponding to the page.
				// tags:
				//		private

				if(this._currentChild === page){ this._currentChild = null; }

				// disconnect/unwatch connections/watches related to page being removed
				dojo.forEach(this.pane2connects[page.id], dojo.hitch(this, "disconnect"));
				delete this.pane2connects[page.id];
				dojo.forEach(this.pane2watches[page.id], function(w){ w.unwatch(); });
				delete this.pane2watches[page.id];

				var button = this.pane2button[page.id];
				if(button){
					this.removeChild(button);
					delete this.pane2button[page.id];
					button.destroy();
				}
				delete page.controlButton;
			},

			onSelectChild: function(/*dijit._Widget*/ page){
				// summary:
				//		Called when a page has been selected in the StackContainer, either by me or by another StackController
				// tags:
				//		private

				if(!page){ return; }

				if(this._currentChild){
					var oldButton=this.pane2button[this._currentChild.id];
					oldButton.set('checked', false);
					dijit.setWaiState(oldButton.focusNode, "selected", "false");
					oldButton.focusNode.setAttribute("tabIndex", "-1");
				}

				var newButton=this.pane2button[page.id];
				newButton.set('checked', true);
				dijit.setWaiState(newButton.focusNode, "selected", "true");
				this._currentChild = page;
				newButton.focusNode.setAttribute("tabIndex", "0");
				var container = dijit.byId(this.containerId);
				dijit.setWaiState(container.containerNode, "labelledby", newButton.id);
			},

			onButtonClick: function(/*dijit._Widget*/ page){
				// summary:
				//		Called whenever one of my child buttons is pressed in an attempt to select a page
				// tags:
				//		private

				var container = dijit.byId(this.containerId);
				container.selectChild(page);
			},

			onCloseButtonClick: function(/*dijit._Widget*/ page){
				// summary:
				//		Called whenever one of my child buttons [X] is pressed in an attempt to close a page
				// tags:
				//		private

				var container = dijit.byId(this.containerId);
				container.closeChild(page);
				if(this._currentChild){
					var b = this.pane2button[this._currentChild.id];
					if(b){
						dijit.focus(b.focusNode || b.domNode);
					}
				}
			},

			// TODO: this is a bit redundant with forward, back api in StackContainer
			adjacent: function(/*Boolean*/ forward){
				// summary:
				//		Helper for onkeypress to find next/previous button
				// tags:
				//		private

				if(!this.isLeftToRight() && (!this.tabPosition || /top|bottom/.test(this.tabPosition))){ forward = !forward; }
				// find currently focused button in children array
				var children = this.getChildren();
				var current = dojo.indexOf(children, this.pane2button[this._currentChild.id]);
				// pick next button to focus on
				var offset = forward ? 1 : children.length - 1;
				return children[ (current + offset) % children.length ]; // dijit._Widget
			},

			onkeypress: function(/*Event*/ e){
				// summary:
				//		Handle keystrokes on the page list, for advancing to next/previous button
				//		and closing the current page if the page is closable.
				// tags:
				//		private

				if(this.disabled || e.altKey ){ return; }
				var forward = null;
				if(e.ctrlKey || !e._djpage){
					var k = dojo.keys;
					switch(e.charOrCode){
						case k.LEFT_ARROW:
						case k.UP_ARROW:
							if(!e._djpage){ forward = false; }
							break;
						case k.PAGE_UP:
							if(e.ctrlKey){ forward = false; }
							break;
						case k.RIGHT_ARROW:
						case k.DOWN_ARROW:
							if(!e._djpage){ forward = true; }
							break;
						case k.PAGE_DOWN:
							if(e.ctrlKey){ forward = true; }
							break;
						case k.HOME:
						case k.END:
							var children = this.getChildren();
							if(children && children.length){
								children[e.charOrCode == k.HOME ? 0 : children.length-1].onClick();
							}
							dojo.stopEvent(e);
							break;
						case k.DELETE:
							if(this._currentChild.closable){
								this.onCloseButtonClick(this._currentChild);
							}
							dojo.stopEvent(e);
							break;
						default:
							if(e.ctrlKey){
								if(e.charOrCode === k.TAB){
									this.adjacent(!e.shiftKey).onClick();
									dojo.stopEvent(e);
								}else if(e.charOrCode == "w"){
									if(this._currentChild.closable){
										this.onCloseButtonClick(this._currentChild);
									}
									dojo.stopEvent(e); // avoid browser tab closing.
								}
							}
					}
					// handle next/previous page navigation (left/right arrow, etc.)
					if(forward !== null){
						this.adjacent(forward).onClick();
						dojo.stopEvent(e);
					}
				}
			},

			onContainerKeyPress: function(/*Object*/ info){
				// summary:
				//		Called when there was a keypress on the container
				// tags:
				//		private
				info.e._djpage = info.page;
				this.onkeypress(info.e);
			}
	});


dojo.declare("dijit.layout._StackButton",
		dijit.form.ToggleButton,
		{
		// summary:
		//		Internal widget used by StackContainer.
		// description:
		//		The button-like or tab-like object you click to select or delete a page
		// tags:
		//		private

		// Override _FormWidget.tabIndex.
		// StackContainer buttons are not in the tab order by default.
		// Probably we should be calling this.startupKeyNavChildren() instead.
		tabIndex: "-1",

		buildRendering: function(/*Event*/ evt){
			this.inherited(arguments);
			dijit.setWaiRole((this.focusNode || this.domNode), "tab");
		},

		onClick: function(/*Event*/ evt){
			// summary:
			//		This is for TabContainer where the tabs are <span> rather than button,
			//		so need to set focus explicitly (on some browsers)
			//		Note that you shouldn't override this method, but you can connect to it.
			dijit.focus(this.focusNode);

			// ... now let StackController catch the event and tell me what to do
		},

		onClickCloseButton: function(/*Event*/ evt){
			// summary:
			//		StackContainer connects to this function; if your widget contains a close button
			//		then clicking it should call this function.
			//		Note that you shouldn't override this method, but you can connect to it.
			evt.stopPropagation();
		}
	});

}

if(!dojo._hasResource["dijit.layout.StackContainer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.StackContainer"] = true;
dojo.provide("dijit.layout.StackContainer");








dojo.declare(
	"dijit.layout.StackContainer",
	dijit.layout._LayoutWidget,
	{
	// summary:
	//		A container that has multiple children, but shows only
	//		one child at a time
	//
	// description:
	//		A container for widgets (ContentPanes, for example) That displays
	//		only one Widget at a time.
	//
	//		Publishes topics [widgetId]-addChild, [widgetId]-removeChild, and [widgetId]-selectChild
	//
	//		Can be base class for container, Wizard, Show, etc.

	// doLayout: Boolean
	//		If true, change the size of my currently displayed child to match my size
	doLayout: true,

	// persist: Boolean
	//		Remembers the selected child across sessions
	persist: false,

	baseClass: "dijitStackContainer",

/*=====
	// selectedChildWidget: [readonly] dijit._Widget
	//		References the currently selected child widget, if any.
	//		Adjust selected child with selectChild() method.
	selectedChildWidget: null,
=====*/

	buildRendering: function(){
		this.inherited(arguments);
		dojo.addClass(this.domNode, "dijitLayoutContainer");
		dijit.setWaiRole(this.containerNode, "tabpanel");
	},

	postCreate: function(){
		this.inherited(arguments);
		this.connect(this.domNode, "onkeypress", this._onKeyPress);
	},

	startup: function(){
		if(this._started){ return; }

		var children = this.getChildren();

		// Setup each page panel to be initially hidden
		dojo.forEach(children, this._setupChild, this);

		// Figure out which child to initially display, defaulting to first one
		if(this.persist){
			this.selectedChildWidget = dijit.byId(dojo.cookie(this.id + "_selectedChild"));
		}else{
			dojo.some(children, function(child){
				if(child.selected){
					this.selectedChildWidget = child;
				}
				return child.selected;
			}, this);
		}
		var selected = this.selectedChildWidget;
		if(!selected && children[0]){
			selected = this.selectedChildWidget = children[0];
			selected.selected = true;
		}

		// Publish information about myself so any StackControllers can initialize.
		// This needs to happen before this.inherited(arguments) so that for
		// TabContainer, this._contentBox doesn't include the space for the tab labels.
		dojo.publish(this.id+"-startup", [{children: children, selected: selected}]);

		// Startup each child widget, and do initial layout like setting this._contentBox,
		// then calls this.resize() which does the initial sizing on the selected child.
		this.inherited(arguments);
	},

	resize: function(){
		// Resize is called when we are first made visible (it's called from startup()
		// if we are initially visible).   If this is the first time we've been made
		// visible then show our first child.
		var selected = this.selectedChildWidget;
		if(selected && !this._hasBeenShown){
			this._hasBeenShown = true;
			this._showChild(selected);
		}
		this.inherited(arguments);
	},

	_setupChild: function(/*dijit._Widget*/ child){
		// Overrides _LayoutWidget._setupChild()

		this.inherited(arguments);

		dojo.replaceClass(child.domNode, "dijitHidden", "dijitVisible");

		// remove the title attribute so it doesn't show up when i hover
		// over a node
		child.domNode.title = "";
	},

	addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
		// Overrides _Container.addChild() to do layout and publish events

		this.inherited(arguments);

		if(this._started){
			dojo.publish(this.id+"-addChild", [child, insertIndex]);

			// in case the tab titles have overflowed from one line to two lines
			// (or, if this if first child, from zero lines to one line)
			// TODO: w/ScrollingTabController this is no longer necessary, although
			// ScrollTabController.resize() does need to get called to show/hide
			// the navigation buttons as appropriate, but that's handled in ScrollingTabController.onAddChild()
			this.layout();

			// if this is the first child, then select it
			if(!this.selectedChildWidget){
				this.selectChild(child);
			}
		}
	},

	removeChild: function(/*dijit._Widget*/ page){
		// Overrides _Container.removeChild() to do layout and publish events

		this.inherited(arguments);

		if(this._started){
			// this will notify any tablists to remove a button; do this first because it may affect sizing
			dojo.publish(this.id + "-removeChild", [page]);
		}

		// If we are being destroyed than don't run the code below (to select another page), because we are deleting
		// every page one by one
		if(this._beingDestroyed){ return; }

		// Select new page to display, also updating TabController to show the respective tab.
		// Do this before layout call because it can affect the height of the TabController.
		if(this.selectedChildWidget === page){
			this.selectedChildWidget = undefined;
			if(this._started){
				var children = this.getChildren();
				if(children.length){
					this.selectChild(children[0]);
				}
			}
		}

		if(this._started){
			// In case the tab titles now take up one line instead of two lines
			// (note though that ScrollingTabController never overflows to multiple lines),
			// or the height has changed slightly because of addition/removal of tab which close icon
			this.layout();
		}
	},

	selectChild: function(/*dijit._Widget|String*/ page, /*Boolean*/ animate){
		// summary:
		//		Show the given widget (which must be one of my children)
		// page:
		//		Reference to child widget or id of child widget

		page = dijit.byId(page);

		if(this.selectedChildWidget != page){
			// Deselect old page and select new one
			var d = this._transition(page, this.selectedChildWidget, animate);
			this._set("selectedChildWidget", page);
			dojo.publish(this.id+"-selectChild", [page]);

			if(this.persist){
				dojo.cookie(this.id + "_selectedChild", this.selectedChildWidget.id);
			}
		}

		return d;		// If child has an href, promise that fires when the child's href finishes loading
	},

	_transition: function(/*dijit._Widget*/ newWidget, /*dijit._Widget*/ oldWidget, /*Boolean*/ animate){
		// summary:
		//		Hide the old widget and display the new widget.
		//		Subclasses should override this.
		// tags:
		//		protected extension
		if(oldWidget){
			this._hideChild(oldWidget);
		}
		var d = this._showChild(newWidget);

		// Size the new widget, in case this is the first time it's being shown,
		// or I have been resized since the last time it was shown.
		// Note that page must be visible for resizing to work.
		if(newWidget.resize){
			if(this.doLayout){
				newWidget.resize(this._containerContentBox || this._contentBox);
			}else{
				// the child should pick it's own size but we still need to call resize()
				// (with no arguments) to let the widget lay itself out
				newWidget.resize();
			}
		}

		return d;	// If child has an href, promise that fires when the child's href finishes loading
	},

	_adjacent: function(/*Boolean*/ forward){
		// summary:
		//		Gets the next/previous child widget in this container from the current selection.
		var children = this.getChildren();
		var index = dojo.indexOf(children, this.selectedChildWidget);
		index += forward ? 1 : children.length - 1;
		return children[ index % children.length ]; // dijit._Widget
	},

	forward: function(){
		// summary:
		//		Advance to next page.
		return this.selectChild(this._adjacent(true), true);
	},

	back: function(){
		// summary:
		//		Go back to previous page.
		return this.selectChild(this._adjacent(false), true);
	},

	_onKeyPress: function(e){
		dojo.publish(this.id+"-containerKeyPress", [{ e: e, page: this}]);
	},

	layout: function(){
		// Implement _LayoutWidget.layout() virtual method.
		if(this.doLayout && this.selectedChildWidget && this.selectedChildWidget.resize){
			this.selectedChildWidget.resize(this._containerContentBox || this._contentBox);
		}
	},

	_showChild: function(/*dijit._Widget*/ page){
		// summary:
		//		Show the specified child by changing it's CSS, and call _onShow()/onShow() so
		//		it can do any updates it needs regarding loading href's etc.
		// returns:
		//		Promise that fires when page has finished showing, or true if there's no href
		var children = this.getChildren();
		page.isFirstChild = (page == children[0]);
		page.isLastChild = (page == children[children.length-1]);
		page._set("selected", true);

		dojo.replaceClass(page.domNode, "dijitVisible", "dijitHidden");

		return page._onShow() || true;
	},

	_hideChild: function(/*dijit._Widget*/ page){
		// summary:
		//		Hide the specified child by changing it's CSS, and call _onHide() so
		//		it's notified.
		page._set("selected", false);
		dojo.replaceClass(page.domNode, "dijitHidden", "dijitVisible");

		page.onHide();
	},

	closeChild: function(/*dijit._Widget*/ page){
		// summary:
		//		Callback when user clicks the [X] to remove a page.
		//		If onClose() returns true then remove and destroy the child.
		// tags:
		//		private
		var remove = page.onClose(this, page);
		if(remove){
			this.removeChild(page);
			// makes sure we can clean up executeScripts in ContentPane onUnLoad
			page.destroyRecursive();
		}
	},

	destroyDescendants: function(/*Boolean*/ preserveDom){
		dojo.forEach(this.getChildren(), function(child){
			this.removeChild(child);
			child.destroyRecursive(preserveDom);
		}, this);
	}
});

// For back-compat, remove for 2.0


// These arguments can be specified for the children of a StackContainer.
// Since any widget can be specified as a StackContainer child, mix them
// into the base widget class.  (This is a hack, but it's effective.)
dojo.extend(dijit._Widget, {
	// selected: Boolean
	//		Parameter for children of `dijit.layout.StackContainer` or subclasses.
	//		Specifies that this widget should be the initially displayed pane.
	//		Note: to change the selected child use `dijit.layout.StackContainer.selectChild`
	selected: false,

	// closable: Boolean
	//		Parameter for children of `dijit.layout.StackContainer` or subclasses.
	//		True if user can close (destroy) this child, such as (for example) clicking the X on the tab.
	closable: false,

	// iconClass: String
	//		Parameter for children of `dijit.layout.StackContainer` or subclasses.
	//		CSS Class specifying icon to use in label associated with this pane.
	iconClass: "",

	// showTitle: Boolean
	//		Parameter for children of `dijit.layout.StackContainer` or subclasses.
	//		When true, display title of this widget as tab label etc., rather than just using
	//		icon specified in iconClass
	showTitle: true
});

}

if(!dojo._hasResource["dijit.layout._TabContainerBase"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout._TabContainerBase"] = true;
dojo.provide("dijit.layout._TabContainerBase");





dojo.declare("dijit.layout._TabContainerBase",
	[dijit.layout.StackContainer, dijit._Templated],
	{
	// summary:
	//		Abstract base class for TabContainer.   Must define _makeController() to instantiate
	//		and return the widget that displays the tab labels
	// description:
	//		A TabContainer is a container that has multiple panes, but shows only
	//		one pane at a time.  There are a set of tabs corresponding to each pane,
	//		where each tab has the name (aka title) of the pane, and optionally a close button.

	// tabPosition: String
	//		Defines where tabs go relative to tab content.
	//		"top", "bottom", "left-h", "right-h"
	tabPosition: "top",

	baseClass: "dijitTabContainer",

	// tabStrip: [const] Boolean
	//		Defines whether the tablist gets an extra class for layouting, putting a border/shading
	//		around the set of tabs.   Not supported by claro theme.
	tabStrip: false,

	// nested: [const] Boolean
	//		If true, use styling for a TabContainer nested inside another TabContainer.
	//		For tundra etc., makes tabs look like links, and hides the outer
	//		border since the outer TabContainer already has a border.
	nested: false,

	templateString: dojo.cache("dijit.layout", "templates/TabContainer.html", "<div class=\"dijitTabContainer\">\r\n\t<div class=\"dijitTabListWrapper\" dojoAttachPoint=\"tablistNode\"></div>\r\n\t<div dojoAttachPoint=\"tablistSpacer\" class=\"dijitTabSpacer ${baseClass}-spacer\"></div>\r\n\t<div class=\"dijitTabPaneWrapper ${baseClass}-container\" dojoAttachPoint=\"containerNode\"></div>\r\n</div>\r\n"),

	postMixInProperties: function(){
		// set class name according to tab position, ex: dijitTabContainerTop
		this.baseClass += this.tabPosition.charAt(0).toUpperCase() + this.tabPosition.substr(1).replace(/-.*/, "");

		this.srcNodeRef && dojo.style(this.srcNodeRef, "visibility", "hidden");

		this.inherited(arguments);
	},

	buildRendering: function(){
		this.inherited(arguments);

		// Create the tab list that will have a tab (a.k.a. tab button) for each tab panel
		this.tablist = this._makeController(this.tablistNode);

		if(!this.doLayout){ dojo.addClass(this.domNode, "dijitTabContainerNoLayout"); }

		if(this.nested){
			/* workaround IE's lack of support for "a > b" selectors by
			 * tagging each node in the template.
			 */
			dojo.addClass(this.domNode, "dijitTabContainerNested");
			dojo.addClass(this.tablist.containerNode, "dijitTabContainerTabListNested");
			dojo.addClass(this.tablistSpacer, "dijitTabContainerSpacerNested");
			dojo.addClass(this.containerNode, "dijitTabPaneWrapperNested");
		}else{
			dojo.addClass(this.domNode, "tabStrip-" + (this.tabStrip ? "enabled" : "disabled"));
		}
	},

	_setupChild: function(/*dijit._Widget*/ tab){
		// Overrides StackContainer._setupChild().
		dojo.addClass(tab.domNode, "dijitTabPane");
		this.inherited(arguments);
	},

	startup: function(){
		if(this._started){ return; }

		// wire up the tablist and its tabs
		this.tablist.startup();

		this.inherited(arguments);
	},

	layout: function(){
		// Overrides StackContainer.layout().
		// Configure the content pane to take up all the space except for where the tabs are

		if(!this._contentBox || typeof(this._contentBox.l) == "undefined"){return;}

		var sc = this.selectedChildWidget;

		if(this.doLayout){
			// position and size the titles and the container node
			var titleAlign = this.tabPosition.replace(/-h/, "");
			this.tablist.layoutAlign = titleAlign;
			var children = [this.tablist, {
				domNode: this.tablistSpacer,
				layoutAlign: titleAlign
			}, {
				domNode: this.containerNode,
				layoutAlign: "client"
			}];
			dijit.layout.layoutChildren(this.domNode, this._contentBox, children);

			// Compute size to make each of my children.
			// children[2] is the margin-box size of this.containerNode, set by layoutChildren() call above
			this._containerContentBox = dijit.layout.marginBox2contentBox(this.containerNode, children[2]);

			if(sc && sc.resize){
				sc.resize(this._containerContentBox);
			}
		}else{
			// just layout the tab controller, so it can position left/right buttons etc.
			if(this.tablist.resize){
				//make the tabs zero width so that they don't interfere with width calc, then reset
				var s = this.tablist.domNode.style;
				s.width="0";
				var width = dojo.contentBox(this.domNode).w;
				s.width="";
				this.tablist.resize({w: width});
			}

			// and call resize() on the selected pane just to tell it that it's been made visible
			if(sc && sc.resize){
				sc.resize();
			}
		}
	},

	destroy: function(){
		if(this.tablist){
			this.tablist.destroy();
		}
		this.inherited(arguments);
	}
});

}

if(!dojo._hasResource["dijit._KeyNavContainer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._KeyNavContainer"] = true;
dojo.provide("dijit._KeyNavContainer");




dojo.declare("dijit._KeyNavContainer",
	dijit._Container,
	{

		// summary:
		//		A _Container with keyboard navigation of its children.
		// description:
		//		To use this mixin, call connectKeyNavHandlers() in
		//		postCreate() and call startupKeyNavChildren() in startup().
		//		It provides normalized keyboard and focusing code for Container
		//		widgets.
/*=====
		// focusedChild: [protected] Widget
		//		The currently focused child widget, or null if there isn't one
		focusedChild: null,
=====*/

		// tabIndex: Integer
		//		Tab index of the container; same as HTML tabIndex attribute.
		//		Note then when user tabs into the container, focus is immediately
		//		moved to the first item in the container.
		tabIndex: "0",

		_keyNavCodes: {},

		connectKeyNavHandlers: function(/*dojo.keys[]*/ prevKeyCodes, /*dojo.keys[]*/ nextKeyCodes){
			// summary:
			//		Call in postCreate() to attach the keyboard handlers
			//		to the container.
			// preKeyCodes: dojo.keys[]
			//		Key codes for navigating to the previous child.
			// nextKeyCodes: dojo.keys[]
			//		Key codes for navigating to the next child.
			// tags:
			//		protected

			var keyCodes = (this._keyNavCodes = {});
			var prev = dojo.hitch(this, this.focusPrev);
			var next = dojo.hitch(this, this.focusNext);
			dojo.forEach(prevKeyCodes, function(code){ keyCodes[code] = prev; });
			dojo.forEach(nextKeyCodes, function(code){ keyCodes[code] = next; });
			keyCodes[dojo.keys.HOME] = dojo.hitch(this, "focusFirstChild");
			keyCodes[dojo.keys.END] = dojo.hitch(this, "focusLastChild");
			this.connect(this.domNode, "onkeypress", "_onContainerKeypress");
			this.connect(this.domNode, "onfocus", "_onContainerFocus");
		},

		startupKeyNavChildren: function(){
			// summary:
			//		Call in startup() to set child tabindexes to -1
			// tags:
			//		protected
			dojo.forEach(this.getChildren(), dojo.hitch(this, "_startupChild"));
		},

		addChild: function(/*dijit._Widget*/ widget, /*int?*/ insertIndex){
			// summary:
			//		Add a child to our _Container
			dijit._KeyNavContainer.superclass.addChild.apply(this, arguments);
			this._startupChild(widget);
		},

		focus: function(){
			// summary:
			//		Default focus() implementation: focus the first child.
			this.focusFirstChild();
		},

		focusFirstChild: function(){
			// summary:
			//		Focus the first focusable child in the container.
			// tags:
			//		protected
			var child = this._getFirstFocusableChild();
			if(child){ // edge case: Menu could be empty or hidden
				this.focusChild(child);
			}
		},

		focusLastChild: function(){
			// summary:
			//		Focus the last focusable child in the container.
			// tags:
			//		protected
			var child = this._getLastFocusableChild();
			if(child){ // edge case: Menu could be empty or hidden
				this.focusChild(child);
			}
		},

		focusNext: function(){
			// summary:
			//		Focus the next widget
			// tags:
			//		protected
			var child = this._getNextFocusableChild(this.focusedChild, 1);
			this.focusChild(child);
		},

		focusPrev: function(){
			// summary:
			//		Focus the last focusable node in the previous widget
			//		(ex: go to the ComboButton icon section rather than button section)
			// tags:
			//		protected
			var child = this._getNextFocusableChild(this.focusedChild, -1);
			this.focusChild(child, true);
		},

		focusChild: function(/*dijit._Widget*/ widget, /*Boolean*/ last){
			// summary:
			//		Focus widget.
			// widget:
			//		Reference to container's child widget
			// last:
			//		If true and if widget has multiple focusable nodes, focus the
			//		last one instead of the first one
			// tags:
			//		protected
			
			if(this.focusedChild && widget !== this.focusedChild){
				this._onChildBlur(this.focusedChild);
			}
			widget.set("tabIndex", this.tabIndex);	// for IE focus outline to appear, must set tabIndex before focs
			widget.focus(last ? "end" : "start");
			this._set("focusedChild", widget);
		},

		_startupChild: function(/*dijit._Widget*/ widget){
			// summary:
			//		Setup for each child widget
			// description:
			//		Sets tabIndex=-1 on each child, so that the tab key will
			//		leave the container rather than visiting each child.
			// tags:
			//		private
			
			widget.set("tabIndex", "-1");
			
			this.connect(widget, "_onFocus", function(){
				// Set valid tabIndex so tabbing away from widget goes to right place, see #10272
				widget.set("tabIndex", this.tabIndex);
			});
			this.connect(widget, "_onBlur", function(){
				widget.set("tabIndex", "-1");
			});
		},

		_onContainerFocus: function(evt){
			// summary:
			//		Handler for when the container gets focus
			// description:
			//		Initially the container itself has a tabIndex, but when it gets
			//		focus, switch focus to first child...
			// tags:
			//		private

			// Note that we can't use _onFocus() because switching focus from the
			// _onFocus() handler confuses the focus.js code
			// (because it causes _onFocusNode() to be called recursively)

			// focus bubbles on Firefox,
			// so just make sure that focus has really gone to the container
			if(evt.target !== this.domNode){ return; }

			this.focusFirstChild();

			// and then set the container's tabIndex to -1,
			// (don't remove as that breaks Safari 4)
			// so that tab or shift-tab will go to the fields after/before
			// the container, rather than the container itself
			dojo.attr(this.domNode, "tabIndex", "-1");
		},

		_onBlur: function(evt){
			// When focus is moved away the container, and its descendant (popup) widgets,
			// then restore the container's tabIndex so that user can tab to it again.
			// Note that using _onBlur() so that this doesn't happen when focus is shifted
			// to one of my child widgets (typically a popup)
			if(this.tabIndex){
				dojo.attr(this.domNode, "tabIndex", this.tabIndex);
			}
			this.inherited(arguments);
		},

		_onContainerKeypress: function(evt){
			// summary:
			//		When a key is pressed, if it's an arrow key etc. then
			//		it's handled here.
			// tags:
			//		private
			if(evt.ctrlKey || evt.altKey){ return; }
			var func = this._keyNavCodes[evt.charOrCode];
			if(func){
				func();
				dojo.stopEvent(evt);
			}
		},

		_onChildBlur: function(/*dijit._Widget*/ widget){
			// summary:
			//		Called when focus leaves a child widget to go
			//		to a sibling widget.
			// tags:
			//		protected
		},

		_getFirstFocusableChild: function(){
			// summary:
			//		Returns first child that can be focused
			return this._getNextFocusableChild(null, 1);	// dijit._Widget
		},

		_getLastFocusableChild: function(){
			// summary:
			//		Returns last child that can be focused
			return this._getNextFocusableChild(null, -1);	// dijit._Widget
		},

		_getNextFocusableChild: function(child, dir){
			// summary:
			//		Returns the next or previous focusable child, compared
			//		to "child"
			// child: Widget
			//		The current widget
			// dir: Integer
			//		* 1 = after
			//		* -1 = before
			if(child){
				child = this._getSiblingOfChild(child, dir);
			}
			var children = this.getChildren();
			for(var i=0; i < children.length; i++){
				if(!child){
					child = children[(dir>0) ? 0 : (children.length-1)];
				}
				if(child.isFocusable()){
					return child;	// dijit._Widget
				}
				child = this._getSiblingOfChild(child, dir);
			}
			// no focusable child found
			return null;	// dijit._Widget
		}
	}
);

}

if(!dojo._hasResource["dijit.MenuItem"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.MenuItem"] = true;
dojo.provide("dijit.MenuItem");







dojo.declare("dijit.MenuItem",
		[dijit._Widget, dijit._Templated, dijit._Contained, dijit._CssStateMixin],
		{
		// summary:
		//		A line item in a Menu Widget

		// Make 3 columns
		// icon, label, and expand arrow (BiDi-dependent) indicating sub-menu
		templateString: dojo.cache("dijit", "templates/MenuItem.html", "<tr class=\"dijitReset dijitMenuItem\" dojoAttachPoint=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\r\n\t\tdojoAttachEvent=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\r\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\r\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" dojoAttachPoint=\"iconNode\"/>\r\n\t</td>\r\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" dojoAttachPoint=\"containerNode\"></td>\r\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" dojoAttachPoint=\"accelKeyNode\"></td>\r\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\r\n\t\t<div dojoAttachPoint=\"arrowWrapper\" style=\"visibility: hidden\">\r\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\r\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\r\n\t\t</div>\r\n\t</td>\r\n</tr>\r\n"),

		attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
			label: { node: "containerNode", type: "innerHTML" },
			iconClass: { node: "iconNode", type: "class" }
		}),

		baseClass: "dijitMenuItem",

		// label: String
		//		Menu text
		label: '',

		// iconClass: String
		//		Class to apply to DOMNode to make it display an icon.
		iconClass: "",

		// accelKey: String
		//		Text for the accelerator (shortcut) key combination.
		//		Note that although Menu can display accelerator keys there
		//		is no infrastructure to actually catch and execute these
		//		accelerators.
		accelKey: "",

		// disabled: Boolean
		//		If true, the menu item is disabled.
		//		If false, the menu item is enabled.
		disabled: false,

		_fillContent: function(/*DomNode*/ source){
			// If button label is specified as srcNodeRef.innerHTML rather than
			// this.params.label, handle it here.
			if(source && !("label" in this.params)){
				this.set('label', source.innerHTML);
			}
		},

		buildRendering: function(){
			this.inherited(arguments);
			var label = this.id+"_text";
			dojo.attr(this.containerNode, "id", label);
			if(this.accelKeyNode){
				dojo.attr(this.accelKeyNode, "id", this.id + "_accel");
				label += " " + this.id + "_accel";
			}
			dijit.setWaiState(this.domNode, "labelledby", label);
			dojo.setSelectable(this.domNode, false);
		},

		_onHover: function(){
			// summary:
			//		Handler when mouse is moved onto menu item
			// tags:
			//		protected
			this.getParent().onItemHover(this);
		},

		_onUnhover: function(){
			// summary:
			//		Handler when mouse is moved off of menu item,
			//		possibly to a child menu, or maybe to a sibling
			//		menuitem or somewhere else entirely.
			// tags:
			//		protected

			// if we are unhovering the currently selected item
			// then unselect it
			this.getParent().onItemUnhover(this);

			// When menu is hidden (collapsed) due to clicking a MenuItem and having it execute,
			// FF and IE don't generate an onmouseout event for the MenuItem.
			// So, help out _CssStateMixin in this case.
			this._set("hovering", false);
		},

		_onClick: function(evt){
			// summary:
			//		Internal handler for click events on MenuItem.
			// tags:
			//		private
			this.getParent().onItemClick(this, evt);
			dojo.stopEvent(evt);
		},

		onClick: function(/*Event*/ evt){
			// summary:
			//		User defined function to handle clicks
			// tags:
			//		callback
		},

		focus: function(){
			// summary:
			//		Focus on this MenuItem
			try{
				if(dojo.isIE == 8){
					// needed for IE8 which won't scroll TR tags into view on focus yet calling scrollIntoView creates flicker (#10275)
					this.containerNode.focus();
				}
				dijit.focus(this.focusNode);
			}catch(e){
				// this throws on IE (at least) in some scenarios
			}
		},

		_onFocus: function(){
			// summary:
			//		This is called by the focus manager when focus
			//		goes to this MenuItem or a child menu.
			// tags:
			//		protected
			this._setSelected(true);
			this.getParent()._onItemFocus(this);

			this.inherited(arguments);
		},

		_setSelected: function(selected){
			// summary:
			//		Indicate that this node is the currently selected one
			// tags:
			//		private

			/***
			 * TODO: remove this method and calls to it, when _onBlur() is working for MenuItem.
			 * Currently _onBlur() gets called when focus is moved from the MenuItem to a child menu.
			 * That's not supposed to happen, but the problem is:
			 * In order to allow dijit.popup's getTopPopup() to work,a sub menu's popupParent
			 * points to the parent Menu, bypassing the parent MenuItem... thus the
			 * MenuItem is not in the chain of active widgets and gets a premature call to
			 * _onBlur()
			 */

			dojo.toggleClass(this.domNode, "dijitMenuItemSelected", selected);
		},

		setLabel: function(/*String*/ content){
			// summary:
			//		Deprecated.   Use set('label', ...) instead.
			// tags:
			//		deprecated
			dojo.deprecated("dijit.MenuItem.setLabel() is deprecated.  Use set('label', ...) instead.", "", "2.0");
			this.set("label", content);
		},

		setDisabled: function(/*Boolean*/ disabled){
			// summary:
			//		Deprecated.   Use set('disabled', bool) instead.
			// tags:
			//		deprecated
			dojo.deprecated("dijit.Menu.setDisabled() is deprecated.  Use set('disabled', bool) instead.", "", "2.0");
			this.set('disabled', disabled);
		},
		_setDisabledAttr: function(/*Boolean*/ value){
			// summary:
			//		Hook for attr('disabled', ...) to work.
			//		Enable or disable this menu item.

			dijit.setWaiState(this.focusNode, 'disabled', value ? 'true' : 'false');
			this._set("disabled", value);
		},
		_setAccelKeyAttr: function(/*String*/ value){
			// summary:
			//		Hook for attr('accelKey', ...) to work.
			//		Set accelKey on this menu item.

			this.accelKeyNode.style.display=value?"":"none";
			this.accelKeyNode.innerHTML=value;
			//have to use colSpan to make it work in IE
			dojo.attr(this.containerNode,'colSpan',value?"1":"2");
			
			this._set("accelKey", value);
		}
	});

}

if(!dojo._hasResource["dijit.PopupMenuItem"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.PopupMenuItem"] = true;
dojo.provide("dijit.PopupMenuItem");




dojo.declare("dijit.PopupMenuItem",
		dijit.MenuItem,
		{
		_fillContent: function(){
			// summary:
			//		When Menu is declared in markup, this code gets the menu label and
			//		the popup widget from the srcNodeRef.
			// description:
			//		srcNodeRefinnerHTML contains both the menu item text and a popup widget
			//		The first part holds the menu item text and the second part is the popup
			// example:
			// |	<div dojoType="dijit.PopupMenuItem">
			// |		<span>pick me</span>
			// |		<popup> ... </popup>
			// |	</div>
			// tags:
			//		protected

			if(this.srcNodeRef){
				var nodes = dojo.query("*", this.srcNodeRef);
				dijit.PopupMenuItem.superclass._fillContent.call(this, nodes[0]);

				// save pointer to srcNode so we can grab the drop down widget after it's instantiated
				this.dropDownContainer = this.srcNodeRef;
			}
		},

		startup: function(){
			if(this._started){ return; }
			this.inherited(arguments);

			// we didn't copy the dropdown widget from the this.srcNodeRef, so it's in no-man's
			// land now.  move it to dojo.doc.body.
			if(!this.popup){
				var node = dojo.query("[widgetId]", this.dropDownContainer)[0];
				this.popup = dijit.byNode(node);
			}
			dojo.body().appendChild(this.popup.domNode);
			this.popup.startup();

			this.popup.domNode.style.display="none";
			if(this.arrowWrapper){
				dojo.style(this.arrowWrapper, "visibility", "");
			}
			dijit.setWaiState(this.focusNode, "haspopup", "true");
		},

		destroyDescendants: function(){
			if(this.popup){
				// Destroy the popup, unless it's already been destroyed.  This can happen because
				// the popup is a direct child of <body> even though it's logically my child.
				if(!this.popup._destroyed){
					this.popup.destroyRecursive();
				}
				delete this.popup;
			}
			this.inherited(arguments);
		}
	});

}

if(!dojo._hasResource["dijit.CheckedMenuItem"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.CheckedMenuItem"] = true;
dojo.provide("dijit.CheckedMenuItem");




dojo.declare("dijit.CheckedMenuItem",
		dijit.MenuItem,
		{
		// summary:
		//		A checkbox-like menu item for toggling on and off

		templateString: dojo.cache("dijit", "templates/CheckedMenuItem.html", "<tr class=\"dijitReset dijitMenuItem\" dojoAttachPoint=\"focusNode\" role=\"menuitemcheckbox\" tabIndex=\"-1\"\r\n\t\tdojoAttachEvent=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\r\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\r\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuItemIcon dijitCheckedMenuItemIcon\" dojoAttachPoint=\"iconNode\"/>\r\n\t\t<span class=\"dijitCheckedMenuItemIconChar\">&#10003;</span>\r\n\t</td>\r\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" dojoAttachPoint=\"containerNode,labelNode\"></td>\r\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" dojoAttachPoint=\"accelKeyNode\"></td>\r\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">&nbsp;</td>\r\n</tr>\r\n"),

		// checked: Boolean
		//		Our checked state
		checked: false,
		_setCheckedAttr: function(/*Boolean*/ checked){
			// summary:
			//		Hook so attr('checked', bool) works.
			//		Sets the class and state for the check box.
			dojo.toggleClass(this.domNode, "dijitCheckedMenuItemChecked", checked);
			dijit.setWaiState(this.domNode, "checked", checked);
			this._set("checked", checked);
		},

		onChange: function(/*Boolean*/ checked){
			// summary:
			//		User defined function to handle check/uncheck events
			// tags:
			//		callback
		},

		_onClick: function(/*Event*/ e){
			// summary:
			//		Clicking this item just toggles its state
			// tags:
			//		private
			if(!this.disabled){
				this.set("checked", !this.checked);
				this.onChange(this.checked);
			}
			this.inherited(arguments);
		}
	});

}

if(!dojo._hasResource["dijit.MenuSeparator"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.MenuSeparator"] = true;
dojo.provide("dijit.MenuSeparator");






dojo.declare("dijit.MenuSeparator",
		[dijit._Widget, dijit._Templated, dijit._Contained],
		{
		// summary:
		//		A line between two menu items

		templateString: dojo.cache("dijit", "templates/MenuSeparator.html", "<tr class=\"dijitMenuSeparator\">\r\n\t<td class=\"dijitMenuSeparatorIconCell\">\r\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\r\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\r\n\t</td>\r\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\r\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\r\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\r\n\t</td>\r\n</tr>\r\n"),

		buildRendering: function(){
			this.inherited(arguments);
			dojo.setSelectable(this.domNode, false);
		},

		isFocusable: function(){
			// summary:
			//		Override to always return false
			// tags:
			//		protected

			return false; // Boolean
		}
	});

}

if(!dojo._hasResource["dijit.Menu"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.Menu"] = true;
dojo.provide("dijit.Menu");











// "dijit/MenuItem", "dijit/PopupMenuItem", "dijit/CheckedMenuItem", "dijit/MenuSeparator" for Back-compat (TODO: remove in 2.0)

dojo.declare("dijit._MenuBase",
	[dijit._Widget, dijit._Templated, dijit._KeyNavContainer],
{
	// summary:
	//		Base class for Menu and MenuBar

	// parentMenu: [readonly] Widget
	//		pointer to menu that displayed me
	parentMenu: null,

	// popupDelay: Integer
	//		number of milliseconds before hovering (without clicking) causes the popup to automatically open.
	popupDelay: 500,

	startup: function(){
		if(this._started){ return; }

		dojo.forEach(this.getChildren(), function(child){ child.startup(); });
		this.startupKeyNavChildren();

		this.inherited(arguments);
	},

	onExecute: function(){
		// summary:
		//		Attach point for notification about when a menu item has been executed.
		//		This is an internal mechanism used for Menus to signal to their parent to
		//		close them, because they are about to execute the onClick handler.   In
		//		general developers should not attach to or override this method.
		// tags:
		//		protected
	},

	onCancel: function(/*Boolean*/ closeAll){
		// summary:
		//		Attach point for notification about when the user cancels the current menu
		//		This is an internal mechanism used for Menus to signal to their parent to
		//		close them.  In general developers should not attach to or override this method.
		// tags:
		//		protected
	},

	_moveToPopup: function(/*Event*/ evt){
		// summary:
		//		This handles the right arrow key (left arrow key on RTL systems),
		//		which will either open a submenu, or move to the next item in the
		//		ancestor MenuBar
		// tags:
		//		private

		if(this.focusedChild && this.focusedChild.popup && !this.focusedChild.disabled){
			this.focusedChild._onClick(evt);
		}else{
			var topMenu = this._getTopMenu();
			if(topMenu && topMenu._isMenuBar){
				topMenu.focusNext();
			}
		}
	},

	_onPopupHover: function(/*Event*/ evt){
		// summary:
		//		This handler is called when the mouse moves over the popup.
		// tags:
		//		private

		// if the mouse hovers over a menu popup that is in pending-close state,
		// then stop the close operation.
		// This can't be done in onItemHover since some popup targets don't have MenuItems (e.g. ColorPicker)
		if(this.currentPopup && this.currentPopup._pendingClose_timer){
			var parentMenu = this.currentPopup.parentMenu;
			// highlight the parent menu item pointing to this popup
			if(parentMenu.focusedChild){
				parentMenu.focusedChild._setSelected(false);
			}
			parentMenu.focusedChild = this.currentPopup.from_item;
			parentMenu.focusedChild._setSelected(true);
			// cancel the pending close
			this._stopPendingCloseTimer(this.currentPopup);
		}
	},

	onItemHover: function(/*MenuItem*/ item){
		// summary:
		//		Called when cursor is over a MenuItem.
		// tags:
		//		protected

		// Don't do anything unless user has "activated" the menu by:
		//		1) clicking it
		//		2) opening it from a parent menu (which automatically focuses it)
		if(this.isActive){
			this.focusChild(item);
			if(this.focusedChild.popup && !this.focusedChild.disabled && !this.hover_timer){
				this.hover_timer = setTimeout(dojo.hitch(this, "_openPopup"), this.popupDelay);
			}
		}
		// if the user is mixing mouse and keyboard navigation,
		// then the menu may not be active but a menu item has focus,
		// but it's not the item that the mouse just hovered over.
		// To avoid both keyboard and mouse selections, use the latest.
		if(this.focusedChild){
			this.focusChild(item);
		}
		this._hoveredChild = item;
	},

	_onChildBlur: function(item){
		// summary:
		//		Called when a child MenuItem becomes inactive because focus
		//		has been removed from the MenuItem *and* it's descendant menus.
		// tags:
		//		private
		this._stopPopupTimer();
		item._setSelected(false);
		// Close all popups that are open and descendants of this menu
		var itemPopup = item.popup;
		if(itemPopup){
			this._stopPendingCloseTimer(itemPopup);
			itemPopup._pendingClose_timer = setTimeout(function(){
				itemPopup._pendingClose_timer = null;
				if(itemPopup.parentMenu){
					itemPopup.parentMenu.currentPopup = null;
				}
				dijit.popup.close(itemPopup); // this calls onClose
			}, this.popupDelay);
		}
	},

	onItemUnhover: function(/*MenuItem*/ item){
		// summary:
		//		Callback fires when mouse exits a MenuItem
		// tags:
		//		protected

		if(this.isActive){
			this._stopPopupTimer();
		}
		if(this._hoveredChild == item){ this._hoveredChild = null; }
	},

	_stopPopupTimer: function(){
		// summary:
		//		Cancels the popup timer because the user has stop hovering
		//		on the MenuItem, etc.
		// tags:
		//		private
		if(this.hover_timer){
			clearTimeout(this.hover_timer);
			this.hover_timer = null;
		}
	},

	_stopPendingCloseTimer: function(/*dijit._Widget*/ popup){
		// summary:
		//		Cancels the pending-close timer because the close has been preempted
		// tags:
		//		private
		if(popup._pendingClose_timer){
			clearTimeout(popup._pendingClose_timer);
			popup._pendingClose_timer = null;
		}
	},

	_stopFocusTimer: function(){
		// summary:
		//		Cancels the pending-focus timer because the menu was closed before focus occured
		// tags:
		//		private
		if(this._focus_timer){
			clearTimeout(this._focus_timer);
			this._focus_timer = null;
		}
	},

	_getTopMenu: function(){
		// summary:
		//		Returns the top menu in this chain of Menus
		// tags:
		//		private
		for(var top=this; top.parentMenu; top=top.parentMenu);
		return top;
	},

	onItemClick: function(/*dijit._Widget*/ item, /*Event*/ evt){
		// summary:
		//		Handle clicks on an item.
		// tags:
		//		private

		// this can't be done in _onFocus since the _onFocus events occurs asynchronously
		if(typeof this.isShowingNow == 'undefined'){ // non-popup menu
			this._markActive();
		}

		this.focusChild(item);

		if(item.disabled){ return false; }

		if(item.popup){
			this._openPopup();
		}else{
			// before calling user defined handler, close hierarchy of menus
			// and restore focus to place it was when menu was opened
			this.onExecute();

			// user defined handler for click
			item.onClick(evt);
		}
	},

	_openPopup: function(){
		// summary:
		//		Open the popup to the side of/underneath the current menu item
		// tags:
		//		protected

		this._stopPopupTimer();
		var from_item = this.focusedChild;
		if(!from_item){ return; } // the focused child lost focus since the timer was started
		var popup = from_item.popup;
		if(popup.isShowingNow){ return; }
		if(this.currentPopup){
			this._stopPendingCloseTimer(this.currentPopup);
			dijit.popup.close(this.currentPopup);
		}
		popup.parentMenu = this;
		popup.from_item = from_item; // helps finding the parent item that should be focused for this popup
		var self = this;
		dijit.popup.open({
			parent: this,
			popup: popup,
			around: from_item.domNode,
			orient: this._orient || (this.isLeftToRight() ?
									{'TR': 'TL', 'TL': 'TR', 'BR': 'BL', 'BL': 'BR'} :
									{'TL': 'TR', 'TR': 'TL', 'BL': 'BR', 'BR': 'BL'}),
			onCancel: function(){ // called when the child menu is canceled
				// set isActive=false (_closeChild vs _cleanUp) so that subsequent hovering will NOT open child menus
				// which seems aligned with the UX of most applications (e.g. notepad, wordpad, paint shop pro)
				self.focusChild(from_item);	// put focus back on my node
				self._cleanUp();			// close the submenu (be sure this is done _after_ focus is moved)
				from_item._setSelected(true); // oops, _cleanUp() deselected the item
				self.focusedChild = from_item;	// and unset focusedChild
			},
			onExecute: dojo.hitch(this, "_cleanUp")
		});

		this.currentPopup = popup;
		// detect mouseovers to handle lazy mouse movements that temporarily focus other menu items
		popup.connect(popup.domNode, "onmouseenter", dojo.hitch(self, "_onPopupHover")); // cleaned up when the popped-up widget is destroyed on close

		if(popup.focus){
			// If user is opening the popup via keyboard (right arrow, or down arrow for MenuBar),
			// if the cursor happens to collide with the popup, it will generate an onmouseover event
			// even though the mouse wasn't moved.   Use a setTimeout() to call popup.focus so that
			// our focus() call overrides the onmouseover event, rather than vice-versa.  (#8742)
			popup._focus_timer = setTimeout(dojo.hitch(popup, function(){
				this._focus_timer = null;
				this.focus();
			}), 0);
		}
	},

	_markActive: function(){
		// summary:
		//              Mark this menu's state as active.
		//		Called when this Menu gets focus from:
		//			1) clicking it (mouse or via space/arrow key)
		//			2) being opened by a parent menu.
		//		This is not called just from mouse hover.
		//		Focusing a menu via TAB does NOT automatically set isActive
		//		since TAB is a navigation operation and not a selection one.
		//		For Windows apps, pressing the ALT key focuses the menubar
		//		menus (similar to TAB navigation) but the menu is not active
		//		(ie no dropdown) until an item is clicked.
		this.isActive = true;
		dojo.replaceClass(this.domNode, "dijitMenuActive", "dijitMenuPassive");
	},

	onOpen: function(/*Event*/ e){
		// summary:
		//		Callback when this menu is opened.
		//		This is called by the popup manager as notification that the menu
		//		was opened.
		// tags:
		//		private

		this.isShowingNow = true;
		this._markActive();
	},

	_markInactive: function(){
		// summary:
		//		Mark this menu's state as inactive.
		this.isActive = false; // don't do this in _onBlur since the state is pending-close until we get here
		dojo.replaceClass(this.domNode, "dijitMenuPassive", "dijitMenuActive");
	},

	onClose: function(){
		// summary:
		//		Callback when this menu is closed.
		//		This is called by the popup manager as notification that the menu
		//		was closed.
		// tags:
		//		private

		this._stopFocusTimer();
		this._markInactive();
		this.isShowingNow = false;
		this.parentMenu = null;
	},

	_closeChild: function(){
		// summary:
		//		Called when submenu is clicked or focus is lost.  Close hierarchy of menus.
		// tags:
		//		private
		this._stopPopupTimer();

		var fromItem = this.focusedChild && this.focusedChild.from_item;

		if(this.currentPopup){
			// If focus is on my child menu then move focus to me,
			// because IE doesn't like it when you display:none a node with focus
			if(dijit._curFocus && dojo.isDescendant(dijit._curFocus, this.currentPopup.domNode)){
				this.focusedChild.focusNode.focus();
			}
			// Close all popups that are open and descendants of this menu
			dijit.popup.close(this.currentPopup);
			this.currentPopup = null;
		}

		if(this.focusedChild){ // unhighlight the focused item
			this.focusedChild._setSelected(false);
			this.focusedChild._onUnhover();
			this.focusedChild = null;
		}
	},

	_onItemFocus: function(/*MenuItem*/ item){
		// summary:
		//		Called when child of this Menu gets focus from:
		//			1) clicking it
		//			2) tabbing into it
		//			3) being opened by a parent menu.
		//		This is not called just from mouse hover.
		if(this._hoveredChild && this._hoveredChild != item){
			this._hoveredChild._onUnhover(); // any previous mouse movement is trumped by focus selection
		}
	},

	_onBlur: function(){
		// summary:
		//		Called when focus is moved away from this Menu and it's submenus.
		// tags:
		//		protected
		this._cleanUp();
		this.inherited(arguments);
	},

	_cleanUp: function(){
		// summary:
		//		Called when the user is done with this menu.  Closes hierarchy of menus.
		// tags:
		//		private

		this._closeChild(); // don't call this.onClose since that's incorrect for MenuBar's that never close
		if(typeof this.isShowingNow == 'undefined'){ // non-popup menu doesn't call onClose
			this._markInactive();
		}
	}
});

dojo.declare("dijit.Menu",
	dijit._MenuBase,
	{
	// summary
	//		A context menu you can assign to multiple elements

	// TODO: most of the code in here is just for context menu (right-click menu)
	// support.  In retrospect that should have been a separate class (dijit.ContextMenu).
	// Split them for 2.0

	constructor: function(){
		this._bindings = [];
	},

	templateString: dojo.cache("dijit", "templates/Menu.html", "<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\" dojoAttachEvent=\"onkeypress:_onKeyPress\" cellspacing=\"0\">\r\n\t<tbody class=\"dijitReset\" dojoAttachPoint=\"containerNode\"></tbody>\r\n</table>\r\n"),

	baseClass: "dijitMenu",

	// targetNodeIds: [const] String[]
	//		Array of dom node ids of nodes to attach to.
	//		Fill this with nodeIds upon widget creation and it becomes context menu for those nodes.
	targetNodeIds: [],

	// contextMenuForWindow: [const] Boolean
	//		If true, right clicking anywhere on the window will cause this context menu to open.
	//		If false, must specify targetNodeIds.
	contextMenuForWindow: false,

	// leftClickToOpen: [const] Boolean
	//		If true, menu will open on left click instead of right click, similiar to a file menu.
	leftClickToOpen: false,

	// refocus: Boolean
	// 		When this menu closes, re-focus the element which had focus before it was opened.
	refocus: true,

	postCreate: function(){
		if(this.contextMenuForWindow){
			this.bindDomNode(dojo.body());
		}else{
			// TODO: should have _setTargetNodeIds() method to handle initialization and a possible
			// later set('targetNodeIds', ...) call.   There's also a problem that targetNodeIds[]
			// gets stale after calls to bindDomNode()/unBindDomNode() as it still is just the original list (see #9610)
			dojo.forEach(this.targetNodeIds, this.bindDomNode, this);
		}
		var k = dojo.keys, l = this.isLeftToRight();
		this._openSubMenuKey = l ? k.RIGHT_ARROW : k.LEFT_ARROW;
		this._closeSubMenuKey = l ? k.LEFT_ARROW : k.RIGHT_ARROW;
		this.connectKeyNavHandlers([k.UP_ARROW], [k.DOWN_ARROW]);
	},

	_onKeyPress: function(/*Event*/ evt){
		// summary:
		//		Handle keyboard based menu navigation.
		// tags:
		//		protected

		if(evt.ctrlKey || evt.altKey){ return; }

		switch(evt.charOrCode){
			case this._openSubMenuKey:
				this._moveToPopup(evt);
				dojo.stopEvent(evt);
				break;
			case this._closeSubMenuKey:
				if(this.parentMenu){
					if(this.parentMenu._isMenuBar){
						this.parentMenu.focusPrev();
					}else{
						this.onCancel(false);
					}
				}else{
					dojo.stopEvent(evt);
				}
				break;
		}
	},

	// thanks burstlib!
	_iframeContentWindow: function(/* HTMLIFrameElement */iframe_el){
		// summary:
		//		Returns the window reference of the passed iframe
		// tags:
		//		private
		var win = dojo.window.get(this._iframeContentDocument(iframe_el)) ||
			// Moz. TODO: is this available when defaultView isn't?
			this._iframeContentDocument(iframe_el)['__parent__'] ||
			(iframe_el.name && dojo.doc.frames[iframe_el.name]) || null;
		return win;	//	Window
	},

	_iframeContentDocument: function(/* HTMLIFrameElement */iframe_el){
		// summary:
		//		Returns a reference to the document object inside iframe_el
		// tags:
		//		protected
		var doc = iframe_el.contentDocument // W3
			|| (iframe_el.contentWindow && iframe_el.contentWindow.document) // IE
			|| (iframe_el.name && dojo.doc.frames[iframe_el.name] && dojo.doc.frames[iframe_el.name].document)
			|| null;
		return doc;	//	HTMLDocument
	},

	bindDomNode: function(/*String|DomNode*/ node){
		// summary:
		//		Attach menu to given node
		node = dojo.byId(node);

		var cn;	// Connect node

		// Support context menus on iframes.   Rather than binding to the iframe itself we need
		// to bind to the <body> node inside the iframe.
		if(node.tagName.toLowerCase() == "iframe"){
			var iframe = node,
				win = this._iframeContentWindow(iframe);
			cn = dojo.withGlobal(win, dojo.body);
		}else{
			
			// To capture these events at the top level, attach to <html>, not <body>.
			// Otherwise right-click context menu just doesn't work.
			cn = (node == dojo.body() ? dojo.doc.documentElement : node);
		}


		// "binding" is the object to track our connection to the node (ie, the parameter to bindDomNode())
		var binding = {
			node: node,
			iframe: iframe
		};

		// Save info about binding in _bindings[], and make node itself record index(+1) into
		// _bindings[] array.   Prefix w/_dijitMenu to avoid setting an attribute that may
		// start with a number, which fails on FF/safari.
		dojo.attr(node, "_dijitMenu" + this.id, this._bindings.push(binding));

		// Setup the connections to monitor click etc., unless we are connecting to an iframe which hasn't finished
		// loading yet, in which case we need to wait for the onload event first, and then connect
		// On linux Shift-F10 produces the oncontextmenu event, but on Windows it doesn't, so
		// we need to monitor keyboard events in addition to the oncontextmenu event.
		var doConnects = dojo.hitch(this, function(cn){
			return [
				// TODO: when leftClickToOpen is true then shouldn't space/enter key trigger the menu,
				// rather than shift-F10?
				dojo.connect(cn, this.leftClickToOpen ? "onclick" : "oncontextmenu", this, function(evt){
					// Schedule context menu to be opened unless it's already been scheduled from onkeydown handler
					dojo.stopEvent(evt);
					this._scheduleOpen(evt.target, iframe, {x: evt.pageX, y: evt.pageY});
				}),
				dojo.connect(cn, "onkeydown", this, function(evt){
					if(evt.shiftKey && evt.keyCode == dojo.keys.F10){
						dojo.stopEvent(evt);
						this._scheduleOpen(evt.target, iframe);	// no coords - open near target node
					}
				})
			];
		});
		binding.connects = cn ? doConnects(cn) : [];

		if(iframe){
			// Setup handler to [re]bind to the iframe when the contents are initially loaded,
			// and every time the contents change.
			// Need to do this b/c we are actually binding to the iframe's <body> node.
			// Note: can't use dojo.connect(), see #9609.

			binding.onloadHandler = dojo.hitch(this, function(){
				// want to remove old connections, but IE throws exceptions when trying to
				// access the <body> node because it's already gone, or at least in a state of limbo

				var win = this._iframeContentWindow(iframe);
					cn = dojo.withGlobal(win, dojo.body);
				binding.connects = doConnects(cn);
			});
			if(iframe.addEventListener){
				iframe.addEventListener("load", binding.onloadHandler, false);
			}else{
				iframe.attachEvent("onload", binding.onloadHandler);
			}
		}
	},

	unBindDomNode: function(/*String|DomNode*/ nodeName){
		// summary:
		//		Detach menu from given node

		var node;
		try{
			node = dojo.byId(nodeName);
		}catch(e){
			// On IE the dojo.byId() call will get an exception if the attach point was
			// the <body> node of an <iframe> that has since been reloaded (and thus the
			// <body> node is in a limbo state of destruction.
			return;
		}

		// node["_dijitMenu" + this.id] contains index(+1) into my _bindings[] array
		var attrName = "_dijitMenu" + this.id;
		if(node && dojo.hasAttr(node, attrName)){
			var bid = dojo.attr(node, attrName)-1, b = this._bindings[bid];
			dojo.forEach(b.connects, dojo.disconnect);

			// Remove listener for iframe onload events
			var iframe = b.iframe;
			if(iframe){
				if(iframe.removeEventListener){
					iframe.removeEventListener("load", b.onloadHandler, false);
				}else{
					iframe.detachEvent("onload", b.onloadHandler);
				}
			}

			dojo.removeAttr(node, attrName);
			delete this._bindings[bid];
		}
	},

	_scheduleOpen: function(/*DomNode?*/ target, /*DomNode?*/ iframe, /*Object?*/ coords){
		// summary:
		//		Set timer to display myself.  Using a timer rather than displaying immediately solves
		//		two problems:
		//
		//		1. IE: without the delay, focus work in "open" causes the system
		//		context menu to appear in spite of stopEvent.
		//
		//		2. Avoid double-shows on linux, where shift-F10 generates an oncontextmenu event
		//		even after a dojo.stopEvent(e).  (Shift-F10 on windows doesn't generate the
		//		oncontextmenu event.)

		if(!this._openTimer){
			this._openTimer = setTimeout(dojo.hitch(this, function(){
				delete this._openTimer;
				this._openMyself({
					target: target,
					iframe: iframe,
					coords: coords
				});
			}), 1);
		}
	},

	_openMyself: function(args){
		// summary:
		//		Internal function for opening myself when the user does a right-click or something similar.
		// args:
		//		This is an Object containing:
		//		* target:
		//			The node that is being clicked
		//		* iframe:
		//			If an <iframe> is being clicked, iframe points to that iframe
		//		* coords:
		//			Put menu at specified x/y position in viewport, or if iframe is
		//			specified, then relative to iframe.
		//
		//		_openMyself() formerly took the event object, and since various code references
		//		evt.target (after connecting to _openMyself()), using an Object for parameters
		//		(so that old code still works).

		var target = args.target,
			iframe = args.iframe,
			coords = args.coords;

		// Get coordinates to open menu, either at specified (mouse) position or (if triggered via keyboard)
		// then near the node the menu is assigned to.
		if(coords){
			if(iframe){
				// Specified coordinates are on <body> node of an <iframe>, convert to match main document
				var od = target.ownerDocument,
					ifc = dojo.position(iframe, true),
					win = this._iframeContentWindow(iframe),
					scroll = dojo.withGlobal(win, "_docScroll", dojo);
	
				var cs = dojo.getComputedStyle(iframe),
					tp = dojo._toPixelValue,
					left = (dojo.isIE && dojo.isQuirks ? 0 : tp(iframe, cs.paddingLeft)) + (dojo.isIE && dojo.isQuirks ? tp(iframe, cs.borderLeftWidth) : 0),
					top = (dojo.isIE && dojo.isQuirks ? 0 : tp(iframe, cs.paddingTop)) + (dojo.isIE && dojo.isQuirks ? tp(iframe, cs.borderTopWidth) : 0);

				coords.x += ifc.x + left - scroll.x;
				coords.y += ifc.y + top - scroll.y;
			}
		}else{
			coords = dojo.position(target, true);
			coords.x += 10;
			coords.y += 10;
		}

		var self=this;
		var savedFocus = dijit.getFocus(this);
		function closeAndRestoreFocus(){
			// user has clicked on a menu or popup
			if(self.refocus){
				dijit.focus(savedFocus);
			}
			dijit.popup.close(self);
		}
		dijit.popup.open({
			popup: this,
			x: coords.x,
			y: coords.y,
			onExecute: closeAndRestoreFocus,
			onCancel: closeAndRestoreFocus,
			orient: this.isLeftToRight() ? 'L' : 'R'
		});
		this.focus();

		this._onBlur = function(){
			this.inherited('_onBlur', arguments);
			// Usually the parent closes the child widget but if this is a context
			// menu then there is no parent
			dijit.popup.close(this);
			// don't try to restore focus; user has clicked another part of the screen
			// and set focus there
		};
	},

	uninitialize: function(){
 		dojo.forEach(this._bindings, function(b){ if(b){ this.unBindDomNode(b.node); } }, this);
 		this.inherited(arguments);
	}
}
);

}

if(!dojo._hasResource["dijit.layout.TabController"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.TabController"] = true;
dojo.provide("dijit.layout.TabController");







// Menu is used for an accessible close button, would be nice to have a lighter-weight solution


dojo.declare("dijit.layout.TabController",
	dijit.layout.StackController,
{
	// summary:
	// 		Set of tabs (the things with titles and a close button, that you click to show a tab panel).
	//		Used internally by `dijit.layout.TabContainer`.
	// description:
	//		Lets the user select the currently shown pane in a TabContainer or StackContainer.
	//		TabController also monitors the TabContainer, and whenever a pane is
	//		added or deleted updates itself accordingly.
	// tags:
	//		private

	templateString: "<div role='tablist' dojoAttachEvent='onkeypress:onkeypress'></div>",

	// tabPosition: String
	//		Defines where tabs go relative to the content.
	//		"top", "bottom", "left-h", "right-h"
	tabPosition: "top",

	// buttonWidget: String
	//		The name of the tab widget to create to correspond to each page
	buttonWidget: "dijit.layout._TabButton",

	_rectifyRtlTabList: function(){
		// summary:
		//		For left/right TabContainer when page is RTL mode, rectify the width of all tabs to be equal, otherwise the tab widths are different in IE

		if(0 >= this.tabPosition.indexOf('-h')){ return; }
		if(!this.pane2button){ return; }

		var maxWidth = 0;
		for(var pane in this.pane2button){
			var ow = this.pane2button[pane].innerDiv.scrollWidth;
			maxWidth = Math.max(maxWidth, ow);
		}
		//unify the length of all the tabs
		for(pane in this.pane2button){
			this.pane2button[pane].innerDiv.style.width = maxWidth + 'px';
		}
	}
});

dojo.declare("dijit.layout._TabButton",
	dijit.layout._StackButton,
	{
	// summary:
	//		A tab (the thing you click to select a pane).
	// description:
	//		Contains the title of the pane, and optionally a close-button to destroy the pane.
	//		This is an internal widget and should not be instantiated directly.
	// tags:
	//		private

	// baseClass: String
	//		The CSS class applied to the domNode.
	baseClass: "dijitTab",

	// Apply dijitTabCloseButtonHover when close button is hovered
	cssStateNodes: {
		closeNode: "dijitTabCloseButton"
	},

	templateString: dojo.cache("dijit.layout", "templates/_TabButton.html", "<div role=\"presentation\" dojoAttachPoint=\"titleNode\" dojoAttachEvent='onclick:onClick'>\r\n    <div role=\"presentation\" class='dijitTabInnerDiv' dojoAttachPoint='innerDiv'>\r\n        <div role=\"presentation\" class='dijitTabContent' dojoAttachPoint='tabContent'>\r\n        \t<div role=\"presentation\" dojoAttachPoint='focusNode'>\r\n\t\t        <img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitTabButtonIcon\" dojoAttachPoint='iconNode' />\r\n\t\t        <span dojoAttachPoint='containerNode' class='tabLabel'></span>\r\n\t\t        <span class=\"dijitInline dijitTabCloseButton dijitTabCloseIcon\" dojoAttachPoint='closeNode'\r\n\t\t        \t\tdojoAttachEvent='onclick: onClickCloseButton' role=\"presentation\">\r\n\t\t            <span dojoAttachPoint='closeText' class='dijitTabCloseText'>[x]</span\r\n\t\t        ></span>\r\n\t\t\t</div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"),

	// Override _FormWidget.scrollOnFocus.
	// Don't scroll the whole tab container into view when the button is focused.
	scrollOnFocus: false,

	buildRendering: function(){
		this.inherited(arguments);

		dojo.setSelectable(this.containerNode, false);
	},

	startup: function(){
		this.inherited(arguments);
		var n = this.domNode;

		// Required to give IE6 a kick, as it initially hides the
		// tabs until they are focused on.
		setTimeout(function(){
			n.className = n.className;
		}, 1);
	},

	_setCloseButtonAttr: function(/*Boolean*/ disp){
		// summary:
		//		Hide/show close button
		this._set("closeButton", disp);
		dojo.toggleClass(this.innerDiv, "dijitClosable", disp);
		this.closeNode.style.display = disp ? "" : "none";
		if(disp){
			var _nlsResources = dojo.i18n.getLocalization("dijit", "common");
			if(this.closeNode){
				dojo.attr(this.closeNode,"title", _nlsResources.itemClose);
			}
			// add context menu onto title button
			var _nlsResources = dojo.i18n.getLocalization("dijit", "common");
			this._closeMenu = new dijit.Menu({
				id: this.id+"_Menu",
				dir: this.dir,
				lang: this.lang,
				targetNodeIds: [this.domNode]
			});

			this._closeMenu.addChild(new dijit.MenuItem({
				label: _nlsResources.itemClose,
				dir: this.dir,
				lang: this.lang,
				onClick: dojo.hitch(this, "onClickCloseButton")
			}));
		}else{
			if(this._closeMenu){
				this._closeMenu.destroyRecursive();
				delete this._closeMenu;
			}
		}
	},
	_setLabelAttr: function(/*String*/ content){
		// summary:
		//		Hook for set('label', ...) to work.
		// description:
		//		takes an HTML string.
		//		Inherited ToggleButton implementation will Set the label (text) of the button;
		//		Need to set the alt attribute of icon on tab buttons if no label displayed
		this.inherited(arguments);
		if(this.showLabel == false && !this.params.title){
			this.iconNode.alt = dojo.trim(this.containerNode.innerText || this.containerNode.textContent || '');
		}
	},

	destroy: function(){
		if(this._closeMenu){
			this._closeMenu.destroyRecursive();
			delete this._closeMenu;
		}
		this.inherited(arguments);
	}
});

}

if(!dojo._hasResource["dijit.layout.ScrollingTabController"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.ScrollingTabController"] = true;
dojo.provide("dijit.layout.ScrollingTabController");







dojo.declare("dijit.layout.ScrollingTabController",
	dijit.layout.TabController,
	{
	// summary:
	//		Set of tabs with left/right arrow keys and a menu to switch between tabs not
	//		all fitting on a single row.
	//		Works only for horizontal tabs (either above or below the content, not to the left
	//		or right).
	// tags:
	//		private

	templateString: dojo.cache("dijit.layout", "templates/ScrollingTabController.html", "<div class=\"dijitTabListContainer-${tabPosition}\" style=\"visibility:hidden\">\r\n\t<div dojoType=\"dijit.layout._ScrollingTabControllerMenuButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_menuBtn\" containerId=\"${containerId}\" iconClass=\"dijitTabStripMenuIcon\"\r\n\t\t\tdropDownPosition=\"below-alt, above-alt\"\r\n\t\t\tdojoAttachPoint=\"_menuBtn\" showLabel=\"false\">&#9660;</div>\r\n\t<div dojoType=\"dijit.layout._ScrollingTabControllerButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_leftBtn\" iconClass=\"dijitTabStripSlideLeftIcon\"\r\n\t\t\tdojoAttachPoint=\"_leftBtn\" dojoAttachEvent=\"onClick: doSlideLeft\" showLabel=\"false\">&#9664;</div>\r\n\t<div dojoType=\"dijit.layout._ScrollingTabControllerButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_rightBtn\" iconClass=\"dijitTabStripSlideRightIcon\"\r\n\t\t\tdojoAttachPoint=\"_rightBtn\" dojoAttachEvent=\"onClick: doSlideRight\" showLabel=\"false\">&#9654;</div>\r\n\t<div class='dijitTabListWrapper' dojoAttachPoint='tablistWrapper'>\r\n\t\t<div role='tablist' dojoAttachEvent='onkeypress:onkeypress'\r\n\t\t\t\tdojoAttachPoint='containerNode' class='nowrapTabStrip'></div>\r\n\t</div>\r\n</div>\r\n"),

	// useMenu: [const] Boolean
	//		True if a menu should be used to select tabs when they are too
	//		wide to fit the TabContainer, false otherwise.
	useMenu: true,

	// useSlider: [const] Boolean
	//		True if a slider should be used to select tabs when they are too
	//		wide to fit the TabContainer, false otherwise.
	useSlider: true,

	// tabStripClass: [const] String
	//		The css class to apply to the tab strip, if it is visible.
	tabStripClass: "",

	widgetsInTemplate: true,

	// _minScroll: Number
	//		The distance in pixels from the edge of the tab strip which,
	//		if a scroll animation is less than, forces the scroll to
	//		go all the way to the left/right.
	_minScroll: 5,

	attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
		"class": "containerNode"
	}),

	buildRendering: function(){
		this.inherited(arguments);
		var n = this.domNode;

		this.scrollNode = this.tablistWrapper;
		this._initButtons();

		if(!this.tabStripClass){
			this.tabStripClass = "dijitTabContainer" +
				this.tabPosition.charAt(0).toUpperCase() +
				this.tabPosition.substr(1).replace(/-.*/, "") +
				"None";
			dojo.addClass(n, "tabStrip-disabled")
		}

		dojo.addClass(this.tablistWrapper, this.tabStripClass);
	},

	onStartup: function(){
		this.inherited(arguments);

		// Do not show the TabController until the related
		// StackController has added it's children.  This gives
		// a less visually jumpy instantiation.
		dojo.style(this.domNode, "visibility", "visible");
		this._postStartup = true;
	},

	onAddChild: function(page, insertIndex){
		this.inherited(arguments);

		// changes to the tab button label or iconClass will have changed the width of the
		// buttons, so do a resize
		dojo.forEach(["label", "iconClass"], function(attr){
			this.pane2watches[page.id].push(
				this.pane2button[page.id].watch(attr, dojo.hitch(this, function(name, oldValue, newValue){
					if(this._postStartup && this._dim){
						this.resize(this._dim);
					}
				}))
			);
		}, this);

		// Increment the width of the wrapper when a tab is added
		// This makes sure that the buttons never wrap.
		// The value 200 is chosen as it should be bigger than most
		// Tab button widths.
		dojo.style(this.containerNode, "width",
			(dojo.style(this.containerNode, "width") + 200) + "px");
	},

	onRemoveChild: function(page, insertIndex){
		// null out _selectedTab because we are about to delete that dom node
		var button = this.pane2button[page.id];
		if(this._selectedTab === button.domNode){
			this._selectedTab = null;
		}

		this.inherited(arguments);
	},

	_initButtons: function(){
		// summary:
		//		Creates the buttons used to scroll to view tabs that
		//		may not be visible if the TabContainer is too narrow.

		// Make a list of the buttons to display when the tab labels become
		// wider than the TabContainer, and hide the other buttons.
		// Also gets the total width of the displayed buttons.
		this._btnWidth = 0;
		this._buttons = dojo.query("> .tabStripButton", this.domNode).filter(function(btn){
			if((this.useMenu && btn == this._menuBtn.domNode) ||
				(this.useSlider && (btn == this._rightBtn.domNode || btn == this._leftBtn.domNode))){
				this._btnWidth += dojo._getMarginSize(btn).w;
				return true;
			}else{
				dojo.style(btn, "display", "none");
				return false;
			}
		}, this);
	},

	_getTabsWidth: function(){
		var children = this.getChildren();
		if(children.length){
			var leftTab = children[this.isLeftToRight() ? 0 : children.length - 1].domNode,
				rightTab = children[this.isLeftToRight() ? children.length - 1 : 0].domNode;
			return rightTab.offsetLeft + dojo.style(rightTab, "width") - leftTab.offsetLeft;
		}else{
			return 0;
		}
	},

	_enableBtn: function(width){
		// summary:
		//		Determines if the tabs are wider than the width of the TabContainer, and
		//		thus that we need to display left/right/menu navigation buttons.
		var tabsWidth = this._getTabsWidth();
		width = width || dojo.style(this.scrollNode, "width");
		return tabsWidth > 0 && width < tabsWidth;
	},

	resize: function(dim){
		// summary:
		//		Hides or displays the buttons used to scroll the tab list and launch the menu
		//		that selects tabs.

		if(this.domNode.offsetWidth == 0){
			return;
		}

		// Save the dimensions to be used when a child is renamed.
		this._dim = dim;

		// Set my height to be my natural height (tall enough for one row of tab labels),
		// and my content-box width based on margin-box width specified in dim parameter.
		// But first reset scrollNode.height in case it was set by layoutChildren() call
		// in a previous run of this method.
		this.scrollNode.style.height = "auto";
		this._contentBox = dijit.layout.marginBox2contentBox(this.domNode, {h: 0, w: dim.w});
		this._contentBox.h = this.scrollNode.offsetHeight;
		dojo.contentBox(this.domNode, this._contentBox);

		// Show/hide the left/right/menu navigation buttons depending on whether or not they
		// are needed.
		var enable = this._enableBtn(this._contentBox.w);
		this._buttons.style("display", enable ? "" : "none");

		// Position and size the navigation buttons and the tablist
		this._leftBtn.layoutAlign = "left";
		this._rightBtn.layoutAlign = "right";
		this._menuBtn.layoutAlign = this.isLeftToRight() ? "right" : "left";
		dijit.layout.layoutChildren(this.domNode, this._contentBox,
			[this._menuBtn, this._leftBtn, this._rightBtn, {domNode: this.scrollNode, layoutAlign: "client"}]);

		// set proper scroll so that selected tab is visible
		if(this._selectedTab){
			if(this._anim && this._anim.status() == "playing"){
				this._anim.stop();
			}
			var w = this.scrollNode,
				sl = this._convertToScrollLeft(this._getScrollForSelectedTab());
			w.scrollLeft = sl;
		}

		// Enable/disabled left right buttons depending on whether or not user can scroll to left or right
		this._setButtonClass(this._getScroll());
		
		this._postResize = true;

		// Return my size so layoutChildren() can use it.
		// Also avoids IE9 layout glitch on browser resize when scroll buttons present
		return {h: this._contentBox.h, w: dim.w};
	},

	_getScroll: function(){
		// summary:
		//		Returns the current scroll of the tabs where 0 means
		//		"scrolled all the way to the left" and some positive number, based on #
		//		of pixels of possible scroll (ex: 1000) means "scrolled all the way to the right"
		var sl = (this.isLeftToRight() || dojo.isIE < 8 || (dojo.isIE && dojo.isQuirks) || dojo.isWebKit) ? this.scrollNode.scrollLeft :
				dojo.style(this.containerNode, "width") - dojo.style(this.scrollNode, "width")
					 + (dojo.isIE == 8 ? -1 : 1) * this.scrollNode.scrollLeft;
		return sl;
	},

	_convertToScrollLeft: function(val){
		// summary:
		//		Given a scroll value where 0 means "scrolled all the way to the left"
		//		and some positive number, based on # of pixels of possible scroll (ex: 1000)
		//		means "scrolled all the way to the right", return value to set this.scrollNode.scrollLeft
		//		to achieve that scroll.
		//
		//		This method is to adjust for RTL funniness in various browsers and versions.
		if(this.isLeftToRight() || dojo.isIE < 8 || (dojo.isIE && dojo.isQuirks) || dojo.isWebKit){
			return val;
		}else{
			var maxScroll = dojo.style(this.containerNode, "width") - dojo.style(this.scrollNode, "width");
			return (dojo.isIE == 8 ? -1 : 1) * (val - maxScroll);
		}
	},

	onSelectChild: function(/*dijit._Widget*/ page){
		// summary:
		//		Smoothly scrolls to a tab when it is selected.

		var tab = this.pane2button[page.id];
		if(!tab || !page){return;}

		// Scroll to the selected tab, except on startup, when scrolling is handled in resize()
		var node = tab.domNode;
		if(this._postResize && node != this._selectedTab){
			this._selectedTab = node;

			var sl = this._getScroll();

			if(sl > node.offsetLeft ||
					sl + dojo.style(this.scrollNode, "width") <
					node.offsetLeft + dojo.style(node, "width")){
				this.createSmoothScroll().play();
			}
		}

		this.inherited(arguments);
	},

	_getScrollBounds: function(){
		// summary:
		//		Returns the minimum and maximum scroll setting to show the leftmost and rightmost
		//		tabs (respectively)
		var children = this.getChildren(),
			scrollNodeWidth = dojo.style(this.scrollNode, "width"),		// about 500px
			containerWidth = dojo.style(this.containerNode, "width"),	// 50,000px
			maxPossibleScroll = containerWidth - scrollNodeWidth,	// scrolling until right edge of containerNode visible
			tabsWidth = this._getTabsWidth();

		if(children.length && tabsWidth > scrollNodeWidth){
			// Scrolling should happen
			return {
				min: this.isLeftToRight() ? 0 : children[children.length-1].domNode.offsetLeft,
				max: this.isLeftToRight() ?
					(children[children.length-1].domNode.offsetLeft + dojo.style(children[children.length-1].domNode, "width")) - scrollNodeWidth :
					maxPossibleScroll
			};
		}else{
			// No scrolling needed, all tabs visible, we stay either scrolled to far left or far right (depending on dir)
			var onlyScrollPosition = this.isLeftToRight() ? 0 : maxPossibleScroll;
			return {
				min: onlyScrollPosition,
				max: onlyScrollPosition
			};
		}
	},

	_getScrollForSelectedTab: function(){
		// summary:
		//		Returns the scroll value setting so that the selected tab
		//		will appear in the center
		var w = this.scrollNode,
			n = this._selectedTab,
			scrollNodeWidth = dojo.style(this.scrollNode, "width"),
			scrollBounds = this._getScrollBounds();

		// TODO: scroll minimal amount (to either right or left) so that
		// selected tab is fully visible, and just return if it's already visible?
		var pos = (n.offsetLeft + dojo.style(n, "width")/2) - scrollNodeWidth/2;
		pos = Math.min(Math.max(pos, scrollBounds.min), scrollBounds.max);

		// TODO:
		// If scrolling close to the left side or right side, scroll
		// all the way to the left or right.  See this._minScroll.
		// (But need to make sure that doesn't scroll the tab out of view...)
		return pos;
	},

	createSmoothScroll: function(x){
		// summary:
		//		Creates a dojo._Animation object that smoothly scrolls the tab list
		//		either to a fixed horizontal pixel value, or to the selected tab.
		// description:
		//		If an number argument is passed to the function, that horizontal
		//		pixel position is scrolled to.  Otherwise the currently selected
		//		tab is scrolled to.
		// x: Integer?
		//		An optional pixel value to scroll to, indicating distance from left.

		// Calculate position to scroll to
		if(arguments.length > 0){
			// position specified by caller, just make sure it's within bounds
			var scrollBounds = this._getScrollBounds();
			x = Math.min(Math.max(x, scrollBounds.min), scrollBounds.max);
		}else{
			// scroll to center the current tab
			x = this._getScrollForSelectedTab();
		}

		if(this._anim && this._anim.status() == "playing"){
			this._anim.stop();
		}

		var self = this,
			w = this.scrollNode,
			anim = new dojo._Animation({
				beforeBegin: function(){
					if(this.curve){ delete this.curve; }
					var oldS = w.scrollLeft,
						newS = self._convertToScrollLeft(x);
					anim.curve = new dojo._Line(oldS, newS);
				},
				onAnimate: function(val){
					w.scrollLeft = val;
				}
			});
		this._anim = anim;

		// Disable/enable left/right buttons according to new scroll position
		this._setButtonClass(x);

		return anim; // dojo._Animation
	},

	_getBtnNode: function(/*Event*/ e){
		// summary:
		//		Gets a button DOM node from a mouse click event.
		// e:
		//		The mouse click event.
		var n = e.target;
		while(n && !dojo.hasClass(n, "tabStripButton")){
			n = n.parentNode;
		}
		return n;
	},

	doSlideRight: function(/*Event*/ e){
		// summary:
		//		Scrolls the menu to the right.
		// e:
		//		The mouse click event.
		this.doSlide(1, this._getBtnNode(e));
	},

	doSlideLeft: function(/*Event*/ e){
		// summary:
		//		Scrolls the menu to the left.
		// e:
		//		The mouse click event.
		this.doSlide(-1,this._getBtnNode(e));
	},

	doSlide: function(/*Number*/ direction, /*DomNode*/ node){
		// summary:
		//		Scrolls the tab list to the left or right by 75% of the widget width.
		// direction:
		//		If the direction is 1, the widget scrolls to the right, if it is
		//		-1, it scrolls to the left.

		if(node && dojo.hasClass(node, "dijitTabDisabled")){return;}

		var sWidth = dojo.style(this.scrollNode, "width");
		var d = (sWidth * 0.75) * direction;

		var to = this._getScroll() + d;

		this._setButtonClass(to);

		this.createSmoothScroll(to).play();
	},

	_setButtonClass: function(/*Number*/ scroll){
		// summary:
		//		Disables the left scroll button if the tabs are scrolled all the way to the left,
		//		or the right scroll button in the opposite case.
		// scroll: Integer
		//		amount of horizontal scroll

		var scrollBounds = this._getScrollBounds();
		this._leftBtn.set("disabled", scroll <= scrollBounds.min);
		this._rightBtn.set("disabled", scroll >= scrollBounds.max);
	}
});


dojo.declare("dijit.layout._ScrollingTabControllerButtonMixin", null, {
	baseClass: "dijitTab tabStripButton",

	templateString: dojo.cache("dijit.layout", "templates/_ScrollingTabControllerButton.html", "<div dojoAttachEvent=\"onclick:_onButtonClick\">\r\n\t<div role=\"presentation\" class=\"dijitTabInnerDiv\" dojoattachpoint=\"innerDiv,focusNode\">\r\n\t\t<div role=\"presentation\" class=\"dijitTabContent dijitButtonContents\" dojoattachpoint=\"tabContent\">\r\n\t\t\t<img role=\"presentation\" alt=\"\" src=\"${_blankGif}\" class=\"dijitTabStripIcon\" dojoAttachPoint=\"iconNode\"/>\r\n\t\t\t<span dojoAttachPoint=\"containerNode,titleNode\" class=\"dijitButtonText\"></span>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"),

		// Override inherited tabIndex: 0 from dijit.form.Button, because user shouldn't be
		// able to tab to the left/right/menu buttons
	tabIndex: "",

	// Similarly, override FormWidget.isFocusable() because clicking a button shouldn't focus it
	// either (this override avoids focus() call in FormWidget.js)
	isFocusable: function(){ return false; }
});

dojo.declare("dijit.layout._ScrollingTabControllerButton",
	[dijit.form.Button, dijit.layout._ScrollingTabControllerButtonMixin]);

dojo.declare(
	"dijit.layout._ScrollingTabControllerMenuButton",
	[dijit.form.Button, dijit._HasDropDown, dijit.layout._ScrollingTabControllerButtonMixin],
{
	// id of the TabContainer itself
	containerId: "",

	// -1 so user can't tab into the button, but so that button can still be focused programatically.
	// Because need to move focus to the button (or somewhere) before the menu is hidden or IE6 will crash.
	tabIndex: "-1",

	isLoaded: function(){
		// recreate menu every time, in case the TabContainer's list of children (or their icons/labels) have changed
		return false;
	},

	loadDropDown: function(callback){
		this.dropDown = new dijit.Menu({
			id: this.containerId + "_menu",
			dir: this.dir,
			lang: this.lang
		});
		var container = dijit.byId(this.containerId);
		dojo.forEach(container.getChildren(), function(page){
			var menuItem = new dijit.MenuItem({
				id: page.id + "_stcMi",
				label: page.title,
				iconClass: page.iconClass,
				dir: page.dir,
				lang: page.lang,
				onClick: function(){
					container.selectChild(page);
				}
			});
			this.dropDown.addChild(menuItem);
		}, this);
		callback();
	},

	closeDropDown: function(/*Boolean*/ focus){
		this.inherited(arguments);
		if(this.dropDown){
			this.dropDown.destroyRecursive();
			delete this.dropDown;
		}
	}
});

}

if(!dojo._hasResource["dijit.layout.TabContainer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.TabContainer"] = true;
dojo.provide("dijit.layout.TabContainer");






dojo.declare("dijit.layout.TabContainer",
	dijit.layout._TabContainerBase,
	{
		// summary:
		//		A Container with tabs to select each child (only one of which is displayed at a time).
		// description:
		//		A TabContainer is a container that has multiple panes, but shows only
		//		one pane at a time.  There are a set of tabs corresponding to each pane,
		//		where each tab has the name (aka title) of the pane, and optionally a close button.

		// useMenu: [const] Boolean
		//		True if a menu should be used to select tabs when they are too
		//		wide to fit the TabContainer, false otherwise.
		useMenu: true,

		// useSlider: [const] Boolean
		//		True if a slider should be used to select tabs when they are too
		//		wide to fit the TabContainer, false otherwise.
		useSlider: true,

		// controllerWidget: String
		//		An optional parameter to override the widget used to display the tab labels
		controllerWidget: "",

		_makeController: function(/*DomNode*/ srcNode){
			// summary:
			//		Instantiate tablist controller widget and return reference to it.
			//		Callback from _TabContainerBase.postCreate().
			// tags:
			//		protected extension

			var cls = this.baseClass + "-tabs" + (this.doLayout ? "" : " dijitTabNoLayout"),
				TabController = dojo.getObject(this.controllerWidget);

			return new TabController({
				id: this.id + "_tablist",
				dir: this.dir,
				lang: this.lang,
				tabPosition: this.tabPosition,
				doLayout: this.doLayout,
				containerId: this.id,
				"class": cls,
				nested: this.nested,
				useMenu: this.useMenu,
				useSlider: this.useSlider,
				tabStripClass: this.tabStrip ? this.baseClass + (this.tabStrip ? "":"No") + "Strip": null
			}, srcNode);
		},

		postMixInProperties: function(){
			this.inherited(arguments);

			// Scrolling controller only works for horizontal non-nested tabs
			if(!this.controllerWidget){
				this.controllerWidget = (this.tabPosition == "top" || this.tabPosition == "bottom") && !this.nested ?
							"dijit.layout.ScrollingTabController" : "dijit.layout.TabController";
			}
		}
});

}

if(!dojo._hasResource["dijit.layout._ContentPaneResizeMixin"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout._ContentPaneResizeMixin"] = true;
dojo.provide("dijit.layout._ContentPaneResizeMixin");





dojo.declare("dijit.layout._ContentPaneResizeMixin", null, {
	// summary:
	//		Resize() functionality of ContentPane.   If there's a single layout widget
	//		child then it will call resize() with the same dimensions as the ContentPane.
	//		Otherwise just calls resize on each child.
	//
	//		Also implements basic startup() functionality, where starting the parent
	//		will start the children

	// doLayout: Boolean
	//		- false - don't adjust size of children
	//		- true - if there is a single visible child widget, set it's size to
	//				however big the ContentPane is
	doLayout: true,

	// isContainer: [protected] Boolean
	//		Indicates that this widget acts as a "parent" to the descendant widgets.
	//		When the parent is started it will call startup() on the child widgets.
	//		See also `isLayoutContainer`.
	isContainer: true,

	// isLayoutContainer: [protected] Boolean
	//		Indicates that this widget will call resize() on it's child widgets
	//		when they become visible.
	isLayoutContainer: true,

	_startChildren: function(){
		// summary:
		//		Call startup() on all children including non _Widget ones like dojo.dnd.Source objects

		// This starts all the widgets
		dojo.forEach(this.getChildren(), function(child){
			child.startup();
			child._started = true;
		});
	},

	startup: function(){
		// summary:
		//		See `dijit.layout._LayoutWidget.startup` for description.
		//		Although ContentPane doesn't extend _LayoutWidget, it does implement
		//		the same API.

		if(this._started){ return; }

		var parent = dijit._Contained.prototype.getParent.call(this);
		this._childOfLayoutWidget = parent && parent.isLayoutContainer;

		// I need to call resize() on my child/children (when I become visible), unless
		// I'm the child of a layout widget in which case my parent will call resize() on me and I'll do it then.
		this._needLayout = !this._childOfLayoutWidget;

		this.inherited(arguments);

		this._startChildren();

		if(this._isShown()){
			this._onShow();
		}

		if(!this._childOfLayoutWidget){
			// If my parent isn't a layout container, since my style *may be* width=height=100%
			// or something similar (either set directly or via a CSS class),
			// monitor when my size changes so that I can re-layout.
			// For browsers where I can't directly monitor when my size changes,
			// monitor when the viewport changes size, which *may* indicate a size change for me.
			this.connect(dojo.isIE ? this.domNode : dojo.global, 'onresize', function(){
				// Using function(){} closure to ensure no arguments to resize.
				this._needLayout = !this._childOfLayoutWidget;
				this.resize();
			});
		}
	},

	_checkIfSingleChild: function(){
		// summary:
		//		Test if we have exactly one visible widget as a child,
		//		and if so assume that we are a container for that widget,
		//		and should propagate startup() and resize() calls to it.
		//		Skips over things like data stores since they aren't visible.

		var childNodes = dojo.query("> *", this.containerNode).filter(function(node){
				return node.tagName !== "SCRIPT"; // or a regexp for hidden elements like script|area|map|etc..
			}),
			childWidgetNodes = childNodes.filter(function(node){
				return dojo.hasAttr(node, "data-dojo-type") || dojo.hasAttr(node, "dojoType") || dojo.hasAttr(node, "widgetId");
			}),
			candidateWidgets = dojo.filter(childWidgetNodes.map(dijit.byNode), function(widget){
				return widget && widget.domNode && widget.resize;
			});

		if(
			// all child nodes are widgets
			childNodes.length == childWidgetNodes.length &&

			// all but one are invisible (like dojo.data)
			candidateWidgets.length == 1
		){
			this._singleChild = candidateWidgets[0];
		}else{
			delete this._singleChild;
		}

		// So we can set overflow: hidden to avoid a safari bug w/scrollbars showing up (#9449)
		dojo.toggleClass(this.containerNode, this.baseClass + "SingleChild", !!this._singleChild);
	},

	resize: function(changeSize, resultSize){
		// summary:
		//		See `dijit.layout._LayoutWidget.resize` for description.
		//		Although ContentPane doesn't extend _LayoutWidget, it does implement
		//		the same API.

		// For the TabContainer --> BorderContainer --> ContentPane case, _onShow() is
		// never called, so resize() is our trigger to do the initial href download (see [20099]).
		// However, don't load href for closed TitlePanes.
		if(!this._wasShown && this.open !== false){
			this._onShow();
		}

		this._resizeCalled = true;

		this._scheduleLayout(changeSize, resultSize);
	},

	_scheduleLayout: function(changeSize, resultSize){
		// summary:
		//		Resize myself, and call resize() on each of my child layout widgets, either now
		//		(if I'm currently visible) or when I become visible
		if(this._isShown()){
			this._layout(changeSize, resultSize);
		}else{
			this._needLayout = true;
			this._changeSize = changeSize;
			this._resultSize = resultSize;
		}
	},

	_layout: function(changeSize, resultSize){
		// summary:
		//		Resize myself according to optional changeSize/resultSize parameters, like a layout widget.
		//		Also, since I am a Container widget, each of my children expects me to
		//		call resize() or layout() on them.
		//
		//		Should be called on initialization and also whenever we get new content
		//		(from an href, or from set('content', ...))... but deferred until
		//		the ContentPane is visible

		// Set margin box size, unless it wasn't specified, in which case use current size.
		if(changeSize){
			dojo.marginBox(this.domNode, changeSize);
		}

		// Compute content box size of containerNode in case we [later] need to size our single child.
		var cn = this.containerNode;
		if(cn === this.domNode){
			// If changeSize or resultSize was passed to this method and this.containerNode ==
			// this.domNode then we can compute the content-box size without querying the node,
			// which is more reliable (similar to LayoutWidget.resize) (see for example #9449).
			var mb = resultSize || {};
			dojo.mixin(mb, changeSize || {}); // changeSize overrides resultSize
			if(!("h" in mb) || !("w" in mb)){
				mb = dojo.mixin(dojo.marginBox(cn), mb); // just use dojo.marginBox() to fill in missing values
			}
			this._contentBox = dijit.layout.marginBox2contentBox(cn, mb);
		}else{
			this._contentBox = dojo.contentBox(cn);
		}

		this._layoutChildren();

		delete this._needLayout;
	},
	
	_layoutChildren: function(){
		// Call _checkIfSingleChild() again in case app has manually mucked w/the content
		// of the ContentPane (rather than changing it through the set("content", ...) API.
		if(this.doLayout){
			this._checkIfSingleChild();
		}

		if(this._singleChild && this._singleChild.resize){
			var cb = this._contentBox || dojo.contentBox(this.containerNode);

			// note: if widget has padding this._contentBox will have l and t set,
			// but don't pass them to resize() or it will doubly-offset the child
			this._singleChild.resize({w: cb.w, h: cb.h});
		}else{
			// All my child widgets are independently sized (rather than matching my size),
			// but I still need to call resize() on each child to make it layout.
			dojo.forEach(this.getChildren(), function(widget){
				if(widget.resize){
					widget.resize();
				}
			});
		}
	},

	_isShown: function(){
		// summary:
		//		Returns true if the content is currently shown.
		// description:
		//		If I am a child of a layout widget then it actually returns true if I've ever been visible,
		//		not whether I'm currently visible, since that's much faster than tracing up the DOM/widget
		//		tree every call, and at least solves the performance problem on page load by deferring loading
		//		hidden ContentPanes until they are first shown

		if(this._childOfLayoutWidget){
			// If we are TitlePane, etc - we return that only *IF* we've been resized
			if(this._resizeCalled && "open" in this){
				return this.open;
			}
			return this._resizeCalled;
		}else if("open" in this){
			return this.open;		// for TitlePane, etc.
		}else{
			var node = this.domNode, parent = this.domNode.parentNode;
			return (node.style.display != 'none') && (node.style.visibility != 'hidden') && !dojo.hasClass(node, "dijitHidden") &&
					parent && parent.style && (parent.style.display != 'none');
		}
	},

	_onShow: function(){
		// summary:
		//		Called when the ContentPane is made visible
		// description:
		//		For a plain ContentPane, this is called on initialization, from startup().
		//		If the ContentPane is a hidden pane of a TabContainer etc., then it's
		//		called whenever the pane is made visible.
		//
		//		Does layout/resize of child widget(s)

		if(this._needLayout){
			// If a layout has been scheduled for when we become visible, do it now
			this._layout(this._changeSize, this._resultSize);
		}

		this.inherited(arguments);

		// Need to keep track of whether ContentPane has been shown (which is different than
		// whether or not it's currently visible).
		this._wasShown = true;
	}
});

}

if(!dojo._hasResource["dojo.html"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.html"] = true;
dojo.provide("dojo.html");



dojo.getObject("html", true, dojo);

// the parser might be needed..
(function(){ // private scope, sort of a namespace

	// idCounter is incremented with each instantiation to allow asignment of a unique id for tracking, logging purposes
	var idCounter = 0,
		d = dojo;
	
	dojo.html._secureForInnerHtml = function(/*String*/ cont){
		// summary:
		//		removes !DOCTYPE and title elements from the html string.
		//
		//		khtml is picky about dom faults, you can't attach a style or <title> node as child of body
		//		must go into head, so we need to cut out those tags
		//	cont:
		//		An html string for insertion into the dom
		//
		return cont.replace(/(?:\s*<!DOCTYPE\s[^>]+>|<title[^>]*>[\s\S]*?<\/title>)/ig, ""); // String
	};

/*====
	dojo.html._emptyNode = function(node){
		// summary:
		//		removes all child nodes from the given node
		//	node: DOMNode
		//		the parent element
	};
=====*/
	dojo.html._emptyNode = dojo.empty;

	dojo.html._setNodeContent = function(/* DomNode */ node, /* String|DomNode|NodeList */ cont){
		// summary:
		//		inserts the given content into the given node
		//	node:
		//		the parent element
		//	content:
		//		the content to be set on the parent element.
		//		This can be an html string, a node reference or a NodeList, dojo.NodeList, Array or other enumerable list of nodes
		
		// always empty
		d.empty(node);

		if(cont) {
			if(typeof cont == "string") {
				cont = d._toDom(cont, node.ownerDocument);
			}
			if(!cont.nodeType && d.isArrayLike(cont)) {
				// handle as enumerable, but it may shrink as we enumerate it
				for(var startlen=cont.length, i=0; i<cont.length; i=startlen==cont.length ? i+1 : 0) {
					d.place( cont[i], node, "last");
				}
			} else {
				// pass nodes, documentFragments and unknowns through to dojo.place
				d.place(cont, node, "last");
			}
		}

		// return DomNode
		return node;
	};

	// we wrap up the content-setting operation in a object
	dojo.declare("dojo.html._ContentSetter", null,
		{
			// node: DomNode|String
			//		An node which will be the parent element that we set content into
			node: "",

			// content: String|DomNode|DomNode[]
			//		The content to be placed in the node. Can be an HTML string, a node reference, or a enumerable list of nodes
			content: "",
			
			// id: String?
			//		Usually only used internally, and auto-generated with each instance
			id: "",

			// cleanContent: Boolean
			//		Should the content be treated as a full html document,
			//		and the real content stripped of <html>, <body> wrapper before injection
			cleanContent: false,
			
			// extractContent: Boolean
			//		Should the content be treated as a full html document, and the real content stripped of <html>, <body> wrapper before injection
			extractContent: false,

			// parseContent: Boolean
			//		Should the node by passed to the parser after the new content is set
			parseContent: false,

			// parserScope: String
			//		Flag passed to parser.  Root for attribute names to search for.   If scopeName is dojo,
			//		will search for data-dojo-type (or dojoType).  For backwards compatibility
			//		reasons defaults to dojo._scopeName (which is "dojo" except when
			//		multi-version support is used, when it will be something like dojo16, dojo20, etc.)
			parserScope: dojo._scopeName,

			// startup: Boolean
			//		Start the child widgets after parsing them.   Only obeyed if parseContent is true.
			startup: true,
			
			// lifecyle methods
			constructor: function(/* Object */params, /* String|DomNode */node){
				//	summary:
				//		Provides a configurable, extensible object to wrap the setting on content on a node
				//		call the set() method to actually set the content..
 
				// the original params are mixed directly into the instance "this"
				dojo.mixin(this, params || {});

				// give precedence to params.node vs. the node argument
				// and ensure its a node, not an id string
				node = this.node = dojo.byId( this.node || node );
	
				if(!this.id){
					this.id = [
						"Setter",
						(node) ? node.id || node.tagName : "",
						idCounter++
					].join("_");
				}
			},
			set: function(/* String|DomNode|NodeList? */ cont, /* Object? */ params){
				// summary:
				//		front-end to the set-content sequence
				//	cont:
				//		An html string, node or enumerable list of nodes for insertion into the dom
				//		If not provided, the object's content property will be used
				if(undefined !== cont){
					this.content = cont;
				}
				// in the re-use scenario, set needs to be able to mixin new configuration
				if(params){
					this._mixin(params);
				}

				this.onBegin();
				this.setContent();
				this.onEnd();

				return this.node;
			},
			setContent: function(){
				// summary:
				//		sets the content on the node

				var node = this.node;
				if(!node) {
				    // can't proceed
					throw new Error(this.declaredClass + ": setContent given no node");
				}
				try{
					node = dojo.html._setNodeContent(node, this.content);
				}catch(e){
					// check if a domfault occurs when we are appending this.errorMessage
					// like for instance if domNode is a UL and we try append a DIV
	
					// FIXME: need to allow the user to provide a content error message string
					var errMess = this.onContentError(e);
					try{
						node.innerHTML = errMess;
					}catch(e){
						console.error('Fatal ' + this.declaredClass + '.setContent could not change content due to '+e.message, e);
					}
				}
				// always put back the node for the next method
				this.node = node; // DomNode
			},
			
			empty: function() {
				// summary
				//	cleanly empty out existing content

				// destroy any widgets from a previous run
				// NOTE: if you dont want this you'll need to empty
				// the parseResults array property yourself to avoid bad things happenning
				if(this.parseResults && this.parseResults.length) {
					dojo.forEach(this.parseResults, function(w) {
						if(w.destroy){
							w.destroy();
						}
					});
					delete this.parseResults;
				}
				// this is fast, but if you know its already empty or safe, you could
				// override empty to skip this step
				dojo.html._emptyNode(this.node);
			},
	
			onBegin: function(){
				// summary
				//		Called after instantiation, but before set();
				//		It allows modification of any of the object properties
				//		- including the node and content provided - before the set operation actually takes place
				//		This default implementation checks for cleanContent and extractContent flags to
				//		optionally pre-process html string content
				var cont = this.content;
	
				if(dojo.isString(cont)){
					if(this.cleanContent){
						cont = dojo.html._secureForInnerHtml(cont);
					}
  
					if(this.extractContent){
						var match = cont.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
						if(match){ cont = match[1]; }
					}
				}

				// clean out the node and any cruft associated with it - like widgets
				this.empty();
				
				this.content = cont;
				return this.node; /* DomNode */
			},
	
			onEnd: function(){
				// summary
				//		Called after set(), when the new content has been pushed into the node
				//		It provides an opportunity for post-processing before handing back the node to the caller
				//		This default implementation checks a parseContent flag to optionally run the dojo parser over the new content
				if(this.parseContent){
					// populates this.parseResults if you need those..
					this._parse();
				}
				return this.node; /* DomNode */
			},
	
			tearDown: function(){
				// summary
				//		manually reset the Setter instance if its being re-used for example for another set()
				// description
				//		tearDown() is not called automatically.
				//		In normal use, the Setter instance properties are simply allowed to fall out of scope
				//		but the tearDown method can be called to explicitly reset this instance.
				delete this.parseResults;
				delete this.node;
				delete this.content;
			},
  
			onContentError: function(err){
				return "Error occured setting content: " + err;
			},
			
			_mixin: function(params){
				// mix properties/methods into the instance
				// TODO: the intention with tearDown is to put the Setter's state
				// back to that of the original constructor (vs. deleting/resetting everything regardless of ctor params)
				// so we could do something here to move the original properties aside for later restoration
				var empty = {}, key;
				for(key in params){
					if(key in empty){ continue; }
					// TODO: here's our opportunity to mask the properties we dont consider configurable/overridable
					// .. but history shows we'll almost always guess wrong
					this[key] = params[key];
				}
			},
			_parse: function(){
				// summary:
				//		runs the dojo parser over the node contents, storing any results in this.parseResults
				//		Any errors resulting from parsing are passed to _onError for handling

				var rootNode = this.node;
				try{
					// store the results (widgets, whatever) for potential retrieval
					var inherited = {};
					dojo.forEach(["dir", "lang", "textDir"], function(name){
						if(this[name]){
							inherited[name] = this[name];
						}
					}, this);
					this.parseResults = dojo.parser.parse({
						rootNode: rootNode,
						noStart: !this.startup,
						inherited: inherited,
						scope: this.parserScope
					});
				}catch(e){
					this._onError('Content', e, "Error parsing in _ContentSetter#"+this.id);
				}
			},
  
			_onError: function(type, err, consoleText){
				// summary:
				//		shows user the string that is returned by on[type]Error
				//		overide/implement on[type]Error and return your own string to customize
				var errText = this['on' + type + 'Error'].call(this, err);
				if(consoleText){
					console.error(consoleText, err);
				}else if(errText){ // a empty string won't change current content
					dojo.html._setNodeContent(this.node, errText, true);
				}
			}
	}); // end dojo.declare()

	dojo.html.set = function(/* DomNode */ node, /* String|DomNode|NodeList */ cont, /* Object? */ params){
			// summary:
			//		inserts (replaces) the given content into the given node. dojo.place(cont, node, "only")
			//		may be a better choice for simple HTML insertion.
			// description:
			//		Unless you need to use the params capabilities of this method, you should use
			//		dojo.place(cont, node, "only"). dojo.place() has more robust support for injecting
			//		an HTML string into the DOM, but it only handles inserting an HTML string as DOM
			//		elements, or inserting a DOM node. dojo.place does not handle NodeList insertions
			//		or the other capabilities as defined by the params object for this method.
			//	node:
			//		the parent element that will receive the content
			//	cont:
			//		the content to be set on the parent element.
			//		This can be an html string, a node reference or a NodeList, dojo.NodeList, Array or other enumerable list of nodes
			//	params:
			//		Optional flags/properties to configure the content-setting. See dojo.html._ContentSetter
			//	example:
			//		A safe string/node/nodelist content replacement/injection with hooks for extension
			//		Example Usage:
			//		dojo.html.set(node, "some string");
			//		dojo.html.set(node, contentNode, {options});
			//		dojo.html.set(node, myNode.childNodes, {options});
		if(undefined == cont){
			console.warn("dojo.html.set: no cont argument provided, using empty string");
			cont = "";
		}
		if(!params){
			// simple and fast
			return dojo.html._setNodeContent(node, cont, true);
		}else{
			// more options but slower
			// note the arguments are reversed in order, to match the convention for instantiation via the parser
			var op = new dojo.html._ContentSetter(dojo.mixin(
					params,
					{ content: cont, node: node }
			));
			return op.set();
		}
	};
})();

}

if(!dojo._hasResource["dijit.layout.ContentPane"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.ContentPane"] = true;
dojo.provide("dijit.layout.ContentPane");








dojo.declare(
	"dijit.layout.ContentPane", [dijit._Widget, dijit.layout._ContentPaneResizeMixin],
{
	// summary:
	//		A widget containing an HTML fragment, specified inline
	//		or by uri.  Fragment may include widgets.
	//
	// description:
	//		This widget embeds a document fragment in the page, specified
	//		either by uri, javascript generated markup or DOM reference.
	//		Any widgets within this content are instantiated and managed,
	//		but laid out according to the HTML structure.  Unlike IFRAME,
	//		ContentPane embeds a document fragment as would be found
	//		inside the BODY tag of a full HTML document.  It should not
	//		contain the HTML, HEAD, or BODY tags.
	//		For more advanced functionality with scripts and
	//		stylesheets, see dojox.layout.ContentPane.  This widget may be
	//		used stand alone or as a base class for other widgets.
	//		ContentPane is useful as a child of other layout containers
	//		such as BorderContainer or TabContainer, but note that those
	//		widgets can contain any widget as a child.
	//
	// example:
	//		Some quick samples:
	//		To change the innerHTML: cp.set('content', '<b>new content</b>')
	//
	//		Or you can send it a NodeList: cp.set('content', dojo.query('div [class=selected]', userSelection))
	//
	//		To do an ajax update: cp.set('href', url)

	// href: String
	//		The href of the content that displays now.
	//		Set this at construction if you want to load data externally when the
	//		pane is shown.  (Set preload=true to load it immediately.)
	//		Changing href after creation doesn't have any effect; Use set('href', ...);
	href: "",

/*=====
	// content: String || DomNode || NodeList || dijit._Widget
	//		The innerHTML of the ContentPane.
	//		Note that the initialization parameter / argument to set("content", ...)
	//		can be a String, DomNode, Nodelist, or _Widget.
	content: "",
=====*/

	// extractContent: Boolean
	//		Extract visible content from inside of <body> .... </body>.
	//		I.e., strip <html> and <head> (and it's contents) from the href
	extractContent: false,

	// parseOnLoad: Boolean
	//		Parse content and create the widgets, if any.
	parseOnLoad: true,

	// parserScope: String
	//		Flag passed to parser.  Root for attribute names to search for.   If scopeName is dojo,
	//		will search for data-dojo-type (or dojoType).  For backwards compatibility
	//		reasons defaults to dojo._scopeName (which is "dojo" except when
	//		multi-version support is used, when it will be something like dojo16, dojo20, etc.)
	parserScope: dojo._scopeName,

	// preventCache: Boolean
	//		Prevent caching of data from href's by appending a timestamp to the href.
	preventCache: false,

	// preload: Boolean
	//		Force load of data on initialization even if pane is hidden.
	preload: false,

	// refreshOnShow: Boolean
	//		Refresh (re-download) content when pane goes from hidden to shown
	refreshOnShow: false,

	// loadingMessage: String
	//		Message that shows while downloading
	loadingMessage: "<span class='dijitContentPaneLoading'>${loadingState}</span>",

	// errorMessage: String
	//		Message that shows if an error occurs
	errorMessage: "<span class='dijitContentPaneError'>${errorState}</span>",

	// isLoaded: [readonly] Boolean
	//		True if the ContentPane has data in it, either specified
	//		during initialization (via href or inline content), or set
	//		via set('content', ...) / set('href', ...)
	//
	//		False if it doesn't have any content, or if ContentPane is
	//		still in the process of downloading href.
	isLoaded: false,

	baseClass: "dijitContentPane",

	// ioArgs: Object
	//		Parameters to pass to xhrGet() request, for example:
	// |	<div dojoType="dijit.layout.ContentPane" href="./bar" ioArgs="{timeout: 500}">
	ioArgs: {},

	// onLoadDeferred: [readonly] dojo.Deferred
	//		This is the `dojo.Deferred` returned by set('href', ...) and refresh().
	//		Calling onLoadDeferred.addCallback() or addErrback() registers your
	//		callback to be called only once, when the prior set('href', ...) call or
	//		the initial href parameter to the constructor finishes loading.
	//
	//		This is different than an onLoad() handler which gets called any time any href
	//		or content is loaded.
	onLoadDeferred: null,

	// Override _Widget's attributeMap because we don't want the title attribute (used to specify
	// tab labels) to be copied to ContentPane.domNode... otherwise a tooltip shows up over the
	// entire pane.
	attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
		title: []
	}),

	// Flag to parser that I'll parse my contents, so it shouldn't.
	stopParser: true,

	// template: [private] Boolean
	//		Flag from the parser that this ContentPane is inside a template
	//		so the contents are pre-parsed.
	// (TODO: this declaration can be commented out in 2.0)
	template: false,

	create: function(params, srcNodeRef){
		// Convert a srcNodeRef argument into a content parameter, so that the original contents are
		// processed in the same way as contents set via set("content", ...), calling the parser etc.
		// Avoid modifying original params object since that breaks NodeList instantiation, see #11906.
		if((!params || !params.template) && srcNodeRef && !("href" in params) && !("content" in params)){
			var df = dojo.doc.createDocumentFragment();
			srcNodeRef = dojo.byId(srcNodeRef)
			while(srcNodeRef.firstChild){
				df.appendChild(srcNodeRef.firstChild);
			}
			params = dojo.delegate(params, {content: df});
		}
		this.inherited(arguments, [params, srcNodeRef]);
	},

	postMixInProperties: function(){
		this.inherited(arguments);
		var messages = dojo.i18n.getLocalization("dijit", "loading", this.lang);
		this.loadingMessage = dojo.string.substitute(this.loadingMessage, messages);
		this.errorMessage = dojo.string.substitute(this.errorMessage, messages);
	},

	buildRendering: function(){
		this.inherited(arguments);

		// Since we have no template we need to set this.containerNode ourselves, to make getChildren() work.
		// For subclasses of ContentPane that do have a template, does nothing.
		if(!this.containerNode){
			this.containerNode = this.domNode;
		}

		// remove the title attribute so it doesn't show up when hovering
		// over a node  (TODO: remove in 2.0, no longer needed after #11490)
		this.domNode.title = "";

		if(!dojo.attr(this.domNode,"role")){
			dijit.setWaiRole(this.domNode, "group");
		}
	},

	_startChildren: function(){
		// summary:
		//		Call startup() on all children including non _Widget ones like dojo.dnd.Source objects

		// This starts all the widgets
		this.inherited(arguments);

		// And this catches stuff like dojo.dnd.Source
		if(this._contentSetter){
			dojo.forEach(this._contentSetter.parseResults, function(obj){
				if(!obj._started && !obj._destroyed && dojo.isFunction(obj.startup)){
					obj.startup();
					obj._started = true;
				}
			}, this);
		}
	},

	setHref: function(/*String|Uri*/ href){
		// summary:
		//		Deprecated.   Use set('href', ...) instead.
		dojo.deprecated("dijit.layout.ContentPane.setHref() is deprecated. Use set('href', ...) instead.", "", "2.0");
		return this.set("href", href);
	},
	_setHrefAttr: function(/*String|Uri*/ href){
		// summary:
		//		Hook so set("href", ...) works.
		// description:
		//		Reset the (external defined) content of this pane and replace with new url
		//		Note: It delays the download until widget is shown if preload is false.
		//	href:
		//		url to the page you want to get, must be within the same domain as your mainpage

		// Cancel any in-flight requests (a set('href', ...) will cancel any in-flight set('href', ...))
		this.cancel();

		this.onLoadDeferred = new dojo.Deferred(dojo.hitch(this, "cancel"));
		this.onLoadDeferred.addCallback(dojo.hitch(this, "onLoad"));

		this._set("href", href);

		// _setHrefAttr() is called during creation and by the user, after creation.
		// Assuming preload == false, only in the second case do we actually load the URL;
		// otherwise it's done in startup(), and only if this widget is shown.
		if(this.preload || (this._created && this._isShown())){
			this._load();
		}else{
			// Set flag to indicate that href needs to be loaded the next time the
			// ContentPane is made visible
			this._hrefChanged = true;
		}

		return this.onLoadDeferred;		// dojo.Deferred
	},

	setContent: function(/*String|DomNode|Nodelist*/data){
		// summary:
		//		Deprecated.   Use set('content', ...) instead.
		dojo.deprecated("dijit.layout.ContentPane.setContent() is deprecated.  Use set('content', ...) instead.", "", "2.0");
		this.set("content", data);
	},
	_setContentAttr: function(/*String|DomNode|Nodelist*/data){
		// summary:
		//		Hook to make set("content", ...) work.
		//		Replaces old content with data content, include style classes from old content
		//	data:
		//		the new Content may be String, DomNode or NodeList
		//
		//		if data is a NodeList (or an array of nodes) nodes are copied
		//		so you can import nodes from another document implicitly

		// clear href so we can't run refresh and clear content
		// refresh should only work if we downloaded the content
		this._set("href", "");

		// Cancel any in-flight requests (a set('content', ...) will cancel any in-flight set('href', ...))
		this.cancel();

		// Even though user is just setting content directly, still need to define an onLoadDeferred
		// because the _onLoadHandler() handler is still getting called from setContent()
		this.onLoadDeferred = new dojo.Deferred(dojo.hitch(this, "cancel"));
		if(this._created){
			// For back-compat reasons, call onLoad() for set('content', ...)
			// calls but not for content specified in srcNodeRef (ie: <div dojoType=ContentPane>...</div>)
			// or as initialization parameter (ie: new ContentPane({content: ...})
			this.onLoadDeferred.addCallback(dojo.hitch(this, "onLoad"));
		}

		this._setContent(data || "");

		this._isDownloaded = false; // mark that content is from a set('content') not a set('href')

		return this.onLoadDeferred; 	// dojo.Deferred
	},
	_getContentAttr: function(){
		// summary:
		//		Hook to make get("content") work
		return this.containerNode.innerHTML;
	},

	cancel: function(){
		// summary:
		//		Cancels an in-flight download of content
		if(this._xhrDfd && (this._xhrDfd.fired == -1)){
			this._xhrDfd.cancel();
		}
		delete this._xhrDfd; // garbage collect

		this.onLoadDeferred = null;
	},

	uninitialize: function(){
		if(this._beingDestroyed){
			this.cancel();
		}
		this.inherited(arguments);
	},

	destroyRecursive: function(/*Boolean*/ preserveDom){
		// summary:
		//		Destroy the ContentPane and its contents

		// if we have multiple controllers destroying us, bail after the first
		if(this._beingDestroyed){
			return;
		}
		this.inherited(arguments);
	},

	_onShow: function(){
		// summary:
		//		Called when the ContentPane is made visible
		// description:
		//		For a plain ContentPane, this is called on initialization, from startup().
		//		If the ContentPane is a hidden pane of a TabContainer etc., then it's
		//		called whenever the pane is made visible.
		//
		//		Does necessary processing, including href download and layout/resize of
		//		child widget(s)

		this.inherited(arguments);

		if(this.href){
			if(!this._xhrDfd && // if there's an href that isn't already being loaded
				(!this.isLoaded || this._hrefChanged || this.refreshOnShow)
			){
				return this.refresh();	// If child has an href, promise that fires when the load is complete
			}
		}
	},

	refresh: function(){
		// summary:
		//		[Re]download contents of href and display
		// description:
		//		1. cancels any currently in-flight requests
		//		2. posts "loading..." message
		//		3. sends XHR to download new data

		// Cancel possible prior in-flight request
		this.cancel();

		this.onLoadDeferred = new dojo.Deferred(dojo.hitch(this, "cancel"));
		this.onLoadDeferred.addCallback(dojo.hitch(this, "onLoad"));
		this._load();
		return this.onLoadDeferred;		// If child has an href, promise that fires when refresh is complete
	},

	_load: function(){
		// summary:
		//		Load/reload the href specified in this.href

		// display loading message
		this._setContent(this.onDownloadStart(), true);

		var self = this;
		var getArgs = {
			preventCache: (this.preventCache || this.refreshOnShow),
			url: this.href,
			handleAs: "text"
		};
		if(dojo.isObject(this.ioArgs)){
			dojo.mixin(getArgs, this.ioArgs);
		}

		var hand = (this._xhrDfd = (this.ioMethod || dojo.xhrGet)(getArgs));

		hand.addCallback(function(html){
			try{
				self._isDownloaded = true;
				self._setContent(html, false);
				self.onDownloadEnd();
			}catch(err){
				self._onError('Content', err); // onContentError
			}
			delete self._xhrDfd;
			return html;
		});

		hand.addErrback(function(err){
			if(!hand.canceled){
				// show error message in the pane
				self._onError('Download', err); // onDownloadError
			}
			delete self._xhrDfd;
			return err;
		});

		// Remove flag saying that a load is needed
		delete this._hrefChanged;
	},

	_onLoadHandler: function(data){
		// summary:
		//		This is called whenever new content is being loaded
		this._set("isLoaded", true);
		try{
			this.onLoadDeferred.callback(data);
		}catch(e){
			console.error('Error '+this.widgetId+' running custom onLoad code: ' + e.message);
		}
	},

	_onUnloadHandler: function(){
		// summary:
		//		This is called whenever the content is being unloaded
		this._set("isLoaded", false);
		try{
			this.onUnload();
		}catch(e){
			console.error('Error '+this.widgetId+' running custom onUnload code: ' + e.message);
		}
	},

	destroyDescendants: function(){
		// summary:
		//		Destroy all the widgets inside the ContentPane and empty containerNode

		// Make sure we call onUnload (but only when the ContentPane has real content)
		if(this.isLoaded){
			this._onUnloadHandler();
		}

		// Even if this.isLoaded == false there might still be a "Loading..." message
		// to erase, so continue...

		// For historical reasons we need to delete all widgets under this.containerNode,
		// even ones that the user has created manually.
		var setter = this._contentSetter;
		dojo.forEach(this.getChildren(), function(widget){
			if(widget.destroyRecursive){
				widget.destroyRecursive();
			}
		});
		if(setter){
			// Most of the widgets in setter.parseResults have already been destroyed, but
			// things like Menu that have been moved to <body> haven't yet
			dojo.forEach(setter.parseResults, function(widget){
				if(widget.destroyRecursive && widget.domNode && widget.domNode.parentNode == dojo.body()){
					widget.destroyRecursive();
				}
			});
			delete setter.parseResults;
		}

		// And then clear away all the DOM nodes
		dojo.html._emptyNode(this.containerNode);

		// Delete any state information we have about current contents
		delete this._singleChild;
	},

	_setContent: function(/*String|DocumentFragment*/ cont, /*Boolean*/ isFakeContent){
		// summary:
		//		Insert the content into the container node

		// first get rid of child widgets
		this.destroyDescendants();

		// dojo.html.set will take care of the rest of the details
		// we provide an override for the error handling to ensure the widget gets the errors
		// configure the setter instance with only the relevant widget instance properties
		// NOTE: unless we hook into attr, or provide property setters for each property,
		// we need to re-configure the ContentSetter with each use
		var setter = this._contentSetter;
		if(! (setter && setter instanceof dojo.html._ContentSetter)){
			setter = this._contentSetter = new dojo.html._ContentSetter({
				node: this.containerNode,
				_onError: dojo.hitch(this, this._onError),
				onContentError: dojo.hitch(this, function(e){
					// fires if a domfault occurs when we are appending this.errorMessage
					// like for instance if domNode is a UL and we try append a DIV
					var errMess = this.onContentError(e);
					try{
						this.containerNode.innerHTML = errMess;
					}catch(e){
						console.error('Fatal '+this.id+' could not change content due to '+e.message, e);
					}
				})/*,
				_onError */
			});
		};

		var setterParams = dojo.mixin({
			cleanContent: this.cleanContent,
			extractContent: this.extractContent,
			parseContent: this.parseOnLoad,
			parserScope: this.parserScope,
			startup: false,
			dir: this.dir,
			lang: this.lang
		}, this._contentSetterParams || {});

		setter.set( (dojo.isObject(cont) && cont.domNode) ? cont.domNode : cont, setterParams );

		// setter params must be pulled afresh from the ContentPane each time
		delete this._contentSetterParams;

		if(this.doLayout){
			this._checkIfSingleChild();
		}

		if(!isFakeContent){
			if(this._started){
				// Startup each top level child widget (and they will start their children, recursively)
				this._startChildren();
	
				// Call resize() on each of my child layout widgets,
				// or resize() on my single child layout widget...
				// either now (if I'm currently visible) or when I become visible
				this._scheduleLayout();
			}

			this._onLoadHandler(cont);
		}
	},

	_onError: function(type, err, consoleText){
		this.onLoadDeferred.errback(err);

		// shows user the string that is returned by on[type]Error
		// override on[type]Error and return your own string to customize
		var errText = this['on' + type + 'Error'].call(this, err);
		if(consoleText){
			console.error(consoleText, err);
		}else if(errText){// a empty string won't change current content
			this._setContent(errText, true);
		}
	},

	// EVENT's, should be overide-able
	onLoad: function(data){
		// summary:
		//		Event hook, is called after everything is loaded and widgetified
		// tags:
		//		callback
	},

	onUnload: function(){
		// summary:
		//		Event hook, is called before old content is cleared
		// tags:
		//		callback
	},

	onDownloadStart: function(){
		// summary:
		//		Called before download starts.
		// description:
		//		The string returned by this function will be the html
		//		that tells the user we are loading something.
		//		Override with your own function if you want to change text.
		// tags:
		//		extension
		return this.loadingMessage;
	},

	onContentError: function(/*Error*/ error){
		// summary:
		//		Called on DOM faults, require faults etc. in content.
		//
		//		In order to display an error message in the pane, return
		//		the error message from this method, as an HTML string.
		//
		//		By default (if this method is not overriden), it returns
		//		nothing, so the error message is just printed to the console.
		// tags:
		//		extension
	},

	onDownloadError: function(/*Error*/ error){
		// summary:
		//		Called when download error occurs.
		//
		//		In order to display an error message in the pane, return
		//		the error message from this method, as an HTML string.
		//
		//		Default behavior (if this method is not overriden) is to display
		//		the error message inside the pane.
		// tags:
		//		extension
		return this.errorMessage;
	},

	onDownloadEnd: function(){
		// summary:
		//		Called when download is finished.
		// tags:
		//		callback
	}
});

}

if(!dojo._hasResource["dijit.layout.AccordionPane"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.AccordionPane"] = true;
dojo.provide("dijit.layout.AccordionPane");




dojo.declare("dijit.layout.AccordionPane", dijit.layout.ContentPane, {
	// summary:
	//		Deprecated widget.   Use `dijit.layout.ContentPane` instead.
	// tags:
	//		deprecated

	constructor: function(){
		dojo.deprecated("dijit.layout.AccordionPane deprecated, use ContentPane instead", "", "2.0");
	},

	onSelected: function(){
		// summary:
		//		called when this pane is selected
	}
});

}

if(!dojo._hasResource["dijit.layout.AccordionContainer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.layout.AccordionContainer"] = true;
dojo.provide("dijit.layout.AccordionContainer");









//dojo.require("dijit.layout.AccordionPane ");	// for back compat, remove for 2.0

// Design notes:
//
// An AccordionContainer is a StackContainer, but each child (typically ContentPane)
// is wrapped in a _AccordionInnerContainer.   This is hidden from the caller.
//
// The resulting markup will look like:
//
//	<div class=dijitAccordionContainer>
//		<div class=dijitAccordionInnerContainer>	(one pane)
//				<div class=dijitAccordionTitle>		(title bar) ... </div>
//				<div class=dijtAccordionChildWrapper>   (content pane) </div>
//		</div>
//	</div>
//
// Normally the dijtAccordionChildWrapper is hidden for all but one child (the shown
// child), so the space for the content pane is all the title bars + the one dijtAccordionChildWrapper,
// which on claro has a 1px border plus a 2px bottom margin.
//
// During animation there are two dijtAccordionChildWrapper's shown, so we need
// to compensate for that.

dojo.declare(
	"dijit.layout.AccordionContainer",
	dijit.layout.StackContainer,
	{
		// summary:
		//		Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time,
		//		and switching between panes is visualized by sliding the other panes up/down.
		// example:
		//	| 	<div dojoType="dijit.layout.AccordionContainer">
		//	|		<div dojoType="dijit.layout.ContentPane" title="pane 1">
		//	|		</div>
		//	|		<div dojoType="dijit.layout.ContentPane" title="pane 2">
		//	|			<p>This is some text</p>
		//	|		</div>
		//	|	</div>

		// duration: Integer
		//		Amount of time (in ms) it takes to slide panes
		duration: dijit.defaultDuration,

		// buttonWidget: [const] String
		//		The name of the widget used to display the title of each pane
		buttonWidget: "dijit.layout._AccordionButton",

/*=====
		// _verticalSpace: Number
		//		Pixels of space available for the open pane
		//		(my content box size minus the cumulative size of all the title bars)
		_verticalSpace: 0,
=====*/
		baseClass: "dijitAccordionContainer",

		buildRendering: function(){
			this.inherited(arguments);
			this.domNode.style.overflow = "hidden";		// TODO: put this in dijit.css
			dijit.setWaiRole(this.domNode, "tablist");	// TODO: put this in template
		},

		startup: function(){
			if(this._started){ return; }
			this.inherited(arguments);
			if(this.selectedChildWidget){
				var style = this.selectedChildWidget.containerNode.style;
				style.display = "";
				style.overflow = "auto";
				this.selectedChildWidget._wrapperWidget.set("selected", true);
			}
		},

		layout: function(){
			// Implement _LayoutWidget.layout() virtual method.
			// Set the height of the open pane based on what room remains.

			var openPane = this.selectedChildWidget;
			
			if(!openPane){ return;}

			// space taken up by title, plus wrapper div (with border/margin) for open pane
			var wrapperDomNode = openPane._wrapperWidget.domNode,
				wrapperDomNodeMargin = dojo._getMarginExtents(wrapperDomNode),
				wrapperDomNodePadBorder = dojo._getPadBorderExtents(wrapperDomNode),
				wrapperContainerNode = openPane._wrapperWidget.containerNode,
				wrapperContainerNodeMargin = dojo._getMarginExtents(wrapperContainerNode),
				wrapperContainerNodePadBorder = dojo._getPadBorderExtents(wrapperContainerNode),
				mySize = this._contentBox;

			// get cumulative height of all the unselected title bars
			var totalCollapsedHeight = 0;
			dojo.forEach(this.getChildren(), function(child){
	            if(child != openPane){
					totalCollapsedHeight += dojo._getMarginSize(child._wrapperWidget.domNode).h;
				}
			});
			this._verticalSpace = mySize.h - totalCollapsedHeight - wrapperDomNodeMargin.h
			 	- wrapperDomNodePadBorder.h - wrapperContainerNodeMargin.h - wrapperContainerNodePadBorder.h
				- openPane._buttonWidget.getTitleHeight();

			// Memo size to make displayed child
			this._containerContentBox = {
				h: this._verticalSpace,
				w: this._contentBox.w - wrapperDomNodeMargin.w - wrapperDomNodePadBorder.w
					- wrapperContainerNodeMargin.w - wrapperContainerNodePadBorder.w
			};

			if(openPane){
				openPane.resize(this._containerContentBox);
			}
		},

		_setupChild: function(child){
			// Overrides _LayoutWidget._setupChild().
			// Put wrapper widget around the child widget, showing title

			child._wrapperWidget = new dijit.layout._AccordionInnerContainer({
				contentWidget: child,
				buttonWidget: this.buttonWidget,
				id: child.id + "_wrapper",
				dir: child.dir,
				lang: child.lang,
				parent: this
			});

			this.inherited(arguments);
		},

		addChild: function(/*dijit._Widget*/ child, /*Integer?*/ insertIndex){
			if(this._started){
				// Adding a child to a started Accordion is complicated because children have
				// wrapper widgets.  Default code path (calling this.inherited()) would add
				// the new child inside another child's wrapper.

				// First add in child as a direct child of this AccordionContainer
				dojo.place(child.domNode, this.containerNode, insertIndex);

				if(!child._started){
					child.startup();
				}
				
				// Then stick the wrapper widget around the child widget
				this._setupChild(child);

				// Code below copied from StackContainer
				dojo.publish(this.id+"-addChild", [child, insertIndex]);
				this.layout();
				if(!this.selectedChildWidget){
					this.selectChild(child);
				}
			}else{
				// We haven't been started yet so just add in the child widget directly,
				// and the wrapper will be created on startup()
				this.inherited(arguments);
			}
		},

		removeChild: function(child){
			// Overrides _LayoutWidget.removeChild().

			// Destroy wrapper widget first, before StackContainer.getChildren() call.
			// Replace wrapper widget with true child widget (ContentPane etc.).
			// This step only happens if the AccordionContainer has been started; otherwise there's no wrapper.
			if(child._wrapperWidget){
				dojo.place(child.domNode, child._wrapperWidget.domNode, "after");
				child._wrapperWidget.destroy();
				delete child._wrapperWidget;
			}

			dojo.removeClass(child.domNode, "dijitHidden");

			this.inherited(arguments);
		},

		getChildren: function(){
			// Overrides _Container.getChildren() to return content panes rather than internal AccordionInnerContainer panes
			return dojo.map(this.inherited(arguments), function(child){
				return child.declaredClass == "dijit.layout._AccordionInnerContainer" ? child.contentWidget : child;
			}, this);
		},

		destroy: function(){
			if(this._animation){
				this._animation.stop();
			}
			dojo.forEach(this.getChildren(), function(child){
				// If AccordionContainer has been started, then each child has a wrapper widget which
				// also needs to be destroyed.
				if(child._wrapperWidget){
					child._wrapperWidget.destroy();
				}else{
					child.destroyRecursive();
				}
			});
			this.inherited(arguments);
		},

		_showChild: function(child){
			// Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode
			child._wrapperWidget.containerNode.style.display="block";
			return this.inherited(arguments);
		},

		_hideChild: function(child){
			// Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode
			child._wrapperWidget.containerNode.style.display="none";
			this.inherited(arguments);
		},

		_transition: function(/*dijit._Widget?*/ newWidget, /*dijit._Widget?*/ oldWidget, /*Boolean*/ animate){
			// Overrides StackContainer._transition() to provide sliding of title bars etc.

			if(dojo.isIE < 8){
				// workaround animation bugs by not animating; not worth supporting animation for IE6 & 7
				animate = false;
			}

			if(this._animation){
				// there's an in-progress animation.  speedily end it so we can do the newly requested one
				this._animation.stop(true);
				delete this._animation;
			}

			var self = this;

			if(newWidget){
				newWidget._wrapperWidget.set("selected", true);

				var d = this._showChild(newWidget);	// prepare widget to be slid in

				// Size the new widget, in case this is the first time it's being shown,
				// or I have been resized since the last time it was shown.
				// Note that page must be visible for resizing to work.
				if(this.doLayout && newWidget.resize){
					newWidget.resize(this._containerContentBox);
				}
			}

			if(oldWidget){
				oldWidget._wrapperWidget.set("selected", false);
				if(!animate){
					this._hideChild(oldWidget);
				}
			}

			if(animate){
				var newContents = newWidget._wrapperWidget.containerNode,
					oldContents = oldWidget._wrapperWidget.containerNode;

				// During the animation we will be showing two dijitAccordionChildWrapper nodes at once,
				// which on claro takes up 4px extra space (compared to stable AccordionContainer).
				// Have to compensate for that by immediately shrinking the pane being closed.
				var wrapperContainerNode = newWidget._wrapperWidget.containerNode,
					wrapperContainerNodeMargin = dojo._getMarginExtents(wrapperContainerNode),
					wrapperContainerNodePadBorder = dojo._getPadBorderExtents(wrapperContainerNode),
					animationHeightOverhead = wrapperContainerNodeMargin.h + wrapperContainerNodePadBorder.h;

				oldContents.style.height = (self._verticalSpace - animationHeightOverhead) + "px";

				this._animation = new dojo.Animation({
					node: newContents,
					duration: this.duration,
					curve: [1, this._verticalSpace - animationHeightOverhead - 1],
					onAnimate: function(value){
						value = Math.floor(value);	// avoid fractional values
						newContents.style.height = value + "px";
						oldContents.style.height = (self._verticalSpace - animationHeightOverhead - value) + "px";
					},
					onEnd: function(){
						delete self._animation;
						newContents.style.height = "auto";
						oldWidget._wrapperWidget.containerNode.style.display = "none";
						oldContents.style.height = "auto";
						self._hideChild(oldWidget);
					}
				});
				this._animation.onStop = this._animation.onEnd;
				this._animation.play();
			}

			return d;	// If child has an href, promise that fires when the widget has finished loading
		},

		// note: we are treating the container as controller here
		_onKeyPress: function(/*Event*/ e, /*dijit._Widget*/ fromTitle){
			// summary:
			//		Handle keypress events
			// description:
			//		This is called from a handler on AccordionContainer.domNode
			//		(setup in StackContainer), and is also called directly from
			//		the click handler for accordion labels
			if(this.disabled || e.altKey || !(fromTitle || e.ctrlKey)){
				return;
			}
			var k = dojo.keys,
				c = e.charOrCode;
			if((fromTitle && (c == k.LEFT_ARROW || c == k.UP_ARROW)) ||
					(e.ctrlKey && c == k.PAGE_UP)){
				this._adjacent(false)._buttonWidget._onTitleClick();
				dojo.stopEvent(e);
			}else if((fromTitle && (c == k.RIGHT_ARROW || c == k.DOWN_ARROW)) ||
					(e.ctrlKey && (c == k.PAGE_DOWN || c == k.TAB))){
				this._adjacent(true)._buttonWidget._onTitleClick();
				dojo.stopEvent(e);
			}
		}
	}
);

dojo.declare("dijit.layout._AccordionInnerContainer",
	[dijit._Widget, dijit._CssStateMixin], {
		// summary:
		//		Internal widget placed as direct child of AccordionContainer.containerNode.
		//		When other widgets are added as children to an AccordionContainer they are wrapped in
		//		this widget.
		
/*=====
		// buttonWidget: String
		//		Name of class to use to instantiate title
		//		(Wish we didn't have a separate widget for just the title but maintaining it
		//		for backwards compatibility, is it worth it?)
		 buttonWidget: null,
=====*/

/*=====
		// contentWidget: dijit._Widget
		//		Pointer to the real child widget
	 	contentWidget: null,
=====*/

		baseClass: "dijitAccordionInnerContainer",

		// tell nested layout widget that we will take care of sizing
		isContainer: true,
		isLayoutContainer: true,

		buildRendering: function(){
			// Builds a template like:
			//	<div class=dijitAccordionInnerContainer>
			//		Button
			//		<div class=dijitAccordionChildWrapper>
			//			ContentPane
			//		</div>
			//	</div>

			// Create wrapper div, placed where the child is now
			this.domNode = dojo.place("<div class='" + this.baseClass + "'>", this.contentWidget.domNode, "after");
			
			// wrapper div's first child is the button widget (ie, the title bar)
			var child = this.contentWidget,
				cls = dojo.getObject(this.buttonWidget);
			this.button = child._buttonWidget = (new cls({
				contentWidget: child,
				label: child.title,
				title: child.tooltip,
				dir: child.dir,
				lang: child.lang,
				iconClass: child.iconClass,
				id: child.id + "_button",
				parent: this.parent
			})).placeAt(this.domNode);
			
			// and then the actual content widget (changing it from prior-sibling to last-child),
			// wrapped by a <div class=dijitAccordionChildWrapper>
			this.containerNode = dojo.place("<div class='dijitAccordionChildWrapper' style='display:none'>", this.domNode);
			dojo.place(this.contentWidget.domNode, this.containerNode);
		},

		postCreate: function(){
			this.inherited(arguments);

			// Map changes in content widget's title etc. to changes in the button
			var button = this.button;
			this._contentWidgetWatches = [
				this.contentWidget.watch('title', dojo.hitch(this, function(name, oldValue, newValue){
					button.set("label", newValue);
				})),
				this.contentWidget.watch('tooltip', dojo.hitch(this, function(name, oldValue, newValue){
					button.set("title", newValue);
				})),
				this.contentWidget.watch('iconClass', dojo.hitch(this, function(name, oldValue, newValue){
					button.set("iconClass", newValue);
				}))
			];
		},

		_setSelectedAttr: function(/*Boolean*/ isSelected){
			this._set("selected", isSelected);
			this.button.set("selected", isSelected);
			if(isSelected){
				var cw = this.contentWidget;
				if(cw.onSelected){ cw.onSelected(); }
			}
		},

		startup: function(){
			// Called by _Container.addChild()
			this.contentWidget.startup();
		},

		destroy: function(){
			this.button.destroyRecursive();

			dojo.forEach(this._contentWidgetWatches || [], function(w){ w.unwatch(); });

			delete this.contentWidget._buttonWidget;
			delete this.contentWidget._wrapperWidget;

			this.inherited(arguments);
		},
		
		destroyDescendants: function(){
			// since getChildren isn't working for me, have to code this manually
			this.contentWidget.destroyRecursive();
		}
});

dojo.declare("dijit.layout._AccordionButton",
	[dijit._Widget, dijit._Templated, dijit._CssStateMixin],
	{
	// summary:
	//		The title bar to click to open up an accordion pane.
	//		Internal widget used by AccordionContainer.
	// tags:
	//		private

	templateString: dojo.cache("dijit.layout", "templates/AccordionButton.html", "<div dojoAttachEvent='onclick:_onTitleClick' class='dijitAccordionTitle'>\r\n\t<div dojoAttachPoint='titleNode,focusNode' dojoAttachEvent='onkeypress:_onTitleKeyPress'\r\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\r\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\r\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\r\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\r\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" dojoAttachPoint='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\r\n\t\t<span role=\"presentation\" dojoAttachPoint='titleTextNode' class='dijitAccordionText'></span>\r\n\t</div>\r\n</div>\r\n"),
	attributeMap: dojo.mixin(dojo.clone(dijit.layout.ContentPane.prototype.attributeMap), {
		label: {node: "titleTextNode", type: "innerHTML" },
		title: {node: "titleTextNode", type: "attribute", attribute: "title"},
		iconClass: { node: "iconNode", type: "class" }
	}),

	baseClass: "dijitAccordionTitle",

	getParent: function(){
		// summary:
		//		Returns the AccordionContainer parent.
		// tags:
		//		private
		return this.parent;
	},

	buildRendering: function(){
		this.inherited(arguments);
		var titleTextNodeId = this.id.replace(' ','_');
		dojo.attr(this.titleTextNode, "id", titleTextNodeId+"_title");
		dijit.setWaiState(this.focusNode, "labelledby", dojo.attr(this.titleTextNode, "id"));
		dojo.setSelectable(this.domNode, false);
	},

	getTitleHeight: function(){
		// summary:
		//		Returns the height of the title dom node.
		return dojo._getMarginSize(this.domNode).h;	// Integer
	},

	// TODO: maybe the parent should set these methods directly rather than forcing the code
	// into the button widget?
	_onTitleClick: function(){
		// summary:
		//		Callback when someone clicks my title.
		var parent = this.getParent();
			parent.selectChild(this.contentWidget, true);
			dijit.focus(this.focusNode);
	},

	_onTitleKeyPress: function(/*Event*/ evt){
		return this.getParent()._onKeyPress(evt, this.contentWidget);
	},

	_setSelectedAttr: function(/*Boolean*/ isSelected){
		this._set("selected", isSelected);
		dijit.setWaiState(this.focusNode, "expanded", isSelected);
		dijit.setWaiState(this.focusNode, "selected", isSelected);
		this.focusNode.setAttribute("tabIndex", isSelected ? "0" : "-1");
	}
});

}

if(!dojo._hasResource["dojo.dnd.common"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.common"] = true;
dojo.provide("dojo.dnd.common");


dojo.getObject("dnd", true, dojo);

dojo.dnd.getCopyKeyState = dojo.isCopyKey;

dojo.dnd._uniqueId = 0;
dojo.dnd.getUniqueId = function(){
	// summary:
	//		returns a unique string for use with any DOM element
	var id;
	do{
		id = dojo._scopeName + "Unique" + (++dojo.dnd._uniqueId);
	}while(dojo.byId(id));
	return id;
};

dojo.dnd._empty = {};

dojo.dnd.isFormElement = function(/*Event*/ e){
	// summary:
	//		returns true if user clicked on a form element
	var t = e.target;
	if(t.nodeType == 3 /*TEXT_NODE*/){
		t = t.parentNode;
	}
	return " button textarea input select option ".indexOf(" " + t.tagName.toLowerCase() + " ") >= 0;	// Boolean
};

}

if(!dojo._hasResource["dojo.dnd.autoscroll"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.autoscroll"] = true;
dojo.provide("dojo.dnd.autoscroll");



dojo.getObject("dnd", true, dojo);

dojo.dnd.getViewport = dojo.window.getBox;

dojo.dnd.V_TRIGGER_AUTOSCROLL = 32;
dojo.dnd.H_TRIGGER_AUTOSCROLL = 32;

dojo.dnd.V_AUTOSCROLL_VALUE = 16;
dojo.dnd.H_AUTOSCROLL_VALUE = 16;

dojo.dnd.autoScroll = function(e){
	// summary:
	//		a handler for onmousemove event, which scrolls the window, if
	//		necesary
	// e: Event
	//		onmousemove event

	// FIXME: needs more docs!
	var v = dojo.window.getBox(), dx = 0, dy = 0;
	if(e.clientX < dojo.dnd.H_TRIGGER_AUTOSCROLL){
		dx = -dojo.dnd.H_AUTOSCROLL_VALUE;
	}else if(e.clientX > v.w - dojo.dnd.H_TRIGGER_AUTOSCROLL){
		dx = dojo.dnd.H_AUTOSCROLL_VALUE;
	}
	if(e.clientY < dojo.dnd.V_TRIGGER_AUTOSCROLL){
		dy = -dojo.dnd.V_AUTOSCROLL_VALUE;
	}else if(e.clientY > v.h - dojo.dnd.V_TRIGGER_AUTOSCROLL){
		dy = dojo.dnd.V_AUTOSCROLL_VALUE;
	}
	window.scrollBy(dx, dy);
};

dojo.dnd._validNodes = {"div": 1, "p": 1, "td": 1};
dojo.dnd._validOverflow = {"auto": 1, "scroll": 1};

dojo.dnd.autoScrollNodes = function(e){
	// summary:
	//		a handler for onmousemove event, which scrolls the first avaialble
	//		Dom element, it falls back to dojo.dnd.autoScroll()
	// e: Event
	//		onmousemove event

	// FIXME: needs more docs!
	for(var n = e.target; n;){
		if(n.nodeType == 1 && (n.tagName.toLowerCase() in dojo.dnd._validNodes)){
			var s = dojo.getComputedStyle(n);
			if(s.overflow.toLowerCase() in dojo.dnd._validOverflow){
				var b = dojo._getContentBox(n, s), t = dojo.position(n, true);
				//console.log(b.l, b.t, t.x, t.y, n.scrollLeft, n.scrollTop);
				var w = Math.min(dojo.dnd.H_TRIGGER_AUTOSCROLL, b.w / 2),
					h = Math.min(dojo.dnd.V_TRIGGER_AUTOSCROLL, b.h / 2),
					rx = e.pageX - t.x, ry = e.pageY - t.y, dx = 0, dy = 0;
				if(dojo.isWebKit || dojo.isOpera){
					// FIXME: this code should not be here, it should be taken into account
					// either by the event fixing code, or the dojo.position()
					// FIXME: this code doesn't work on Opera 9.5 Beta
					rx += dojo.body().scrollLeft;
					ry += dojo.body().scrollTop;
				}
				if(rx > 0 && rx < b.w){
					if(rx < w){
						dx = -w;
					}else if(rx > b.w - w){
						dx = w;
					}
				}
				//console.log("ry =", ry, "b.h =", b.h, "h =", h);
				if(ry > 0 && ry < b.h){
					if(ry < h){
						dy = -h;
					}else if(ry > b.h - h){
						dy = h;
					}
				}
				var oldLeft = n.scrollLeft, oldTop = n.scrollTop;
				n.scrollLeft = n.scrollLeft + dx;
				n.scrollTop  = n.scrollTop  + dy;
				if(oldLeft != n.scrollLeft || oldTop != n.scrollTop){ return; }
			}
		}
		try{
			n = n.parentNode;
		}catch(x){
			n = null;
		}
	}
	dojo.dnd.autoScroll(e);
};

}

if(!dojo._hasResource["dojo.dnd.Mover"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.Mover"] = true;
dojo.provide("dojo.dnd.Mover");





dojo.declare("dojo.dnd.Mover", null, {
	constructor: function(node, e, host){
		// summary:
		//		an object which makes a node follow the mouse, or touch-drag on touch devices.
		//		Used as a default mover, and as a base class for custom movers.
		// node: Node
		//		a node (or node's id) to be moved
		// e: Event
		//		a mouse event, which started the move;
		//		only pageX and pageY properties are used
		// host: Object?
		//		object which implements the functionality of the move,
		//	 	and defines proper events (onMoveStart and onMoveStop)
		this.node = dojo.byId(node);
		var pos = e.touches ? e.touches[0] : e;
		this.marginBox = {l: pos.pageX, t: pos.pageY};
		this.mouseButton = e.button;
		var h = (this.host = host), d = node.ownerDocument;
		this.events = [
			// At the start of a drag, onFirstMove is called, and then the following two
			// connects are disconnected
			dojo.connect(d, "onmousemove", this, "onFirstMove"),
			dojo.connect(d, "ontouchmove", this, "onFirstMove"),

			// These are called continually during the drag
			dojo.connect(d, "onmousemove", this, "onMouseMove"),
			dojo.connect(d, "ontouchmove", this, "onMouseMove"),

			// And these are called at the end of the drag
			dojo.connect(d, "onmouseup",   this, "onMouseUp"),
			dojo.connect(d, "ontouchend", this, "onMouseUp"),

			// cancel text selection and text dragging
			dojo.connect(d, "ondragstart",   dojo.stopEvent),
			dojo.connect(d.body, "onselectstart", dojo.stopEvent)
		];
		// notify that the move has started
		if(h && h.onMoveStart){
			h.onMoveStart(this);
		}
	},
	// mouse event processors
	onMouseMove: function(e){
		// summary:
		//		event processor for onmousemove/ontouchmove
		// e: Event
		//		mouse/touch event
		dojo.dnd.autoScroll(e);
		var m = this.marginBox,
			pos = e.touches ? e.touches[0] : e;
		this.host.onMove(this, {l: m.l + pos.pageX, t: m.t + pos.pageY}, e);
		dojo.stopEvent(e);
	},
	onMouseUp: function(e){
		if(dojo.isWebKit && dojo.isMac && this.mouseButton == 2 ?
				e.button == 0 : this.mouseButton == e.button){ // TODO Should condition be met for touch devices, too?
			this.destroy();
		}
		dojo.stopEvent(e);
	},
	// utilities
	onFirstMove: function(e){
		// summary:
		//		makes the node absolute; it is meant to be called only once.
		// 		relative and absolutely positioned nodes are assumed to use pixel units
		var s = this.node.style, l, t, h = this.host;
		switch(s.position){
			case "relative":
			case "absolute":
				// assume that left and top values are in pixels already
				l = Math.round(parseFloat(s.left)) || 0;
				t = Math.round(parseFloat(s.top)) || 0;
				break;
			default:
				s.position = "absolute";	// enforcing the absolute mode
				var m = dojo.marginBox(this.node);
				// event.pageX/pageY (which we used to generate the initial
				// margin box) includes padding and margin set on the body.
				// However, setting the node's position to absolute and then
				// doing dojo.marginBox on it *doesn't* take that additional
				// space into account - so we need to subtract the combined
				// padding and margin.  We use getComputedStyle and
				// _getMarginBox/_getContentBox to avoid the extra lookup of
				// the computed style.
				var b = dojo.doc.body;
				var bs = dojo.getComputedStyle(b);
				var bm = dojo._getMarginBox(b, bs);
				var bc = dojo._getContentBox(b, bs);
				l = m.l - (bc.l - bm.l);
				t = m.t - (bc.t - bm.t);
				break;
		}
		this.marginBox.l = l - this.marginBox.l;
		this.marginBox.t = t - this.marginBox.t;
		if(h && h.onFirstMove){
			h.onFirstMove(this, e);
		}
		
		// Disconnect onmousemove and ontouchmove events that call this function
		dojo.disconnect(this.events.shift());
		dojo.disconnect(this.events.shift());
	},
	destroy: function(){
		// summary:
		//		stops the move, deletes all references, so the object can be garbage-collected
		dojo.forEach(this.events, dojo.disconnect);
		// undo global settings
		var h = this.host;
		if(h && h.onMoveStop){
			h.onMoveStop(this);
		}
		// destroy objects
		this.events = this.node = this.host = null;
	}
});

}

if(!dojo._hasResource["dojo.dnd.Moveable"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.Moveable"] = true;
dojo.provide("dojo.dnd.Moveable");




/*=====
dojo.declare("dojo.dnd.__MoveableArgs", [], {
	// handle: Node||String
	//		A node (or node's id), which is used as a mouse handle.
	//		If omitted, the node itself is used as a handle.
	handle: null,

	// delay: Number
	//		delay move by this number of pixels
	delay: 0,

	// skip: Boolean
	//		skip move of form elements
	skip: false,

	// mover: Object
	//		a constructor of custom Mover
	mover: dojo.dnd.Mover
});
=====*/

dojo.declare("dojo.dnd.Moveable", null, {
	// object attributes (for markup)
	handle: "",
	delay: 0,
	skip: false,
	
	constructor: function(node, params){
		// summary:
		//		an object, which makes a node moveable
		// node: Node
		//		a node (or node's id) to be moved
		// params: dojo.dnd.__MoveableArgs?
		//		optional parameters
		this.node = dojo.byId(node);
		if(!params){ params = {}; }
		this.handle = params.handle ? dojo.byId(params.handle) : null;
		if(!this.handle){ this.handle = this.node; }
		this.delay = params.delay > 0 ? params.delay : 0;
		this.skip  = params.skip;
		this.mover = params.mover ? params.mover : dojo.dnd.Mover;
		this.events = [
			dojo.connect(this.handle, "onmousedown", this, "onMouseDown"),
			dojo.connect(this.handle, "ontouchstart", this, "onMouseDown"),
			// cancel text selection and text dragging
			dojo.connect(this.handle, "ondragstart",   this, "onSelectStart"),
			dojo.connect(this.handle, "onselectstart", this, "onSelectStart")
		];
	},

	// markup methods
	markupFactory: function(params, node){
		return new dojo.dnd.Moveable(node, params);
	},

	// methods
	destroy: function(){
		// summary:
		//		stops watching for possible move, deletes all references, so the object can be garbage-collected
		dojo.forEach(this.events, dojo.disconnect);
		this.events = this.node = this.handle = null;
	},
	
	// mouse event processors
	onMouseDown: function(e){
		// summary:
		//		event processor for onmousedown/ontouchstart, creates a Mover for the node
		// e: Event
		//		mouse/touch event
		if(this.skip && dojo.dnd.isFormElement(e)){ return; }
		if(this.delay){
			this.events.push(
				dojo.connect(this.handle, "onmousemove", this, "onMouseMove"),
				dojo.connect(this.handle, "ontouchmove", this, "onMouseMove"),
				dojo.connect(this.handle, "onmouseup", this, "onMouseUp"),
				dojo.connect(this.handle, "ontouchend", this, "onMouseUp")
			);
			var pos = e.touches ? e.touches[0] : e;
			this._lastX = pos.pageX;
			this._lastY = pos.pageY;
		}else{
			this.onDragDetected(e);
		}
		dojo.stopEvent(e);
	},
	onMouseMove: function(e){
		// summary:
		//		event processor for onmousemove/ontouchmove, used only for delayed drags
		// e: Event
		//		mouse/touch event
		var pos = e.touches ? e.touches[0] : e;
		if(Math.abs(pos.pageX - this._lastX) > this.delay || Math.abs(pos.pageY - this._lastY) > this.delay){
			this.onMouseUp(e);
			this.onDragDetected(e);
		}
		dojo.stopEvent(e);
	},
	onMouseUp: function(e){
		// summary:
		//		event processor for onmouseup, used only for delayed drags
		// e: Event
		//		mouse event
		for(var i = 0; i < 2; ++i){
			dojo.disconnect(this.events.pop());
		}
		dojo.stopEvent(e);
	},
	onSelectStart: function(e){
		// summary:
		//		event processor for onselectevent and ondragevent
		// e: Event
		//		mouse event
		if(!this.skip || !dojo.dnd.isFormElement(e)){
			dojo.stopEvent(e);
		}
	},
	
	// local events
	onDragDetected: function(/* Event */ e){
		// summary:
		//		called when the drag is detected;
		//		responsible for creation of the mover
		new this.mover(this.node, e, this);
	},
	onMoveStart: function(/* dojo.dnd.Mover */ mover){
		// summary:
		//		called before every move operation
		dojo.publish("/dnd/move/start", [mover]);
		dojo.addClass(dojo.body(), "dojoMove");
		dojo.addClass(this.node, "dojoMoveItem");
	},
	onMoveStop: function(/* dojo.dnd.Mover */ mover){
		// summary:
		//		called after every move operation
		dojo.publish("/dnd/move/stop", [mover]);
		dojo.removeClass(dojo.body(), "dojoMove");
		dojo.removeClass(this.node, "dojoMoveItem");
	},
	onFirstMove: function(/* dojo.dnd.Mover */ mover, /* Event */ e){
		// summary:
		//		called during the very first move notification;
		//		can be used to initialize coordinates, can be overwritten.
		
		// default implementation does nothing
	},
	onMove: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop, /* Event */ e){
		// summary:
		//		called during every move notification;
		//		should actually move the node; can be overwritten.
		this.onMoving(mover, leftTop);
		var s = mover.node.style;
		s.left = leftTop.l + "px";
		s.top  = leftTop.t + "px";
		this.onMoved(mover, leftTop);
	},
	onMoving: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop){
		// summary:
		//		called before every incremental move; can be overwritten.
		
		// default implementation does nothing
	},
	onMoved: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop){
		// summary:
		//		called after every incremental move; can be overwritten.
		
		// default implementation does nothing
	}
});

}

if(!dojo._hasResource["dojo.dnd.move"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.move"] = true;
dojo.provide("dojo.dnd.move");





/*=====
dojo.declare("dojo.dnd.move.__constrainedMoveableArgs", [dojo.dnd.__MoveableArgs], {
	// constraints: Function
	//		Calculates a constraint box.
	//		It is called in a context of the moveable object.
	constraints: function(){},

	// within: Boolean
	//		restrict move within boundaries.
	within: false
});
=====*/

dojo.declare("dojo.dnd.move.constrainedMoveable", dojo.dnd.Moveable, {
	// object attributes (for markup)
	constraints: function(){},
	within: false,
	
	// markup methods
	markupFactory: function(params, node){
		return new dojo.dnd.move.constrainedMoveable(node, params);
	},

	constructor: function(node, params){
		// summary:
		//		an object that makes a node moveable
		// node: Node
		//		a node (or node's id) to be moved
		// params: dojo.dnd.move.__constrainedMoveableArgs?
		//		an optional object with additional parameters;
		//		the rest is passed to the base class
		if(!params){ params = {}; }
		this.constraints = params.constraints;
		this.within = params.within;
	},
	onFirstMove: function(/* dojo.dnd.Mover */ mover){
		// summary:
		//		called during the very first move notification;
		//		can be used to initialize coordinates, can be overwritten.
		var c = this.constraintBox = this.constraints.call(this, mover);
		c.r = c.l + c.w;
		c.b = c.t + c.h;
		if(this.within){
			var mb = dojo._getMarginSize(mover.node);
			c.r -= mb.w;
			c.b -= mb.h;
		}
	},
	onMove: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop){
		// summary:
		//		called during every move notification;
		//		should actually move the node; can be overwritten.
		var c = this.constraintBox, s = mover.node.style;
		this.onMoving(mover, leftTop);
		leftTop.l = leftTop.l < c.l ? c.l : c.r < leftTop.l ? c.r : leftTop.l;
		leftTop.t = leftTop.t < c.t ? c.t : c.b < leftTop.t ? c.b : leftTop.t;
		s.left = leftTop.l + "px";
		s.top  = leftTop.t + "px";
		this.onMoved(mover, leftTop);
	}
});

/*=====
dojo.declare("dojo.dnd.move.__boxConstrainedMoveableArgs", [dojo.dnd.move.__constrainedMoveableArgs], {
	// box: Object
	//		a constraint box
	box: {}
});
=====*/

dojo.declare("dojo.dnd.move.boxConstrainedMoveable", dojo.dnd.move.constrainedMoveable, {
	// box:
	//		object attributes (for markup)
	box: {},
	
	// markup methods
	markupFactory: function(params, node){
		return new dojo.dnd.move.boxConstrainedMoveable(node, params);
	},

	constructor: function(node, params){
		// summary:
		//		an object, which makes a node moveable
		// node: Node
		//		a node (or node's id) to be moved
		// params: dojo.dnd.move.__boxConstrainedMoveableArgs?
		//		an optional object with parameters
		var box = params && params.box;
		this.constraints = function(){ return box; };
	}
});

/*=====
dojo.declare("dojo.dnd.move.__parentConstrainedMoveableArgs", [dojo.dnd.move.__constrainedMoveableArgs], {
	// area: String
	//		A parent's area to restrict the move.
	//		Can be "margin", "border", "padding", or "content".
	area: ""
});
=====*/

dojo.declare("dojo.dnd.move.parentConstrainedMoveable", dojo.dnd.move.constrainedMoveable, {
	// area:
	//		object attributes (for markup)
	area: "content",

	// markup methods
	markupFactory: function(params, node){
		return new dojo.dnd.move.parentConstrainedMoveable(node, params);
	},

	constructor: function(node, params){
		// summary:
		//		an object, which makes a node moveable
		// node: Node
		//		a node (or node's id) to be moved
		// params: dojo.dnd.move.__parentConstrainedMoveableArgs?
		//		an optional object with parameters
		var area = params && params.area;
		this.constraints = function(){
			var n = this.node.parentNode,
				s = dojo.getComputedStyle(n),
				mb = dojo._getMarginBox(n, s);
			if(area == "margin"){
				return mb;	// Object
			}
			var t = dojo._getMarginExtents(n, s);
			mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
			if(area == "border"){
				return mb;	// Object
			}
			t = dojo._getBorderExtents(n, s);
			mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
			if(area == "padding"){
				return mb;	// Object
			}
			t = dojo._getPadExtents(n, s);
			mb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;
			return mb;	// Object
		};
	}
});

// patching functions one level up for compatibility

dojo.dnd.constrainedMover = dojo.dnd.move.constrainedMover;
dojo.dnd.boxConstrainedMover = dojo.dnd.move.boxConstrainedMover;
dojo.dnd.parentConstrainedMover = dojo.dnd.move.parentConstrainedMover;

}

if(!dojo._hasResource["dojo.dnd.TimedMoveable"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.TimedMoveable"] = true;
dojo.provide("dojo.dnd.TimedMoveable");




/*=====
dojo.declare("dojo.dnd.__TimedMoveableArgs", [dojo.dnd.__MoveableArgs], {
	// timeout: Number
	//		delay move by this number of ms,
	//		accumulating position changes during the timeout
	timeout: 0
});
=====*/

(function(){
	// precalculate long expressions
	var oldOnMove = dojo.dnd.Moveable.prototype.onMove;
		
	dojo.declare("dojo.dnd.TimedMoveable", dojo.dnd.Moveable, {
		// summary:
		//		A specialized version of Moveable to support an FPS throttling.
		//		This class puts an upper restriction on FPS, which may reduce
		//		the CPU load. The additional parameter "timeout" regulates
		//		the delay before actually moving the moveable object.
		
		// object attributes (for markup)
		timeout: 40,	// in ms, 40ms corresponds to 25 fps
	
		constructor: function(node, params){
			// summary:
			//		an object that makes a node moveable with a timer
			// node: Node||String
			//		a node (or node's id) to be moved
			// params: dojo.dnd.__TimedMoveableArgs
			//		object with additional parameters.
			
			// sanitize parameters
			if(!params){ params = {}; }
			if(params.timeout && typeof params.timeout == "number" && params.timeout >= 0){
				this.timeout = params.timeout;
			}
		},
	
		// markup methods
		markupFactory: function(params, node){
			return new dojo.dnd.TimedMoveable(node, params);
		},
	
		onMoveStop: function(/* dojo.dnd.Mover */ mover){
			if(mover._timer){
				// stop timer
				clearTimeout(mover._timer)
				// reflect the last received position
				oldOnMove.call(this, mover, mover._leftTop)
			}
			dojo.dnd.Moveable.prototype.onMoveStop.apply(this, arguments);
		},
		onMove: function(/* dojo.dnd.Mover */ mover, /* Object */ leftTop){
			mover._leftTop = leftTop;
			if(!mover._timer){
				var _t = this;	// to avoid using dojo.hitch()
				mover._timer = setTimeout(function(){
					// we don't have any pending requests
					mover._timer = null;
					// reflect the last received position
					oldOnMove.call(_t, mover, mover._leftTop);
				}, this.timeout);
			}
		}
	});
})();

}

if(!dojo._hasResource["dojo.fx.Toggler"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.fx.Toggler"] = true;
dojo.provide("dojo.fx.Toggler");



dojo.declare("dojo.fx.Toggler", null, {
	// summary:
	//		A simple `dojo.Animation` toggler API.
	//
	// description:
	//		class constructor for an animation toggler. It accepts a packed
	//		set of arguments about what type of animation to use in each
	//		direction, duration, etc. All available members are mixed into
	//		these animations from the constructor (for example, `node`,
	//		`showDuration`, `hideDuration`).
	//
	// example:
	//	|	var t = new dojo.fx.Toggler({
	//	|		node: "nodeId",
	//	|		showDuration: 500,
	//	|		// hideDuration will default to "200"
	//	|		showFunc: dojo.fx.wipeIn,
	//	|		// hideFunc will default to "fadeOut"
	//	|	});
	//	|	t.show(100); // delay showing for 100ms
	//	|	// ...time passes...
	//	|	t.hide();

	// node: DomNode
	//		the node to target for the showing and hiding animations
	node: null,

	// showFunc: Function
	//		The function that returns the `dojo.Animation` to show the node
	showFunc: dojo.fadeIn,

	// hideFunc: Function
	//		The function that returns the `dojo.Animation` to hide the node
	hideFunc: dojo.fadeOut,

	// showDuration:
	//		Time in milliseconds to run the show Animation
	showDuration: 200,

	// hideDuration:
	//		Time in milliseconds to run the hide Animation
	hideDuration: 200,

	// FIXME: need a policy for where the toggler should "be" the next
	// time show/hide are called if we're stopped somewhere in the
	// middle.
	// FIXME: also would be nice to specify individual showArgs/hideArgs mixed into
	// each animation individually.
	// FIXME: also would be nice to have events from the animations exposed/bridged

	/*=====
	_showArgs: null,
	_showAnim: null,

	_hideArgs: null,
	_hideAnim: null,

	_isShowing: false,
	_isHiding: false,
	=====*/

	constructor: function(args){
		var _t = this;

		dojo.mixin(_t, args);
		_t.node = args.node;
		_t._showArgs = dojo.mixin({}, args);
		_t._showArgs.node = _t.node;
		_t._showArgs.duration = _t.showDuration;
		_t.showAnim = _t.showFunc(_t._showArgs);

		_t._hideArgs = dojo.mixin({}, args);
		_t._hideArgs.node = _t.node;
		_t._hideArgs.duration = _t.hideDuration;
		_t.hideAnim = _t.hideFunc(_t._hideArgs);

		dojo.connect(_t.showAnim, "beforeBegin", dojo.hitch(_t.hideAnim, "stop", true));
		dojo.connect(_t.hideAnim, "beforeBegin", dojo.hitch(_t.showAnim, "stop", true));
	},

	show: function(delay){
		// summary: Toggle the node to showing
		// delay: Integer?
		//		Ammount of time to stall playing the show animation
		return this.showAnim.play(delay || 0);
	},

	hide: function(delay){
		// summary: Toggle the node to hidden
		// delay: Integer?
		//		Ammount of time to stall playing the hide animation
		return this.hideAnim.play(delay || 0);
	}
});

}

if(!dojo._hasResource["dojo.fx"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.fx"] = true;
dojo.provide("dojo.fx");




/*=====
dojo.fx = {
	// summary: Effects library on top of Base animations
};
=====*/
(function(){
	
	var d = dojo,
		_baseObj = {
			_fire: function(evt, args){
				if(this[evt]){
					this[evt].apply(this, args||[]);
				}
				return this;
			}
		};

	var _chain = function(animations){
		this._index = -1;
		this._animations = animations||[];
		this._current = this._onAnimateCtx = this._onEndCtx = null;

		this.duration = 0;
		d.forEach(this._animations, function(a){
			this.duration += a.duration;
			if(a.delay){ this.duration += a.delay; }
		}, this);
	};
	d.extend(_chain, {
		_onAnimate: function(){
			this._fire("onAnimate", arguments);
		},
		_onEnd: function(){
			d.disconnect(this._onAnimateCtx);
			d.disconnect(this._onEndCtx);
			this._onAnimateCtx = this._onEndCtx = null;
			if(this._index + 1 == this._animations.length){
				this._fire("onEnd");
			}else{
				// switch animations
				this._current = this._animations[++this._index];
				this._onAnimateCtx = d.connect(this._current, "onAnimate", this, "_onAnimate");
				this._onEndCtx = d.connect(this._current, "onEnd", this, "_onEnd");
				this._current.play(0, true);
			}
		},
		play: function(/*int?*/ delay, /*Boolean?*/ gotoStart){
			if(!this._current){ this._current = this._animations[this._index = 0]; }
			if(!gotoStart && this._current.status() == "playing"){ return this; }
			var beforeBegin = d.connect(this._current, "beforeBegin", this, function(){
					this._fire("beforeBegin");
				}),
				onBegin = d.connect(this._current, "onBegin", this, function(arg){
					this._fire("onBegin", arguments);
				}),
				onPlay = d.connect(this._current, "onPlay", this, function(arg){
					this._fire("onPlay", arguments);
					d.disconnect(beforeBegin);
					d.disconnect(onBegin);
					d.disconnect(onPlay);
				});
			if(this._onAnimateCtx){
				d.disconnect(this._onAnimateCtx);
			}
			this._onAnimateCtx = d.connect(this._current, "onAnimate", this, "_onAnimate");
			if(this._onEndCtx){
				d.disconnect(this._onEndCtx);
			}
			this._onEndCtx = d.connect(this._current, "onEnd", this, "_onEnd");
			this._current.play.apply(this._current, arguments);
			return this;
		},
		pause: function(){
			if(this._current){
				var e = d.connect(this._current, "onPause", this, function(arg){
						this._fire("onPause", arguments);
						d.disconnect(e);
					});
				this._current.pause();
			}
			return this;
		},
		gotoPercent: function(/*Decimal*/percent, /*Boolean?*/ andPlay){
			this.pause();
			var offset = this.duration * percent;
			this._current = null;
			d.some(this._animations, function(a){
				if(a.duration <= offset){
					this._current = a;
					return true;
				}
				offset -= a.duration;
				return false;
			});
			if(this._current){
				this._current.gotoPercent(offset / this._current.duration, andPlay);
			}
			return this;
		},
		stop: function(/*boolean?*/ gotoEnd){
			if(this._current){
				if(gotoEnd){
					for(; this._index + 1 < this._animations.length; ++this._index){
						this._animations[this._index].stop(true);
					}
					this._current = this._animations[this._index];
				}
				var e = d.connect(this._current, "onStop", this, function(arg){
						this._fire("onStop", arguments);
						d.disconnect(e);
					});
				this._current.stop();
			}
			return this;
		},
		status: function(){
			return this._current ? this._current.status() : "stopped";
		},
		destroy: function(){
			if(this._onAnimateCtx){ d.disconnect(this._onAnimateCtx); }
			if(this._onEndCtx){ d.disconnect(this._onEndCtx); }
		}
	});
	d.extend(_chain, _baseObj);

	dojo.fx.chain = function(/*dojo.Animation[]*/ animations){
		// summary:
		//		Chain a list of `dojo.Animation`s to run in sequence
		//
		// description:
		//		Return a `dojo.Animation` which will play all passed
		//		`dojo.Animation` instances in sequence, firing its own
		//		synthesized events simulating a single animation. (eg:
		//		onEnd of this animation means the end of the chain,
		//		not the individual animations within)
		//
		// example:
		//	Once `node` is faded out, fade in `otherNode`
		//	|	dojo.fx.chain([
		//	|		dojo.fadeIn({ node:node }),
		//	|		dojo.fadeOut({ node:otherNode })
		//	|	]).play();
		//
		return new _chain(animations) // dojo.Animation
	};

	var _combine = function(animations){
		this._animations = animations||[];
		this._connects = [];
		this._finished = 0;

		this.duration = 0;
		d.forEach(animations, function(a){
			var duration = a.duration;
			if(a.delay){ duration += a.delay; }
			if(this.duration < duration){ this.duration = duration; }
			this._connects.push(d.connect(a, "onEnd", this, "_onEnd"));
		}, this);
		
		this._pseudoAnimation = new d.Animation({curve: [0, 1], duration: this.duration});
		var self = this;
		d.forEach(["beforeBegin", "onBegin", "onPlay", "onAnimate", "onPause", "onStop", "onEnd"],
			function(evt){
				self._connects.push(d.connect(self._pseudoAnimation, evt,
					function(){ self._fire(evt, arguments); }
				));
			}
		);
	};
	d.extend(_combine, {
		_doAction: function(action, args){
			d.forEach(this._animations, function(a){
				a[action].apply(a, args);
			});
			return this;
		},
		_onEnd: function(){
			if(++this._finished > this._animations.length){
				this._fire("onEnd");
			}
		},
		_call: function(action, args){
			var t = this._pseudoAnimation;
			t[action].apply(t, args);
		},
		play: function(/*int?*/ delay, /*Boolean?*/ gotoStart){
			this._finished = 0;
			this._doAction("play", arguments);
			this._call("play", arguments);
			return this;
		},
		pause: function(){
			this._doAction("pause", arguments);
			this._call("pause", arguments);
			return this;
		},
		gotoPercent: function(/*Decimal*/percent, /*Boolean?*/ andPlay){
			var ms = this.duration * percent;
			d.forEach(this._animations, function(a){
				a.gotoPercent(a.duration < ms ? 1 : (ms / a.duration), andPlay);
			});
			this._call("gotoPercent", arguments);
			return this;
		},
		stop: function(/*boolean?*/ gotoEnd){
			this._doAction("stop", arguments);
			this._call("stop", arguments);
			return this;
		},
		status: function(){
			return this._pseudoAnimation.status();
		},
		destroy: function(){
			d.forEach(this._connects, dojo.disconnect);
		}
	});
	d.extend(_combine, _baseObj);

	dojo.fx.combine = function(/*dojo.Animation[]*/ animations){
		// summary:
		//		Combine a list of `dojo.Animation`s to run in parallel
		//
		// description:
		//		Combine an array of `dojo.Animation`s to run in parallel,
		//		providing a new `dojo.Animation` instance encompasing each
		//		animation, firing standard animation events.
		//
		// example:
		//	Fade out `node` while fading in `otherNode` simultaneously
		//	|	dojo.fx.combine([
		//	|		dojo.fadeIn({ node:node }),
		//	|		dojo.fadeOut({ node:otherNode })
		//	|	]).play();
		//
		// example:
		//	When the longest animation ends, execute a function:
		//	|	var anim = dojo.fx.combine([
		//	|		dojo.fadeIn({ node: n, duration:700 }),
		//	|		dojo.fadeOut({ node: otherNode, duration: 300 })
		//	|	]);
		//	|	dojo.connect(anim, "onEnd", function(){
		//	|		// overall animation is done.
		//	|	});
		//	|	anim.play(); // play the animation
		//
		return new _combine(animations); // dojo.Animation
	};

	dojo.fx.wipeIn = function(/*Object*/ args){
		// summary:
		//		Expand a node to it's natural height.
		//
		// description:
		//		Returns an animation that will expand the
		//		node defined in 'args' object from it's current height to
		//		it's natural height (with no scrollbar).
		//		Node must have no margin/border/padding.
		//
		// args: Object
		//		A hash-map of standard `dojo.Animation` constructor properties
		//		(such as easing: node: duration: and so on)
		//
		// example:
		//	|	dojo.fx.wipeIn({
		//	|		node:"someId"
		//	|	}).play()
		var node = args.node = d.byId(args.node), s = node.style, o;

		var anim = d.animateProperty(d.mixin({
			properties: {
				height: {
					// wrapped in functions so we wait till the last second to query (in case value has changed)
					start: function(){
						// start at current [computed] height, but use 1px rather than 0
						// because 0 causes IE to display the whole panel
						o = s.overflow;
						s.overflow = "hidden";
						if(s.visibility == "hidden" || s.display == "none"){
							s.height = "1px";
							s.display = "";
							s.visibility = "";
							return 1;
						}else{
							var height = d.style(node, "height");
							return Math.max(height, 1);
						}
					},
					end: function(){
						return node.scrollHeight;
					}
				}
			}
		}, args));

		d.connect(anim, "onEnd", function(){
			s.height = "auto";
			s.overflow = o;
		});

		return anim; // dojo.Animation
	};

	dojo.fx.wipeOut = function(/*Object*/ args){
		// summary:
		//		Shrink a node to nothing and hide it.
		//
		// description:
		//		Returns an animation that will shrink node defined in "args"
		//		from it's current height to 1px, and then hide it.
		//
		// args: Object
		//		A hash-map of standard `dojo.Animation` constructor properties
		//		(such as easing: node: duration: and so on)
		//
		// example:
		//	|	dojo.fx.wipeOut({ node:"someId" }).play()
		
		var node = args.node = d.byId(args.node), s = node.style, o;
		
		var anim = d.animateProperty(d.mixin({
			properties: {
				height: {
					end: 1 // 0 causes IE to display the whole panel
				}
			}
		}, args));

		d.connect(anim, "beforeBegin", function(){
			o = s.overflow;
			s.overflow = "hidden";
			s.display = "";
		});
		d.connect(anim, "onEnd", function(){
			s.overflow = o;
			s.height = "auto";
			s.display = "none";
		});

		return anim; // dojo.Animation
	};

	dojo.fx.slideTo = function(/*Object*/ args){
		// summary:
		//		Slide a node to a new top/left position
		//
		// description:
		//		Returns an animation that will slide "node"
		//		defined in args Object from its current position to
		//		the position defined by (args.left, args.top).
		//
		// args: Object
		//		A hash-map of standard `dojo.Animation` constructor properties
		//		(such as easing: node: duration: and so on). Special args members
		//		are `top` and `left`, which indicate the new position to slide to.
		//
		// example:
		//	|	dojo.fx.slideTo({ node: node, left:"40", top:"50", units:"px" }).play()

		var node = args.node = d.byId(args.node),
			top = null, left = null;

		var init = (function(n){
			return function(){
				var cs = d.getComputedStyle(n);
				var pos = cs.position;
				top = (pos == 'absolute' ? n.offsetTop : parseInt(cs.top) || 0);
				left = (pos == 'absolute' ? n.offsetLeft : parseInt(cs.left) || 0);
				if(pos != 'absolute' && pos != 'relative'){
					var ret = d.position(n, true);
					top = ret.y;
					left = ret.x;
					n.style.position="absolute";
					n.style.top=top+"px";
					n.style.left=left+"px";
				}
			};
		})(node);
		init();

		var anim = d.animateProperty(d.mixin({
			properties: {
				top: args.top || 0,
				left: args.left || 0
			}
		}, args));
		d.connect(anim, "beforeBegin", anim, init);

		return anim; // dojo.Animation
	};

})();

}

if(!dojo._hasResource["dijit.form._FormMixin"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form._FormMixin"] = true;
dojo.provide("dijit.form._FormMixin");




dojo.declare("dijit.form._FormMixin", null, {
	// summary:
	//		Mixin for containers of form widgets (i.e. widgets that represent a single value
	//		and can be children of a <form> node or dijit.form.Form widget)
	// description:
	//		Can extract all the form widgets
	//		values and combine them into a single javascript object, or alternately
	//		take such an object and set the values for all the contained
	//		form widgets

/*=====
	// value: Object
	//		Name/value hash for each child widget with a name and value.
	//		Child widgets without names are not part of the hash.
	//
	//		If there are multiple child widgets w/the same name, value is an array,
	//		unless they are radio buttons in which case value is a scalar (since only
	//		one radio button can be checked at a time).
	//
	//		If a child widget's name is a dot separated list (like a.b.c.d), it's a nested structure.
	//
	//		Example:
	//	|	{ name: "John Smith", interests: ["sports", "movies"] }
=====*/

	// state: [readonly] String
	//		Will be "Error" if one or more of the child widgets has an invalid value,
	//		"Incomplete" if not all of the required child widgets are filled in.  Otherwise, "",
	//		which indicates that the form is ready to be submitted.
	state: "",

	//	TODO:
	//	* Repeater
	//	* better handling for arrays.  Often form elements have names with [] like
	//	* people[3].sex (for a list of people [{name: Bill, sex: M}, ...])
	//
	//

		reset: function(){
			dojo.forEach(this.getDescendants(), function(widget){
				if(widget.reset){
					widget.reset();
				}
			});
		},

		validate: function(){
			// summary:
			//		returns if the form is valid - same as isValid - but
			//		provides a few additional (ui-specific) features.
			//		1 - it will highlight any sub-widgets that are not
			//			valid
			//		2 - it will call focus() on the first invalid
			//			sub-widget
			var didFocus = false;
			return dojo.every(dojo.map(this.getDescendants(), function(widget){
				// Need to set this so that "required" widgets get their
				// state set.
				widget._hasBeenBlurred = true;
				var valid = widget.disabled || !widget.validate || widget.validate();
				if(!valid && !didFocus){
					// Set focus of the first non-valid widget
					dojo.window.scrollIntoView(widget.containerNode || widget.domNode);
					widget.focus();
					didFocus = true;
				}
	 			return valid;
	 		}), function(item){ return item; });
		},

		setValues: function(val){
			dojo.deprecated(this.declaredClass+"::setValues() is deprecated. Use set('value', val) instead.", "", "2.0");
			return this.set('value', val);
		},
		_setValueAttr: function(/*Object*/ obj){
			// summary:
			//		Fill in form values from according to an Object (in the format returned by get('value'))

			// generate map from name --> [list of widgets with that name]
			var map = { };
			dojo.forEach(this.getDescendants(), function(widget){
				if(!widget.name){ return; }
				var entry = map[widget.name] || (map[widget.name] = [] );
				entry.push(widget);
			});

			for(var name in map){
				if(!map.hasOwnProperty(name)){
					continue;
				}
				var widgets = map[name],						// array of widgets w/this name
					values = dojo.getObject(name, false, obj);	// list of values for those widgets

				if(values === undefined){
					continue;
				}
				if(!dojo.isArray(values)){
					values = [ values ];
				}
				if(typeof widgets[0].checked == 'boolean'){
					// for checkbox/radio, values is a list of which widgets should be checked
					dojo.forEach(widgets, function(w, i){
						w.set('value', dojo.indexOf(values, w.value) != -1);
					});
				}else if(widgets[0].multiple){
					// it takes an array (e.g. multi-select)
					widgets[0].set('value', values);
				}else{
					// otherwise, values is a list of values to be assigned sequentially to each widget
					dojo.forEach(widgets, function(w, i){
						w.set('value', values[i]);
					});
				}
			}

			/***
			 * 	TODO: code for plain input boxes (this shouldn't run for inputs that are part of widgets)

			dojo.forEach(this.containerNode.elements, function(element){
				if(element.name == ''){return};	// like "continue"
				var namePath = element.name.split(".");
				var myObj=obj;
				var name=namePath[namePath.length-1];
				for(var j=1,len2=namePath.length;j<len2;++j){
					var p=namePath[j - 1];
					// repeater support block
					var nameA=p.split("[");
					if(nameA.length > 1){
						if(typeof(myObj[nameA[0]]) == "undefined"){
							myObj[nameA[0]]=[ ];
						} // if

						nameIndex=parseInt(nameA[1]);
						if(typeof(myObj[nameA[0]][nameIndex]) == "undefined"){
							myObj[nameA[0]][nameIndex] = { };
						}
						myObj=myObj[nameA[0]][nameIndex];
						continue;
					} // repeater support ends

					if(typeof(myObj[p]) == "undefined"){
						myObj=undefined;
						break;
					};
					myObj=myObj[p];
				}

				if(typeof(myObj) == "undefined"){
					return;		// like "continue"
				}
				if(typeof(myObj[name]) == "undefined" && this.ignoreNullValues){
					return;		// like "continue"
				}

				// TODO: widget values (just call set('value', ...) on the widget)

				// TODO: maybe should call dojo.getNodeProp() instead
				switch(element.type){
					case "checkbox":
						element.checked = (name in myObj) &&
							dojo.some(myObj[name], function(val){ return val == element.value; });
						break;
					case "radio":
						element.checked = (name in myObj) && myObj[name] == element.value;
						break;
					case "select-multiple":
						element.selectedIndex=-1;
						dojo.forEach(element.options, function(option){
							option.selected = dojo.some(myObj[name], function(val){ return option.value == val; });
						});
						break;
					case "select-one":
						element.selectedIndex="0";
						dojo.forEach(element.options, function(option){
							option.selected = option.value == myObj[name];
						});
						break;
					case "hidden":
					case "text":
					case "textarea":
					case "password":
						element.value = myObj[name] || "";
						break;
				}
	  		});
	  		*/
			
			// Note: no need to call this._set("value", ...) as the child updates will trigger onChange events
			// which I am monitoring.
		},

		getValues: function(){
			dojo.deprecated(this.declaredClass+"::getValues() is deprecated. Use get('value') instead.", "", "2.0");
			return this.get('value');
		},
		_getValueAttr: function(){
			// summary:
			// 		Returns Object representing form values.   See description of `value` for details.
			// description:

			// The value is updated into this.value every time a child has an onChange event,
			// so in the common case this function could just return this.value.   However,
			// that wouldn't work when:
			//
			// 1. User presses return key to submit a form.  That doesn't fire an onchange event,
			// and even if it did it would come too late due to the setTimout(..., 0) in _handleOnChange()
			//
			// 2. app for some reason calls this.get("value") while the user is typing into a
			// form field.   Not sure if that case needs to be supported or not.

			// get widget values
			var obj = { };
			dojo.forEach(this.getDescendants(), function(widget){
				var name = widget.name;
				if(!name || widget.disabled){ return; }

				// Single value widget (checkbox, radio, or plain <input> type widget)
				var value = widget.get('value');

				// Store widget's value(s) as a scalar, except for checkboxes which are automatically arrays
				if(typeof widget.checked == 'boolean'){
					if(/Radio/.test(widget.declaredClass)){
						// radio button
						if(value !== false){
							dojo.setObject(name, value, obj);
						}else{
							// give radio widgets a default of null
							value = dojo.getObject(name, false, obj);
							if(value === undefined){
								dojo.setObject(name, null, obj);
							}
						}
					}else{
						// checkbox/toggle button
						var ary=dojo.getObject(name, false, obj);
						if(!ary){
							ary=[];
							dojo.setObject(name, ary, obj);
						}
						if(value !== false){
							ary.push(value);
						}
					}
				}else{
					var prev=dojo.getObject(name, false, obj);
					if(typeof prev != "undefined"){
						if(dojo.isArray(prev)){
							prev.push(value);
						}else{
							dojo.setObject(name, [prev, value], obj);
						}
					}else{
						// unique name
						dojo.setObject(name, value, obj);
					}
				}
			});

			/***
			 * code for plain input boxes (see also dojo.formToObject, can we use that instead of this code?
			 * but it doesn't understand [] notation, presumably)
			var obj = { };
			dojo.forEach(this.containerNode.elements, function(elm){
				if(!elm.name)	{
					return;		// like "continue"
				}
				var namePath = elm.name.split(".");
				var myObj=obj;
				var name=namePath[namePath.length-1];
				for(var j=1,len2=namePath.length;j<len2;++j){
					var nameIndex = null;
					var p=namePath[j - 1];
					var nameA=p.split("[");
					if(nameA.length > 1){
						if(typeof(myObj[nameA[0]]) == "undefined"){
							myObj[nameA[0]]=[ ];
						} // if
						nameIndex=parseInt(nameA[1]);
						if(typeof(myObj[nameA[0]][nameIndex]) == "undefined"){
							myObj[nameA[0]][nameIndex] = { };
						}
					} else if(typeof(myObj[nameA[0]]) == "undefined"){
						myObj[nameA[0]] = { }
					} // if

					if(nameA.length == 1){
						myObj=myObj[nameA[0]];
					} else{
						myObj=myObj[nameA[0]][nameIndex];
					} // if
				} // for

				if((elm.type != "select-multiple" && elm.type != "checkbox" && elm.type != "radio") || (elm.type == "radio" && elm.checked)){
					if(name == name.split("[")[0]){
						myObj[name]=elm.value;
					} else{
						// can not set value when there is no name
					}
				} else if(elm.type == "checkbox" && elm.checked){
					if(typeof(myObj[name]) == 'undefined'){
						myObj[name]=[ ];
					}
					myObj[name].push(elm.value);
				} else if(elm.type == "select-multiple"){
					if(typeof(myObj[name]) == 'undefined'){
						myObj[name]=[ ];
					}
					for(var jdx=0,len3=elm.options.length; jdx<len3; ++jdx){
						if(elm.options[jdx].selected){
							myObj[name].push(elm.options[jdx].value);
						}
					}
				} // if
				name=undefined;
			}); // forEach
			***/
			return obj;
		},

	 	isValid: function(){
	 		// summary:
	 		//		Returns true if all of the widgets are valid.
			//		Deprecated, will be removed in 2.0.  Use get("state") instead.

			return this.state == "";
		},

		onValidStateChange: function(isValid){
			// summary:
			//		Stub function to connect to if you want to do something
			//		(like disable/enable a submit button) when the valid
			//		state changes on the form as a whole.
			//
			//		Deprecated.  Will be removed in 2.0.  Use watch("state", ...) instead.
		},

		_getState: function(){
			// summary:
			//		Compute what this.state should be based on state of children
			var states = dojo.map(this._descendants, function(w){
				return w.get("state") || "";
			});

			return dojo.indexOf(states, "Error") >= 0 ? "Error" :
				dojo.indexOf(states, "Incomplete") >= 0 ? "Incomplete" : "";
		},

		disconnectChildren: function(){
			// summary:
			//		Remove connections to monitor changes to children's value, error state, and disabled state,
			//		in order to update Form.value and Form.state.
			dojo.forEach(this._childConnections || [], dojo.hitch(this, "disconnect"));
			dojo.forEach(this._childWatches || [], function(w){ w.unwatch(); });
		},

		connectChildren: function(/*Boolean*/ inStartup){
			// summary:
			//		Setup connections to monitor changes to children's value, error state, and disabled state,
			//		in order to update Form.value and Form.state.
			//
			//		You can call this function directly, ex. in the event that you
			//		programmatically add a widget to the form *after* the form has been
			//		initialized.

			var _this = this;

			// Remove old connections, if any
			this.disconnectChildren();

			this._descendants = this.getDescendants();

			// (Re)set this.value and this.state.   Send watch() notifications but not on startup.
			var set = inStartup ? function(name, val){ _this[name] = val; } : dojo.hitch(this, "_set");
			set("value", this.get("value"));
			set("state", this._getState());

			// Monitor changes to error state and disabled state in order to update
			// Form.state
			var conns = (this._childConnections = []),
				watches = (this._childWatches = []);
			dojo.forEach(dojo.filter(this._descendants,
				function(item){ return item.validate; }
			),
			function(widget){
				// We are interested in whenever the widget changes validity state - or
				// whenever the disabled attribute on that widget is changed.
				dojo.forEach(["state", "disabled"], function(attr){
					watches.push(widget.watch(attr, function(attr, oldVal, newVal){
						_this.set("state", _this._getState());
					}));
				});
			});

			// And monitor calls to child.onChange so we can update this.value
			var onChange = function(){
				// summary:
				//		Called when child's value or disabled state changes
				
				// Use setTimeout() to collapse value changes in multiple children into a single
				// update to my value.   Multiple updates will occur on:
				//	1. Form.set()
				//	2. Form.reset()
				//	3. user selecting a radio button (which will de-select another radio button,
				//		 causing two onChange events)
				if(_this._onChangeDelayTimer){
					clearTimeout(_this._onChangeDelayTimer);
				}
				_this._onChangeDelayTimer = setTimeout(function(){
					delete _this._onChangeDelayTimer;
					_this._set("value", _this.get("value"));
				}, 10);
			};
			dojo.forEach(
				dojo.filter(this._descendants, function(item){ return item.onChange; } ),
				function(widget){
					// When a child widget's value changes,
					// the efficient thing to do is to just update that one attribute in this.value,
					// but that gets a little complicated when a checkbox is checked/unchecked
					// since this.value["checkboxName"] contains an array of all the checkboxes w/the same name.
					// Doing simple thing for now.
					conns.push(_this.connect(widget, "onChange", onChange));

					// Disabling/enabling a child widget should remove it's value from this.value.
					// Again, this code could be more efficient, doing simple thing for now.
					watches.push(widget.watch("disabled", onChange));
				}
			);
		},

		startup: function(){
			this.inherited(arguments);

			// Initialize value and valid/invalid state tracking.  Needs to be done in startup()
			// so that children are initialized.
			this.connectChildren(true);

			// Make state change call onValidStateChange(), will be removed in 2.0
			this.watch("state", function(attr, oldVal, newVal){ this.onValidStateChange(newVal == ""); });
		},

		destroy: function(){
			this.disconnectChildren();
			this.inherited(arguments);
		}

	});

}

if(!dojo._hasResource["dijit._DialogMixin"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._DialogMixin"] = true;
dojo.provide("dijit._DialogMixin");




dojo.declare("dijit._DialogMixin", null,
	{
		// summary:
		//		This provides functions useful to Dialog and TooltipDialog

		attributeMap: dijit._Widget.prototype.attributeMap,

		execute: function(/*Object*/ formContents){
			// summary:
			//		Callback when the user hits the submit button.
			//		Override this method to handle Dialog execution.
			// description:
			//		After the user has pressed the submit button, the Dialog
			//		first calls onExecute() to notify the container to hide the
			//		dialog and restore focus to wherever it used to be.
			//
			//		*Then* this method is called.
			// type:
			//		callback
		},

		onCancel: function(){
			// summary:
			//	    Called when user has pressed the Dialog's cancel button, to notify container.
			// description:
			//	    Developer shouldn't override or connect to this method;
			//		it's a private communication device between the TooltipDialog
			//		and the thing that opened it (ex: `dijit.form.DropDownButton`)
			// type:
			//		protected
		},

		onExecute: function(){
			// summary:
			//	    Called when user has pressed the dialog's OK button, to notify container.
			// description:
			//	    Developer shouldn't override or connect to this method;
			//		it's a private communication device between the TooltipDialog
			//		and the thing that opened it (ex: `dijit.form.DropDownButton`)
			// type:
			//		protected
		},

		_onSubmit: function(){
			// summary:
			//		Callback when user hits submit button
			// type:
			//		protected
			this.onExecute();	// notify container that we are about to execute
			this.execute(this.get('value'));
		},

		_getFocusItems: function(){
			// summary:
			//		Finds focusable items in dialog,
			//		and sets this._firstFocusItem and this._lastFocusItem
			// tags:
			//		protected

			var elems = dijit._getTabNavigable(this.containerNode);
			this._firstFocusItem = elems.lowest || elems.first || this.closeButtonNode || this.domNode;
			this._lastFocusItem = elems.last || elems.highest || this._firstFocusItem;
		}
	}
);

}

if(!dojo._hasResource["dijit.DialogUnderlay"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.DialogUnderlay"] = true;
dojo.provide("dijit.DialogUnderlay");






dojo.declare(
	"dijit.DialogUnderlay",
	[dijit._Widget, dijit._Templated],
	{
		// summary:
		//		The component that blocks the screen behind a `dijit.Dialog`
		//
		// description:
		// 		A component used to block input behind a `dijit.Dialog`. Only a single
		//		instance of this widget is created by `dijit.Dialog`, and saved as
		//		a reference to be shared between all Dialogs as `dijit._underlay`
		//
		//		The underlay itself can be styled based on and id:
		//	|	#myDialog_underlay { background-color:red; }
		//
		//		In the case of `dijit.Dialog`, this id is based on the id of the Dialog,
		//		suffixed with _underlay.

		// Template has two divs; outer div is used for fade-in/fade-out, and also to hold background iframe.
		// Inner div has opacity specified in CSS file.
		templateString: "<div class='dijitDialogUnderlayWrapper'><div class='dijitDialogUnderlay' dojoAttachPoint='node'></div></div>",

		// Parameters on creation or updatable later

		// dialogId: String
		//		Id of the dialog.... DialogUnderlay's id is based on this id
		dialogId: "",

		// class: String
		//		This class name is used on the DialogUnderlay node, in addition to dijitDialogUnderlay
		"class": "",

		attributeMap: { id: "domNode" },

		_setDialogIdAttr: function(id){
			dojo.attr(this.node, "id", id + "_underlay");
			this._set("dialogId", id);
		},

		_setClassAttr: function(clazz){
			this.node.className = "dijitDialogUnderlay " + clazz;
			this._set("class", clazz);
		},

		postCreate: function(){
			// summary:
			//		Append the underlay to the body
			dojo.body().appendChild(this.domNode);
		},

		layout: function(){
			// summary:
			//		Sets the background to the size of the viewport
			//
			// description:
			//		Sets the background to the size of the viewport (rather than the size
			//		of the document) since we need to cover the whole browser window, even
			//		if the document is only a few lines long.
			// tags:
			//		private

			var is = this.node.style,
				os = this.domNode.style;

			// hide the background temporarily, so that the background itself isn't
			// causing scrollbars to appear (might happen when user shrinks browser
			// window and then we are called to resize)
			os.display = "none";

			// then resize and show
			var viewport = dojo.window.getBox();
			os.top = viewport.t + "px";
			os.left = viewport.l + "px";
			is.width = viewport.w + "px";
			is.height = viewport.h + "px";
			os.display = "block";
		},

		show: function(){
			// summary:
			//		Show the dialog underlay
			this.domNode.style.display = "block";
			this.layout();
			this.bgIframe = new dijit.BackgroundIframe(this.domNode);
		},

		hide: function(){
			// summary:
			//		Hides the dialog underlay
			this.bgIframe.destroy();
			delete this.bgIframe;
			this.domNode.style.display = "none";
		}
	}
);

}

if(!dojo._hasResource["dijit.TooltipDialog"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.TooltipDialog"] = true;
dojo.provide("dijit.TooltipDialog");







dojo.declare(
		"dijit.TooltipDialog",
		[dijit.layout.ContentPane, dijit._Templated, dijit.form._FormMixin, dijit._DialogMixin],
		{
			// summary:
			//		Pops up a dialog that appears like a Tooltip

			// title: String
			// 		Description of tooltip dialog (required for a11y)
			title: "",

			// doLayout: [protected] Boolean
			//		Don't change this parameter from the default value.
			//		This ContentPane parameter doesn't make sense for TooltipDialog, since TooltipDialog
			//		is never a child of a layout container, nor can you specify the size of
			//		TooltipDialog in order to control the size of an inner widget.
			doLayout: false,

			// autofocus: Boolean
			// 		A Toggle to modify the default focus behavior of a Dialog, which
			// 		is to focus on the first dialog element after opening the dialog.
			//		False will disable autofocusing. Default: true
			autofocus: true,

			// baseClass: [protected] String
			//		The root className to use for the various states of this widget
			baseClass: "dijitTooltipDialog",

			// _firstFocusItem: [private] [readonly] DomNode
			//		The pointer to the first focusable node in the dialog.
			//		Set by `dijit._DialogMixin._getFocusItems`.
			_firstFocusItem: null,

			// _lastFocusItem: [private] [readonly] DomNode
			//		The pointer to which node has focus prior to our dialog.
			//		Set by `dijit._DialogMixin._getFocusItems`.
			_lastFocusItem: null,

			templateString: dojo.cache("dijit", "templates/TooltipDialog.html", "<div role=\"presentation\" tabIndex=\"-1\">\r\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\r\n\t\t<div class =\"dijitTooltipContents dijitTooltipFocusNode\" dojoAttachPoint=\"containerNode\" role=\"dialog\"></div>\r\n\t</div>\r\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\"></div>\r\n</div>\r\n"),

			_setTitleAttr: function(/*String*/ title){
				this.containerNode.title = title;
				this._set("title", title)
			},

			postCreate: function(){
				this.inherited(arguments);
				this.connect(this.containerNode, "onkeypress", "_onKey");
			},

			orient: function(/*DomNode*/ node, /*String*/ aroundCorner, /*String*/ corner){
				// summary:
				//		Configure widget to be displayed in given position relative to the button.
				//		This is called from the dijit.popup code, and should not be called
				//		directly.
				// tags:
				//		protected
				var newC = "dijitTooltipAB" + (corner.charAt(1) == 'L' ? "Left" : "Right")
						+ " dijitTooltip"
						+ (corner.charAt(0) == 'T' ? "Below" : "Above");
				
				dojo.replaceClass(this.domNode, newC, this._currentOrientClass || "");
				this._currentOrientClass = newC;
			},

			focus: function(){
				// summary:
				//		Focus on first field
				this._getFocusItems(this.containerNode);
				dijit.focus(this._firstFocusItem);
			},

			onOpen: function(/*Object*/ pos){
				// summary:
				//		Called when dialog is displayed.
				//		This is called from the dijit.popup code, and should not be called directly.
				// tags:
				//		protected

				this.orient(this.domNode,pos.aroundCorner, pos.corner);
				this._onShow(); // lazy load trigger
			},

			onClose: function(){
				// summary:
				//		Called when dialog is hidden.
				//		This is called from the dijit.popup code, and should not be called directly.
				// tags:
				//		protected
				this.onHide();
			},

			_onKey: function(/*Event*/ evt){
				// summary:
				//		Handler for keyboard events
				// description:
				//		Keep keyboard focus in dialog; close dialog on escape key
				// tags:
				//		private

				var node = evt.target;
				var dk = dojo.keys;
				if(evt.charOrCode === dk.TAB){
					this._getFocusItems(this.containerNode);
				}
				var singleFocusItem = (this._firstFocusItem == this._lastFocusItem);
				if(evt.charOrCode == dk.ESCAPE){
					// Use setTimeout to avoid crash on IE, see #10396.
					setTimeout(dojo.hitch(this, "onCancel"), 0);
					dojo.stopEvent(evt);
				}else if(node == this._firstFocusItem && evt.shiftKey && evt.charOrCode === dk.TAB){
					if(!singleFocusItem){
						dijit.focus(this._lastFocusItem); // send focus to last item in dialog
					}
					dojo.stopEvent(evt);
				}else if(node == this._lastFocusItem && evt.charOrCode === dk.TAB && !evt.shiftKey){
					if(!singleFocusItem){
						dijit.focus(this._firstFocusItem); // send focus to first item in dialog
					}
					dojo.stopEvent(evt);
				}else if(evt.charOrCode === dk.TAB){
					// we want the browser's default tab handling to move focus
					// but we don't want the tab to propagate upwards
					evt.stopPropagation();
				}
			}
		}
	);

}

if(!dojo._hasResource["dijit.Dialog"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.Dialog"] = true;
dojo.provide("dijit.Dialog");
















// dijit/TooltipDialog required for back-compat.  TODO: remove in 2.0

/*=====
dijit._underlay = function(kwArgs){
	// summary:
	//		A shared instance of a `dijit.DialogUnderlay`
	//
	// description:
	//		A shared instance of a `dijit.DialogUnderlay` created and
	//		used by `dijit.Dialog`, though never created until some Dialog
	//		or subclass thereof is shown.
};
=====*/
dojo.declare(
	"dijit._DialogBase",
	[dijit._Templated, dijit.form._FormMixin, dijit._DialogMixin, dijit._CssStateMixin],
	{
		// summary:
		//		A modal dialog Widget
		//
		// description:
		//		Pops up a modal dialog window, blocking access to the screen
		//		and also graying out the screen Dialog is extended from
		//		ContentPane so it supports all the same parameters (href, etc.)
		//
		// example:
		// |	<div dojoType="dijit.Dialog" href="test.html"></div>
		//
		// example:
		// |	var foo = new dijit.Dialog({ title: "test dialog", content: "test content" };
		// |	dojo.body().appendChild(foo.domNode);
		// |	foo.startup();

		templateString: dojo.cache("dijit", "templates/Dialog.html", "<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"></span>\r\n\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabIndex=\"-1\">\r\n\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\r\n\t</span>\r\n\t</div>\r\n\t\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\r\n</div>\r\n"),
		
		baseClass: "dijitDialog",
		
		cssStateNodes: {
			closeButtonNode: "dijitDialogCloseIcon"
		},

		attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
			title: [
				{ node: "titleNode", type: "innerHTML" },
				{ node: "titleBar", type: "attribute" }
			],
			"aria-describedby":""
		}),

		// open: [readonly] Boolean
		//		True if Dialog is currently displayed on screen.
		open: false,

		// duration: Integer
		//		The time in milliseconds it takes the dialog to fade in and out
		duration: dijit.defaultDuration,

		// refocus: Boolean
		// 		A Toggle to modify the default focus behavior of a Dialog, which
		// 		is to re-focus the element which had focus before being opened.
		//		False will disable refocusing. Default: true
		refocus: true,

		// autofocus: Boolean
		// 		A Toggle to modify the default focus behavior of a Dialog, which
		// 		is to focus on the first dialog element after opening the dialog.
		//		False will disable autofocusing. Default: true
		autofocus: true,

		// _firstFocusItem: [private readonly] DomNode
		//		The pointer to the first focusable node in the dialog.
		//		Set by `dijit._DialogMixin._getFocusItems`.
		_firstFocusItem: null,

		// _lastFocusItem: [private readonly] DomNode
		//		The pointer to which node has focus prior to our dialog.
		//		Set by `dijit._DialogMixin._getFocusItems`.
		_lastFocusItem: null,

		// doLayout: [protected] Boolean
		//		Don't change this parameter from the default value.
		//		This ContentPane parameter doesn't make sense for Dialog, since Dialog
		//		is never a child of a layout container, nor can you specify the size of
		//		Dialog in order to control the size of an inner widget.
		doLayout: false,

		// draggable: Boolean
		//		Toggles the moveable aspect of the Dialog. If true, Dialog
		//		can be dragged by it's title. If false it will remain centered
		//		in the viewport.
		draggable: true,

		//aria-describedby: String
		//		Allows the user to add an aria-describedby attribute onto the dialog.   The value should
		//		be the id of the container element of text that describes the dialog purpose (usually
		//		the first text in the dialog).
		//		<div dojoType="dijit.Dialog" aria-describedby="intro" .....>
		//			<div id="intro">Introductory text</div>
		//			<div>rest of dialog contents</div>
		//		</div>
		"aria-describedby":"",

		postMixInProperties: function(){
			var _nlsResources = dojo.i18n.getLocalization("dijit", "common");
			dojo.mixin(this, _nlsResources);
			this.inherited(arguments);
		},

		postCreate: function(){
			dojo.style(this.domNode, {
				display: "none",
				position:"absolute"
			});
			dojo.body().appendChild(this.domNode);

			this.inherited(arguments);

			this.connect(this, "onExecute", "hide");
			this.connect(this, "onCancel", "hide");
			this._modalconnects = [];
		},

		onLoad: function(){
			// summary:
			//		Called when data has been loaded from an href.
			//		Unlike most other callbacks, this function can be connected to (via `dojo.connect`)
			//		but should *not* be overridden.
			// tags:
			//		callback

			// when href is specified we need to reposition the dialog after the data is loaded
			// and find the focusable elements
			this._position();
			if(this.autofocus && dijit._DialogLevelManager.isTop(this)){
				this._getFocusItems(this.domNode);
				dijit.focus(this._firstFocusItem);
			}
			this.inherited(arguments);
		},

		_endDrag: function(e){
			// summary:
			//		Called after dragging the Dialog. Saves the position of the dialog in the viewport.
			// tags:
			//		private
			if(e && e.node && e.node === this.domNode){
				this._relativePosition = dojo.position(e.node);
			}
		},

		_setup: function(){
			// summary:
			//		Stuff we need to do before showing the Dialog for the first
			//		time (but we defer it until right beforehand, for
			//		performance reasons).
			// tags:
			//		private

			var node = this.domNode;

			if(this.titleBar && this.draggable){
				this._moveable = (dojo.isIE == 6) ?
					new dojo.dnd.TimedMoveable(node, { handle: this.titleBar }) :	// prevent overload, see #5285
					new dojo.dnd.Moveable(node, { handle: this.titleBar, timeout: 0 });
				this._dndListener = dojo.subscribe("/dnd/move/stop",this,"_endDrag");
			}else{
				dojo.addClass(node,"dijitDialogFixed");
			}

			this.underlayAttrs = {
				dialogId: this.id,
				"class": dojo.map(this["class"].split(/\s/), function(s){ return s+"_underlay"; }).join(" ")
			};
		},

		_size: function(){
			// summary:
			// 		If necessary, shrink dialog contents so dialog fits in viewport
			// tags:
			//		private

			this._checkIfSingleChild();

			// If we resized the dialog contents earlier, reset them back to original size, so
			// that if the user later increases the viewport size, the dialog can display w/out a scrollbar.
			// Need to do this before the dojo.marginBox(this.domNode) call below.
			if(this._singleChild){
				if(this._singleChildOriginalStyle){
					this._singleChild.domNode.style.cssText = this._singleChildOriginalStyle;
				}
				delete this._singleChildOriginalStyle;
			}else{
				dojo.style(this.containerNode, {
					width:"auto",
					height:"auto"
				});
			}

			var mb = dojo._getMarginSize(this.domNode);
			var viewport = dojo.window.getBox();
			if(mb.w >= viewport.w || mb.h >= viewport.h){
				// Reduce size of dialog contents so that dialog fits in viewport

				var w = Math.min(mb.w, Math.floor(viewport.w * 0.75)),
					h = Math.min(mb.h, Math.floor(viewport.h * 0.75));

				if(this._singleChild && this._singleChild.resize){
					this._singleChildOriginalStyle = this._singleChild.domNode.style.cssText;
					this._singleChild.resize({w: w, h: h});
				}else{
					dojo.style(this.containerNode, {
						width: w + "px",
						height: h + "px",
						overflow: "auto",
						position: "relative"	// workaround IE bug moving scrollbar or dragging dialog
					});
				}
			}else{
				if(this._singleChild && this._singleChild.resize){
					this._singleChild.resize();
				}
			}
		},

		_position: function(){
			// summary:
			//		Position modal dialog in the viewport. If no relative offset
			//		in the viewport has been determined (by dragging, for instance),
			//		center the node. Otherwise, use the Dialog's stored relative offset,
			//		and position the node to top: left: values based on the viewport.
			// tags:
			//		private
			if(!dojo.hasClass(dojo.body(),"dojoMove")){
				var node = this.domNode,
					viewport = dojo.window.getBox(),
					p = this._relativePosition,
					bb = p ? null : dojo._getBorderBox(node),
					l = Math.floor(viewport.l + (p ? p.x : (viewport.w - bb.w) / 2)),
					t = Math.floor(viewport.t + (p ? p.y : (viewport.h - bb.h) / 2))
				;
				dojo.style(node,{
					left: l + "px",
					top: t + "px"
				});
			}
		},

		_onKey: function(/*Event*/ evt){
			// summary:
			//		Handles the keyboard events for accessibility reasons
			// tags:
			//		private

			if(evt.charOrCode){
				var dk = dojo.keys;
				var node = evt.target;
				if(evt.charOrCode === dk.TAB){
					this._getFocusItems(this.domNode);
				}
				var singleFocusItem = (this._firstFocusItem == this._lastFocusItem);
				// see if we are shift-tabbing from first focusable item on dialog
				if(node == this._firstFocusItem && evt.shiftKey && evt.charOrCode === dk.TAB){
					if(!singleFocusItem){
						dijit.focus(this._lastFocusItem); // send focus to last item in dialog
					}
					dojo.stopEvent(evt);
				}else if(node == this._lastFocusItem && evt.charOrCode === dk.TAB && !evt.shiftKey){
					if(!singleFocusItem){
						dijit.focus(this._firstFocusItem); // send focus to first item in dialog
					}
					dojo.stopEvent(evt);
				}else{
					// see if the key is for the dialog
					while(node){
						if(node == this.domNode || dojo.hasClass(node, "dijitPopup")){
							if(evt.charOrCode == dk.ESCAPE){
								this.onCancel();
							}else{
								return; // just let it go
							}
						}
						node = node.parentNode;
					}
					// this key is for the disabled document window
					if(evt.charOrCode !== dk.TAB){ // allow tabbing into the dialog for a11y
						dojo.stopEvent(evt);
					// opera won't tab to a div
					}else if(!dojo.isOpera){
						try{
							this._firstFocusItem.focus();
						}catch(e){ /*squelch*/ }
					}
				}
			}
		},

		show: function(){
			// summary:
			//		Display the dialog
			// returns: dojo.Deferred
			//		Deferred object that resolves when the display animation is complete

			if(this.open){ return; }

			if(!this._started){
				this.startup();
			}

			// first time we show the dialog, there's some initialization stuff to do
			if(!this._alreadyInitialized){
				this._setup();
				this._alreadyInitialized=true;
			}

			if(this._fadeOutDeferred){
				this._fadeOutDeferred.cancel();
			}

			this._modalconnects.push(dojo.connect(window, "onscroll", this, "layout"));
			this._modalconnects.push(dojo.connect(window, "onresize", this, function(){
				// IE gives spurious resize events and can actually get stuck
				// in an infinite loop if we don't ignore them
				var viewport = dojo.window.getBox();
				if(!this._oldViewport ||
						viewport.h != this._oldViewport.h ||
						viewport.w != this._oldViewport.w){
					this.layout();
					this._oldViewport = viewport;
				}
			}));
			this._modalconnects.push(dojo.connect(this.domNode, "onkeypress", this, "_onKey"));

			dojo.style(this.domNode, {
				opacity:0,
				display:""
			});

			this._set("open", true);
			this._onShow(); // lazy load trigger

			this._size();
			this._position();

			// fade-in Animation object, setup below
			var fadeIn;

			this._fadeInDeferred = new dojo.Deferred(dojo.hitch(this, function(){
				fadeIn.stop();
				delete this._fadeInDeferred;
			}));

			fadeIn = dojo.fadeIn({
				node: this.domNode,
				duration: this.duration,
				beforeBegin: dojo.hitch(this, function(){
					dijit._DialogLevelManager.show(this, this.underlayAttrs);
				}),
				onEnd: dojo.hitch(this, function(){
					if(this.autofocus && dijit._DialogLevelManager.isTop(this)){
						// find focusable items each time dialog is shown since if dialog contains a widget the
						// first focusable items can change
						this._getFocusItems(this.domNode);
						dijit.focus(this._firstFocusItem);
					}
					this._fadeInDeferred.callback(true);
					delete this._fadeInDeferred;
				})
			}).play();
			
			return this._fadeInDeferred;
		},

		hide: function(){
			// summary:
			//		Hide the dialog
			// returns: dojo.Deferred
			//		Deferred object that resolves when the hide animation is complete

			// if we haven't been initialized yet then we aren't showing and we can just return
			if(!this._alreadyInitialized){
				return;
			}
			if(this._fadeInDeferred){
				this._fadeInDeferred.cancel();
			}

			// fade-in Animation object, setup below
			var fadeOut;

			this._fadeOutDeferred = new dojo.Deferred(dojo.hitch(this, function(){
				fadeOut.stop();
				delete this._fadeOutDeferred;
			}));

			fadeOut = dojo.fadeOut({
				node: this.domNode,
				duration: this.duration,
				onEnd: dojo.hitch(this, function(){
					this.domNode.style.display = "none";
					dijit._DialogLevelManager.hide(this);
					this.onHide();
					this._fadeOutDeferred.callback(true);
					delete this._fadeOutDeferred;
				})
			 }).play();

			if(this._scrollConnected){
				this._scrollConnected = false;
			}
			dojo.forEach(this._modalconnects, dojo.disconnect);
			this._modalconnects = [];

			if(this._relativePosition){
				delete this._relativePosition;
			}
			this._set("open", false);

			return this._fadeOutDeferred;
		},

		layout: function(){
			// summary:
			//		Position the Dialog and the underlay
			// tags:
			//		private
			if(this.domNode.style.display != "none"){
				if(dijit._underlay){	// avoid race condition during show()
					dijit._underlay.layout();
				}
				this._position();
			}
		},

		destroy: function(){
			if(this._fadeInDeferred){
				this._fadeInDeferred.cancel();
			}
			if(this._fadeOutDeferred){
				this._fadeOutDeferred.cancel();
			}
			if(this._moveable){
				this._moveable.destroy();
			}
			if(this._dndListener){
				dojo.unsubscribe(this._dndListener);
			}
			dojo.forEach(this._modalconnects, dojo.disconnect);

			dijit._DialogLevelManager.hide(this);

			this.inherited(arguments);
		}
	}
);

dojo.declare(
	"dijit.Dialog",
	[dijit.layout.ContentPane, dijit._DialogBase],
	{}
);

dijit._DialogLevelManager = {
	// summary:
	//		Controls the various active "levels" on the page, starting with the
	//		stuff initially visible on the page (at z-index 0), and then having an entry for
	//		each Dialog shown.

	show: function(/*dijit._Widget*/ dialog, /*Object*/ underlayAttrs){
		// summary:
		//		Call right before fade-in animation for new dialog.
		//		Saves current focus, displays/adjusts underlay for new dialog,
		//		and sets the z-index of the dialog itself.
		//
		//		New dialog will be displayed on top of all currently displayed dialogs.
		//
		//		Caller is responsible for setting focus in new dialog after the fade-in
		//		animation completes.

		var ds = dijit._dialogStack;

		// Save current focus
		ds[ds.length-1].focus = dijit.getFocus(dialog);

		// Display the underlay, or if already displayed then adjust for this new dialog
		var underlay = dijit._underlay;
		if(!underlay || underlay._destroyed){
			underlay = dijit._underlay = new dijit.DialogUnderlay(underlayAttrs);
		}else{
			underlay.set(dialog.underlayAttrs);
		}

		// Set z-index a bit above previous dialog
		var zIndex = ds[ds.length-1].dialog ? ds[ds.length-1].zIndex + 2 : 950;
		if(ds.length == 1){	// first dialog
			underlay.show();
		}
		dojo.style(dijit._underlay.domNode, 'zIndex', zIndex - 1);

		// Dialog
		dojo.style(dialog.domNode, 'zIndex', zIndex);

		ds.push({dialog: dialog, underlayAttrs: underlayAttrs, zIndex: zIndex});
	},

	hide: function(/*dijit._Widget*/ dialog){
		// summary:
		//		Called when the specified dialog is hidden/destroyed, after the fade-out
		//		animation ends, in order to reset page focus, fix the underlay, etc.
		//		If the specified dialog isn't open then does nothing.
		//
		//		Caller is responsible for either setting display:none on the dialog domNode,
		//		or calling dijit.popup.hide(), or removing it from the page DOM.

		var ds = dijit._dialogStack;

		if(ds[ds.length-1].dialog == dialog){
			// Removing the top (or only) dialog in the stack, return focus
			// to previous dialog

			ds.pop();

			var pd = ds[ds.length-1];	// the new active dialog (or the base page itself)

			// Adjust underlay
			if(ds.length == 1){
				// Returning to original page.
				// Hide the underlay, unless the underlay widget has already been destroyed
				// because we are being called during page unload (when all widgets are destroyed)
				if(!dijit._underlay._destroyed){
					dijit._underlay.hide();
				}
			}else{
				// Popping back to previous dialog, adjust underlay
				dojo.style(dijit._underlay.domNode, 'zIndex', pd.zIndex - 1);
				dijit._underlay.set(pd.underlayAttrs);
			}

			// Adjust focus
			if(dialog.refocus){
				// If we are returning control to a previous dialog but for some reason
				// that dialog didn't have a focused field, set focus to first focusable item.
				// This situation could happen if two dialogs appeared at nearly the same time,
				// since a dialog doesn't set it's focus until the fade-in is finished.
				var focus = pd.focus;
				if(!focus || (pd.dialog && !dojo.isDescendant(focus.node, pd.dialog.domNode))){
					pd.dialog._getFocusItems(pd.dialog.domNode);
					focus = pd.dialog._firstFocusItem;
				}
	
				try{
					dijit.focus(focus);
				}catch(e){
					/* focus() will fail if user opened the dialog by clicking a non-focusable element */
				}
			}
		}else{
			// Removing a dialog out of order (#9944, #10705).
			// Don't need to mess with underlay or z-index or anything.
			var idx = dojo.indexOf(dojo.map(ds, function(elem){return elem.dialog}), dialog);
			if(idx != -1){
				ds.splice(idx, 1);
			}
		}
	},

	isTop: function(/*dijit._Widget*/ dialog){
		// summary:
		//		Returns true if specified Dialog is the top in the task
		var ds = dijit._dialogStack;
		return ds[ds.length-1].dialog == dialog;
	}
};

// Stack representing the various active "levels" on the page, starting with the
// stuff initially visible on the page (at z-index 0), and then having an entry for
// each Dialog shown.
// Each element in stack has form {
//		dialog: dialogWidget,
//		focus: returnFromGetFocus(),
//		underlayAttrs: attributes to set on underlay (when this widget is active)
// }
dijit._dialogStack = [
	{dialog: null, focus: null, underlayAttrs: null}	// entry for stuff at z-index: 0
];

}

if(!dojo._hasResource["dijit.TitlePane"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.TitlePane"] = true;
dojo.provide("dijit.TitlePane");







dojo.declare(
	"dijit.TitlePane",
	[dijit.layout.ContentPane, dijit._Templated, dijit._CssStateMixin],
{
	// summary:
	//		A pane with a title on top, that can be expanded or collapsed.
	//
	// description:
	//		An accessible container with a title Heading, and a content
	//		section that slides open and closed. TitlePane is an extension to
	//		`dijit.layout.ContentPane`, providing all the useful content-control aspects from it.
	//
	// example:
	// | 	// load a TitlePane from remote file:
	// |	var foo = new dijit.TitlePane({ href: "foobar.html", title:"Title" });
	// |	foo.startup();
	//
	// example:
	// |	<!-- markup href example: -->
	// |	<div dojoType="dijit.TitlePane" href="foobar.html" title="Title"></div>
	//
	// example:
	// |	<!-- markup with inline data -->
	// | 	<div dojoType="dijit.TitlePane" title="Title">
	// |		<p>I am content</p>
	// |	</div>

	// title: String
	//		Title of the pane
	title: "",

	// open: Boolean
	//		Whether pane is opened or closed.
	open: true,

	// toggleable: Boolean
	//		Whether pane can be opened or closed by clicking the title bar.
	toggleable: true,

	// tabIndex: String
	//		Tabindex setting for the title (so users can tab to the title then
	//		use space/enter to open/close the title pane)
	tabIndex: "0",

	// duration: Integer
	//		Time in milliseconds to fade in/fade out
	duration: dijit.defaultDuration,

	// baseClass: [protected] String
	//		The root className to be placed on this widget's domNode.
	baseClass: "dijitTitlePane",

	templateString: dojo.cache("dijit", "templates/TitlePane.html", "<div>\r\n\t<div dojoAttachEvent=\"onclick:_onTitleClick, onkeypress:_onTitleKey\"\r\n\t\t\tclass=\"dijitTitlePaneTitle\" dojoAttachPoint=\"titleBarNode\">\r\n\t\t<div class=\"dijitTitlePaneTitleFocus\" dojoAttachPoint=\"focusNode\">\r\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" dojoAttachPoint=\"arrowNode\" class=\"dijitArrowNode\" role=\"presentation\"\r\n\t\t\t/><span dojoAttachPoint=\"arrowNodeInner\" class=\"dijitArrowNodeInner\"></span\r\n\t\t\t><span dojoAttachPoint=\"titleNode\" class=\"dijitTitlePaneTextNode\"></span>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"dijitTitlePaneContentOuter\" dojoAttachPoint=\"hideNode\" role=\"presentation\">\r\n\t\t<div class=\"dijitReset\" dojoAttachPoint=\"wipeNode\" role=\"presentation\">\r\n\t\t\t<div class=\"dijitTitlePaneContentInner\" dojoAttachPoint=\"containerNode\" role=\"region\" id=\"${id}_pane\">\r\n\t\t\t\t<!-- nested divs because wipeIn()/wipeOut() doesn't work right on node w/padding etc.  Put padding on inner div. -->\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"),

	attributeMap: dojo.delegate(dijit.layout.ContentPane.prototype.attributeMap, {
		title: { node: "titleNode", type: "innerHTML" },
		tooltip: {node: "focusNode", type: "attribute", attribute: "title"},	// focusNode spans the entire width, titleNode doesn't
		id:""
	}),

	buildRendering: function(){
		this.inherited(arguments);
		dojo.setSelectable(this.titleNode, false);
	},

	postCreate: function(){
		this.inherited(arguments);
		
		// Hover and focus effect on title bar, except for non-toggleable TitlePanes
		// This should really be controlled from _setToggleableAttr() but _CssStateMixin
		// doesn't provide a way to disconnect a previous _trackMouseState() call
		if(this.toggleable){
			this._trackMouseState(this.titleBarNode, "dijitTitlePaneTitle");
		}

		// setup open/close animations
		var hideNode = this.hideNode, wipeNode = this.wipeNode;
		this._wipeIn = dojo.fx.wipeIn({
			node: this.wipeNode,
			duration: this.duration,
			beforeBegin: function(){
				hideNode.style.display="";
			}
		});
		this._wipeOut = dojo.fx.wipeOut({
			node: this.wipeNode,
			duration: this.duration,
			onEnd: function(){
				hideNode.style.display="none";
			}
		});
	},

	_setOpenAttr: function(/*Boolean*/ open, /*Boolean*/ animate){
		// summary:
		//		Hook to make set("open", boolean) control the open/closed state of the pane.
		// open: Boolean
		//		True if you want to open the pane, false if you want to close it.

		dojo.forEach([this._wipeIn, this._wipeOut], function(animation){
			if(animation && animation.status() == "playing"){
				animation.stop();
			}
		});

		if(animate){
			var anim = this[open ? "_wipeIn" : "_wipeOut"];
			anim.play();
		}else{
			this.hideNode.style.display = this.wipeNode.style.display = open ? "" : "none";
		}

		// load content (if this is the first time we are opening the TitlePane
		// and content is specified as an href, or href was set when hidden)
		if(this._started){
			if(open){
				this._onShow();
			}else{
				this.onHide();
			}
		}

		this.arrowNodeInner.innerHTML = open ? "-" : "+";

		dijit.setWaiState(this.containerNode,"hidden", open ? "false" : "true");
		dijit.setWaiState(this.focusNode, "pressed", open ? "true" : "false");

		this._set("open", open);

		this._setCss();
	},

	_setToggleableAttr: function(/*Boolean*/ canToggle){
		// summary:
		//		Hook to make set("toggleable", boolean) work.
		// canToggle: Boolean
		//		True to allow user to open/close pane by clicking title bar.

		dijit.setWaiRole(this.focusNode, canToggle ? "button" : "heading");
		if(canToggle){
			// TODO: if canToggle is switched from true to false shouldn't we remove this setting?
			dijit.setWaiState(this.focusNode, "controls", this.id+"_pane");
			dojo.attr(this.focusNode, "tabIndex", this.tabIndex);
		}else{
			dojo.removeAttr(this.focusNode, "tabIndex");
		}

		this._set("toggleable", canToggle);

		this._setCss();
	},

	_setContentAttr: function(/*String|DomNode|Nodelist*/ content){
		// summary:
		//		Hook to make set("content", ...) work.
		// 		Typically called when an href is loaded.  Our job is to make the animation smooth.

		if(!this.open || !this._wipeOut || this._wipeOut.status() == "playing"){
			// we are currently *closing* the pane (or the pane is closed), so just let that continue
			this.inherited(arguments);
		}else{
			if(this._wipeIn && this._wipeIn.status() == "playing"){
				this._wipeIn.stop();
			}

			// freeze container at current height so that adding new content doesn't make it jump
			dojo.marginBox(this.wipeNode, { h: dojo.marginBox(this.wipeNode).h });

			// add the new content (erasing the old content, if any)
			this.inherited(arguments);

			// call _wipeIn.play() to animate from current height to new height
			if(this._wipeIn){
				this._wipeIn.play();
			}else{
				this.hideNode.style.display = "";
			}
		}
	},

	toggle: function(){
		// summary:
		//		Switches between opened and closed state
		// tags:
		//		private

		this._setOpenAttr(!this.open, true);
	},

	_setCss: function(){
		// summary:
		//		Set the open/close css state for the TitlePane
		// tags:
		//		private

		var node = this.titleBarNode || this.focusNode;
		var oldCls = this._titleBarClass;
		this._titleBarClass = "dijit" + (this.toggleable ? "" : "Fixed") + (this.open ? "Open" : "Closed");
		dojo.replaceClass(node, this._titleBarClass, oldCls || "");

		this.arrowNodeInner.innerHTML = this.open ? "-" : "+";
	},

	_onTitleKey: function(/*Event*/ e){
		// summary:
		//		Handler for when user hits a key
		// tags:
		//		private

		if(e.charOrCode == dojo.keys.ENTER || e.charOrCode == ' '){
			if(this.toggleable){
				this.toggle();
			}
			dojo.stopEvent(e);
		}else if(e.charOrCode == dojo.keys.DOWN_ARROW && this.open){
			this.containerNode.focus();
			e.preventDefault();
	 	}
	},

	_onTitleClick: function(){
		// summary:
		//		Handler when user clicks the title bar
		// tags:
		//		private
		if(this.toggleable){
			this.toggle();
		}
	},

	setTitle: function(/*String*/ title){
		// summary:
		//		Deprecated.  Use set('title', ...) instead.
		// tags:
		//		deprecated
		dojo.deprecated("dijit.TitlePane.setTitle() is deprecated.  Use set('title', ...) instead.", "", "2.0");
		this.set("title", title);
	}
});

}

if(!dojo._hasResource["dijit.ToolbarSeparator"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.ToolbarSeparator"] = true;
dojo.provide("dijit.ToolbarSeparator");





dojo.declare("dijit.ToolbarSeparator",
		[ dijit._Widget, dijit._Templated ],
		{
		// summary:
		//		A spacer between two `dijit.Toolbar` items
		templateString: '<div class="dijitToolbarSeparator dijitInline" role="presentation"></div>',
		buildRendering: function(){
			this.inherited(arguments);
			dojo.setSelectable(this.domNode, false);
		},
		isFocusable: function(){
			// summary:
			//		This widget isn't focusable, so pass along that fact.
			// tags:
			//		protected
			return false;
		}

	});

}

if(!dojo._hasResource["dijit.Toolbar"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.Toolbar"] = true;
dojo.provide("dijit.Toolbar");







// Note: require of ToolbarSeparator is for back-compat, remove for 2.0

dojo.declare("dijit.Toolbar",
	[dijit._Widget, dijit._Templated, dijit._KeyNavContainer],
	{
	// summary:
	//		A Toolbar widget, used to hold things like `dijit.Editor` buttons

	templateString:
		'<div class="dijit" role="toolbar" tabIndex="${tabIndex}" dojoAttachPoint="containerNode">' +
		//	'<table style="table-layout: fixed" class="dijitReset dijitToolbarTable">' + // factor out style
		//		'<tr class="dijitReset" dojoAttachPoint="containerNode"></tr>'+
		//	'</table>' +
		'</div>',

	baseClass: "dijitToolbar",

	postCreate: function(){
		this.inherited(arguments);

		this.connectKeyNavHandlers(
			this.isLeftToRight() ? [dojo.keys.LEFT_ARROW] : [dojo.keys.RIGHT_ARROW],
			this.isLeftToRight() ? [dojo.keys.RIGHT_ARROW] : [dojo.keys.LEFT_ARROW]
		);
	},

	startup: function(){
		if(this._started){ return; }

		this.startupKeyNavChildren();

		this.inherited(arguments);
	}
}
);

}

if(!dojo._hasResource["dojo.DeferredList"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.DeferredList"] = true;
dojo.provide("dojo.DeferredList");



dojo.DeferredList = function(/*Array*/ list, /*Boolean?*/ fireOnOneCallback, /*Boolean?*/ fireOnOneErrback, /*Boolean?*/ consumeErrors, /*Function?*/ canceller){
	// summary:
	//		Provides event handling for a group of Deferred objects.
	// description:
	//		DeferredList takes an array of existing deferreds and returns a new deferred of its own
	//		this new deferred will typically have its callback fired when all of the deferreds in
	//		the given list have fired their own deferreds.  The parameters `fireOnOneCallback` and
	//		fireOnOneErrback, will fire before all the deferreds as appropriate
	//
	//	list:
	//		The list of deferreds to be synchronizied with this DeferredList
	//	fireOnOneCallback:
	//		Will cause the DeferredLists callback to be fired as soon as any
	//		of the deferreds in its list have been fired instead of waiting until
	//		the entire list has finished
	//	fireonOneErrback:
	//		Will cause the errback to fire upon any of the deferreds errback
	//	canceller:
	//		A deferred canceller function, see dojo.Deferred
	var resultList = [];
	dojo.Deferred.call(this);
	var self = this;
	if(list.length === 0 && !fireOnOneCallback){
		this.resolve([0, []]);
	}
	var finished = 0;
	dojo.forEach(list, function(item, i){
		item.then(function(result){
			if(fireOnOneCallback){
				self.resolve([i, result]);
			}else{
				addResult(true, result);
			}
		},function(error){
			if(fireOnOneErrback){
				self.reject(error);
			}else{
				addResult(false, error);
			}
			if(consumeErrors){
				return null;
			}
			throw error;
		});
		function addResult(succeeded, result){
			resultList[i] = [succeeded, result];
			finished++;
			if(finished === list.length){
				self.resolve(resultList);
			}
			
		}
	});
};
dojo.DeferredList.prototype = new dojo.Deferred();

dojo.DeferredList.prototype.gatherResults= function(deferredList){
	// summary:
	//	Gathers the results of the deferreds for packaging
	//	as the parameters to the Deferred Lists' callback

	var d = new dojo.DeferredList(deferredList, false, true, false);
	d.addCallback(function(results){
		var ret = [];
		dojo.forEach(results, function(result){
			ret.push(result[1]);
		});
		return ret;
	});
	return d;
};

}

if(!dojo._hasResource["dijit.tree.TreeStoreModel"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.tree.TreeStoreModel"] = true;
dojo.provide("dijit.tree.TreeStoreModel");



dojo.declare(
		"dijit.tree.TreeStoreModel",
		null,
	{
		// summary:
		//		Implements dijit.Tree.model connecting to a store with a single
		//		root item.  Any methods passed into the constructor will override
		//		the ones defined here.

		// store: dojo.data.Store
		//		Underlying store
		store: null,

		// childrenAttrs: String[]
		//		One or more attribute names (attributes in the dojo.data item) that specify that item's children
		childrenAttrs: ["children"],

		// newItemIdAttr: String
		//		Name of attribute in the Object passed to newItem() that specifies the id.
		//
		//		If newItemIdAttr is set then it's used when newItem() is called to see if an
		//		item with the same id already exists, and if so just links to the old item
		//		(so that the old item ends up with two parents).
		//
		//		Setting this to null or "" will make every drop create a new item.
		newItemIdAttr: "id",

		// labelAttr: String
		//		If specified, get label for tree node from this attribute, rather
		//		than by calling store.getLabel()
		labelAttr: "",

	 	// root: [readonly] dojo.data.Item
		//		Pointer to the root item (read only, not a parameter)
		root: null,

		// query: anything
		//		Specifies datastore query to return the root item for the tree.
		//		Must only return a single item.   Alternately can just pass in pointer
		//		to root item.
		// example:
		//	|	{id:'ROOT'}
		query: null,

		// deferItemLoadingUntilExpand: Boolean
		//		Setting this to true will cause the TreeStoreModel to defer calling loadItem on nodes
		// 		until they are expanded. This allows for lazying loading where only one
		//		loadItem (and generally one network call, consequently) per expansion
		// 		(rather than one for each child).
		// 		This relies on partial loading of the children items; each children item of a
		// 		fully loaded item should contain the label and info about having children.
		deferItemLoadingUntilExpand: false,

		constructor: function(/* Object */ args){
			// summary:
			//		Passed the arguments listed above (store, etc)
			// tags:
			//		private

			dojo.mixin(this, args);

			this.connects = [];

			var store = this.store;
			if(!store.getFeatures()['dojo.data.api.Identity']){
				throw new Error("dijit.Tree: store must support dojo.data.Identity");
			}

			// if the store supports Notification, subscribe to the notification events
			if(store.getFeatures()['dojo.data.api.Notification']){
				this.connects = this.connects.concat([
					dojo.connect(store, "onNew", this, "onNewItem"),
					dojo.connect(store, "onDelete", this, "onDeleteItem"),
					dojo.connect(store, "onSet", this, "onSetItem")
				]);
			}
		},

		destroy: function(){
			dojo.forEach(this.connects, dojo.disconnect);
			// TODO: should cancel any in-progress processing of getRoot(), getChildren()
		},

		// =======================================================================
		// Methods for traversing hierarchy

		getRoot: function(onItem, onError){
			// summary:
			//		Calls onItem with the root item for the tree, possibly a fabricated item.
			//		Calls onError on error.
			if(this.root){
				onItem(this.root);
			}else{
				this.store.fetch({
					query: this.query,
					onComplete: dojo.hitch(this, function(items){
						if(items.length != 1){
							throw new Error(this.declaredClass + ": query " + dojo.toJson(this.query) + " returned " + items.length +
							 	" items, but must return exactly one item");
						}
						this.root = items[0];
						onItem(this.root);
					}),
					onError: onError
				});
			}
		},

		mayHaveChildren: function(/*dojo.data.Item*/ item){
			// summary:
			//		Tells if an item has or may have children.  Implementing logic here
			//		avoids showing +/- expando icon for nodes that we know don't have children.
			//		(For efficiency reasons we may not want to check if an element actually
			//		has children until user clicks the expando node)
			return dojo.some(this.childrenAttrs, function(attr){
				return this.store.hasAttribute(item, attr);
			}, this);
		},

		getChildren: function(/*dojo.data.Item*/ parentItem, /*function(items)*/ onComplete, /*function*/ onError){
			// summary:
			// 		Calls onComplete() with array of child items of given parent item, all loaded.

			var store = this.store;
			if(!store.isItemLoaded(parentItem)){
				// The parent is not loaded yet, we must be in deferItemLoadingUntilExpand
				// mode, so we will load it and just return the children (without loading each
				// child item)
				var getChildren = dojo.hitch(this, arguments.callee);
				store.loadItem({
					item: parentItem,
					onItem: function(parentItem){
						getChildren(parentItem, onComplete, onError);
					},
					onError: onError
				});
				return;
			}
			// get children of specified item
			var childItems = [];
			for(var i=0; i<this.childrenAttrs.length; i++){
				var vals = store.getValues(parentItem, this.childrenAttrs[i]);
				childItems = childItems.concat(vals);
			}

			// count how many items need to be loaded
			var _waitCount = 0;
			if(!this.deferItemLoadingUntilExpand){
				dojo.forEach(childItems, function(item){ if(!store.isItemLoaded(item)){ _waitCount++; } });
			}

			if(_waitCount == 0){
				// all items are already loaded (or we aren't loading them).  proceed...
				onComplete(childItems);
			}else{
				// still waiting for some or all of the items to load
				dojo.forEach(childItems, function(item, idx){
					if(!store.isItemLoaded(item)){
						store.loadItem({
							item: item,
							onItem: function(item){
								childItems[idx] = item;
								if(--_waitCount == 0){
									// all nodes have been loaded, send them to the tree
									onComplete(childItems);
								}
							},
							onError: onError
						});
					}
				});
			}
		},

		// =======================================================================
		// Inspecting items

		isItem: function(/* anything */ something){
			return this.store.isItem(something);	// Boolean
		},

		fetchItemByIdentity: function(/* object */ keywordArgs){
			this.store.fetchItemByIdentity(keywordArgs);
		},

		getIdentity: function(/* item */ item){
			return this.store.getIdentity(item);	// Object
		},

		getLabel: function(/*dojo.data.Item*/ item){
			// summary:
			//		Get the label for an item
			if(this.labelAttr){
				return this.store.getValue(item,this.labelAttr);	// String
			}else{
				return this.store.getLabel(item);	// String
			}
		},

		// =======================================================================
		// Write interface

		newItem: function(/* dojo.dnd.Item */ args, /*Item*/ parent, /*int?*/ insertIndex){
			// summary:
			//		Creates a new item.   See `dojo.data.api.Write` for details on args.
			//		Used in drag & drop when item from external source dropped onto tree.
			// description:
			//		Developers will need to override this method if new items get added
			//		to parents with multiple children attributes, in order to define which
			//		children attribute points to the new item.

			var pInfo = {parent: parent, attribute: this.childrenAttrs[0]}, LnewItem;

			if(this.newItemIdAttr && args[this.newItemIdAttr]){
				// Maybe there's already a corresponding item in the store; if so, reuse it.
				this.fetchItemByIdentity({identity: args[this.newItemIdAttr], scope: this, onItem: function(item){
					if(item){
						// There's already a matching item in store, use it
						this.pasteItem(item, null, parent, true, insertIndex);
					}else{
						// Create new item in the tree, based on the drag source.
						LnewItem=this.store.newItem(args, pInfo);
						if (LnewItem && (insertIndex!=undefined)){
							// Move new item to desired position
							this.pasteItem(LnewItem, parent, parent, false, insertIndex);
						}
					}
				}});
			}else{
				// [as far as we know] there is no id so we must assume this is a new item
				LnewItem=this.store.newItem(args, pInfo);
				if (LnewItem && (insertIndex!=undefined)){
					// Move new item to desired position
					this.pasteItem(LnewItem, parent, parent, false, insertIndex);
				}
			}
		},

		pasteItem: function(/*Item*/ childItem, /*Item*/ oldParentItem, /*Item*/ newParentItem, /*Boolean*/ bCopy, /*int?*/ insertIndex){
			// summary:
			//		Move or copy an item from one parent item to another.
			//		Used in drag & drop
			var store = this.store,
				parentAttr = this.childrenAttrs[0];	// name of "children" attr in parent item

			// remove child from source item, and record the attribute that child occurred in
			if(oldParentItem){
				dojo.forEach(this.childrenAttrs, function(attr){
					if(store.containsValue(oldParentItem, attr, childItem)){
						if(!bCopy){
							var values = dojo.filter(store.getValues(oldParentItem, attr), function(x){
								return x != childItem;
							});
							store.setValues(oldParentItem, attr, values);
						}
						parentAttr = attr;
					}
				});
			}

			// modify target item's children attribute to include this item
			if(newParentItem){
				if(typeof insertIndex == "number"){
					// call slice() to avoid modifying the original array, confusing the data store
					var childItems = store.getValues(newParentItem, parentAttr).slice();
					childItems.splice(insertIndex, 0, childItem);
					store.setValues(newParentItem, parentAttr, childItems);
				}else{
					store.setValues(newParentItem, parentAttr,
						store.getValues(newParentItem, parentAttr).concat(childItem));
				}
			}
		},

		// =======================================================================
		// Callbacks

		onChange: function(/*dojo.data.Item*/ item){
			// summary:
			//		Callback whenever an item has changed, so that Tree
			//		can update the label, icon, etc.   Note that changes
			//		to an item's children or parent(s) will trigger an
			//		onChildrenChange() so you can ignore those changes here.
			// tags:
			//		callback
		},

		onChildrenChange: function(/*dojo.data.Item*/ parent, /*dojo.data.Item[]*/ newChildrenList){
			// summary:
			//		Callback to do notifications about new, updated, or deleted items.
			// tags:
			//		callback
		},

		onDelete: function(/*dojo.data.Item*/ parent, /*dojo.data.Item[]*/ newChildrenList){
			// summary:
			//		Callback when an item has been deleted.
			// description:
			//		Note that there will also be an onChildrenChange() callback for the parent
			//		of this item.
			// tags:
			//		callback
		},

		// =======================================================================
		// Events from data store

		onNewItem: function(/* dojo.data.Item */ item, /* Object */ parentInfo){
			// summary:
			//		Handler for when new items appear in the store, either from a drop operation
			//		or some other way.   Updates the tree view (if necessary).
			// description:
			//		If the new item is a child of an existing item,
			//		calls onChildrenChange() with the new list of children
			//		for that existing item.
			//
			// tags:
			//		extension

			// We only care about the new item if it has a parent that corresponds to a TreeNode
			// we are currently displaying
			if(!parentInfo){
				return;
			}

			// Call onChildrenChange() on parent (ie, existing) item with new list of children
			// In the common case, the new list of children is simply parentInfo.newValue or
			// [ parentInfo.newValue ], although if items in the store has multiple
			// child attributes (see `childrenAttr`), then it's a superset of parentInfo.newValue,
			// so call getChildren() to be sure to get right answer.
			this.getChildren(parentInfo.item, dojo.hitch(this, function(children){
				this.onChildrenChange(parentInfo.item, children);
			}));
		},

		onDeleteItem: function(/*Object*/ item){
			// summary:
			//		Handler for delete notifications from underlying store
			this.onDelete(item);
		},

		onSetItem: function(/* item */ item,
						/* attribute-name-string */ attribute,
						/* object | array */ oldValue,
						/* object | array */ newValue){
			// summary:
			//		Updates the tree view according to changes in the data store.
			// description:
			//		Handles updates to an item's children by calling onChildrenChange(), and
			//		other updates to an item by calling onChange().
			//
			//		See `onNewItem` for more details on handling updates to an item's children.
			// tags:
			//		extension

			if(dojo.indexOf(this.childrenAttrs, attribute) != -1){
				// item's children list changed
				this.getChildren(item, dojo.hitch(this, function(children){
					// See comments in onNewItem() about calling getChildren()
					this.onChildrenChange(item, children);
				}));
			}else{
				// item's label/icon/etc. changed.
				this.onChange(item);
			}
		}
	});

}

if(!dojo._hasResource["dijit.tree.ForestStoreModel"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.tree.ForestStoreModel"] = true;
dojo.provide("dijit.tree.ForestStoreModel");




dojo.declare("dijit.tree.ForestStoreModel", dijit.tree.TreeStoreModel, {
	// summary:
	//		Interface between a dijit.Tree and a dojo.data store that doesn't have a root item,
	//		a.k.a. a store that has multiple "top level" items.
	//
	// description
	//		Use this class to wrap a dojo.data store, making all the items matching the specified query
	//		appear as children of a fabricated "root item".  If no query is specified then all the
	//		items returned by fetch() on the underlying store become children of the root item.
	//		This class allows dijit.Tree to assume a single root item, even if the store doesn't have one.
	//
	//		When using this class the developer must override a number of methods according to their app and
	//		data, including:
	//			- onNewRootItem
	//			- onAddToRoot
	//			- onLeaveRoot
	//			- onNewItem
	//			- onSetItem

	// Parameters to constructor

	// rootId: String
	//		ID of fabricated root item
	rootId: "$root$",

	// rootLabel: String
	//		Label of fabricated root item
	rootLabel: "ROOT",

	// query: String
	//		Specifies the set of children of the root item.
	// example:
	//	|	{type:'continent'}
	query: null,

	// End of parameters to constructor

	constructor: function(params){
		// summary:
		//		Sets up variables, etc.
		// tags:
		//		private

		// Make dummy root item
		this.root = {
			store: this,
			root: true,
			id: params.rootId,
			label: params.rootLabel,
			children: params.rootChildren	// optional param
		};
	},

	// =======================================================================
	// Methods for traversing hierarchy

	mayHaveChildren: function(/*dojo.data.Item*/ item){
		// summary:
		//		Tells if an item has or may have children.  Implementing logic here
		//		avoids showing +/- expando icon for nodes that we know don't have children.
		//		(For efficiency reasons we may not want to check if an element actually
		//		has children until user clicks the expando node)
		// tags:
		//		extension
		return item === this.root || this.inherited(arguments);
	},

	getChildren: function(/*dojo.data.Item*/ parentItem, /*function(items)*/ callback, /*function*/ onError){
		// summary:
		// 		Calls onComplete() with array of child items of given parent item, all loaded.
		if(parentItem === this.root){
			if(this.root.children){
				// already loaded, just return
				callback(this.root.children);
			}else{
				this.store.fetch({
					query: this.query,
					onComplete: dojo.hitch(this, function(items){
						this.root.children = items;
						callback(items);
					}),
					onError: onError
				});
			}
		}else{
			this.inherited(arguments);
		}
	},

	// =======================================================================
	// Inspecting items

	isItem: function(/* anything */ something){
		return (something === this.root) ? true : this.inherited(arguments);
	},

	fetchItemByIdentity: function(/* object */ keywordArgs){
		if(keywordArgs.identity == this.root.id){
			var scope = keywordArgs.scope?keywordArgs.scope:dojo.global;
			if(keywordArgs.onItem){
				keywordArgs.onItem.call(scope, this.root);
			}
		}else{
			this.inherited(arguments);
		}
	},

	getIdentity: function(/* item */ item){
		return (item === this.root) ? this.root.id : this.inherited(arguments);
	},

	getLabel: function(/* item */ item){
		return	(item === this.root) ? this.root.label : this.inherited(arguments);
	},

	// =======================================================================
	// Write interface

	newItem: function(/* dojo.dnd.Item */ args, /*Item*/ parent, /*int?*/ insertIndex){
		// summary:
		//		Creates a new item.   See dojo.data.api.Write for details on args.
		//		Used in drag & drop when item from external source dropped onto tree.
		if(parent === this.root){
			this.onNewRootItem(args);
			return this.store.newItem(args);
		}else{
			return this.inherited(arguments);
		}
	},

	onNewRootItem: function(args){
		// summary:
		//		User can override this method to modify a new element that's being
		//		added to the root of the tree, for example to add a flag like root=true
	},

	pasteItem: function(/*Item*/ childItem, /*Item*/ oldParentItem, /*Item*/ newParentItem, /*Boolean*/ bCopy, /*int?*/ insertIndex){
		// summary:
		//		Move or copy an item from one parent item to another.
		//		Used in drag & drop
		if(oldParentItem === this.root){
			if(!bCopy){
				// It's onLeaveRoot()'s responsibility to modify the item so it no longer matches
				// this.query... thus triggering an onChildrenChange() event to notify the Tree
				// that this element is no longer a child of the root node
				this.onLeaveRoot(childItem);
			}
		}
		dijit.tree.TreeStoreModel.prototype.pasteItem.call(this, childItem,
			oldParentItem === this.root ? null : oldParentItem,
			newParentItem === this.root ? null : newParentItem,
			bCopy,
			insertIndex
		);
		if(newParentItem === this.root){
			// It's onAddToRoot()'s responsibility to modify the item so it matches
			// this.query... thus triggering an onChildrenChange() event to notify the Tree
			// that this element is now a child of the root node
			this.onAddToRoot(childItem);
		}
	},

	// =======================================================================
	// Handling for top level children

	onAddToRoot: function(/* item */ item){
		// summary:
		//		Called when item added to root of tree; user must override this method
		//		to modify the item so that it matches the query for top level items
		// example:
		//	|	store.setValue(item, "root", true);
		// tags:
		//		extension
		console.log(this, ": item ", item, " added to root");
	},

	onLeaveRoot: function(/* item */ item){
		// summary:
		//		Called when item removed from root of tree; user must override this method
		//		to modify the item so it doesn't match the query for top level items
		// example:
		// 	|	store.unsetAttribute(item, "root");
		// tags:
		//		extension
		console.log(this, ": item ", item, " removed from root");
	},

	// =======================================================================
	// Events from data store

	_requeryTop: function(){
		// reruns the query for the children of the root node,
		// sending out an onSet notification if those children have changed
		var oldChildren = this.root.children || [];
		this.store.fetch({
			query: this.query,
			onComplete: dojo.hitch(this, function(newChildren){
				this.root.children = newChildren;

				// If the list of children or the order of children has changed...
				if(oldChildren.length != newChildren.length ||
					dojo.some(oldChildren, function(item, idx){ return newChildren[idx] != item;})){
					this.onChildrenChange(this.root, newChildren);
				}
			})
		});
	},

	onNewItem: function(/* dojo.data.Item */ item, /* Object */ parentInfo){
		// summary:
		//		Handler for when new items appear in the store.  Developers should override this
		//		method to be more efficient based on their app/data.
		// description:
		//		Note that the default implementation requeries the top level items every time
		//		a new item is created, since any new item could be a top level item (even in
		//		addition to being a child of another item, since items can have multiple parents).
		//
		//		If developers can detect which items are possible top level items (based on the item and the
		//		parentInfo parameters), they should override this method to only call _requeryTop() for top
		//		level items.  Often all top level items have parentInfo==null, but
		//		that will depend on which store you use and what your data is like.
		// tags:
		//		extension
		this._requeryTop();

		this.inherited(arguments);
	},

	onDeleteItem: function(/*Object*/ item){
		// summary:
		//		Handler for delete notifications from underlying store

		// check if this was a child of root, and if so send notification that root's children
		// have changed
		if(dojo.indexOf(this.root.children, item) != -1){
			this._requeryTop();
		}

		this.inherited(arguments);
	},

	onSetItem: function(/* item */ item,
					/* attribute-name-string */ attribute,
					/* object | array */ oldValue,
					/* object | array */ newValue){
		// summary:
		//		Updates the tree view according to changes to an item in the data store.
		//		Developers should override this method to be more efficient based on their app/data.
		// description:
		//		Handles updates to an item's children by calling onChildrenChange(), and
		//		other updates to an item by calling onChange().
		//
		//		Also, any change to any item re-executes the query for the tree's top-level items,
		//		since this modified item may have started/stopped matching the query for top level items.
		//
		//		If possible, developers should override this function to only call _requeryTop() when
		//		the change to the item has caused it to stop/start being a top level item in the tree.
		// tags:
		//		extension

		this._requeryTop();
		this.inherited(arguments);
	}

});

}

if(!dojo._hasResource["dojo.dnd.Container"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.Container"] = true;
dojo.provide("dojo.dnd.Container");





/*
	Container states:
		""		- normal state
		"Over"	- mouse over a container
	Container item states:
		""		- normal state
		"Over"	- mouse over a container item
*/

/*=====
dojo.declare("dojo.dnd.__ContainerArgs", [], {
	creator: function(){
		// summary:
		//		a creator function, which takes a data item, and returns an object like that:
		//		{node: newNode, data: usedData, type: arrayOfStrings}
	},

	// skipForm: Boolean
	//		don't start the drag operation, if clicked on form elements
	skipForm: false,

	// dropParent: Node||String
	//		node or node's id to use as the parent node for dropped items
	//		(must be underneath the 'node' parameter in the DOM)
	dropParent: null,

	// _skipStartup: Boolean
	//		skip startup(), which collects children, for deferred initialization
	//		(this is used in the markup mode)
	_skipStartup: false
});

dojo.dnd.Item = function(){
	// summary:
	//		Represents (one of) the source node(s) being dragged.
	//		Contains (at least) the "type" and "data" attributes.
	// type: String[]
	//		Type(s) of this item, by default this is ["text"]
	// data: Object
	//		Logical representation of the object being dragged.
	//		If the drag object's type is "text" then data is a String,
	//		if it's another type then data could be a different Object,
	//		perhaps a name/value hash.
	
	this.type = type;
	this.data = data;
}
=====*/

dojo.declare("dojo.dnd.Container", null, {
	// summary:
	//		a Container object, which knows when mouse hovers over it,
	//		and over which element it hovers
	
	// object attributes (for markup)
	skipForm: false,
	
	/*=====
	// current: DomNode
	//		The DOM node the mouse is currently hovered over
	current: null,
	
	// map: Hash<String, dojo.dnd.Item>
	//		Map from an item's id (which is also the DOMNode's id) to
	//		the dojo.dnd.Item itself.
	map: {},
	=====*/
	
	constructor: function(node, params){
		// summary:
		//		a constructor of the Container
		// node: Node
		//		node or node's id to build the container on
		// params: dojo.dnd.__ContainerArgs
		//		a dictionary of parameters
		this.node = dojo.byId(node);
		if(!params){ params = {}; }
		this.creator = params.creator || null;
		this.skipForm = params.skipForm;
		this.parent = params.dropParent && dojo.byId(params.dropParent);
		
		// class-specific variables
		this.map = {};
		this.current = null;

		// states
		this.containerState = "";
		dojo.addClass(this.node, "dojoDndContainer");
		
		// mark up children
		if(!(params && params._skipStartup)){
			this.startup();
		}

		// set up events
		this.events = [
			dojo.connect(this.node, "onmouseover", this, "onMouseOver"),
			dojo.connect(this.node, "onmouseout",  this, "onMouseOut"),
			// cancel text selection and text dragging
			dojo.connect(this.node, "ondragstart",   this, "onSelectStart"),
			dojo.connect(this.node, "onselectstart", this, "onSelectStart")
		];
	},
	
	// object attributes (for markup)
	creator: function(){
		// summary:
		//		creator function, dummy at the moment
	},
	
	// abstract access to the map
	getItem: function(/*String*/ key){
		// summary:
		//		returns a data item by its key (id)
		return this.map[key];	// dojo.dnd.Item
	},
	setItem: function(/*String*/ key, /*dojo.dnd.Item*/ data){
		// summary:
		//		associates a data item with its key (id)
		this.map[key] = data;
	},
	delItem: function(/*String*/ key){
		// summary:
		//		removes a data item from the map by its key (id)
		delete this.map[key];
	},
	forInItems: function(/*Function*/ f, /*Object?*/ o){
		// summary:
		//		iterates over a data map skipping members that
		//		are present in the empty object (IE and/or 3rd-party libraries).
		o = o || dojo.global;
		var m = this.map, e = dojo.dnd._empty;
		for(var i in m){
			if(i in e){ continue; }
			f.call(o, m[i], i, this);
		}
		return o;	// Object
	},
	clearItems: function(){
		// summary:
		//		removes all data items from the map
		this.map = {};
	},
	
	// methods
	getAllNodes: function(){
		// summary:
		//		returns a list (an array) of all valid child nodes
		return dojo.query("> .dojoDndItem", this.parent);	// NodeList
	},
	sync: function(){
		// summary:
		//		sync up the node list with the data map
		var map = {};
		this.getAllNodes().forEach(function(node){
			if(node.id){
				var item = this.getItem(node.id);
				if(item){
					map[node.id] = item;
					return;
				}
			}else{
				node.id = dojo.dnd.getUniqueId();
			}
			var type = node.getAttribute("dndType"),
				data = node.getAttribute("dndData");
			map[node.id] = {
				data: data || node.innerHTML,
				type: type ? type.split(/\s*,\s*/) : ["text"]
			};
		}, this);
		this.map = map;
		return this;	// self
	},
	insertNodes: function(data, before, anchor){
		// summary:
		//		inserts an array of new nodes before/after an anchor node
		// data: Array
		//		a list of data items, which should be processed by the creator function
		// before: Boolean
		//		insert before the anchor, if true, and after the anchor otherwise
		// anchor: Node
		//		the anchor node to be used as a point of insertion
		if(!this.parent.firstChild){
			anchor = null;
		}else if(before){
			if(!anchor){
				anchor = this.parent.firstChild;
			}
		}else{
			if(anchor){
				anchor = anchor.nextSibling;
			}
		}
		if(anchor){
			for(var i = 0; i < data.length; ++i){
				var t = this._normalizedCreator(data[i]);
				this.setItem(t.node.id, {data: t.data, type: t.type});
				this.parent.insertBefore(t.node, anchor);
			}
		}else{
			for(var i = 0; i < data.length; ++i){
				var t = this._normalizedCreator(data[i]);
				this.setItem(t.node.id, {data: t.data, type: t.type});
				this.parent.appendChild(t.node);
			}
		}
		return this;	// self
	},
	destroy: function(){
		// summary:
		//		prepares this object to be garbage-collected
		dojo.forEach(this.events, dojo.disconnect);
		this.clearItems();
		this.node = this.parent = this.current = null;
	},

	// markup methods
	markupFactory: function(params, node){
		params._skipStartup = true;
		return new dojo.dnd.Container(node, params);
	},
	startup: function(){
		// summary:
		//		collects valid child items and populate the map
		
		// set up the real parent node
		if(!this.parent){
			// use the standard algorithm, if not assigned
			this.parent = this.node;
			if(this.parent.tagName.toLowerCase() == "table"){
				var c = this.parent.getElementsByTagName("tbody");
				if(c && c.length){ this.parent = c[0]; }
			}
		}
		this.defaultCreator = dojo.dnd._defaultCreator(this.parent);

		// process specially marked children
		this.sync();
	},

	// mouse events
	onMouseOver: function(e){
		// summary:
		//		event processor for onmouseover
		// e: Event
		//		mouse event
		var n = e.relatedTarget;
		while(n){
			if(n == this.node){ break; }
			try{
				n = n.parentNode;
			}catch(x){
				n = null;
			}
		}
		if(!n){
			this._changeState("Container", "Over");
			this.onOverEvent();
		}
		n = this._getChildByEvent(e);
		if(this.current == n){ return; }
		if(this.current){ this._removeItemClass(this.current, "Over"); }
		if(n){ this._addItemClass(n, "Over"); }
		this.current = n;
	},
	onMouseOut: function(e){
		// summary:
		//		event processor for onmouseout
		// e: Event
		//		mouse event
		for(var n = e.relatedTarget; n;){
			if(n == this.node){ return; }
			try{
				n = n.parentNode;
			}catch(x){
				n = null;
			}
		}
		if(this.current){
			this._removeItemClass(this.current, "Over");
			this.current = null;
		}
		this._changeState("Container", "");
		this.onOutEvent();
	},
	onSelectStart: function(e){
		// summary:
		//		event processor for onselectevent and ondragevent
		// e: Event
		//		mouse event
		if(!this.skipForm || !dojo.dnd.isFormElement(e)){
			dojo.stopEvent(e);
		}
	},
	
	// utilities
	onOverEvent: function(){
		// summary:
		//		this function is called once, when mouse is over our container
	},
	onOutEvent: function(){
		// summary:
		//		this function is called once, when mouse is out of our container
	},
	_changeState: function(type, newState){
		// summary:
		//		changes a named state to new state value
		// type: String
		//		a name of the state to change
		// newState: String
		//		new state
		var prefix = "dojoDnd" + type;
		var state  = type.toLowerCase() + "State";
		//dojo.replaceClass(this.node, prefix + newState, prefix + this[state]);
		dojo.replaceClass(this.node, prefix + newState, prefix + this[state]);
		this[state] = newState;
	},
	_addItemClass: function(node, type){
		// summary:
		//		adds a class with prefix "dojoDndItem"
		// node: Node
		//		a node
		// type: String
		//		a variable suffix for a class name
		dojo.addClass(node, "dojoDndItem" + type);
	},
	_removeItemClass: function(node, type){
		// summary:
		//		removes a class with prefix "dojoDndItem"
		// node: Node
		//		a node
		// type: String
		//		a variable suffix for a class name
		dojo.removeClass(node, "dojoDndItem" + type);
	},
	_getChildByEvent: function(e){
		// summary:
		//		gets a child, which is under the mouse at the moment, or null
		// e: Event
		//		a mouse event
		var node = e.target;
		if(node){
			for(var parent = node.parentNode; parent; node = parent, parent = node.parentNode){
				if(parent == this.parent && dojo.hasClass(node, "dojoDndItem")){ return node; }
			}
		}
		return null;
	},
	_normalizedCreator: function(/*dojo.dnd.Item*/ item, /*String*/ hint){
		// summary:
		//		adds all necessary data to the output of the user-supplied creator function
		var t = (this.creator || this.defaultCreator).call(this, item, hint);
		if(!dojo.isArray(t.type)){ t.type = ["text"]; }
		if(!t.node.id){ t.node.id = dojo.dnd.getUniqueId(); }
		dojo.addClass(t.node, "dojoDndItem");
		return t;
	}
});

dojo.dnd._createNode = function(tag){
	// summary:
	//		returns a function, which creates an element of given tag
	//		(SPAN by default) and sets its innerHTML to given text
	// tag: String
	//		a tag name or empty for SPAN
	if(!tag){ return dojo.dnd._createSpan; }
	return function(text){	// Function
		return dojo.create(tag, {innerHTML: text});	// Node
	};
};

dojo.dnd._createTrTd = function(text){
	// summary:
	//		creates a TR/TD structure with given text as an innerHTML of TD
	// text: String
	//		a text for TD
	var tr = dojo.create("tr");
	dojo.create("td", {innerHTML: text}, tr);
	return tr;	// Node
};

dojo.dnd._createSpan = function(text){
	// summary:
	//		creates a SPAN element with given text as its innerHTML
	// text: String
	//		a text for SPAN
	return dojo.create("span", {innerHTML: text});	// Node
};

// dojo.dnd._defaultCreatorNodes: Object
//		a dictionary that maps container tag names to child tag names
dojo.dnd._defaultCreatorNodes = {ul: "li", ol: "li", div: "div", p: "div"};

dojo.dnd._defaultCreator = function(node){
	// summary:
	//		takes a parent node, and returns an appropriate creator function
	// node: Node
	//		a container node
	var tag = node.tagName.toLowerCase();
	var c = tag == "tbody" || tag == "thead" ? dojo.dnd._createTrTd :
			dojo.dnd._createNode(dojo.dnd._defaultCreatorNodes[tag]);
	return function(item, hint){	// Function
		var isObj = item && dojo.isObject(item), data, type, n;
		if(isObj && item.tagName && item.nodeType && item.getAttribute){
			// process a DOM node
			data = item.getAttribute("dndData") || item.innerHTML;
			type = item.getAttribute("dndType");
			type = type ? type.split(/\s*,\s*/) : ["text"];
			n = item;	// this node is going to be moved rather than copied
		}else{
			// process a DnD item object or a string
			data = (isObj && item.data) ? item.data : item;
			type = (isObj && item.type) ? item.type : ["text"];
			n = (hint == "avatar" ? dojo.dnd._createSpan : c)(String(data));
		}
		if(!n.id){
			n.id = dojo.dnd.getUniqueId();
		}
		return {node: n, data: data, type: type};
	};
};

}

if(!dojo._hasResource["dijit.tree._dndContainer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.tree._dndContainer"] = true;
dojo.provide("dijit.tree._dndContainer");





dojo.getObject("tree", true, dojo);

dijit.tree._compareNodes = function(n1, n2){
	if(n1 === n2){
		return 0;
	}
	
	if('sourceIndex' in document.documentElement){ //IE
		//TODO: does not yet work if n1 and/or n2 is a text node
		return n1.sourceIndex - n2.sourceIndex;
	}else if('compareDocumentPosition' in document.documentElement){ //FF, Opera
		return n1.compareDocumentPosition(n2) & 2 ? 1: -1;
	}else if(document.createRange){ //Webkit
		var r1 = doc.createRange();
		r1.setStartBefore(n1);

		var r2 = doc.createRange();
		r2.setStartBefore(n2);

		return r1.compareBoundaryPoints(r1.END_TO_END, r2);
	}else{
		throw Error("dijit.tree._compareNodes don't know how to compare two different nodes in this browser");
	}
};

dojo.declare("dijit.tree._dndContainer",
	null,
	{

		// summary:
		//		This is a base class for `dijit.tree._dndSelector`, and isn't meant to be used directly.
		//		It's modeled after `dojo.dnd.Container`.
		// tags:
		//		protected

		/*=====
		// current: DomNode
		//		The currently hovered TreeNode.rowNode (which is the DOM node
		//		associated w/a given node in the tree, excluding it's descendants)
		current: null,
		=====*/

		constructor: function(tree, params){
			// summary:
			//		A constructor of the Container
			// tree: Node
			//		Node or node's id to build the container on
			// params: dijit.tree.__SourceArgs
			//		A dict of parameters, which gets mixed into the object
			// tags:
			//		private
			this.tree = tree;
			this.node = tree.domNode;	// TODO: rename; it's not a TreeNode but the whole Tree
			dojo.mixin(this, params);

			// class-specific variables
			this.map = {};
			this.current = null;	// current TreeNode's DOM node

			// states
			this.containerState = "";
			dojo.addClass(this.node, "dojoDndContainer");

			// set up events
			this.events = [
				// container level events
				dojo.connect(this.node, "onmouseenter", this, "onOverEvent"),
				dojo.connect(this.node, "onmouseleave",	this, "onOutEvent"),

				// switching between TreeNodes
				dojo.connect(this.tree, "_onNodeMouseEnter", this, "onMouseOver"),
				dojo.connect(this.tree, "_onNodeMouseLeave", this, "onMouseOut"),

				// cancel text selection and text dragging
				dojo.connect(this.node, "ondragstart", dojo, "stopEvent"),
				dojo.connect(this.node, "onselectstart", dojo, "stopEvent")
			];
		},

		getItem: function(/*String*/ key){
			// summary:
			//		Returns the dojo.dnd.Item (representing a dragged node) by it's key (id).
			//		Called by dojo.dnd.Source.checkAcceptance().
			// tags:
			//		protected

			var widget = this.selection[key],
				ret = {
					data: widget,
					type: ["treeNode"]
				};

			return ret;	// dojo.dnd.Item
		},

		destroy: function(){
			// summary:
			//		Prepares this object to be garbage-collected

			dojo.forEach(this.events, dojo.disconnect);
			// this.clearItems();
			this.node = this.parent = null;
		},

		// mouse events
		onMouseOver: function(/*TreeNode*/ widget, /*Event*/ evt){
			// summary:
			//		Called when mouse is moved over a TreeNode
			// tags:
			//		protected
			this.current = widget;
		},

		onMouseOut: function(/*TreeNode*/ widget, /*Event*/ evt){
			// summary:
			//		Called when mouse is moved away from a TreeNode
			// tags:
			//		protected
			this.current = null;
		},

		_changeState: function(type, newState){
			// summary:
			//		Changes a named state to new state value
			// type: String
			//		A name of the state to change
			// newState: String
			//		new state
			var prefix = "dojoDnd" + type;
			var state = type.toLowerCase() + "State";
			//dojo.replaceClass(this.node, prefix + newState, prefix + this[state]);
			dojo.replaceClass(this.node, prefix + newState, prefix + this[state]);
			this[state] = newState;
		},

		_addItemClass: function(node, type){
			// summary:
			//		Adds a class with prefix "dojoDndItem"
			// node: Node
			//		A node
			// type: String
			//		A variable suffix for a class name
			dojo.addClass(node, "dojoDndItem" + type);
		},

		_removeItemClass: function(node, type){
			// summary:
			//		Removes a class with prefix "dojoDndItem"
			// node: Node
			//		A node
			// type: String
			//		A variable suffix for a class name
			dojo.removeClass(node, "dojoDndItem" + type);
		},

		onOverEvent: function(){
			// summary:
			//		This function is called once, when mouse is over our container
			// tags:
			//		protected
			this._changeState("Container", "Over");
		},

		onOutEvent: function(){
			// summary:
			//		This function is called once, when mouse is out of our container
			// tags:
			//		protected
			this._changeState("Container", "");
		}
});

}

if(!dojo._hasResource["dijit.tree._dndSelector"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.tree._dndSelector"] = true;
dojo.provide("dijit.tree._dndSelector");





dojo.declare("dijit.tree._dndSelector",
	dijit.tree._dndContainer,
	{
		// summary:
		//		This is a base class for `dijit.tree.dndSource` , and isn't meant to be used directly.
		//		It's based on `dojo.dnd.Selector`.
		// tags:
		//		protected

		/*=====
		// selection: Hash<String, DomNode>
		//		(id, DomNode) map for every TreeNode that's currently selected.
		//		The DOMNode is the TreeNode.rowNode.
		selection: {},
		=====*/

		constructor: function(tree, params){
			// summary:
			//		Initialization
			// tags:
			//		private

			this.selection={};
			this.anchor = null;

			dijit.setWaiState(this.tree.domNode, "multiselect", !this.singular);

			this.events.push(
				dojo.connect(this.tree.domNode, "onmousedown", this,"onMouseDown"),
				dojo.connect(this.tree.domNode, "onmouseup", this,"onMouseUp"),
				dojo.connect(this.tree.domNode, "onmousemove", this,"onMouseMove")
			);
		},

		//	singular: Boolean
		//		Allows selection of only one element, if true.
		//		Tree hasn't been tested in singular=true mode, unclear if it works.
		singular: false,

		// methods
		getSelectedTreeNodes: function(){
			// summary:
			//		Returns a list of selected node(s).
			//		Used by dndSource on the start of a drag.
			// tags:
			//		protected
			var nodes=[], sel = this.selection;
			for(var i in sel){
				nodes.push(sel[i]);
			}
			return nodes;
		},

		selectNone: function(){
			// summary:
			//		Unselects all items
			// tags:
			//		private

			this.setSelection([]);
			return this;	// self
		},

		destroy: function(){
			// summary:
			//		Prepares the object to be garbage-collected
			this.inherited(arguments);
			this.selection = this.anchor = null;
		},
		addTreeNode: function(/*dijit._TreeNode*/node, /*Boolean?*/isAnchor){
			// summary
			//		add node to current selection
			// node: Node
			//		node to add
			// isAnchor: Boolean
			//		Whether the node should become anchor.

			this.setSelection(this.getSelectedTreeNodes().concat( [node] ));
			if(isAnchor){ this.anchor = node; }
			return node;
		},
		removeTreeNode: function(/*dijit._TreeNode*/node){
			// summary
			//		remove node from current selection
			// node: Node
			//		node to remove
			this.setSelection(this._setDifference(this.getSelectedTreeNodes(), [node]))
			return node;
		},
		isTreeNodeSelected: function(/*dijit._TreeNode*/node){
			// summary
			//		return true if node is currently selected
			// node: Node
			//		the node to check whether it's in the current selection

			return node.id && !!this.selection[node.id];
		},
		setSelection: function(/*dijit._treeNode[]*/ newSelection){
			// summary
			//      set the list of selected nodes to be exactly newSelection. All changes to the
			//      selection should be passed through this function, which ensures that derived
			//      attributes are kept up to date. Anchor will be deleted if it has been removed
			//      from the selection, but no new anchor will be added by this function.
			// newSelection: Node[]
			//      list of tree nodes to make selected
			var oldSelection = this.getSelectedTreeNodes();
			dojo.forEach(this._setDifference(oldSelection, newSelection), dojo.hitch(this, function(node){
				node.setSelected(false);
				if(this.anchor == node){
					delete this.anchor;
				}
				delete this.selection[node.id];
			}));
			dojo.forEach(this._setDifference(newSelection, oldSelection), dojo.hitch(this, function(node){
				node.setSelected(true);
				this.selection[node.id] = node;
			}));
			this._updateSelectionProperties();
		},
		_setDifference: function(xs,ys){
			// summary
			//      Returns a copy of xs which lacks any objects
			//      occurring in ys. Checks for membership by
			//      modifying and then reading the object, so it will
			//      not properly handle sets of numbers or strings.
			
			dojo.forEach(ys, function(y){ y.__exclude__ = true; });
			var ret = dojo.filter(xs, function(x){ return !x.__exclude__; });

			// clean up after ourselves.
			dojo.forEach(ys, function(y){ delete y['__exclude__'] });
			return ret;
		},
		_updateSelectionProperties: function() {
			// summary
			//      Update the following tree properties from the current selection:
			//      path[s], selectedItem[s], selectedNode[s]
			
			var selected = this.getSelectedTreeNodes();
			var paths = [], nodes = [];
			dojo.forEach(selected, function(node) {
				nodes.push(node);
				paths.push(node.getTreePath());
			});
			var items = dojo.map(nodes,function(node) { return node.item; });
			this.tree._set("paths", paths);
			this.tree._set("path", paths[0] || []);
			this.tree._set("selectedNodes", nodes);
			this.tree._set("selectedNode", nodes[0] || null);
			this.tree._set("selectedItems", items);
			this.tree._set("selectedItem", items[0] || null);
		},
		// mouse events
		onMouseDown: function(e){
			// summary:
			//		Event processor for onmousedown
			// e: Event
			//		mouse event
			// tags:
			//		protected

			// ignore click on expando node
			if(!this.current || this.tree.isExpandoNode( e.target, this.current)){ return; }

			if(e.button == dojo.mouseButtons.RIGHT){ return; }	// ignore right-click

			dojo.stopEvent(e);

			var treeNode = this.current,
			  copy = dojo.isCopyKey(e), id = treeNode.id;

			// if shift key is not pressed, and the node is already in the selection,
			// delay deselection until onmouseup so in the case of DND, deselection
			// will be canceled by onmousemove.
			if(!this.singular && !e.shiftKey && this.selection[id]){
				this._doDeselect = true;
				return;
			}else{
				this._doDeselect = false;
			}
			this.userSelect(treeNode, copy, e.shiftKey);
		},

		onMouseUp: function(e){
			// summary:
			//		Event processor for onmouseup
			// e: Event
			//		mouse event
			// tags:
			//		protected

			// _doDeselect is the flag to indicate that the user wants to either ctrl+click on
			// a already selected item (to deselect the item), or click on a not-yet selected item
			// (which should remove all current selection, and add the clicked item). This can not
			// be done in onMouseDown, because the user may start a drag after mousedown. By moving
			// the deselection logic here, the user can drags an already selected item.
			if(!this._doDeselect){ return; }
			this._doDeselect = false;
			this.userSelect(this.current, dojo.isCopyKey( e ), e.shiftKey);
		},
		onMouseMove: function(e){
			// summary
			//		event processor for onmousemove
			// e: Event
			//		mouse event
			this._doDeselect = false;
		},

		userSelect: function(node, multi, range){
			// summary:
			//		Add or remove the given node from selection, responding
			//      to a user action such as a click or keypress.
			// multi: Boolean
			//		Indicates whether this is meant to be a multi-select action (e.g. ctrl-click)
			// range: Boolean
			//		Indicates whether this is meant to be a ranged action (e.g. shift-click)
			// tags:
			//		protected

			if(this.singular){
				if(this.anchor == node && multi){
					this.selectNone();
				}else{
					this.setSelection([node]);
					this.anchor = node;
				}
			}else{
				if(range && this.anchor){
					var cr = dijit.tree._compareNodes(this.anchor.rowNode, node.rowNode),
					begin, end, anchor = this.anchor;
					
					if(cr < 0){ //current is after anchor
						begin = anchor;
						end = node;
					}else{ //current is before anchor
						begin = node;
						end = anchor;
					}
					nodes = [];
					//add everything betweeen begin and end inclusively
					while(begin != end) {
						nodes.push(begin)
						begin = this.tree._getNextNode(begin);
					}
					nodes.push(end)

					this.setSelection(nodes);
				}else{
				    if( this.selection[ node.id ] && multi ) {
						this.removeTreeNode( node );
				    } else if(multi) {
						this.addTreeNode(node, true);
					} else {
						this.setSelection([node]);
						this.anchor = node;
				    }
				}
			}
		},

		forInSelectedItems: function(/*Function*/ f, /*Object?*/ o){
			// summary:
			//		Iterates over selected items;
			//		see `dojo.dnd.Container.forInItems()` for details
			o = o || dojo.global;
			for(var id in this.selection){
				// console.log("selected item id: " + id);
				f.call(o, this.getItem(id), id, this);
			}
		}
});

}

if(!dojo._hasResource["dijit.Tree"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.Tree"] = true;
dojo.provide("dijit.Tree");














dojo.declare(
	"dijit._TreeNode",
	[dijit._Widget, dijit._Templated, dijit._Container, dijit._Contained, dijit._CssStateMixin],
{
	// summary:
	//		Single node within a tree.   This class is used internally
	//		by Tree and should not be accessed directly.
	// tags:
	//		private

	// item: [const] dojo.data.Item
	//		the dojo.data entry this tree represents
	item: null,

	// isTreeNode: [protected] Boolean
	//		Indicates that this is a TreeNode.   Used by `dijit.Tree` only,
	//		should not be accessed directly.
	isTreeNode: true,

	// label: String
	//		Text of this tree node
	label: "",

	// isExpandable: [private] Boolean
	//		This node has children, so show the expando node (+ sign)
	isExpandable: null,

	// isExpanded: [readonly] Boolean
	//		This node is currently expanded (ie, opened)
	isExpanded: false,

	// state: [private] String
	//		Dynamic loading-related stuff.
	//		When an empty folder node appears, it is "UNCHECKED" first,
	//		then after dojo.data query it becomes "LOADING" and, finally "LOADED"
	state: "UNCHECKED",

	templateString: dojo.cache("dijit", "templates/TreeNode.html", "<div class=\"dijitTreeNode\" role=\"presentation\"\r\n\t><div dojoAttachPoint=\"rowNode\" class=\"dijitTreeRow\" role=\"presentation\" dojoAttachEvent=\"onmouseenter:_onMouseEnter, onmouseleave:_onMouseLeave, onclick:_onClick, ondblclick:_onDblClick\"\r\n\t\t><img src=\"${_blankGif}\" alt=\"\" dojoAttachPoint=\"expandoNode\" class=\"dijitTreeExpando\" role=\"presentation\"\r\n\t\t/><span dojoAttachPoint=\"expandoNodeText\" class=\"dijitExpandoText\" role=\"presentation\"\r\n\t\t></span\r\n\t\t><span dojoAttachPoint=\"contentNode\"\r\n\t\t\tclass=\"dijitTreeContent\" role=\"presentation\">\r\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" dojoAttachPoint=\"iconNode\" class=\"dijitIcon dijitTreeIcon\" role=\"presentation\"\r\n\t\t\t/><span dojoAttachPoint=\"labelNode\" class=\"dijitTreeLabel\" role=\"treeitem\" tabindex=\"-1\" aria-selected=\"false\" dojoAttachEvent=\"onfocus:_onLabelFocus\"></span>\r\n\t\t</span\r\n\t></div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitTreeContainer\" role=\"presentation\" style=\"display: none;\"></div>\r\n</div>\r\n"),

	baseClass: "dijitTreeNode",

	// For hover effect for tree node, and focus effect for label
	cssStateNodes: {
		rowNode: "dijitTreeRow",
		labelNode: "dijitTreeLabel"
	},

	attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
		label: {node: "labelNode", type: "innerText"},
		tooltip: {node: "rowNode", type: "attribute", attribute: "title"}
	}),

	buildRendering: function(){
		this.inherited(arguments);

		// set expand icon for leaf
		this._setExpando();

		// set icon and label class based on item
		this._updateItemClasses(this.item);

		if(this.isExpandable){
			dijit.setWaiState(this.labelNode, "expanded", this.isExpanded);
		}

		//aria-selected should be false on all selectable elements.
		this.setSelected(false);
	},

	_setIndentAttr: function(indent){
		// summary:
		//		Tell this node how many levels it should be indented
		// description:
		//		0 for top level nodes, 1 for their children, 2 for their
		//		grandchildren, etc.

		// Math.max() is to prevent negative padding on hidden root node (when indent == -1)
		var pixels = (Math.max(indent, 0) * this.tree._nodePixelIndent) + "px";

		dojo.style(this.domNode, "backgroundPosition",	pixels + " 0px");
		dojo.style(this.rowNode, this.isLeftToRight() ? "paddingLeft" : "paddingRight", pixels);

		dojo.forEach(this.getChildren(), function(child){
			child.set("indent", indent+1);
		});
		
		this._set("indent", indent);
	},

	markProcessing: function(){
		// summary:
		//		Visually denote that tree is loading data, etc.
		// tags:
		//		private
		this.state = "LOADING";
		this._setExpando(true);
	},

	unmarkProcessing: function(){
		// summary:
		//		Clear markup from markProcessing() call
		// tags:
		//		private
		this._setExpando(false);
	},

	_updateItemClasses: function(item){
		// summary:
		//		Set appropriate CSS classes for icon and label dom node
		//		(used to allow for item updates to change respective CSS)
		// tags:
		//		private
		var tree = this.tree, model = tree.model;
		if(tree._v10Compat && item === model.root){
			// For back-compat with 1.0, need to use null to specify root item (TODO: remove in 2.0)
			item = null;
		}
		this._applyClassAndStyle(item, "icon", "Icon");
		this._applyClassAndStyle(item, "label", "Label");
		this._applyClassAndStyle(item, "row", "Row");
	},

	_applyClassAndStyle: function(item, lower, upper){
		// summary:
		//		Set the appropriate CSS classes and styles for labels, icons and rows.
		//
		// item:
		//		The data item.
		//
		// lower:
		//		The lower case attribute to use, e.g. 'icon', 'label' or 'row'.
		//
		// upper:
		//		The upper case attribute to use, e.g. 'Icon', 'Label' or 'Row'.
		//
		// tags:
		//		private

		var clsName = "_" + lower + "Class";
		var nodeName = lower + "Node";
		var oldCls = this[clsName];

		this[clsName] = this.tree["get" + upper + "Class"](item, this.isExpanded);
		dojo.replaceClass(this[nodeName], this[clsName] || "", oldCls || "");
 
		dojo.style(this[nodeName], this.tree["get" + upper + "Style"](item, this.isExpanded) || {});
 	},

	_updateLayout: function(){
		// summary:
		//		Set appropriate CSS classes for this.domNode
		// tags:
		//		private
		var parent = this.getParent();
		if(!parent || parent.rowNode.style.display == "none"){
			/* if we are hiding the root node then make every first level child look like a root node */
			dojo.addClass(this.domNode, "dijitTreeIsRoot");
		}else{
			dojo.toggleClass(this.domNode, "dijitTreeIsLast", !this.getNextSibling());
		}
	},

	_setExpando: function(/*Boolean*/ processing){
		// summary:
		//		Set the right image for the expando node
		// tags:
		//		private

		var styles = ["dijitTreeExpandoLoading", "dijitTreeExpandoOpened",
						"dijitTreeExpandoClosed", "dijitTreeExpandoLeaf"],
			_a11yStates = ["*","-","+","*"],
			idx = processing ? 0 : (this.isExpandable ?	(this.isExpanded ? 1 : 2) : 3);

		// apply the appropriate class to the expando node
		dojo.replaceClass(this.expandoNode, styles[idx], styles);

		// provide a non-image based indicator for images-off mode
		this.expandoNodeText.innerHTML = _a11yStates[idx];

	},

	expand: function(){
		// summary:
		//		Show my children
		// returns:
		//		Deferred that fires when expansion is complete

		// If there's already an expand in progress or we are already expanded, just return
		if(this._expandDeferred){
			return this._expandDeferred;		// dojo.Deferred
		}

		// cancel in progress collapse operation
		this._wipeOut && this._wipeOut.stop();

		// All the state information for when a node is expanded, maybe this should be
		// set when the animation completes instead
		this.isExpanded = true;
		dijit.setWaiState(this.labelNode, "expanded", "true");
		if(this.tree.showRoot || this !== this.tree.rootNode){
			dijit.setWaiRole(this.containerNode, "group");
		}
		dojo.addClass(this.contentNode,'dijitTreeContentExpanded');
		this._setExpando();
		this._updateItemClasses(this.item);
		if(this == this.tree.rootNode){
			dijit.setWaiState(this.tree.domNode, "expanded", "true");
		}

		var def,
			wipeIn = dojo.fx.wipeIn({
				node: this.containerNode, duration: dijit.defaultDuration,
				onEnd: function(){
					def.callback(true);
				}
			});

		// Deferred that fires when expand is complete
		def = (this._expandDeferred = new dojo.Deferred(function(){
			// Canceller
			wipeIn.stop();
		}));

		wipeIn.play();

		return def;		// dojo.Deferred
	},

	collapse: function(){
		// summary:
		//		Collapse this node (if it's expanded)

		if(!this.isExpanded){ return; }

		// cancel in progress expand operation
		if(this._expandDeferred){
			this._expandDeferred.cancel();
			delete this._expandDeferred;
		}

		this.isExpanded = false;
		dijit.setWaiState(this.labelNode, "expanded", "false");
		if(this == this.tree.rootNode){
			dijit.setWaiState(this.tree.domNode, "expanded", "false");
		}
		dojo.removeClass(this.contentNode,'dijitTreeContentExpanded');
		this._setExpando();
		this._updateItemClasses(this.item);

		if(!this._wipeOut){
			this._wipeOut = dojo.fx.wipeOut({
				node: this.containerNode, duration: dijit.defaultDuration
			});
		}
		this._wipeOut.play();
	},

	// indent: Integer
	//		Levels from this node to the root node
	indent: 0,

	setChildItems: function(/* Object[] */ items){
		// summary:
		//		Sets the child items of this node, removing/adding nodes
		//		from current children to match specified items[] array.
		//		Also, if this.persist == true, expands any children that were previously
		// 		opened.
		// returns:
		//		Deferred object that fires after all previously opened children
		//		have been expanded again (or fires instantly if there are no such children).

		var tree = this.tree,
			model = tree.model,
			defs = [];	// list of deferreds that need to fire before I am complete


		// Orphan all my existing children.
		// If items contains some of the same items as before then we will reattach them.
		// Don't call this.removeChild() because that will collapse the tree etc.
		dojo.forEach(this.getChildren(), function(child){
			dijit._Container.prototype.removeChild.call(this, child);
		}, this);

		this.state = "LOADED";

		if(items && items.length > 0){
			this.isExpandable = true;

			// Create _TreeNode widget for each specified tree node, unless one already
			// exists and isn't being used (presumably it's from a DnD move and was recently
			// released
			dojo.forEach(items, function(item){
				var id = model.getIdentity(item),
					existingNodes = tree._itemNodesMap[id],
					node;
				if(existingNodes){
					for(var i=0;i<existingNodes.length;i++){
						if(existingNodes[i] && !existingNodes[i].getParent()){
							node = existingNodes[i];
							node.set('indent', this.indent+1);
							break;
						}
					}
				}
				if(!node){
					node = this.tree._createTreeNode({
							item: item,
							tree: tree,
							isExpandable: model.mayHaveChildren(item),
							label: tree.getLabel(item),
							tooltip: tree.getTooltip(item),
							dir: tree.dir,
							lang: tree.lang,
							indent: this.indent + 1
						});
					if(existingNodes){
						existingNodes.push(node);
					}else{
						tree._itemNodesMap[id] = [node];
					}
				}
				this.addChild(node);

				// If node was previously opened then open it again now (this may trigger
				// more data store accesses, recursively)
				if(this.tree.autoExpand || this.tree._state(item)){
					defs.push(tree._expandNode(node));
				}
			}, this);

			// note that updateLayout() needs to be called on each child after
			// _all_ the children exist
			dojo.forEach(this.getChildren(), function(child, idx){
				child._updateLayout();
			});
		}else{
			this.isExpandable=false;
		}

		if(this._setExpando){
			// change expando to/from dot or + icon, as appropriate
			this._setExpando(false);
		}

		// Set leaf icon or folder icon, as appropriate
		this._updateItemClasses(this.item);

		// On initial tree show, make the selected TreeNode as either the root node of the tree,
		// or the first child, if the root node is hidden
		if(this == tree.rootNode){
			var fc = this.tree.showRoot ? this : this.getChildren()[0];
			if(fc){
				fc.setFocusable(true);
				tree.lastFocused = fc;
			}else{
				// fallback: no nodes in tree so focus on Tree <div> itself
				tree.domNode.setAttribute("tabIndex", "0");
			}
		}

		return new dojo.DeferredList(defs);	// dojo.Deferred
	},

	getTreePath: function(){
		var node = this;
		var path = [];
		while(node && node !== this.tree.rootNode){
				path.unshift(node.item);
				node = node.getParent();
		}
		path.unshift(this.tree.rootNode.item);

		return path;
	},

	getIdentity: function() {
		return this.tree.model.getIdentity(this.item);
	},

	removeChild: function(/* treeNode */ node){
		this.inherited(arguments);

		var children = this.getChildren();
		if(children.length == 0){
			this.isExpandable = false;
			this.collapse();
		}

		dojo.forEach(children, function(child){
				child._updateLayout();
		});
	},

	makeExpandable: function(){
		// summary:
		//		if this node wasn't already showing the expando node,
		//		turn it into one and call _setExpando()

		// TODO: hmm this isn't called from anywhere, maybe should remove it for 2.0

		this.isExpandable = true;
		this._setExpando(false);
	},

	_onLabelFocus: function(evt){
		// summary:
		//		Called when this row is focused (possibly programatically)
		//		Note that we aren't using _onFocus() builtin to dijit
		//		because it's called when focus is moved to a descendant TreeNode.
		// tags:
		//		private
		this.tree._onNodeFocus(this);
	},

	setSelected: function(/*Boolean*/ selected){
		// summary:
		//		A Tree has a (single) currently selected node.
		//		Mark that this node is/isn't that currently selected node.
		// description:
		//		In particular, setting a node as selected involves setting tabIndex
		//		so that when user tabs to the tree, focus will go to that node (only).
		dijit.setWaiState(this.labelNode, "selected", selected);
		dojo.toggleClass(this.rowNode, "dijitTreeRowSelected", selected);
	},

	setFocusable: function(/*Boolean*/ selected){
		// summary:
		//		A Tree has a (single) node that's focusable.
		//		Mark that this node is/isn't that currently focsuable node.
		// description:
		//		In particular, setting a node as selected involves setting tabIndex
		//		so that when user tabs to the tree, focus will go to that node (only).

		this.labelNode.setAttribute("tabIndex", selected ? "0" : "-1");
	},

	_onClick: function(evt){
		// summary:
		//		Handler for onclick event on a node
		// tags:
		//		private
		this.tree._onClick(this, evt);
	},
	_onDblClick: function(evt){
		// summary:
		//		Handler for ondblclick event on a node
		// tags:
		//		private
		this.tree._onDblClick(this, evt);
	},

	_onMouseEnter: function(evt){
		// summary:
		//		Handler for onmouseenter event on a node
		// tags:
		//		private
		this.tree._onNodeMouseEnter(this, evt);
	},

	_onMouseLeave: function(evt){
		// summary:
		//		Handler for onmouseenter event on a node
		// tags:
		//		private
		this.tree._onNodeMouseLeave(this, evt);
	}
});

dojo.declare(
	"dijit.Tree",
	[dijit._Widget, dijit._Templated],
{
	// summary:
	//		This widget displays hierarchical data from a store.

	// store: [deprecated] String||dojo.data.Store
	//		Deprecated.  Use "model" parameter instead.
	//		The store to get data to display in the tree.
	store: null,

	// model: dijit.Tree.model
	//		Interface to read tree data, get notifications of changes to tree data,
	//		and for handling drop operations (i.e drag and drop onto the tree)
	model: null,

	// query: [deprecated] anything
	//		Deprecated.  User should specify query to the model directly instead.
	//		Specifies datastore query to return the root item or top items for the tree.
	query: null,

	// label: [deprecated] String
	//		Deprecated.  Use dijit.tree.ForestStoreModel directly instead.
	//		Used in conjunction with query parameter.
	//		If a query is specified (rather than a root node id), and a label is also specified,
	//		then a fake root node is created and displayed, with this label.
	label: "",

	// showRoot: [const] Boolean
	//		Should the root node be displayed, or hidden?
	showRoot: true,

	// childrenAttr: [deprecated] String[]
	//		Deprecated.   This information should be specified in the model.
	//		One ore more attributes that holds children of a tree node
	childrenAttr: ["children"],

	// paths: String[][] or Item[][]
	//		Full paths from rootNode to selected nodes expressed as array of items or array of ids.
	//		Since setting the paths may be asynchronous (because ofwaiting on dojo.data), set("paths", ...)
	//		returns a Deferred to indicate when the set is complete.
	paths: [],
	
	// path: String[] or Item[]
	//      Backward compatible singular variant of paths.
	path: [],

	// selectedItems: [readonly] Item[]
	//		The currently selected items in this tree.
	//		This property can only be set (via set('selectedItems', ...)) when that item is already
	//		visible in the tree.   (I.e. the tree has already been expanded to show that node.)
	//		Should generally use `paths` attribute to set the selected items instead.
	selectedItems: null,

	// selectedItem: [readonly] Item
	//      Backward compatible singular variant of selectedItems.
	selectedItem: null,

	// openOnClick: Boolean
	//		If true, clicking a folder node's label will open it, rather than calling onClick()
	openOnClick: false,

	// openOnDblClick: Boolean
	//		If true, double-clicking a folder node's label will open it, rather than calling onDblClick()
	openOnDblClick: false,

	templateString: dojo.cache("dijit", "templates/Tree.html", "<div class=\"dijitTree dijitTreeContainer\" role=\"tree\"\r\n\tdojoAttachEvent=\"onkeypress:_onKeyPress\">\r\n\t<div class=\"dijitInline dijitTreeIndent\" style=\"position: absolute; top: -9999px\" dojoAttachPoint=\"indentDetector\"></div>\r\n</div>\r\n"),

	// persist: Boolean
	//		Enables/disables use of cookies for state saving.
	persist: true,

	// autoExpand: Boolean
	//		Fully expand the tree on load.   Overrides `persist`.
	autoExpand: false,

	// dndController: [protected] String
	//		Class name to use as as the dnd controller.  Specifying this class enables DnD.
	//		Generally you should specify this as "dijit.tree.dndSource".
	//      Default of "dijit.tree._dndSelector" handles selection only (no actual DnD).
	dndController: "dijit.tree._dndSelector",

	// parameters to pull off of the tree and pass on to the dndController as its params
	dndParams: ["onDndDrop","itemCreator","onDndCancel","checkAcceptance", "checkItemAcceptance", "dragThreshold", "betweenThreshold"],

	//declare the above items so they can be pulled from the tree's markup

	// onDndDrop: [protected] Function
	//		Parameter to dndController, see `dijit.tree.dndSource.onDndDrop`.
	//		Generally this doesn't need to be set.
	onDndDrop: null,

	/*=====
	itemCreator: function(nodes, target, source){
		// summary:
		//		Returns objects passed to `Tree.model.newItem()` based on DnD nodes
		//		dropped onto the tree.   Developer must override this method to enable
		// 		dropping from external sources onto this Tree, unless the Tree.model's items
		//		happen to look like {id: 123, name: "Apple" } with no other attributes.
		// description:
		//		For each node in nodes[], which came from source, create a hash of name/value
		//		pairs to be passed to Tree.model.newItem().  Returns array of those hashes.
		// nodes: DomNode[]
		//		The DOMNodes dragged from the source container
		// target: DomNode
		//		The target TreeNode.rowNode
		// source: dojo.dnd.Source
		//		The source container the nodes were dragged from, perhaps another Tree or a plain dojo.dnd.Source
		// returns: Object[]
		//		Array of name/value hashes for each new item to be added to the Tree, like:
		// |	[
		// |		{ id: 123, label: "apple", foo: "bar" },
		// |		{ id: 456, label: "pear", zaz: "bam" }
		// |	]
		// tags:
		//		extension
		return [{}];
	},
	=====*/
	itemCreator: null,

	// onDndCancel: [protected] Function
	//		Parameter to dndController, see `dijit.tree.dndSource.onDndCancel`.
	//		Generally this doesn't need to be set.
	onDndCancel: null,

/*=====
	checkAcceptance: function(source, nodes){
		// summary:
		//		Checks if the Tree itself can accept nodes from this source
		// source: dijit.tree._dndSource
		//		The source which provides items
		// nodes: DOMNode[]
		//		Array of DOM nodes corresponding to nodes being dropped, dijitTreeRow nodes if
		//		source is a dijit.Tree.
		// tags:
		//		extension
		return true;	// Boolean
	},
=====*/
	checkAcceptance: null,

/*=====
	checkItemAcceptance: function(target, source, position){
		// summary:
		//		Stub function to be overridden if one wants to check for the ability to drop at the node/item level
		// description:
		//		In the base case, this is called to check if target can become a child of source.
		//		When betweenThreshold is set, position="before" or "after" means that we
		//		are asking if the source node can be dropped before/after the target node.
		// target: DOMNode
		//		The dijitTreeRoot DOM node inside of the TreeNode that we are dropping on to
		//		Use dijit.getEnclosingWidget(target) to get the TreeNode.
		// source: dijit.tree.dndSource
		//		The (set of) nodes we are dropping
		// position: String
		//		"over", "before", or "after"
		// tags:
		//		extension
		return true;	// Boolean
	},
=====*/
	checkItemAcceptance: null,

	// dragThreshold: Integer
	//		Number of pixels mouse moves before it's considered the start of a drag operation
	dragThreshold: 5,

	// betweenThreshold: Integer
	//		Set to a positive value to allow drag and drop "between" nodes.
	//
	//		If during DnD mouse is over a (target) node but less than betweenThreshold
	//		pixels from the bottom edge, dropping the the dragged node will make it
	//		the next sibling of the target node, rather than the child.
	//
	//		Similarly, if mouse is over a target node but less that betweenThreshold
	//		pixels from the top edge, dropping the dragged node will make it
	//		the target node's previous sibling rather than the target node's child.
	betweenThreshold: 0,

	// _nodePixelIndent: Integer
	//		Number of pixels to indent tree nodes (relative to parent node).
	//		Default is 19 but can be overridden by setting CSS class dijitTreeIndent
	//		and calling resize() or startup() on tree after it's in the DOM.
	_nodePixelIndent: 19,

	_publish: function(/*String*/ topicName, /*Object*/ message){
		// summary:
		//		Publish a message for this widget/topic
		dojo.publish(this.id, [dojo.mixin({tree: this, event: topicName}, message || {})]);
	},

	postMixInProperties: function(){
		this.tree = this;

		if(this.autoExpand){
			// There's little point in saving opened/closed state of nodes for a Tree
			// that initially opens all it's nodes.
			this.persist = false;
		}

		this._itemNodesMap={};

		if(!this.cookieName){
			this.cookieName = this.id + "SaveStateCookie";
		}

		this._loadDeferred = new dojo.Deferred();

		this.inherited(arguments);
	},

	postCreate: function(){
		this._initState();

		// Create glue between store and Tree, if not specified directly by user
		if(!this.model){
			this._store2model();
		}

		// monitor changes to items
		this.connect(this.model, "onChange", "_onItemChange");
		this.connect(this.model, "onChildrenChange", "_onItemChildrenChange");
		this.connect(this.model, "onDelete", "_onItemDelete");

		this._load();

		this.inherited(arguments);

		if(this.dndController){
			if(dojo.isString(this.dndController)){
				this.dndController = dojo.getObject(this.dndController);
			}
			var params={};
			for(var i=0; i<this.dndParams.length;i++){
				if(this[this.dndParams[i]]){
					params[this.dndParams[i]] = this[this.dndParams[i]];
				}
			}
			this.dndController = new this.dndController(this, params);
		}
	},

	_store2model: function(){
		// summary:
		//		User specified a store&query rather than model, so create model from store/query
		this._v10Compat = true;
		dojo.deprecated("Tree: from version 2.0, should specify a model object rather than a store/query");

		var modelParams = {
			id: this.id + "_ForestStoreModel",
			store: this.store,
			query: this.query,
			childrenAttrs: this.childrenAttr
		};

		// Only override the model's mayHaveChildren() method if the user has specified an override
		if(this.params.mayHaveChildren){
			modelParams.mayHaveChildren = dojo.hitch(this, "mayHaveChildren");
		}

		if(this.params.getItemChildren){
			modelParams.getChildren = dojo.hitch(this, function(item, onComplete, onError){
				this.getItemChildren((this._v10Compat && item === this.model.root) ? null : item, onComplete, onError);
			});
		}
		this.model = new dijit.tree.ForestStoreModel(modelParams);

		// For backwards compatibility, the visibility of the root node is controlled by
		// whether or not the user has specified a label
		this.showRoot = Boolean(this.label);
	},

	onLoad: function(){
		// summary:
		//		Called when tree finishes loading and expanding.
		// description:
		//		If persist == true the loading may encompass many levels of fetches
		//		from the data store, each asynchronous.   Waits for all to finish.
		// tags:
		//		callback
	},

	_load: function(){
		// summary:
		//		Initial load of the tree.
		//		Load root node (possibly hidden) and it's children.
		this.model.getRoot(
			dojo.hitch(this, function(item){
				var rn = (this.rootNode = this.tree._createTreeNode({
					item: item,
					tree: this,
					isExpandable: true,
					label: this.label || this.getLabel(item),
					indent: this.showRoot ? 0 : -1
				}));
				if(!this.showRoot){
					rn.rowNode.style.display="none";
					// if root is not visible, move tree role to the invisible
					// root node's containerNode, see #12135
					dijit.setWaiRole(this.domNode, 'presentation');
					
					dijit.setWaiRole(rn.labelNode, 'presentation');
					dijit.setWaiRole(rn.containerNode, 'tree');
				}
				this.domNode.appendChild(rn.domNode);
				var identity = this.model.getIdentity(item);
				if(this._itemNodesMap[identity]){
					this._itemNodesMap[identity].push(rn);
				}else{
					this._itemNodesMap[identity] = [rn];
				}

				rn._updateLayout();		// sets "dijitTreeIsRoot" CSS classname

				// load top level children and then fire onLoad() event
				this._expandNode(rn).addCallback(dojo.hitch(this, function(){
					this._loadDeferred.callback(true);
					this.onLoad();
				}));
			}),
			function(err){
				console.error(this, ": error loading root: ", err);
			}
		);
	},

	getNodesByItem: function(/*dojo.data.Item or id*/ item){
		// summary:
		//		Returns all tree nodes that refer to an item
		// returns:
		//		Array of tree nodes that refer to passed item

		if(!item){ return []; }
		var identity = dojo.isString(item) ? item : this.model.getIdentity(item);
		// return a copy so widget don't get messed up by changes to returned array
		return [].concat(this._itemNodesMap[identity]);
	},

	_setSelectedItemAttr: function(/*dojo.data.Item or id*/ item){
		this.set('selectedItems', [item]);
	},

	_setSelectedItemsAttr: function(/*dojo.data.Items or ids*/ items){
		// summary:
		//		Select tree nodes related to passed items.
		//		WARNING: if model use multi-parented items or desired tree node isn't already loaded
		//		behavior is undefined. Use set('paths', ...) instead.
		var tree = this;
		this._loadDeferred.addCallback( dojo.hitch(this, function(){
			var identities = dojo.map(items, function(item){
				return (!item || dojo.isString(item)) ? item : tree.model.getIdentity(item);
			});
			var nodes = [];
			dojo.forEach(identities, function(id){
				nodes = nodes.concat(tree._itemNodesMap[id] || []);
			});
			this.set('selectedNodes', nodes);
		}));
	},

	_setPathAttr: function(/*Item[] || String[]*/ path){
		// summary:
		//      Singular variant of _setPathsAttr
		if(path.length) {
			return this.set("paths", [path]);
		} else {
			//Empty list is interpreted as "select nothing"
			return this.set("paths", []);
		}
	},
	
	_setPathsAttr: function(/*Item[][] || String[][]*/ paths){
		// summary:
		//		Select the tree nodes identified by passed paths.
		// paths:
		//		Array of arrays of items or item id's
		// returns:
		//		Deferred to indicate when the set is complete
		var tree = this;

		// We may need to wait for some nodes to expand, so setting
		// each path will involve a Deferred. We bring those deferreds
		// together witha DeferredList.
		return new dojo.DeferredList(dojo.map(paths, function(path){
			var d = new dojo.Deferred();
			
			// normalize path to use identity
			path = dojo.map(path, function(item){
				return dojo.isString(item) ? item : tree.model.getIdentity(item);
			});

			if(path.length){
				// Wait for the tree to load, if it hasn't already.
				tree._loadDeferred.addCallback(function(){ selectPath(path, [tree.rootNode], d); });
			}else{
				d.errback("Empty path");
			}
			return d;
		})).addCallback(setNodes);

		function selectPath(path, nodes, def){
			// Traverse path; the next path component should be among "nodes".
			var nextPath = path.shift();
			var nextNode = dojo.filter(nodes, function(node){
				return node.getIdentity() == nextPath;
			})[0];
			if(!!nextNode){
				if(path.length){
					tree._expandNode(nextNode).addCallback(function(){ selectPath(path, nextNode.getChildren(), def); });
				}else{
					//Successfully reached the end of this path
					def.callback(nextNode);
				}
			} else {
				def.errback("Could not expand path at " + nextPath);
			}
		}
		
		function setNodes(newNodes){
			//After all expansion is finished, set the selection to
			//the set of nodes successfully found.
			tree.set("selectedNodes", dojo.map(
				dojo.filter(newNodes,function(x){return x[0];}),
				function(x){return x[1];}));
		}
	},

	_setSelectedNodeAttr: function(node){
		this.set('selectedNodes', [node]);
	},
	_setSelectedNodesAttr: function(nodes){
		this._loadDeferred.addCallback( dojo.hitch(this, function(){
			this.dndController.setSelection(nodes);
		}));
	},


	////////////// Data store related functions //////////////////////
	// These just get passed to the model; they are here for back-compat

	mayHaveChildren: function(/*dojo.data.Item*/ item){
		// summary:
		//		Deprecated.   This should be specified on the model itself.
		//
		//		Overridable function to tell if an item has or may have children.
		//		Controls whether or not +/- expando icon is shown.
		//		(For efficiency reasons we may not want to check if an element actually
		//		has children until user clicks the expando node)
		// tags:
		//		deprecated
	},

	getItemChildren: function(/*dojo.data.Item*/ parentItem, /*function(items)*/ onComplete){
		// summary:
		//		Deprecated.   This should be specified on the model itself.
		//
		// 		Overridable function that return array of child items of given parent item,
		//		or if parentItem==null then return top items in tree
		// tags:
		//		deprecated
	},

	///////////////////////////////////////////////////////
	// Functions for converting an item to a TreeNode
	getLabel: function(/*dojo.data.Item*/ item){
		// summary:
		//		Overridable function to get the label for a tree node (given the item)
		// tags:
		//		extension
		return this.model.getLabel(item);	// String
	},

	getIconClass: function(/*dojo.data.Item*/ item, /*Boolean*/ opened){
		// summary:
		//		Overridable function to return CSS class name to display icon
		// tags:
		//		extension
		return (!item || this.model.mayHaveChildren(item)) ? (opened ? "dijitFolderOpened" : "dijitFolderClosed") : "dijitLeaf"
	},

	getLabelClass: function(/*dojo.data.Item*/ item, /*Boolean*/ opened){
		// summary:
		//		Overridable function to return CSS class name to display label
		// tags:
		//		extension
	},

	getRowClass: function(/*dojo.data.Item*/ item, /*Boolean*/ opened){
		// summary:
		//		Overridable function to return CSS class name to display row
		// tags:
		//		extension
	},

	getIconStyle: function(/*dojo.data.Item*/ item, /*Boolean*/ opened){
		// summary:
		//		Overridable function to return CSS styles to display icon
		// returns:
		//		Object suitable for input to dojo.style() like {backgroundImage: "url(...)"}
		// tags:
		//		extension
	},

	getLabelStyle: function(/*dojo.data.Item*/ item, /*Boolean*/ opened){
		// summary:
		//		Overridable function to return CSS styles to display label
		// returns:
		//		Object suitable for input to dojo.style() like {color: "red", background: "green"}
		// tags:
		//		extension
	},

	getRowStyle: function(/*dojo.data.Item*/ item, /*Boolean*/ opened){
		// summary:
		//		Overridable function to return CSS styles to display row
		// returns:
		//		Object suitable for input to dojo.style() like {background-color: "#bbb"}
		// tags:
		//		extension
	},

	getTooltip: function(/*dojo.data.Item*/ item){
		// summary:
		//		Overridable function to get the tooltip for a tree node (given the item)
		// tags:
		//		extension
		return "";	// String
	},

	/////////// Keyboard and Mouse handlers ////////////////////

	_onKeyPress: function(/*Event*/ e){
		// summary:
		//		Translates keypress events into commands for the controller
		if(e.altKey){ return; }
		var dk = dojo.keys;
		var treeNode = dijit.getEnclosingWidget(e.target);
		if(!treeNode){ return; }

		var key = e.charOrCode;
		if(typeof key == "string" && key != " "){	// handle printables (letter navigation)
			// Check for key navigation.
			if(!e.altKey && !e.ctrlKey && !e.shiftKey && !e.metaKey){
				this._onLetterKeyNav( { node: treeNode, key: key.toLowerCase() } );
				dojo.stopEvent(e);
			}
		}else{	// handle non-printables (arrow keys)
			// clear record of recent printables (being saved for multi-char letter navigation),
			// because "a", down-arrow, "b" shouldn't search for "ab"
			if(this._curSearch){
				clearTimeout(this._curSearch.timer);
				delete this._curSearch;
			}

			var map = this._keyHandlerMap;
			if(!map){
				// setup table mapping keys to events
				map = {};
				map[dk.ENTER]="_onEnterKey";
				//On WebKit based browsers, the combination ctrl-enter
				//does not get passed through. To allow accessible
				//multi-select on those browsers, the space key is
				//also used for selection.
				map[dk.SPACE]= map[" "] = "_onEnterKey";
				map[this.isLeftToRight() ? dk.LEFT_ARROW : dk.RIGHT_ARROW]="_onLeftArrow";
				map[this.isLeftToRight() ? dk.RIGHT_ARROW : dk.LEFT_ARROW]="_onRightArrow";
				map[dk.UP_ARROW]="_onUpArrow";
				map[dk.DOWN_ARROW]="_onDownArrow";
				map[dk.HOME]="_onHomeKey";
				map[dk.END]="_onEndKey";
				this._keyHandlerMap = map;
			}
			if(this._keyHandlerMap[key]){
				this[this._keyHandlerMap[key]]( { node: treeNode, item: treeNode.item, evt: e } );
				dojo.stopEvent(e);
			}
		}
	},

	_onEnterKey: function(/*Object*/ message){
		this._publish("execute", { item: message.item, node: message.node } );
		this.dndController.userSelect(message.node, dojo.isCopyKey( message.evt ), message.evt.shiftKey);
		this.onClick(message.item, message.node, message.evt);
	},

	_onDownArrow: function(/*Object*/ message){
		// summary:
		//		down arrow pressed; get next visible node, set focus there
		var node = this._getNextNode(message.node);
		if(node && node.isTreeNode){
			this.focusNode(node);
		}
	},

	_onUpArrow: function(/*Object*/ message){
		// summary:
		//		Up arrow pressed; move to previous visible node

		var node = message.node;

		// if younger siblings
		var previousSibling = node.getPreviousSibling();
		if(previousSibling){
			node = previousSibling;
			// if the previous node is expanded, dive in deep
			while(node.isExpandable && node.isExpanded && node.hasChildren()){
				// move to the last child
				var children = node.getChildren();
				node = children[children.length-1];
			}
		}else{
			// if this is the first child, return the parent
			// unless the parent is the root of a tree with a hidden root
			var parent = node.getParent();
			if(!(!this.showRoot && parent === this.rootNode)){
				node = parent;
			}
		}

		if(node && node.isTreeNode){
			this.focusNode(node);
		}
	},

	_onRightArrow: function(/*Object*/ message){
		// summary:
		//		Right arrow pressed; go to child node
		var node = message.node;

		// if not expanded, expand, else move to 1st child
		if(node.isExpandable && !node.isExpanded){
			this._expandNode(node);
		}else if(node.hasChildren()){
			node = node.getChildren()[0];
			if(node && node.isTreeNode){
				this.focusNode(node);
			}
		}
	},

	_onLeftArrow: function(/*Object*/ message){
		// summary:
		//		Left arrow pressed.
		//		If not collapsed, collapse, else move to parent.

		var node = message.node;

		if(node.isExpandable && node.isExpanded){
			this._collapseNode(node);
		}else{
			var parent = node.getParent();
			if(parent && parent.isTreeNode && !(!this.showRoot && parent === this.rootNode)){
				this.focusNode(parent);
			}
		}
	},

	_onHomeKey: function(){
		// summary:
		//		Home key pressed; get first visible node, and set focus there
		var node = this._getRootOrFirstNode();
		if(node){
			this.focusNode(node);
		}
	},

	_onEndKey: function(/*Object*/ message){
		// summary:
		//		End key pressed; go to last visible node.

		var node = this.rootNode;
		while(node.isExpanded){
			var c = node.getChildren();
			node = c[c.length - 1];
		}

		if(node && node.isTreeNode){
			this.focusNode(node);
		}
	},

	// multiCharSearchDuration: Number
	//		If multiple characters are typed where each keystroke happens within
	//		multiCharSearchDuration of the previous keystroke,
	//		search for nodes matching all the keystrokes.
	//
	//		For example, typing "ab" will search for entries starting with
	//		"ab" unless the delay between "a" and "b" is greater than multiCharSearchDuration.
	multiCharSearchDuration: 250,

	_onLetterKeyNav: function(message){
		// summary:
		//		Called when user presses a prinatable key; search for node starting with recently typed letters.
		// message: Object
		//		Like { node: TreeNode, key: 'a' } where key is the key the user pressed.

		// Branch depending on whether this key starts a new search, or modifies an existing search
		var cs = this._curSearch;
		if(cs){
			// We are continuing a search.  Ex: user has pressed 'a', and now has pressed
			// 'b', so we want to search for nodes starting w/"ab".
			cs.pattern = cs.pattern + message.key;
			clearTimeout(cs.timer);
		}else{
			// We are starting a new search
			cs = this._curSearch = {
					pattern: message.key,
					startNode: message.node
			};
		}

		// set/reset timer to forget recent keystrokes
		var self = this;
		cs.timer = setTimeout(function(){
			delete self._curSearch;
		}, this.multiCharSearchDuration);

		// Navigate to TreeNode matching keystrokes [entered so far].
		var node = cs.startNode;
		do{
			node = this._getNextNode(node);
			//check for last node, jump to first node if necessary
			if(!node){
				node = this._getRootOrFirstNode();
			}
		}while(node !== cs.startNode && (node.label.toLowerCase().substr(0, cs.pattern.length) != cs.pattern));
		if(node && node.isTreeNode){
			// no need to set focus if back where we started
			if(node !== cs.startNode){
				this.focusNode(node);
			}
		}
	},

	isExpandoNode: function(node, widget){
		// summary:
		//		check whether a dom node is the expandoNode for a particular TreeNode widget
		return dojo.isDescendant(node, widget.expandoNode);
	},
	_onClick: function(/*TreeNode*/ nodeWidget, /*Event*/ e){
		// summary:
		//		Translates click events into commands for the controller to process

		var domElement = e.target,
			isExpandoClick = this.isExpandoNode(domElement, nodeWidget);

		if( (this.openOnClick && nodeWidget.isExpandable) || isExpandoClick ){
			// expando node was clicked, or label of a folder node was clicked; open it
			if(nodeWidget.isExpandable){
				this._onExpandoClick({node:nodeWidget});
			}
		}else{
			this._publish("execute", { item: nodeWidget.item, node: nodeWidget, evt: e } );
			this.onClick(nodeWidget.item, nodeWidget, e);
			this.focusNode(nodeWidget);
		}
		dojo.stopEvent(e);
	},
	_onDblClick: function(/*TreeNode*/ nodeWidget, /*Event*/ e){
		// summary:
		//		Translates double-click events into commands for the controller to process

		var domElement = e.target,
			isExpandoClick = (domElement == nodeWidget.expandoNode || domElement == nodeWidget.expandoNodeText);

		if( (this.openOnDblClick && nodeWidget.isExpandable) ||isExpandoClick ){
			// expando node was clicked, or label of a folder node was clicked; open it
			if(nodeWidget.isExpandable){
				this._onExpandoClick({node:nodeWidget});
			}
		}else{
			this._publish("execute", { item: nodeWidget.item, node: nodeWidget, evt: e } );
			this.onDblClick(nodeWidget.item, nodeWidget, e);
			this.focusNode(nodeWidget);
		}
		dojo.stopEvent(e);
	},

	_onExpandoClick: function(/*Object*/ message){
		// summary:
		//		User clicked the +/- icon; expand or collapse my children.
		var node = message.node;

		// If we are collapsing, we might be hiding the currently focused node.
		// Also, clicking the expando node might have erased focus from the current node.
		// For simplicity's sake just focus on the node with the expando.
		this.focusNode(node);

		if(node.isExpanded){
			this._collapseNode(node);
		}else{
			this._expandNode(node);
		}
	},

	onClick: function(/* dojo.data */ item, /*TreeNode*/ node, /*Event*/ evt){
		// summary:
		//		Callback when a tree node is clicked
		// tags:
		//		callback
	},
	onDblClick: function(/* dojo.data */ item, /*TreeNode*/ node, /*Event*/ evt){
		// summary:
		//		Callback when a tree node is double-clicked
		// tags:
		//		callback
	},
	onOpen: function(/* dojo.data */ item, /*TreeNode*/ node){
		// summary:
		//		Callback when a node is opened
		// tags:
		//		callback
	},
	onClose: function(/* dojo.data */ item, /*TreeNode*/ node){
		// summary:
		//		Callback when a node is closed
		// tags:
		//		callback
	},

	_getNextNode: function(node){
		// summary:
		//		Get next visible node

		if(node.isExpandable && node.isExpanded && node.hasChildren()){
			// if this is an expanded node, get the first child
			return node.getChildren()[0];		// _TreeNode
		}else{
			// find a parent node with a sibling
			while(node && node.isTreeNode){
				var returnNode = node.getNextSibling();
				if(returnNode){
					return returnNode;		// _TreeNode
				}
				node = node.getParent();
			}
			return null;
		}
	},

	_getRootOrFirstNode: function(){
		// summary:
		//		Get first visible node
		return this.showRoot ? this.rootNode : this.rootNode.getChildren()[0];
	},

	_collapseNode: function(/*_TreeNode*/ node){
		// summary:
		//		Called when the user has requested to collapse the node

		if(node._expandNodeDeferred){
			delete node._expandNodeDeferred;
		}

		if(node.isExpandable){
			if(node.state == "LOADING"){
				// ignore clicks while we are in the process of loading data
				return;
			}

			node.collapse();
			this.onClose(node.item, node);

			if(node.item){
				this._state(node.item,false);
				this._saveState();
			}
		}
	},

	_expandNode: function(/*_TreeNode*/ node, /*Boolean?*/ recursive){
		// summary:
		//		Called when the user has requested to expand the node
		// recursive:
		//		Internal flag used when _expandNode() calls itself, don't set.
		// returns:
		//		Deferred that fires when the node is loaded and opened and (if persist=true) all it's descendants
		//		that were previously opened too

		if(node._expandNodeDeferred && !recursive){
			// there's already an expand in progress (or completed), so just return
			return node._expandNodeDeferred;	// dojo.Deferred
		}

		var model = this.model,
			item = node.item,
			_this = this;

		switch(node.state){
			case "UNCHECKED":
				// need to load all the children, and then expand
				node.markProcessing();

				// Setup deferred to signal when the load and expand are finished.
				// Save that deferred in this._expandDeferred as a flag that operation is in progress.
				var def = (node._expandNodeDeferred = new dojo.Deferred());

				// Get the children
				model.getChildren(
					item,
					function(items){
						node.unmarkProcessing();

						// Display the children and also start expanding any children that were previously expanded
						// (if this.persist == true).   The returned Deferred will fire when those expansions finish.
						var scid = node.setChildItems(items);

						// Call _expandNode() again but this time it will just to do the animation (default branch).
						// The returned Deferred will fire when the animation completes.
						// TODO: seems like I can avoid recursion and just use a deferred to sequence the events?
						var ed = _this._expandNode(node, true);

						// After the above two tasks (setChildItems() and recursive _expandNode()) finish,
						// signal that I am done.
						scid.addCallback(function(){
							ed.addCallback(function(){
								def.callback();
							})
						});
					},
					function(err){
						console.error(_this, ": error loading root children: ", err);
					}
				);
				break;

			default:	// "LOADED"
				// data is already loaded; just expand node
				def = (node._expandNodeDeferred = node.expand());

				this.onOpen(node.item, node);

				if(item){
					this._state(item, true);
					this._saveState();
				}
		}

		return def;	// dojo.Deferred
	},

	////////////////// Miscellaneous functions ////////////////

	focusNode: function(/* _tree.Node */ node){
		// summary:
		//		Focus on the specified node (which must be visible)
		// tags:
		//		protected

		// set focus so that the label will be voiced using screen readers
		dijit.focus(node.labelNode);
	},

	_onNodeFocus: function(/*dijit._Widget*/ node){
		// summary:
		//		Called when a TreeNode gets focus, either by user clicking
		//		it, or programatically by arrow key handling code.
		// description:
		//		It marks that the current node is the selected one, and the previously
		//		selected node no longer is.

		if(node && node != this.lastFocused){
			if(this.lastFocused && !this.lastFocused._destroyed){
				// mark that the previously focsable node is no longer focusable
				this.lastFocused.setFocusable(false);
			}

			// mark that the new node is the currently selected one
			node.setFocusable(true);
			this.lastFocused = node;
		}
	},

	_onNodeMouseEnter: function(/*dijit._Widget*/ node){
		// summary:
		//		Called when mouse is over a node (onmouseenter event),
		//		this is monitored by the DND code
	},

	_onNodeMouseLeave: function(/*dijit._Widget*/ node){
		// summary:
		//		Called when mouse leaves a node (onmouseleave event),
		//		this is monitored by the DND code
	},

	//////////////// Events from the model //////////////////////////

	_onItemChange: function(/*Item*/ item){
		// summary:
		//		Processes notification of a change to an item's scalar values like label
		var model = this.model,
			identity = model.getIdentity(item),
			nodes = this._itemNodesMap[identity];

		if(nodes){
			var label = this.getLabel(item),
				tooltip = this.getTooltip(item);
			dojo.forEach(nodes, function(node){
				node.set({
					item: item,		// theoretically could be new JS Object representing same item
					label: label,
					tooltip: tooltip
				});
				node._updateItemClasses(item);
			});
		}
	},

	_onItemChildrenChange: function(/*dojo.data.Item*/ parent, /*dojo.data.Item[]*/ newChildrenList){
		// summary:
		//		Processes notification of a change to an item's children
		var model = this.model,
			identity = model.getIdentity(parent),
			parentNodes = this._itemNodesMap[identity];

		if(parentNodes){
			dojo.forEach(parentNodes,function(parentNode){
				parentNode.setChildItems(newChildrenList);
			});
		}
	},

	_onItemDelete: function(/*Item*/ item){
		// summary:
		//		Processes notification of a deletion of an item
		var model = this.model,
			identity = model.getIdentity(item),
			nodes = this._itemNodesMap[identity];

		if(nodes){
			dojo.forEach(nodes,function(node){
				// Remove node from set of selected nodes (if it's selected)
				this.dndController.removeTreeNode(node);

				var parent = node.getParent();
				if(parent){
					// if node has not already been orphaned from a _onSetItem(parent, "children", ..) call...
					parent.removeChild(node);
				}
				node.destroyRecursive();
			}, this);
			delete this._itemNodesMap[identity];
		}
	},

	/////////////// Miscellaneous funcs

	_initState: function(){
		// summary:
		//		Load in which nodes should be opened automatically
		if(this.persist){
			var cookie = dojo.cookie(this.cookieName);
			this._openedItemIds = {};
			if(cookie){
				dojo.forEach(cookie.split(','), function(item){
					this._openedItemIds[item] = true;
				}, this);
			}
		}
	},
	_state: function(item,expanded){
		// summary:
		//		Query or set expanded state for an item,
		if(!this.persist){
			return false;
		}
		var id=this.model.getIdentity(item);
		if(arguments.length === 1){
			return this._openedItemIds[id];
		}
		if(expanded){
			this._openedItemIds[id] = true;
		}else{
			delete this._openedItemIds[id];
		}
	},
	_saveState: function(){
		// summary:
		//		Create and save a cookie with the currently expanded nodes identifiers
		if(!this.persist){
			return;
		}
		var ary = [];
		for(var id in this._openedItemIds){
			ary.push(id);
		}
		dojo.cookie(this.cookieName, ary.join(","), {expires:365});
	},

	destroy: function(){
		if(this._curSearch){
			clearTimeout(this._curSearch.timer);
			delete this._curSearch;
		}
		if(this.rootNode){
			this.rootNode.destroyRecursive();
		}
		if(this.dndController && !dojo.isString(this.dndController)){
			this.dndController.destroy();
		}
		this.rootNode = null;
		this.inherited(arguments);
	},

	destroyRecursive: function(){
		// A tree is treated as a leaf, not as a node with children (like a grid),
		// but defining destroyRecursive for back-compat.
		this.destroy();
	},

	resize: function(changeSize){
		if(changeSize){
			dojo.marginBox(this.domNode, changeSize);
		}

		// The only JS sizing involved w/tree is the indentation, which is specified
		// in CSS and read in through this dummy indentDetector node (tree must be
		// visible and attached to the DOM to read this)
		this._nodePixelIndent = dojo._getMarginSize(this.tree.indentDetector).w;

		if(this.tree.rootNode){
			// If tree has already loaded, then reset indent for all the nodes
			this.tree.rootNode.set('indent', this.showRoot ? 0 : -1);
		}
	},

	_createTreeNode: function(/*Object*/ args){
		// summary:
		//		creates a TreeNode
		// description:
		//		Developers can override this method to define their own TreeNode class;
		//		However it will probably be removed in a future release in favor of a way
		//		of just specifying a widget for the label, rather than one that contains
		//		the children too.
		return new dijit._TreeNode(args);
	}
});

// For back-compat.  TODO: remove in 2.0

}

if(!dojo._hasResource["dojo.number"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.number"] = true;
dojo.provide("dojo.number");






dojo.getObject("number", true, dojo);

/*=====
dojo.number = {
	// summary: localized formatting and parsing routines for Number
}

dojo.number.__FormatOptions = function(){
	//	pattern: String?
	//		override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	//		with this string.  Default value is based on locale.  Overriding this property will defeat
	//		localization.  Literal characters in patterns are not supported.
	//	type: String?
	//		choose a format type based on the locale from the following:
	//		decimal, scientific (not yet supported), percent, currency. decimal by default.
	//	places: Number?
	//		fixed number of decimal places to show.  This overrides any
	//		information in the provided pattern.
	//	round: Number?
	//		5 rounds to nearest .5; 0 rounds to nearest whole (default). -1
	//		means do not round.
	//	locale: String?
	//		override the locale used to determine formatting rules
	//	fractional: Boolean?
	//		If false, show no decimal places, overriding places and pattern settings.
	this.pattern = pattern;
	this.type = type;
	this.places = places;
	this.round = round;
	this.locale = locale;
	this.fractional = fractional;
}
=====*/

dojo.number.format = function(/*Number*/value, /*dojo.number.__FormatOptions?*/options){
	// summary:
	//		Format a Number as a String, using locale-specific settings
	// description:
	//		Create a string from a Number using a known localized pattern.
	//		Formatting patterns appropriate to the locale are chosen from the
	//		[Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and
	//		delimiters.
	//		If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.
	// value:
	//		the number to be formatted

	options = dojo.mixin({}, options || {});
	var locale = dojo.i18n.normalizeLocale(options.locale),
		bundle = dojo.i18n.getLocalization("dojo.cldr", "number", locale);
	options.customs = bundle;
	var pattern = options.pattern || bundle[(options.type || "decimal") + "Format"];
	if(isNaN(value) || Math.abs(value) == Infinity){ return null; } // null
	return dojo.number._applyPattern(value, pattern, options); // String
};

//dojo.number._numberPatternRE = /(?:[#0]*,?)*[#0](?:\.0*#*)?/; // not precise, but good enough
dojo.number._numberPatternRE = /[#0,]*[#0](?:\.0*#*)?/; // not precise, but good enough

dojo.number._applyPattern = function(/*Number*/value, /*String*/pattern, /*dojo.number.__FormatOptions?*/options){
	// summary:
	//		Apply pattern to format value as a string using options. Gives no
	//		consideration to local customs.
	// value:
	//		the number to be formatted.
	// pattern:
	//		a pattern string as described by
	//		[unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	// options: dojo.number.__FormatOptions?
	//		_applyPattern is usually called via `dojo.number.format()` which
	//		populates an extra property in the options parameter, "customs".
	//		The customs object specifies group and decimal parameters if set.

	//TODO: support escapes
	options = options || {};
	var group = options.customs.group,
		decimal = options.customs.decimal,
		patternList = pattern.split(';'),
		positivePattern = patternList[0];
	pattern = patternList[(value < 0) ? 1 : 0] || ("-" + positivePattern);

	//TODO: only test against unescaped
	if(pattern.indexOf('%') != -1){
		value *= 100;
	}else if(pattern.indexOf('\u2030') != -1){
		value *= 1000; // per mille
	}else if(pattern.indexOf('\u00a4') != -1){
		group = options.customs.currencyGroup || group;//mixins instead?
		decimal = options.customs.currencyDecimal || decimal;// Should these be mixins instead?
		pattern = pattern.replace(/\u00a4{1,3}/, function(match){
			var prop = ["symbol", "currency", "displayName"][match.length-1];
			return options[prop] || options.currency || "";
		});
	}else if(pattern.indexOf('E') != -1){
		throw new Error("exponential notation not supported");
	}
	
	//TODO: support @ sig figs?
	var numberPatternRE = dojo.number._numberPatternRE;
	var numberPattern = positivePattern.match(numberPatternRE);
	if(!numberPattern){
		throw new Error("unable to find a number expression in pattern: "+pattern);
	}
	if(options.fractional === false){ options.places = 0; }
	return pattern.replace(numberPatternRE,
		dojo.number._formatAbsolute(value, numberPattern[0], {decimal: decimal, group: group, places: options.places, round: options.round}));
};

dojo.number.round = function(/*Number*/value, /*Number?*/places, /*Number?*/increment){
	//	summary:
	//		Rounds to the nearest value with the given number of decimal places, away from zero
	//	description:
	//		Rounds to the nearest value with the given number of decimal places, away from zero if equal.
	//		Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by
	//		fractional increments also, such as the nearest quarter.
	//		NOTE: Subject to floating point errors.  See dojox.math.round for experimental workaround.
	//	value:
	//		The number to round
	//	places:
	//		The number of decimal places where rounding takes place.  Defaults to 0 for whole rounding.
	//		Must be non-negative.
	//	increment:
	//		Rounds next place to nearest value of increment/10.  10 by default.
	//	example:
	//		>>> dojo.number.round(-0.5)
	//		-1
	//		>>> dojo.number.round(162.295, 2)
	//		162.29  // note floating point error.  Should be 162.3
	//		>>> dojo.number.round(10.71, 0, 2.5)
	//		10.75
	var factor = 10 / (increment || 10);
	return (factor * +value).toFixed(places) / factor; // Number
};

if((0.9).toFixed() == 0){
	// (isIE) toFixed() bug workaround: Rounding fails on IE when most significant digit
	// is just after the rounding place and is >=5
	(function(){
		var round = dojo.number.round;
		dojo.number.round = function(v, p, m){
			var d = Math.pow(10, -p || 0), a = Math.abs(v);
			if(!v || a >= d || a * Math.pow(10, p + 1) < 5){
				d = 0;
			}
			return round(v, p, m) + (v > 0 ? d : -d);
		};
	})();
}

/*=====
dojo.number.__FormatAbsoluteOptions = function(){
	//	decimal: String?
	//		the decimal separator
	//	group: String?
	//		the group separator
	//	places: Number?|String?
	//		number of decimal places.  the range "n,m" will format to m places.
	//	round: Number?
	//		5 rounds to nearest .5; 0 rounds to nearest whole (default). -1
	//		means don't round.
	this.decimal = decimal;
	this.group = group;
	this.places = places;
	this.round = round;
}
=====*/

dojo.number._formatAbsolute = function(/*Number*/value, /*String*/pattern, /*dojo.number.__FormatAbsoluteOptions?*/options){
	// summary:
	//		Apply numeric pattern to absolute value using options. Gives no
	//		consideration to local customs.
	// value:
	//		the number to be formatted, ignores sign
	// pattern:
	//		the number portion of a pattern (e.g. `#,##0.00`)
	options = options || {};
	if(options.places === true){options.places=0;}
	if(options.places === Infinity){options.places=6;} // avoid a loop; pick a limit

	var patternParts = pattern.split("."),
		comma = typeof options.places == "string" && options.places.indexOf(","),
		maxPlaces = options.places;
	if(comma){
		maxPlaces = options.places.substring(comma + 1);
	}else if(!(maxPlaces >= 0)){
		maxPlaces = (patternParts[1] || []).length;
	}
	if(!(options.round < 0)){
		value = dojo.number.round(value, maxPlaces, options.round);
	}

	var valueParts = String(Math.abs(value)).split("."),
		fractional = valueParts[1] || "";
	if(patternParts[1] || options.places){
		if(comma){
			options.places = options.places.substring(0, comma);
		}
		// Pad fractional with trailing zeros
		var pad = options.places !== undefined ? options.places : (patternParts[1] && patternParts[1].lastIndexOf("0") + 1);
		if(pad > fractional.length){
			valueParts[1] = dojo.string.pad(fractional, pad, '0', true);
		}

		// Truncate fractional
		if(maxPlaces < fractional.length){
			valueParts[1] = fractional.substr(0, maxPlaces);
		}
	}else{
		if(valueParts[1]){ valueParts.pop(); }
	}

	// Pad whole with leading zeros
	var patternDigits = patternParts[0].replace(',', '');
	pad = patternDigits.indexOf("0");
	if(pad != -1){
		pad = patternDigits.length - pad;
		if(pad > valueParts[0].length){
			valueParts[0] = dojo.string.pad(valueParts[0], pad);
		}

		// Truncate whole
		if(patternDigits.indexOf("#") == -1){
			valueParts[0] = valueParts[0].substr(valueParts[0].length - pad);
		}
	}

	// Add group separators
	var index = patternParts[0].lastIndexOf(','),
		groupSize, groupSize2;
	if(index != -1){
		groupSize = patternParts[0].length - index - 1;
		var remainder = patternParts[0].substr(0, index);
		index = remainder.lastIndexOf(',');
		if(index != -1){
			groupSize2 = remainder.length - index - 1;
		}
	}
	var pieces = [];
	for(var whole = valueParts[0]; whole;){
		var off = whole.length - groupSize;
		pieces.push((off > 0) ? whole.substr(off) : whole);
		whole = (off > 0) ? whole.slice(0, off) : "";
		if(groupSize2){
			groupSize = groupSize2;
			delete groupSize2;
		}
	}
	valueParts[0] = pieces.reverse().join(options.group || ",");

	return valueParts.join(options.decimal || ".");
};

/*=====
dojo.number.__RegexpOptions = function(){
	//	pattern: String?
	//		override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	//		with this string.  Default value is based on locale.  Overriding this property will defeat
	//		localization.
	//	type: String?
	//		choose a format type based on the locale from the following:
	//		decimal, scientific (not yet supported), percent, currency. decimal by default.
	//	locale: String?
	//		override the locale used to determine formatting rules
	//	strict: Boolean?
	//		strict parsing, false by default.  Strict parsing requires input as produced by the format() method.
	//		Non-strict is more permissive, e.g. flexible on white space, omitting thousands separators
	//	places: Number|String?
	//		number of decimal places to accept: Infinity, a positive number, or
	//		a range "n,m".  Defined by pattern or Infinity if pattern not provided.
	this.pattern = pattern;
	this.type = type;
	this.locale = locale;
	this.strict = strict;
	this.places = places;
}
=====*/
dojo.number.regexp = function(/*dojo.number.__RegexpOptions?*/options){
	//	summary:
	//		Builds the regular needed to parse a number
	//	description:
	//		Returns regular expression with positive and negative match, group
	//		and decimal separators
	return dojo.number._parseInfo(options).regexp; // String
};

dojo.number._parseInfo = function(/*Object?*/options){
	options = options || {};
	var locale = dojo.i18n.normalizeLocale(options.locale),
		bundle = dojo.i18n.getLocalization("dojo.cldr", "number", locale),
		pattern = options.pattern || bundle[(options.type || "decimal") + "Format"],
//TODO: memoize?
		group = bundle.group,
		decimal = bundle.decimal,
		factor = 1;

	if(pattern.indexOf('%') != -1){
		factor /= 100;
	}else if(pattern.indexOf('\u2030') != -1){
		factor /= 1000; // per mille
	}else{
		var isCurrency = pattern.indexOf('\u00a4') != -1;
		if(isCurrency){
			group = bundle.currencyGroup || group;
			decimal = bundle.currencyDecimal || decimal;
		}
	}

	//TODO: handle quoted escapes
	var patternList = pattern.split(';');
	if(patternList.length == 1){
		patternList.push("-" + patternList[0]);
	}

	var re = dojo.regexp.buildGroupRE(patternList, function(pattern){
		pattern = "(?:"+dojo.regexp.escapeString(pattern, '.')+")";
		return pattern.replace(dojo.number._numberPatternRE, function(format){
			var flags = {
				signed: false,
				separator: options.strict ? group : [group,""],
				fractional: options.fractional,
				decimal: decimal,
				exponent: false
				},

				parts = format.split('.'),
				places = options.places;

			// special condition for percent (factor != 1)
			// allow decimal places even if not specified in pattern
			if(parts.length == 1 && factor != 1){
			    parts[1] = "###";
			}
			if(parts.length == 1 || places === 0){
				flags.fractional = false;
			}else{
				if(places === undefined){ places = options.pattern ? parts[1].lastIndexOf('0') + 1 : Infinity; }
				if(places && options.fractional == undefined){flags.fractional = true;} // required fractional, unless otherwise specified
				if(!options.places && (places < parts[1].length)){ places += "," + parts[1].length; }
				flags.places = places;
			}
			var groups = parts[0].split(',');
			if(groups.length > 1){
				flags.groupSize = groups.pop().length;
				if(groups.length > 1){
					flags.groupSize2 = groups.pop().length;
				}
			}
			return "("+dojo.number._realNumberRegexp(flags)+")";
		});
	}, true);

	if(isCurrency){
		// substitute the currency symbol for the placeholder in the pattern
		re = re.replace(/([\s\xa0]*)(\u00a4{1,3})([\s\xa0]*)/g, function(match, before, target, after){
			var prop = ["symbol", "currency", "displayName"][target.length-1],
				symbol = dojo.regexp.escapeString(options[prop] || options.currency || "");
			before = before ? "[\\s\\xa0]" : "";
			after = after ? "[\\s\\xa0]" : "";
			if(!options.strict){
				if(before){before += "*";}
				if(after){after += "*";}
				return "(?:"+before+symbol+after+")?";
			}
			return before+symbol+after;
		});
	}

//TODO: substitute localized sign/percent/permille/etc.?

	// normalize whitespace and return
	return {regexp: re.replace(/[\xa0 ]/g, "[\\s\\xa0]"), group: group, decimal: decimal, factor: factor}; // Object
};

/*=====
dojo.number.__ParseOptions = function(){
	//	pattern: String?
	//		override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	//		with this string.  Default value is based on locale.  Overriding this property will defeat
	//		localization.  Literal characters in patterns are not supported.
	//	type: String?
	//		choose a format type based on the locale from the following:
	//		decimal, scientific (not yet supported), percent, currency. decimal by default.
	//	locale: String?
	//		override the locale used to determine formatting rules
	//	strict: Boolean?
	//		strict parsing, false by default.  Strict parsing requires input as produced by the format() method.
	//		Non-strict is more permissive, e.g. flexible on white space, omitting thousands separators
	//	fractional: Boolean?|Array?
	//		Whether to include the fractional portion, where the number of decimal places are implied by pattern
	//		or explicit 'places' parameter.  The value [true,false] makes the fractional portion optional.
	this.pattern = pattern;
	this.type = type;
	this.locale = locale;
	this.strict = strict;
	this.fractional = fractional;
}
=====*/
dojo.number.parse = function(/*String*/expression, /*dojo.number.__ParseOptions?*/options){
	// summary:
	//		Convert a properly formatted string to a primitive Number, using
	//		locale-specific settings.
	// description:
	//		Create a Number from a string using a known localized pattern.
	//		Formatting patterns are chosen appropriate to the locale
	//		and follow the syntax described by
	//		[unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
    	//		Note that literal characters in patterns are not supported.
	// expression:
	//		A string representation of a Number
	var info = dojo.number._parseInfo(options),
		results = (new RegExp("^"+info.regexp+"$")).exec(expression);
	if(!results){
		return NaN; //NaN
	}
	var absoluteMatch = results[1]; // match for the positive expression
	if(!results[1]){
		if(!results[2]){
			return NaN; //NaN
		}
		// matched the negative pattern
		absoluteMatch =results[2];
		info.factor *= -1;
	}

	// Transform it to something Javascript can parse as a number.  Normalize
	// decimal point and strip out group separators or alternate forms of whitespace
	absoluteMatch = absoluteMatch.
		replace(new RegExp("["+info.group + "\\s\\xa0"+"]", "g"), "").
		replace(info.decimal, ".");
	// Adjust for negative sign, percent, etc. as necessary
	return absoluteMatch * info.factor; //Number
};

/*=====
dojo.number.__RealNumberRegexpFlags = function(){
	//	places: Number?
	//		The integer number of decimal places or a range given as "n,m".  If
	//		not given, the decimal part is optional and the number of places is
	//		unlimited.
	//	decimal: String?
	//		A string for the character used as the decimal point.  Default
	//		is ".".
	//	fractional: Boolean?|Array?
	//		Whether decimal places are used.  Can be true, false, or [true,
	//		false].  Default is [true, false] which means optional.
	//	exponent: Boolean?|Array?
	//		Express in exponential notation.  Can be true, false, or [true,
	//		false]. Default is [true, false], (i.e. will match if the
	//		exponential part is present are not).
	//	eSigned: Boolean?|Array?
	//		The leading plus-or-minus sign on the exponent.  Can be true,
	//		false, or [true, false].  Default is [true, false], (i.e. will
	//		match if it is signed or unsigned).  flags in regexp.integer can be
	//		applied.
	this.places = places;
	this.decimal = decimal;
	this.fractional = fractional;
	this.exponent = exponent;
	this.eSigned = eSigned;
}
=====*/

dojo.number._realNumberRegexp = function(/*dojo.number.__RealNumberRegexpFlags?*/flags){
	// summary:
	//		Builds a regular expression to match a real number in exponential
	//		notation

	// assign default values to missing parameters
	flags = flags || {};
	//TODO: use mixin instead?
	if(!("places" in flags)){ flags.places = Infinity; }
	if(typeof flags.decimal != "string"){ flags.decimal = "."; }
	if(!("fractional" in flags) || /^0/.test(flags.places)){ flags.fractional = [true, false]; }
	if(!("exponent" in flags)){ flags.exponent = [true, false]; }
	if(!("eSigned" in flags)){ flags.eSigned = [true, false]; }

	var integerRE = dojo.number._integerRegexp(flags),
		decimalRE = dojo.regexp.buildGroupRE(flags.fractional,
		function(q){
			var re = "";
			if(q && (flags.places!==0)){
				re = "\\" + flags.decimal;
				if(flags.places == Infinity){
					re = "(?:" + re + "\\d+)?";
				}else{
					re += "\\d{" + flags.places + "}";
				}
			}
			return re;
		},
		true
	);

	var exponentRE = dojo.regexp.buildGroupRE(flags.exponent,
		function(q){
			if(q){ return "([eE]" + dojo.number._integerRegexp({ signed: flags.eSigned}) + ")"; }
			return "";
		}
	);

	var realRE = integerRE + decimalRE;
	// allow for decimals without integers, e.g. .25
	if(decimalRE){realRE = "(?:(?:"+ realRE + ")|(?:" + decimalRE + "))";}
	return realRE + exponentRE; // String
};

/*=====
dojo.number.__IntegerRegexpFlags = function(){
	//	signed: Boolean?
	//		The leading plus-or-minus sign. Can be true, false, or `[true,false]`.
	//		Default is `[true, false]`, (i.e. will match if it is signed
	//		or unsigned).
	//	separator: String?
	//		The character used as the thousands separator. Default is no
	//		separator. For more than one symbol use an array, e.g. `[",", ""]`,
	//		makes ',' optional.
	//	groupSize: Number?
	//		group size between separators
	//	groupSize2: Number?
	//		second grouping, where separators 2..n have a different interval than the first separator (for India)
	this.signed = signed;
	this.separator = separator;
	this.groupSize = groupSize;
	this.groupSize2 = groupSize2;
}
=====*/

dojo.number._integerRegexp = function(/*dojo.number.__IntegerRegexpFlags?*/flags){
	// summary:
	//		Builds a regular expression that matches an integer

	// assign default values to missing parameters
	flags = flags || {};
	if(!("signed" in flags)){ flags.signed = [true, false]; }
	if(!("separator" in flags)){
		flags.separator = "";
	}else if(!("groupSize" in flags)){
		flags.groupSize = 3;
	}

	var signRE = dojo.regexp.buildGroupRE(flags.signed,
		function(q){ return q ? "[-+]" : ""; },
		true
	);

	var numberRE = dojo.regexp.buildGroupRE(flags.separator,
		function(sep){
			if(!sep){
				return "(?:\\d+)";
			}

			sep = dojo.regexp.escapeString(sep);
			if(sep == " "){ sep = "\\s"; }
			else if(sep == "\xa0"){ sep = "\\s\\xa0"; }

			var grp = flags.groupSize, grp2 = flags.groupSize2;
			//TODO: should we continue to enforce that numbers with separators begin with 1-9?  See #6933
			if(grp2){
				var grp2RE = "(?:0|[1-9]\\d{0," + (grp2-1) + "}(?:[" + sep + "]\\d{" + grp2 + "})*[" + sep + "]\\d{" + grp + "})";
				return ((grp-grp2) > 0) ? "(?:" + grp2RE + "|(?:0|[1-9]\\d{0," + (grp-1) + "}))" : grp2RE;
			}
			return "(?:0|[1-9]\\d{0," + (grp-1) + "}(?:[" + sep + "]\\d{" + grp + "})*)";
		},
		true
	);

	return signRE + numberRE; // String
};

}

if(!dojo._hasResource["dijit.ProgressBar"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.ProgressBar"] = true;
dojo.provide("dijit.ProgressBar");







dojo.declare("dijit.ProgressBar", [dijit._Widget, dijit._Templated], {
	// summary:
	//		A progress indication widget, showing the amount completed
	//		(often the percentage completed) of a task.
	//
	// example:
	// |	<div dojoType="ProgressBar"
	// |		 places="0"
	// |		 value="..." maximum="...">
	// |	</div>

	// progress: [const] String (Percentage or Number)
	//		Number or percentage indicating amount of task completed.
	// 		Deprecated.   Use "value" instead.
	progress: "0",

	// value: String (Percentage or Number)
	//		Number or percentage indicating amount of task completed.
	// 		With "%": percentage value, 0% <= progress <= 100%, or
	// 		without "%": absolute value, 0 <= progress <= maximum.
	//		Infinity means that the progress bar is indeterminate.
	value: "",

	// maximum: [const] Float
	//		Max sample number
	maximum: 100,

	// places: [const] Number
	//		Number of places to show in values; 0 by default
	places: 0,

	// indeterminate: [const] Boolean
	// 		If false: show progress value (number or percentage).
	// 		If true: show that a process is underway but that the amount completed is unknown.
	// 		Deprecated.   Use "value" instead.
	indeterminate: false,

	// label: String?
	//		Label on progress bar.   Defaults to percentage for determinate progress bar and
	//		blank for indeterminate progress bar.
	label:"",

	// name: String
	//		this is the field name (for a form) if set. This needs to be set if you want to use
	//		this widget in a dijit.form.Form widget (such as dijit.Dialog)
	name: '',

	templateString: dojo.cache("dijit", "templates/ProgressBar.html", "<div class=\"dijitProgressBar dijitProgressBarEmpty\" role=\"progressbar\"\r\n\t><div  dojoAttachPoint=\"internalProgress\" class=\"dijitProgressBarFull\"\r\n\t\t><div class=\"dijitProgressBarTile\" role=\"presentation\"></div\r\n\t\t><span style=\"visibility:hidden\">&nbsp;</span\r\n\t></div\r\n\t><div dojoAttachPoint=\"labelNode\" class=\"dijitProgressBarLabel\" id=\"${id}_label\"></div\r\n\t><img dojoAttachPoint=\"indeterminateHighContrastImage\" class=\"dijitProgressBarIndeterminateHighContrastImage\" alt=\"\"\r\n/></div>\r\n"),

	// _indeterminateHighContrastImagePath: [private] dojo._URL
	//		URL to image to use for indeterminate progress bar when display is in high contrast mode
	_indeterminateHighContrastImagePath:
		dojo.moduleUrl("dijit", "themes/a11y/indeterminate_progress.gif"),

	postMixInProperties: function(){
		this.inherited(arguments);
		if(!("value" in this.params)){
			this.value = this.indeterminate ? Infinity : this.progress;
		}
	},

	buildRendering: function(){
		this.inherited(arguments);
		this.indeterminateHighContrastImage.setAttribute("src",
			this._indeterminateHighContrastImagePath.toString());
		this.update();
	},

	update: function(/*Object?*/attributes){
		// summary:
		//		Internal method to change attributes of ProgressBar, similar to set(hash).  Users should call
		//		set("value", ...) rather than calling this method directly.
		// attributes:
		//		May provide progress and/or maximum properties on this parameter;
		//		see attribute specs for details.
		// example:
		//	|	myProgressBar.update({'indeterminate': true});
		//	|	myProgressBar.update({'progress': 80});
		//	|	myProgressBar.update({'indeterminate': true, label:"Loading ..." })
		// tags:
		//		private

		// TODO: deprecate this method and use set() instead

		dojo.mixin(this, attributes || {});
		var tip = this.internalProgress, ap = this.domNode;
		var percent = 1;
		if(this.indeterminate){
			dijit.removeWaiState(ap, "valuenow");
			dijit.removeWaiState(ap, "valuemin");
			dijit.removeWaiState(ap, "valuemax");
		}else{
			if(String(this.progress).indexOf("%") != -1){
				percent = Math.min(parseFloat(this.progress)/100, 1);
				this.progress = percent * this.maximum;
			}else{
				this.progress = Math.min(this.progress, this.maximum);
				percent = this.progress / this.maximum;
			}

			dijit.setWaiState(ap, "describedby", this.labelNode.id);
			dijit.setWaiState(ap, "valuenow", this.progress);
			dijit.setWaiState(ap, "valuemin", 0);
			dijit.setWaiState(ap, "valuemax", this.maximum);
		}
		this.labelNode.innerHTML = this.report(percent);

		dojo.toggleClass(this.domNode, "dijitProgressBarIndeterminate", this.indeterminate);
		tip.style.width = (percent * 100) + "%";
		this.onChange();
	},

	_setValueAttr: function(v){
		this._set("value", v);
		if(v == Infinity){
			this.update({indeterminate:true});
		}else{
			this.update({indeterminate:false, progress:v});
		}
	},

	_setLabelAttr: function(label){
		this._set("label", label);
		this.update();
	},

	_setIndeterminateAttr: function(indeterminate){
		// Deprecated, use set("value", ...) instead
		this.indeterminate = indeterminate;
		this.update();
	},

	report: function(/*float*/percent){
		// summary:
		//		Generates message to show inside progress bar (normally indicating amount of task completed).
		//		May be overridden.
		// tags:
		//		extension

		return this.label ? this.label :
				(this.indeterminate ? "&nbsp;" : dojo.number.format(percent, { type: "percent", places: this.places, locale: this.lang }));
	},

	onChange: function(){
		// summary:
		//		Callback fired when progress updates.
		// tags:
		//		extension
	}
});

}

if(!dojo._hasResource["dijit.form.Form"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.Form"] = true;
dojo.provide("dijit.form.Form");







dojo.declare(
	"dijit.form.Form",
	[dijit._Widget, dijit._Templated, dijit.form._FormMixin, dijit.layout._ContentPaneResizeMixin],
	{
		// summary:
		//		Widget corresponding to HTML form tag, for validation and serialization
		//
		// example:
		//	|	<form dojoType="dijit.form.Form" id="myForm">
		//	|		Name: <input type="text" name="name" />
		//	|	</form>
		//	|	myObj = {name: "John Doe"};
		//	|	dijit.byId('myForm').set('value', myObj);
		//	|
		//	|	myObj=dijit.byId('myForm').get('value');

		// HTML <FORM> attributes

		// name: String?
		//		Name of form for scripting.
		name: "",

		// action: String?
		//		Server-side form handler.
		action: "",

		// method: String?
		//		HTTP method used to submit the form, either "GET" or "POST".
		method: "",

		// encType: String?
		//		Encoding type for the form, ex: application/x-www-form-urlencoded.
		encType: "",

		// accept-charset: String?
		//		List of supported charsets.
		"accept-charset": "",

		// accept: String?
		//		List of MIME types for file upload.
		accept: "",

		// target: String?
		//		Target frame for the document to be opened in.
		target: "",

		templateString: "<form dojoAttachPoint='containerNode' dojoAttachEvent='onreset:_onReset,onsubmit:_onSubmit' ${!nameAttrSetting}></form>",

		attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
			action: "",
			method: "",
			encType: "",
			"accept-charset": "",
			accept: "",
			target: ""
		}),

		postMixInProperties: function(){
			// Setup name=foo string to be referenced from the template (but only if a name has been specified)
			// Unfortunately we can't use attributeMap to set the name due to IE limitations, see #8660
			this.nameAttrSetting = this.name ? ("name='" + this.name + "'") : "";
			this.inherited(arguments);
		},

		execute: function(/*Object*/ formContents){
			// summary:
			//		Deprecated: use submit()
			// tags:
			//		deprecated
		},

		onExecute: function(){
			// summary:
			//		Deprecated: use onSubmit()
			// tags:
			//		deprecated
		},

		_setEncTypeAttr: function(/*String*/ value){
			this.encType = value;
			dojo.attr(this.domNode, "encType", value);
			if(dojo.isIE){ this.domNode.encoding = value; }
		},

		postCreate: function(){
			// IE tries to hide encType
			// TODO: remove in 2.0, no longer necessary with data-dojo-params
			if(dojo.isIE && this.srcNodeRef && this.srcNodeRef.attributes){
				var item = this.srcNodeRef.attributes.getNamedItem('encType');
				if(item && !item.specified && (typeof item.value == "string")){
					this.set('encType', item.value);
				}
			}
			this.inherited(arguments);
		},

		reset: function(/*Event?*/ e){
			// summary:
			//		restores all widget values back to their init values,
			//		calls onReset() which can cancel the reset by returning false

			// create fake event so we can know if preventDefault() is called
			var faux = {
				returnValue: true, // the IE way
				preventDefault: function(){ // not IE
							this.returnValue = false;
						},
				stopPropagation: function(){},
				currentTarget: e ? e.target : this.domNode,
				target: e ? e.target : this.domNode
			};
			// if return value is not exactly false, and haven't called preventDefault(), then reset
			if(!(this.onReset(faux) === false) && faux.returnValue){
				this.inherited(arguments, []);
			}
		},

		onReset: function(/*Event?*/ e){
			// summary:
			//		Callback when user resets the form. This method is intended
			//		to be over-ridden. When the `reset` method is called
			//		programmatically, the return value from `onReset` is used
			//		to compute whether or not resetting should proceed
			// tags:
			//		callback
			return true; // Boolean
		},

		_onReset: function(e){
			this.reset(e);
			dojo.stopEvent(e);
			return false;
		},

		_onSubmit: function(e){
			var fp = dijit.form.Form.prototype;
			// TODO: remove this if statement beginning with 2.0
			if(this.execute != fp.execute || this.onExecute != fp.onExecute){
				dojo.deprecated("dijit.form.Form:execute()/onExecute() are deprecated. Use onSubmit() instead.", "", "2.0");
				this.onExecute();
				this.execute(this.getValues());
			}
			if(this.onSubmit(e) === false){ // only exactly false stops submit
				dojo.stopEvent(e);
			}
		},

		onSubmit: function(/*Event?*/ e){
			// summary:
			//		Callback when user submits the form.
			// description:
			//		This method is intended to be over-ridden, but by default it checks and
			//		returns the validity of form elements. When the `submit`
			//		method is called programmatically, the return value from
			//		`onSubmit` is used to compute whether or not submission
			//		should proceed
			// tags:
			//		extension

			return this.isValid(); // Boolean
		},

		submit: function(){
			// summary:
			//		programmatically submit form if and only if the `onSubmit` returns true
			if(!(this.onSubmit() === false)){
				this.containerNode.submit();
			}
		}
	}
);

}

if(!dojo._hasResource["dijit.form.TextBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.TextBox"] = true;
dojo.provide("dijit.form.TextBox");




dojo.declare(
	"dijit.form.TextBox",
	dijit.form._FormValueWidget,
	{
		// summary:
		//		A base class for textbox form inputs

		// trim: Boolean
		//		Removes leading and trailing whitespace if true.  Default is false.
		trim: false,

		// uppercase: Boolean
		//		Converts all characters to uppercase if true.  Default is false.
		uppercase: false,

		// lowercase: Boolean
		//		Converts all characters to lowercase if true.  Default is false.
		lowercase: false,

		// propercase: Boolean
		//		Converts the first character of each word to uppercase if true.
		propercase: false,

		// maxLength: String
		//		HTML INPUT tag maxLength declaration.
		maxLength: "",

		// selectOnClick: [const] Boolean
		//		If true, all text will be selected when focused with mouse
		selectOnClick: false,

		// placeHolder: String
		//		Defines a hint to help users fill out the input field (as defined in HTML 5).
		//		This should only contain plain text (no html markup).
		placeHolder: "",
		
		templateString: dojo.cache("dijit.form", "templates/TextBox.html", "<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class=\"dijitReset dijitInputInner\" dojoAttachPoint='textbox,focusNode' autocomplete=\"off\"\r\n\t\t\t${!nameAttrSetting} type='${type}'\r\n\t/></div\r\n></div>\r\n"),
		_singleNodeTemplate: '<input class="dijit dijitReset dijitLeft dijitInputField" dojoAttachPoint="textbox,focusNode" autocomplete="off" type="${type}" ${!nameAttrSetting} />',

		_buttonInputDisabled: dojo.isIE ? "disabled" : "", // allows IE to disallow focus, but Firefox cannot be disabled for mousedown events

		baseClass: "dijitTextBox",

		attributeMap: dojo.delegate(dijit.form._FormValueWidget.prototype.attributeMap, {
			maxLength: "focusNode"
		}),
		
		postMixInProperties: function(){
			var type = this.type.toLowerCase();
			if(this.templateString && this.templateString.toLowerCase() == "input" || ((type == "hidden" || type == "file") && this.templateString == dijit.form.TextBox.prototype.templateString)){
				this.templateString = this._singleNodeTemplate;
			}
			this.inherited(arguments);
		},

		_setPlaceHolderAttr: function(v){
			this._set("placeHolder", v);
			if(!this._phspan){
				this._attachPoints.push('_phspan');
				/* dijitInputField class gives placeHolder same padding as the input field
				 * parent node already has dijitInputField class but it doesn't affect this <span>
				 * since it's position: absolute.
				 */
				this._phspan = dojo.create('span',{className:'dijitPlaceHolder dijitInputField'},this.textbox,'after');
			}
			this._phspan.innerHTML="";
			this._phspan.appendChild(document.createTextNode(v));
			
			this._updatePlaceHolder();
		},
		
		_updatePlaceHolder: function(){
			if(this._phspan){
				this._phspan.style.display=(this.placeHolder&&!this._focused&&!this.textbox.value)?"":"none";
			}
		},

		_getValueAttr: function(){
			// summary:
			//		Hook so get('value') works as we like.
			// description:
			//		For `dijit.form.TextBox` this basically returns the value of the <input>.
			//
			//		For `dijit.form.MappedTextBox` subclasses, which have both
			//		a "displayed value" and a separate "submit value",
			//		This treats the "displayed value" as the master value, computing the
			//		submit value from it via this.parse().
			return this.parse(this.get('displayedValue'), this.constraints);
		},

		_setValueAttr: function(value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue){
			// summary:
			//		Hook so set('value', ...) works.
			//
			// description:
			//		Sets the value of the widget to "value" which can be of
			//		any type as determined by the widget.
			//
			// value:
			//		The visual element value is also set to a corresponding,
			//		but not necessarily the same, value.
			//
			// formattedValue:
			//		If specified, used to set the visual element value,
			//		otherwise a computed visual value is used.
			//
			// priorityChange:
			//		If true, an onChange event is fired immediately instead of
			//		waiting for the next blur event.

			var filteredValue;
			if(value !== undefined){
				// TODO: this is calling filter() on both the display value and the actual value.
				// I added a comment to the filter() definition about this, but it should be changed.
				filteredValue = this.filter(value);
				if(typeof formattedValue != "string"){
					if(filteredValue !== null && ((typeof filteredValue != "number") || !isNaN(filteredValue))){
						formattedValue = this.filter(this.format(filteredValue, this.constraints));
					}else{ formattedValue = ''; }
				}
			}
			if(formattedValue != null && formattedValue != undefined && ((typeof formattedValue) != "number" || !isNaN(formattedValue)) && this.textbox.value != formattedValue){
				this.textbox.value = formattedValue;
				this._set("displayedValue", this.get("displayedValue"));
			}

			this._updatePlaceHolder();

			this.inherited(arguments, [filteredValue, priorityChange]);
		},

		// displayedValue: String
		//		For subclasses like ComboBox where the displayed value
		//		(ex: Kentucky) and the serialized value (ex: KY) are different,
		//		this represents the displayed value.
		//
		//		Setting 'displayedValue' through set('displayedValue', ...)
		//		updates 'value', and vice-versa.  Otherwise 'value' is updated
		//		from 'displayedValue' periodically, like onBlur etc.
		//
		//		TODO: move declaration to MappedTextBox?
		//		Problem is that ComboBox references displayedValue,
		//		for benefit of FilteringSelect.
		displayedValue: "",

		getDisplayedValue: function(){
			// summary:
			//		Deprecated.  Use get('displayedValue') instead.
			// tags:
			//		deprecated
			dojo.deprecated(this.declaredClass+"::getDisplayedValue() is deprecated. Use set('displayedValue') instead.", "", "2.0");
			return this.get('displayedValue');
		},

		_getDisplayedValueAttr: function(){
			// summary:
			//		Hook so get('displayedValue') works.
			// description:
			//		Returns the displayed value (what the user sees on the screen),
			// 		after filtering (ie, trimming spaces etc.).
			//
			//		For some subclasses of TextBox (like ComboBox), the displayed value
			//		is different from the serialized value that's actually
			//		sent to the server (see dijit.form.ValidationTextBox.serialize)

			// TODO: maybe we should update this.displayedValue on every keystroke so that we don't need
			// this method
			// TODO: this isn't really the displayed value when the user is typing
			return this.filter(this.textbox.value);
		},

		setDisplayedValue: function(/*String*/ value){
			// summary:
			//		Deprecated.  Use set('displayedValue', ...) instead.
			// tags:
			//		deprecated
			dojo.deprecated(this.declaredClass+"::setDisplayedValue() is deprecated. Use set('displayedValue', ...) instead.", "", "2.0");
			this.set('displayedValue', value);
		},

		_setDisplayedValueAttr: function(/*String*/ value){
			// summary:
			//		Hook so set('displayedValue', ...) works.
			// description:
			//		Sets the value of the visual element to the string "value".
			//		The widget value is also set to a corresponding,
			//		but not necessarily the same, value.

			if(value === null || value === undefined){ value = '' }
			else if(typeof value != "string"){ value = String(value) }

			this.textbox.value = value;

			// sets the serialized value to something corresponding to specified displayedValue
			// (if possible), and also updates the textbox.value, for example converting "123"
			// to "123.00"
			this._setValueAttr(this.get('value'), undefined);

			this._set("displayedValue", this.get('displayedValue'));
		},

		format: function(/*String*/ value, /*Object*/ constraints){
			// summary:
			//		Replacable function to convert a value to a properly formatted string.
			// tags:
			//		protected extension
			return ((value == null || value == undefined) ? "" : (value.toString ? value.toString() : value));
		},

		parse: function(/*String*/ value, /*Object*/ constraints){
			// summary:
			//		Replacable function to convert a formatted string to a value
			// tags:
			//		protected extension

			return value;	// String
		},

		_refreshState: function(){
			// summary:
			//		After the user types some characters, etc., this method is
			//		called to check the field for validity etc.  The base method
			//		in `dijit.form.TextBox` does nothing, but subclasses override.
			// tags:
			//		protected
		},

		_onInput: function(e){
			if(e && e.type && /key/i.test(e.type) && e.keyCode){
				switch(e.keyCode){
					case dojo.keys.SHIFT:
					case dojo.keys.ALT:
					case dojo.keys.CTRL:
					case dojo.keys.TAB:
						return;
				}
			}
			if(this.intermediateChanges){
				var _this = this;
				// the setTimeout allows the key to post to the widget input box
				setTimeout(function(){ _this._handleOnChange(_this.get('value'), false); }, 0);
			}
			this._refreshState();

			// In case someone is watch()'ing for changes to displayedValue
			this._set("displayedValue", this.get("displayedValue"));
		},

		postCreate: function(){
			if(dojo.isIE){ // IE INPUT tag fontFamily has to be set directly using STYLE
				// the setTimeout gives IE a chance to render the TextBox and to deal with font inheritance
				setTimeout(dojo.hitch(this, function(){
				var s = dojo.getComputedStyle(this.domNode);
				if(s){
					var ff = s.fontFamily;
					if(ff){
						var inputs = this.domNode.getElementsByTagName("INPUT");
						if(inputs){
							for(var i=0; i < inputs.length; i++){
								inputs[i].style.fontFamily = ff;
							}
						}
					}
				}
				}), 0);
			}

			// setting the value here is needed since value="" in the template causes "undefined"
			// and setting in the DOM (instead of the JS object) helps with form reset actions
			this.textbox.setAttribute("value", this.textbox.value); // DOM and JS values should be the same

			this.inherited(arguments);

			if(dojo.isMoz || dojo.isOpera){
				this.connect(this.textbox, "oninput", "_onInput");
			}else{
				this.connect(this.textbox, "onkeydown", "_onInput");
				this.connect(this.textbox, "onkeyup", "_onInput");
				this.connect(this.textbox, "onpaste", "_onInput");
				this.connect(this.textbox, "oncut", "_onInput");
			}
		},

		_blankValue: '', // if the textbox is blank, what value should be reported
		filter: function(val){
			// summary:
			//		Auto-corrections (such as trimming) that are applied to textbox
			//		value on blur or form submit.
			// description:
			//		For MappedTextBox subclasses, this is called twice
			// 			- once with the display value
			//			- once the value as set/returned by set('value', ...)
			//		and get('value'), ex: a Number for NumberTextBox.
			//
			//		In the latter case it does corrections like converting null to NaN.  In
			//		the former case the NumberTextBox.filter() method calls this.inherited()
			//		to execute standard trimming code in TextBox.filter().
			//
			//		TODO: break this into two methods in 2.0
			//
			// tags:
			//		protected extension
			if(val === null){ return this._blankValue; }
			if(typeof val != "string"){ return val; }
			if(this.trim){
				val = dojo.trim(val);
			}
			if(this.uppercase){
				val = val.toUpperCase();
			}
			if(this.lowercase){
				val = val.toLowerCase();
			}
			if(this.propercase){
				val = val.replace(/[^\s]+/g, function(word){
					return word.substring(0,1).toUpperCase() + word.substring(1);
				});
			}
			return val;
		},

		_setBlurValue: function(){
			this._setValueAttr(this.get('value'), true);
		},

		_onBlur: function(e){
			if(this.disabled){ return; }
			this._setBlurValue();
			this.inherited(arguments);

			if(this._selectOnClickHandle){
				this.disconnect(this._selectOnClickHandle);
			}
			if(this.selectOnClick && dojo.isMoz){
				this.textbox.selectionStart = this.textbox.selectionEnd = undefined; // clear selection so that the next mouse click doesn't reselect
			}
			
			this._updatePlaceHolder();
		},

		_onFocus: function(/*String*/ by){
			if(this.disabled || this.readOnly){ return; }

			// Select all text on focus via click if nothing already selected.
			// Since mouse-up will clear the selection need to defer selection until after mouse-up.
			// Don't do anything on focus by tabbing into the widget since there's no associated mouse-up event.
			if(this.selectOnClick && by == "mouse"){
				this._selectOnClickHandle = this.connect(this.domNode, "onmouseup", function(){
					// Only select all text on first click; otherwise users would have no way to clear
					// the selection.
					this.disconnect(this._selectOnClickHandle);

					// Check if the user selected some text manually (mouse-down, mouse-move, mouse-up)
					// and if not, then select all the text
					var textIsNotSelected;
					if(dojo.isIE){
						var range = dojo.doc.selection.createRange();
						var parent = range.parentElement();
						textIsNotSelected = parent == this.textbox && range.text.length == 0;
					}else{
						textIsNotSelected = this.textbox.selectionStart == this.textbox.selectionEnd;
					}
					if(textIsNotSelected){
						dijit.selectInputText(this.textbox);
					}
				});
			}

			this._updatePlaceHolder();
			
			// call this.inherited() before refreshState(), since this.inherited() will possibly scroll the viewport
			// (to scroll the TextBox into view), which will affect how _refreshState() positions the tooltip
			this.inherited(arguments);

			this._refreshState();
		},

		reset: function(){
			// Overrides dijit._FormWidget.reset().
			// Additionally resets the displayed textbox value to ''
			this.textbox.value = '';
			this.inherited(arguments);
		}
	}
);

dijit.selectInputText = function(/*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop){
	// summary:
	//		Select text in the input element argument, from start (default 0), to stop (default end).

	// TODO: use functions in _editor/selection.js?
	var _window = dojo.global;
	var _document = dojo.doc;
	element = dojo.byId(element);
	if(isNaN(start)){ start = 0; }
	if(isNaN(stop)){ stop = element.value ? element.value.length : 0; }
	dijit.focus(element);
	if(_document["selection"] && dojo.body()["createTextRange"]){ // IE
		if(element.createTextRange){
			var r = element.createTextRange();
			r.collapse(true);
			r.moveStart("character", -99999); // move to 0
			r.moveStart("character", start); // delta from 0 is the correct position
			r.moveEnd("character", stop-start);
			r.select();
		}
	}else if(_window["getSelection"]){
		if(element.setSelectionRange){
			element.setSelectionRange(start, stop);
		}
	}
};

}

if(!dojo._hasResource["dijit.Tooltip"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.Tooltip"] = true;
dojo.provide("dijit.Tooltip");





dojo.declare(
	"dijit._MasterTooltip",
	[dijit._Widget, dijit._Templated],
	{
		// summary:
		//		Internal widget that holds the actual tooltip markup,
		//		which occurs once per page.
		//		Called by Tooltip widgets which are just containers to hold
		//		the markup
		// tags:
		//		protected

		// duration: Integer
		//		Milliseconds to fade in/fade out
		duration: dijit.defaultDuration,

		templateString: dojo.cache("dijit", "templates/Tooltip.html", "<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\"\r\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" dojoAttachPoint=\"containerNode\" role='alert'></div\r\n\t><div class=\"dijitTooltipConnector\" dojoAttachPoint=\"connectorNode\"></div\r\n></div>\r\n"),

		postCreate: function(){
			dojo.body().appendChild(this.domNode);

			this.bgIframe = new dijit.BackgroundIframe(this.domNode);

			// Setup fade-in and fade-out functions.
			this.fadeIn = dojo.fadeIn({ node: this.domNode, duration: this.duration, onEnd: dojo.hitch(this, "_onShow") });
			this.fadeOut = dojo.fadeOut({ node: this.domNode, duration: this.duration, onEnd: dojo.hitch(this, "_onHide") });
		},

		show: function(/*String*/ innerHTML, /*DomNode*/ aroundNode, /*String[]?*/ position, /*Boolean*/ rtl){
			// summary:
			//		Display tooltip w/specified contents to right of specified node
			//		(To left if there's no space on the right, or if rtl == true)

			if(this.aroundNode && this.aroundNode === aroundNode){
				return;
			}

			// reset width; it may have been set by orient() on a previous tooltip show()
			this.domNode.width = "auto";

			if(this.fadeOut.status() == "playing"){
				// previous tooltip is being hidden; wait until the hide completes then show new one
				this._onDeck=arguments;
				return;
			}
			this.containerNode.innerHTML=innerHTML;

			var pos = dijit.placeOnScreenAroundElement(this.domNode, aroundNode, dijit.getPopupAroundAlignment((position && position.length) ? position : dijit.Tooltip.defaultPosition, !rtl), dojo.hitch(this, "orient"));

			// show it
			dojo.style(this.domNode, "opacity", 0);
			this.fadeIn.play();
			this.isShowingNow = true;
			this.aroundNode = aroundNode;
		},

		orient: function(/*DomNode*/ node, /*String*/ aroundCorner, /*String*/ tooltipCorner, /*Object*/ spaceAvailable, /*Object*/ aroundNodeCoords){
			// summary:
			//		Private function to set CSS for tooltip node based on which position it's in.
			//		This is called by the dijit popup code.   It will also reduce the tooltip's
			//		width to whatever width is available
			// tags:
			//		protected
			this.connectorNode.style.top = ""; //reset to default
			
			//Adjust the spaceAvailable width, without changing the spaceAvailable object
			var tooltipSpaceAvaliableWidth = spaceAvailable.w - this.connectorNode.offsetWidth;

			node.className = "dijitTooltip " +
				{
					"BL-TL": "dijitTooltipBelow dijitTooltipABLeft",
					"TL-BL": "dijitTooltipAbove dijitTooltipABLeft",
					"BR-TR": "dijitTooltipBelow dijitTooltipABRight",
					"TR-BR": "dijitTooltipAbove dijitTooltipABRight",
					"BR-BL": "dijitTooltipRight",
					"BL-BR": "dijitTooltipLeft"
				}[aroundCorner + "-" + tooltipCorner];
				
			// reduce tooltip's width to the amount of width available, so that it doesn't overflow screen
			this.domNode.style.width = "auto";
			var size = dojo.contentBox(this.domNode);
			
			var width = Math.min((Math.max(tooltipSpaceAvaliableWidth,1)), size.w);
			var widthWasReduced = width < size.w;
			
			this.domNode.style.width = width+"px";
						
			//Adjust width for tooltips that have a really long word or a nowrap setting
			if(widthWasReduced){
				this.containerNode.style.overflow = "auto"; //temp change to overflow to detect if our tooltip needs to be wider to support the content
				var scrollWidth = this.containerNode.scrollWidth;
				this.containerNode.style.overflow = "visible"; //change it back
				if(scrollWidth > width){
					scrollWidth = scrollWidth + dojo.style(this.domNode,"paddingLeft") + dojo.style(this.domNode,"paddingRight");
					this.domNode.style.width = scrollWidth + "px";
				}
			}
			
			// Reposition the tooltip connector.
			if(tooltipCorner.charAt(0) == 'B' && aroundCorner.charAt(0) == 'B'){
				var mb = dojo.marginBox(node);
				var tooltipConnectorHeight = this.connectorNode.offsetHeight;
				if(mb.h > spaceAvailable.h){
					// The tooltip starts at the top of the page and will extend past the aroundNode
					var aroundNodePlacement = spaceAvailable.h - (aroundNodeCoords.h / 2) - (tooltipConnectorHeight / 2);
					this.connectorNode.style.top = aroundNodePlacement + "px";
					this.connectorNode.style.bottom = "";
				}else{
					// Align center of connector with center of aroundNode, except don't let bottom
					// of connector extend below bottom of tooltip content, or top of connector
					// extend past top of tooltip content
					this.connectorNode.style.bottom = Math.min(
						Math.max(aroundNodeCoords.h/2 - tooltipConnectorHeight/2, 0),
						mb.h - tooltipConnectorHeight) + "px";
					this.connectorNode.style.top = "";
				}
			}else{
				// reset the tooltip back to the defaults
				this.connectorNode.style.top = "";
				this.connectorNode.style.bottom = "";
			}
			
			return Math.max(0, size.w - tooltipSpaceAvaliableWidth);
		},

		_onShow: function(){
			// summary:
			//		Called at end of fade-in operation
			// tags:
			//		protected
			if(dojo.isIE){
				// the arrow won't show up on a node w/an opacity filter
				this.domNode.style.filter="";
			}
		},

		hide: function(aroundNode){
			// summary:
			//		Hide the tooltip

			if(this._onDeck && this._onDeck[1] == aroundNode){
				// this hide request is for a show() that hasn't even started yet;
				// just cancel the pending show()
				this._onDeck=null;
			}else if(this.aroundNode === aroundNode){
				// this hide request is for the currently displayed tooltip
				this.fadeIn.stop();
				this.isShowingNow = false;
				this.aroundNode = null;
				this.fadeOut.play();
			}else{
				// just ignore the call, it's for a tooltip that has already been erased
			}
		},

		_onHide: function(){
			// summary:
			//		Called at end of fade-out operation
			// tags:
			//		protected

			this.domNode.style.cssText="";	// to position offscreen again
			this.containerNode.innerHTML="";
			if(this._onDeck){
				// a show request has been queued up; do it now
				this.show.apply(this, this._onDeck);
				this._onDeck=null;
			}
		}

	}
);

dijit.showTooltip = function(/*String*/ innerHTML, /*DomNode*/ aroundNode, /*String[]?*/ position, /*Boolean*/ rtl){
	// summary:
	//		Display tooltip w/specified contents in specified position.
	//		See description of dijit.Tooltip.defaultPosition for details on position parameter.
	//		If position is not specified then dijit.Tooltip.defaultPosition is used.
	if(!dijit._masterTT){ dijit._masterTT = new dijit._MasterTooltip(); }
	return dijit._masterTT.show(innerHTML, aroundNode, position, rtl);
};

dijit.hideTooltip = function(aroundNode){
	// summary:
	//		Hide the tooltip
	if(!dijit._masterTT){ dijit._masterTT = new dijit._MasterTooltip(); }
	return dijit._masterTT.hide(aroundNode);
};

dojo.declare(
	"dijit.Tooltip",
	dijit._Widget,
	{
		// summary:
		//		Pops up a tooltip (a help message) when you hover over a node.

		// label: String
		//		Text to display in the tooltip.
		//		Specified as innerHTML when creating the widget from markup.
		label: "",

		// showDelay: Integer
		//		Number of milliseconds to wait after hovering over/focusing on the object, before
		//		the tooltip is displayed.
		showDelay: 400,

		// connectId: String|String[]
		//		Id of domNode(s) to attach the tooltip to.
		//		When user hovers over specified dom node, the tooltip will appear.
		connectId: [],

		// position: String[]
		//		See description of `dijit.Tooltip.defaultPosition` for details on position parameter.
		position: [],

		_setConnectIdAttr: function(/*String*/ newId){
			// summary:
			//		Connect to node(s) (specified by id)

			// Remove connections to old nodes (if there are any)
			dojo.forEach(this._connections || [], function(nested){
				dojo.forEach(nested, dojo.hitch(this, "disconnect"));
			}, this);

			// Make connections to nodes in newIds.
			var ary = dojo.isArrayLike(newId) ? newId : (newId ? [newId] : []);
			this._connections = dojo.map(ary, function(id){
				var node = dojo.byId(id);
				return node ? [
					this.connect(node, "onmouseenter", "_onTargetMouseEnter"),
					this.connect(node, "onmouseleave", "_onTargetMouseLeave"),
					this.connect(node, "onfocus", "_onTargetFocus"),
					this.connect(node, "onblur", "_onTargetBlur")
				] : [];
			}, this);
	
			this._set("connectId", newId);

			this._connectIds = ary;	// save as array
		},

		addTarget: function(/*DOMNODE || String*/ node){
			// summary:
			//		Attach tooltip to specified node if it's not already connected

			// TODO: remove in 2.0 and just use set("connectId", ...) interface

			var id = node.id || node;
			if(dojo.indexOf(this._connectIds, id) == -1){
				this.set("connectId", this._connectIds.concat(id));
			}
		},

		removeTarget: function(/*DOMNODE || String*/ node){
			// summary:
			//		Detach tooltip from specified node

			// TODO: remove in 2.0 and just use set("connectId", ...) interface
			
			var id = node.id || node,	// map from DOMNode back to plain id string
				idx = dojo.indexOf(this._connectIds, id);
			if(idx >= 0){
				// remove id (modifies original this._connectIds but that's OK in this case)
				this._connectIds.splice(idx, 1);
				this.set("connectId", this._connectIds);
			}
		},

		buildRendering: function(){
			this.inherited(arguments);
			dojo.addClass(this.domNode,"dijitTooltipData");
		},

		startup: function(){
			this.inherited(arguments);

			// If this tooltip was created in a template, or for some other reason the specified connectId[s]
			// didn't exist during the widget's initialization, then connect now.
			var ids = this.connectId;
			dojo.forEach(dojo.isArrayLike(ids) ? ids : [ids], this.addTarget, this);
		},

		_onTargetMouseEnter: function(/*Event*/ e){
			// summary:
			//		Handler for mouseenter event on the target node
			// tags:
			//		private
			this._onHover(e);
		},

		_onTargetMouseLeave: function(/*Event*/ e){
			// summary:
			//		Handler for mouseleave event on the target node
			// tags:
			//		private
			this._onUnHover(e);
		},

		_onTargetFocus: function(/*Event*/ e){
			// summary:
			//		Handler for focus event on the target node
			// tags:
			//		private

			this._focus = true;
			this._onHover(e);
		},

		_onTargetBlur: function(/*Event*/ e){
			// summary:
			//		Handler for blur event on the target node
			// tags:
			//		private

			this._focus = false;
			this._onUnHover(e);
		},

		_onHover: function(/*Event*/ e){
			// summary:
			//		Despite the name of this method, it actually handles both hover and focus
			//		events on the target node, setting a timer to show the tooltip.
			// tags:
			//		private
			if(!this._showTimer){
				var target = e.target;
				this._showTimer = setTimeout(dojo.hitch(this, function(){this.open(target)}), this.showDelay);
			}
		},

		_onUnHover: function(/*Event*/ e){
			// summary:
			//		Despite the name of this method, it actually handles both mouseleave and blur
			//		events on the target node, hiding the tooltip.
			// tags:
			//		private

			// keep a tooltip open if the associated element still has focus (even though the
			// mouse moved away)
			if(this._focus){ return; }

			if(this._showTimer){
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
			this.close();
		},

		open: function(/*DomNode*/ target){
 			// summary:
			//		Display the tooltip; usually not called directly.
			// tags:
			//		private

			if(this._showTimer){
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
			dijit.showTooltip(this.label || this.domNode.innerHTML, target, this.position, !this.isLeftToRight());

			this._connectNode = target;
			this.onShow(target, this.position);
		},

		close: function(){
			// summary:
			//		Hide the tooltip or cancel timer for show of tooltip
			// tags:
			//		private

			if(this._connectNode){
				// if tooltip is currently shown
				dijit.hideTooltip(this._connectNode);
				delete this._connectNode;
				this.onHide();
			}
			if(this._showTimer){
				// if tooltip is scheduled to be shown (after a brief delay)
				clearTimeout(this._showTimer);
				delete this._showTimer;
			}
		},

		onShow: function(target, position){
			// summary:
			//		Called when the tooltip is shown
			// tags:
			//		callback
		},

		onHide: function(){
			// summary:
			//		Called when the tooltip is hidden
			// tags:
			//		callback
		},

		uninitialize: function(){
			this.close();
			this.inherited(arguments);
		}
	}
);

// dijit.Tooltip.defaultPosition: String[]
//		This variable controls the position of tooltips, if the position is not specified to
//		the Tooltip widget or *TextBox widget itself.  It's an array of strings with the following values:
//
//			* before: places tooltip to the left of the target node/widget, or to the right in
//			  the case of RTL scripts like Hebrew and Arabic
//			* after: places tooltip to the right of the target node/widget, or to the left in
//			  the case of RTL scripts like Hebrew and Arabic
//			* above: tooltip goes above target node
//			* below: tooltip goes below target node
//
//		The list is positions is tried, in order, until a position is found where the tooltip fits
//		within the viewport.
//
//		Be careful setting this parameter.  A value of "above" may work fine until the user scrolls
//		the screen so that there's no room above the target node.   Nodes with drop downs, like
//		DropDownButton or FilteringSelect, are especially problematic, in that you need to be sure
//		that the drop down and tooltip don't overlap, even when the viewport is scrolled so that there
//		is only room below (or above) the target node, but not both.
dijit.Tooltip.defaultPosition = ["after", "before"];

}

if(!dojo._hasResource["dijit.form.ValidationTextBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.ValidationTextBox"] = true;
dojo.provide("dijit.form.ValidationTextBox");







/*=====
	dijit.form.ValidationTextBox.__Constraints = function(){
		// locale: String
		//		locale used for validation, picks up value from this widget's lang attribute
		// _flags_: anything
		//		various flags passed to regExpGen function
		this.locale = "";
		this._flags_ = "";
	}
=====*/

dojo.declare(
	"dijit.form.ValidationTextBox",
	dijit.form.TextBox,
	{
		// summary:
		//		Base class for textbox widgets with the ability to validate content of various types and provide user feedback.
		// tags:
		//		protected

		templateString: dojo.cache("dijit.form", "templates/ValidationTextBox.html", "<div class=\"dijit dijitReset dijitInlineTable dijitLeft\"\r\n\tid=\"widget_${id}\" role=\"presentation\"\r\n\t><div class='dijitReset dijitValidationContainer'\r\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t/></div\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class=\"dijitReset dijitInputInner\" dojoAttachPoint='textbox,focusNode' autocomplete=\"off\"\r\n\t\t\t${!nameAttrSetting} type='${type}'\r\n\t/></div\r\n></div>\r\n"),
		baseClass: "dijitTextBox dijitValidationTextBox",

		// required: Boolean
		//		User is required to enter data into this field.
		required: false,

		// promptMessage: String
		//		If defined, display this hint string immediately on focus to the textbox, if empty.
		//		Also displays if the textbox value is Incomplete (not yet valid but will be with additional input).
		//		Think of this like a tooltip that tells the user what to do, not an error message
		//		that tells the user what they've done wrong.
		//
		//		Message disappears when user starts typing.
		promptMessage: "",

		// invalidMessage: String
		// 		The message to display if value is invalid.
		//		The translated string value is read from the message file by default.
		// 		Set to "" to use the promptMessage instead.
		invalidMessage: "$_unset_$",

		// missingMessage: String
		// 		The message to display if value is empty and the field is required.
		//		The translated string value is read from the message file by default.
		// 		Set to "" to use the invalidMessage instead.
		missingMessage: "$_unset_$",

		// message: String
		//		Currently error/prompt message.
		//		When using the default tooltip implementation, this will only be
		//		displayed when the field is focused.
		message: "",

		// constraints: dijit.form.ValidationTextBox.__Constraints
		//		user-defined object needed to pass parameters to the validator functions
		constraints: {},

		// regExp: [extension protected] String
		//		regular expression string used to validate the input
		//		Do not specify both regExp and regExpGen
		regExp: ".*",

		regExpGen: function(/*dijit.form.ValidationTextBox.__Constraints*/ constraints){
			// summary:
			//		Overridable function used to generate regExp when dependent on constraints.
			//		Do not specify both regExp and regExpGen.
			// tags:
			//		extension protected
			return this.regExp; // String
		},

		// state: [readonly] String
		//		Shows current state (ie, validation result) of input (""=Normal, Incomplete, or Error)
		state: "",

		// tooltipPosition: String[]
		//		See description of `dijit.Tooltip.defaultPosition` for details on this parameter.
		tooltipPosition: [],

		_setValueAttr: function(){
			// summary:
			//		Hook so set('value', ...) works.
			this.inherited(arguments);
			this.validate(this._focused);
		},

		validator: function(/*anything*/ value, /*dijit.form.ValidationTextBox.__Constraints*/ constraints){
			// summary:
			//		Overridable function used to validate the text input against the regular expression.
			// tags:
			//		protected
			return (new RegExp("^(?:" + this.regExpGen(constraints) + ")"+(this.required?"":"?")+"$")).test(value) &&
				(!this.required || !this._isEmpty(value)) &&
				(this._isEmpty(value) || this.parse(value, constraints) !== undefined); // Boolean
		},

		_isValidSubset: function(){
			// summary:
			//		Returns true if the value is either already valid or could be made valid by appending characters.
			//		This is used for validation while the user [may be] still typing.
			return this.textbox.value.search(this._partialre) == 0;
		},

		isValid: function(/*Boolean*/ isFocused){
			// summary:
			//		Tests if value is valid.
			//		Can override with your own routine in a subclass.
			// tags:
			//		protected
			return this.validator(this.textbox.value, this.constraints);
		},

		_isEmpty: function(value){
			// summary:
			//		Checks for whitespace
			return (this.trim ? /^\s*$/ : /^$/).test(value); // Boolean
		},

		getErrorMessage: function(/*Boolean*/ isFocused){
			// summary:
			//		Return an error message to show if appropriate
			// tags:
			//		protected
			return (this.required && this._isEmpty(this.textbox.value)) ? this.missingMessage : this.invalidMessage; // String
		},

		getPromptMessage: function(/*Boolean*/ isFocused){
			// summary:
			//		Return a hint message to show when widget is first focused
			// tags:
			//		protected
			return this.promptMessage; // String
		},

		_maskValidSubsetError: true,
		validate: function(/*Boolean*/ isFocused){
			// summary:
			//		Called by oninit, onblur, and onkeypress.
			// description:
			//		Show missing or invalid messages if appropriate, and highlight textbox field.
			// tags:
			//		protected
			var message = "";
			var isValid = this.disabled || this.isValid(isFocused);
			if(isValid){ this._maskValidSubsetError = true; }
			var isEmpty = this._isEmpty(this.textbox.value);
			var isValidSubset = !isValid && isFocused && this._isValidSubset();
			this._set("state", isValid ? "" : (((((!this._hasBeenBlurred || isFocused) && isEmpty) || isValidSubset) && this._maskValidSubsetError) ? "Incomplete" : "Error"));
			dijit.setWaiState(this.focusNode, "invalid", isValid ? "false" : "true");

			if(this.state == "Error"){
				this._maskValidSubsetError = isFocused && isValidSubset; // we want the error to show up after a blur and refocus
				message = this.getErrorMessage(isFocused);
			}else if(this.state == "Incomplete"){
				message = this.getPromptMessage(isFocused); // show the prompt whenever the value is not yet complete
				this._maskValidSubsetError = !this._hasBeenBlurred || isFocused; // no Incomplete warnings while focused
			}else if(isEmpty){
				message = this.getPromptMessage(isFocused); // show the prompt whenever there's no error and no text
			}
			this.set("message", message);

			return isValid;
		},

		displayMessage: function(/*String*/ message){
			// summary:
			//		Overridable method to display validation errors/hints.
			//		By default uses a tooltip.
			// tags:
			//		extension
			dijit.hideTooltip(this.domNode);
			if(message && this._focused){
				dijit.showTooltip(message, this.domNode, this.tooltipPosition, !this.isLeftToRight());
			}
		},

		_refreshState: function(){
			// Overrides TextBox._refreshState()
			this.validate(this._focused);
			this.inherited(arguments);
		},

		//////////// INITIALIZATION METHODS ///////////////////////////////////////

		constructor: function(){
			this.constraints = {};
		},

		_setConstraintsAttr: function(/*Object*/ constraints){
			if(!constraints.locale && this.lang){
				constraints.locale = this.lang;
			}
			this._set("constraints", constraints);
			this._computePartialRE();
		},

		_computePartialRE: function(){
			var p = this.regExpGen(this.constraints);
			this.regExp = p;
			var partialre = "";
			// parse the regexp and produce a new regexp that matches valid subsets
			// if the regexp is .* then there's no use in matching subsets since everything is valid
			if(p != ".*"){ this.regExp.replace(/\\.|\[\]|\[.*?[^\\]{1}\]|\{.*?\}|\(\?[=:!]|./g,
				function (re){
					switch(re.charAt(0)){
						case '{':
						case '+':
						case '?':
						case '*':
						case '^':
						case '$':
						case '|':
						case '(':
							partialre += re;
							break;
						case ")":
							partialre += "|$)";
							break;
						 default:
							partialre += "(?:"+re+"|$)";
							break;
					}
				}
			);}
			try{ // this is needed for now since the above regexp parsing needs more test verification
				"".search(partialre);
			}catch(e){ // should never be here unless the original RE is bad or the parsing is bad
				partialre = this.regExp;
				console.warn('RegExp error in ' + this.declaredClass + ': ' + this.regExp);
			} // should never be here unless the original RE is bad or the parsing is bad
			this._partialre = "^(?:" + partialre + ")$";
		},

		postMixInProperties: function(){
			this.inherited(arguments);
			this.messages = dojo.i18n.getLocalization("dijit.form", "validate", this.lang);
			if(this.invalidMessage == "$_unset_$"){ this.invalidMessage = this.messages.invalidMessage; }
			if(!this.invalidMessage){ this.invalidMessage = this.promptMessage; }
			if(this.missingMessage == "$_unset_$"){ this.missingMessage = this.messages.missingMessage; }
			if(!this.missingMessage){ this.missingMessage = this.invalidMessage; }
			this._setConstraintsAttr(this.constraints); // this needs to happen now (and later) due to codependency on _set*Attr calls attachPoints
		},

		_setDisabledAttr: function(/*Boolean*/ value){
			this.inherited(arguments);	// call FormValueWidget._setDisabledAttr()
			this._refreshState();
		},

		_setRequiredAttr: function(/*Boolean*/ value){
			this._set("required", value);
			dijit.setWaiState(this.focusNode, "required", value);
			this._refreshState();
		},

		_setMessageAttr: function(/*String*/ message){
			this._set("message", message);
			this.displayMessage(message);
		},

		reset:function(){
			// Overrides dijit.form.TextBox.reset() by also
			// hiding errors about partial matches
			this._maskValidSubsetError = true;
			this.inherited(arguments);
		},

		_onBlur: function(){
			// the message still exists but for back-compat, and to erase the tooltip
			// (if the message is being displayed as a tooltip), call displayMessage('')
			this.displayMessage('');

			this.inherited(arguments);
		}
	}
);

dojo.declare(
	"dijit.form.MappedTextBox",
	dijit.form.ValidationTextBox,
	{
		// summary:
		//		A dijit.form.ValidationTextBox subclass which provides a base class for widgets that have
		//		a visible formatted display value, and a serializable
		//		value in a hidden input field which is actually sent to the server.
		// description:
		//		The visible display may
		//		be locale-dependent and interactive.  The value sent to the server is stored in a hidden
		//		input field which uses the `name` attribute declared by the original widget.  That value sent
		//		to the server is defined by the dijit.form.MappedTextBox.serialize method and is typically
		//		locale-neutral.
		// tags:
		//		protected

		postMixInProperties: function(){
			this.inherited(arguments);

			// we want the name attribute to go to the hidden <input>, not the displayed <input>,
			// so override _FormWidget.postMixInProperties() setting of nameAttrSetting
			this.nameAttrSetting = "";
		},

		serialize: function(/*anything*/ val, /*Object?*/ options){
			// summary:
			//		Overridable function used to convert the get('value') result to a canonical
			//		(non-localized) string.  For example, will print dates in ISO format, and
			//		numbers the same way as they are represented in javascript.
			// tags:
			//		protected extension
			return val.toString ? val.toString() : ""; // String
		},

		toString: function(){
			// summary:
			//		Returns widget as a printable string using the widget's value
			// tags:
			//		protected
			var val = this.filter(this.get('value')); // call filter in case value is nonstring and filter has been customized
			return val != null ? (typeof val == "string" ? val : this.serialize(val, this.constraints)) : ""; // String
		},

		validate: function(){
			// Overrides `dijit.form.TextBox.validate`
			this.valueNode.value = this.toString();
			return this.inherited(arguments);
		},

		buildRendering: function(){
			// Overrides `dijit._Templated.buildRendering`

			this.inherited(arguments);

			// Create a hidden <input> node with the serialized value used for submit
			// (as opposed to the displayed value).
			// Passing in name as markup rather than calling dojo.create() with an attrs argument
			// to make dojo.query(input[name=...]) work on IE. (see #8660)
			this.valueNode = dojo.place("<input type='hidden'" + (this.name ? " name='" + this.name.replace(/'/g, "&quot;") + "'" : "") + "/>", this.textbox, "after");
		},

		reset: function(){
			// Overrides `dijit.form.ValidationTextBox.reset` to
			// reset the hidden textbox value to ''
			this.valueNode.value = '';
			this.inherited(arguments);
		}
	}
);

/*=====
	dijit.form.RangeBoundTextBox.__Constraints = function(){
		// min: Number
		//		Minimum signed value.  Default is -Infinity
		// max: Number
		//		Maximum signed value.  Default is +Infinity
		this.min = min;
		this.max = max;
	}
=====*/

dojo.declare(
	"dijit.form.RangeBoundTextBox",
	dijit.form.MappedTextBox,
	{
		// summary:
		//		Base class for textbox form widgets which defines a range of valid values.

		// rangeMessage: String
		//		The message to display if value is out-of-range
		rangeMessage: "",

		/*=====
		// constraints: dijit.form.RangeBoundTextBox.__Constraints
		constraints: {},
		======*/

		rangeCheck: function(/*Number*/ primitive, /*dijit.form.RangeBoundTextBox.__Constraints*/ constraints){
			// summary:
			//		Overridable function used to validate the range of the numeric input value.
			// tags:
			//		protected
			return	("min" in constraints? (this.compare(primitive,constraints.min) >= 0) : true) &&
				("max" in constraints? (this.compare(primitive,constraints.max) <= 0) : true); // Boolean
		},

		isInRange: function(/*Boolean*/ isFocused){
			// summary:
			//		Tests if the value is in the min/max range specified in constraints
			// tags:
			//		protected
			return this.rangeCheck(this.get('value'), this.constraints);
		},

		_isDefinitelyOutOfRange: function(){
			// summary:
			//		Returns true if the value is out of range and will remain
			//		out of range even if the user types more characters
			var val = this.get('value');
			var isTooLittle = false;
			var isTooMuch = false;
			if("min" in this.constraints){
				var min = this.constraints.min;
				min = this.compare(val, ((typeof min == "number") && min >= 0 && val !=0) ? 0 : min);
				isTooLittle = (typeof min == "number") && min < 0;
			}
			if("max" in this.constraints){
				var max = this.constraints.max;
				max = this.compare(val, ((typeof max != "number") || max > 0) ? max : 0);
				isTooMuch = (typeof max == "number") && max > 0;
			}
			return isTooLittle || isTooMuch;
		},

		_isValidSubset: function(){
			// summary:
			//		Overrides `dijit.form.ValidationTextBox._isValidSubset`.
			//		Returns true if the input is syntactically valid, and either within
			//		range or could be made in range by more typing.
			return this.inherited(arguments) && !this._isDefinitelyOutOfRange();
		},

		isValid: function(/*Boolean*/ isFocused){
			// Overrides dijit.form.ValidationTextBox.isValid to check that the value is also in range.
			return this.inherited(arguments) &&
				((this._isEmpty(this.textbox.value) && !this.required) || this.isInRange(isFocused)); // Boolean
		},

		getErrorMessage: function(/*Boolean*/ isFocused){
			// Overrides dijit.form.ValidationTextBox.getErrorMessage to print "out of range" message if appropriate
			var v = this.get('value');
			if(v !== null && v !== '' && v !== undefined && (typeof v != "number" || !isNaN(v)) && !this.isInRange(isFocused)){ // don't check isInRange w/o a real value
				return this.rangeMessage; // String
			}
			return this.inherited(arguments);
		},

		postMixInProperties: function(){
			this.inherited(arguments);
			if(!this.rangeMessage){
				this.messages = dojo.i18n.getLocalization("dijit.form", "validate", this.lang);
				this.rangeMessage = this.messages.rangeMessage;
			}
		},

		_setConstraintsAttr: function(/*Object*/ constraints){
			this.inherited(arguments);
			if(this.focusNode){ // not set when called from postMixInProperties
				if(this.constraints.min !== undefined){
					dijit.setWaiState(this.focusNode, "valuemin", this.constraints.min);
				}else{
					dijit.removeWaiState(this.focusNode, "valuemin");
				}
				if(this.constraints.max !== undefined){
					dijit.setWaiState(this.focusNode, "valuemax", this.constraints.max);
				}else{
					dijit.removeWaiState(this.focusNode, "valuemax");
				}
			}
		},

		_setValueAttr: function(/*Number*/ value, /*Boolean?*/ priorityChange){
			// summary:
			//		Hook so set('value', ...) works.

			dijit.setWaiState(this.focusNode, "valuenow", value);
			this.inherited(arguments);
		}
	}
);

}

if(!dojo._hasResource["dijit.form.ComboBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.ComboBox"] = true;
dojo.provide("dijit.form.ComboBox");












dojo.declare(
	"dijit.form.ComboBoxMixin",
	dijit._HasDropDown,
	{
		// summary:
		//		Implements the base functionality for `dijit.form.ComboBox`/`dijit.form.FilteringSelect`
		// description:
		//		All widgets that mix in dijit.form.ComboBoxMixin must extend `dijit.form._FormValueWidget`.
		// tags:
		//		protected

		// item: Object
		//		This is the item returned by the dojo.data.store implementation that
		//		provides the data for this ComboBox, it's the currently selected item.
		item: null,

		// pageSize: Integer
		//		Argument to data provider.
		//		Specifies number of search results per page (before hitting "next" button)
		pageSize: Infinity,

		// store: [const] Object
		//		Reference to data provider object used by this ComboBox
		store: null,

		// fetchProperties: Object
		//		Mixin to the dojo.data store's fetch.
		//		For example, to set the sort order of the ComboBox menu, pass:
		//	|	{ sort: [{attribute:"name",descending: true}] }
		//		To override the default queryOptions so that deep=false, do:
		//	|	{ queryOptions: {ignoreCase: true, deep: false} }
		fetchProperties:{},

		// query: Object
		//		A query that can be passed to 'store' to initially filter the items,
		//		before doing further filtering based on `searchAttr` and the key.
		//		Any reference to the `searchAttr` is ignored.
		query: {},

		// autoComplete: Boolean
		//		If user types in a partial string, and then tab out of the `<input>` box,
		//		automatically copy the first entry displayed in the drop down list to
		//		the `<input>` field
		autoComplete: true,

		// highlightMatch: String
		// 		One of: "first", "all" or "none".
		//
		//		If the ComboBox/FilteringSelect opens with the search results and the searched
		//		string can be found, it will be highlighted.  If set to "all"
		//		then will probably want to change `queryExpr` parameter to '*${0}*'
		//
		//		Highlighting is only performed when `labelType` is "text", so as to not
		//		interfere with any HTML markup an HTML label might contain.
		highlightMatch: "first",

		// searchDelay: Integer
		//		Delay in milliseconds between when user types something and we start
		//		searching based on that value
		searchDelay: 100,

		// searchAttr: String
		//		Search for items in the data store where this attribute (in the item)
		//		matches what the user typed
		searchAttr: "name",

		// labelAttr: String?
		//		The entries in the drop down list come from this attribute in the
		//		dojo.data items.
		//		If not specified, the searchAttr attribute is used instead.
		labelAttr: "",

		// labelType: String
		//		Specifies how to interpret the labelAttr in the data store items.
		//		Can be "html" or "text".
		labelType: "text",

		// queryExpr: String
		//		This specifies what query ComboBox/FilteringSelect sends to the data store,
		//		based on what the user has typed.  Changing this expression will modify
		//		whether the drop down shows only exact matches, a "starting with" match,
		//		etc.  Use it in conjunction with highlightMatch.
		//		dojo.data query expression pattern.
		//		`${0}` will be substituted for the user text.
		//		`*` is used for wildcards.
		//		`${0}*` means "starts with", `*${0}*` means "contains", `${0}` means "is"
		queryExpr: "${0}*",

		// ignoreCase: Boolean
		//		Set true if the ComboBox/FilteringSelect should ignore case when matching possible items
		ignoreCase: true,

		// hasDownArrow: Boolean
		//		Set this textbox to have a down arrow button, to display the drop down list.
		//		Defaults to true.
		hasDownArrow: true,

		templateString: dojo.cache("dijit.form", "templates/DropDownBox.html", "<div class=\"dijit dijitReset dijitInlineTable dijitLeft\"\r\n\tid=\"widget_${id}\"\r\n\trole=\"combobox\"\r\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\r\n\t\tdojoAttachPoint=\"_buttonNode, _popupStateNode\" role=\"presentation\"\r\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t\t\t${_buttonInputDisabled}\r\n\t/></div\r\n\t><div class='dijitReset dijitValidationContainer'\r\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t/></div\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\r\n\t\t\tdojoAttachPoint=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\r\n\t/></div\r\n></div>\r\n"),

		baseClass: "dijitTextBox dijitComboBox",

		// dropDownClass: [protected extension] String
		//		Name of the dropdown widget class used to select a date/time.
		//		Subclasses should specify this.
		dropDownClass: "dijit.form._ComboBoxMenu",

		// Set classes like dijitDownArrowButtonHover depending on
		// mouse action over button node
		cssStateNodes: {
			"_buttonNode": "dijitDownArrowButton"
		},

		// Flags to _HasDropDown to limit height of drop down to make it fit in viewport
		maxHeight: -1,

		// For backwards compatibility let onClick events propagate, even clicks on the down arrow button
		_stopClickEvents: false,

		_getCaretPos: function(/*DomNode*/ element){
			// khtml 3.5.2 has selection* methods as does webkit nightlies from 2005-06-22
			var pos = 0;
			if(typeof(element.selectionStart) == "number"){
				// FIXME: this is totally borked on Moz < 1.3. Any recourse?
				pos = element.selectionStart;
			}else if(dojo.isIE){
				// in the case of a mouse click in a popup being handled,
				// then the dojo.doc.selection is not the textarea, but the popup
				// var r = dojo.doc.selection.createRange();
				// hack to get IE 6 to play nice. What a POS browser.
				var tr = dojo.doc.selection.createRange().duplicate();
				var ntr = element.createTextRange();
				tr.move("character",0);
				ntr.move("character",0);
				try{
					// If control doesn't have focus, you get an exception.
					// Seems to happen on reverse-tab, but can also happen on tab (seems to be a race condition - only happens sometimes).
					// There appears to be no workaround for this - googled for quite a while.
					ntr.setEndPoint("EndToEnd", tr);
					pos = String(ntr.text).replace(/\r/g,"").length;
				}catch(e){
					// If focus has shifted, 0 is fine for caret pos.
				}
			}
			return pos;
		},

		_setCaretPos: function(/*DomNode*/ element, /*Number*/ location){
			location = parseInt(location);
			dijit.selectInputText(element, location, location);
		},

		_setDisabledAttr: function(/*Boolean*/ value){
			// Additional code to set disabled state of ComboBox node.
			// Overrides _FormValueWidget._setDisabledAttr() or ValidationTextBox._setDisabledAttr().
			this.inherited(arguments);
			dijit.setWaiState(this.domNode, "disabled", value);
		},

		_abortQuery: function(){
			// stop in-progress query
			if(this.searchTimer){
				clearTimeout(this.searchTimer);
				this.searchTimer = null;
			}
			if(this._fetchHandle){
				if(this._fetchHandle.abort){ this._fetchHandle.abort(); }
				this._fetchHandle = null;
			}
		},

		_onInput: function(/*Event*/ evt){
			// summary:
			//		Handles paste events
			if(!this.searchTimer && (evt.type == 'paste'/*IE|WebKit*/ || evt.type == 'input'/*Firefox*/) && this._lastInput != this.textbox.value){
				this.searchTimer = setTimeout(dojo.hitch(this, function(){
					this._onKey({charOrCode: 229}); // fake IME key to cause a search
				}), 100); // long delay that will probably be preempted by keyboard input
			}
			this.inherited(arguments);
		},

		_onKey: function(/*Event*/ evt){
			// summary:
			//		Handles keyboard events

			var key = evt.charOrCode;

			// except for cutting/pasting case - ctrl + x/v
			if(evt.altKey || ((evt.ctrlKey || evt.metaKey) && (key != 'x' && key != 'v')) || key == dojo.keys.SHIFT){
				return; // throw out weird key combinations and spurious events
			}
			
			var doSearch = false;
			var pw = this.dropDown;
			var dk = dojo.keys;
			var highlighted = null;
			this._prev_key_backspace = false;
			this._abortQuery();

			// _HasDropDown will do some of the work:
			//		1. when drop down is not yet shown:
			//			- if user presses the down arrow key, call loadDropDown()
			//		2. when drop down is already displayed:
			//			- on ESC key, call closeDropDown()
			//			- otherwise, call dropDown.handleKey() to process the keystroke
			this.inherited(arguments);

			if(this._opened){
				highlighted = pw.getHighlightedOption();
			}
			switch(key){
				case dk.PAGE_DOWN:
				case dk.DOWN_ARROW:
				case dk.PAGE_UP:
				case dk.UP_ARROW:
					// Keystroke caused ComboBox_menu to move to a different item.
					// Copy new item to <input> box.
					if(this._opened){
						this._announceOption(highlighted);
					}
					dojo.stopEvent(evt);
					break;

				case dk.ENTER:
					// prevent submitting form if user presses enter. Also
					// prevent accepting the value if either Next or Previous
					// are selected
					if(highlighted){
						// only stop event on prev/next
						if(highlighted == pw.nextButton){
							this._nextSearch(1);
							dojo.stopEvent(evt);
							break;
						}else if(highlighted == pw.previousButton){
							this._nextSearch(-1);
							dojo.stopEvent(evt);
							break;
						}
					}else{
						// Update 'value' (ex: KY) according to currently displayed text
						this._setBlurValue(); // set value if needed
						this._setCaretPos(this.focusNode, this.focusNode.value.length); // move cursor to end and cancel highlighting
					}
					// default case:
					// if enter pressed while drop down is open, or for FilteringSelect,
					// if we are in the middle of a query to convert a directly typed in value to an item,
					// prevent submit, but allow event to bubble
					if(this._opened || this._fetchHandle){
					evt.preventDefault();
					}
					// fall through

				case dk.TAB:
					var newvalue = this.get('displayedValue');
					//	if the user had More Choices selected fall into the
					//	_onBlur handler
					if(pw && (
						newvalue == pw._messages["previousMessage"] ||
						newvalue == pw._messages["nextMessage"])
					){
						break;
					}
					if(highlighted){
						this._selectOption();
					}
					if(this._opened){
						this._lastQuery = null; // in case results come back later
						this.closeDropDown();
					}
					break;

				case ' ':
					if(highlighted){
						// user is effectively clicking a choice in the drop down menu
						dojo.stopEvent(evt);
						this._selectOption();
						this.closeDropDown();
					}else{
						// user typed a space into the input box, treat as normal character
						doSearch = true;
					}
					break;

				case dk.DELETE:
				case dk.BACKSPACE:
					this._prev_key_backspace = true;
					doSearch = true;
					break;

				default:
					// Non char keys (F1-F12 etc..)  shouldn't open list.
					// Ascii characters and IME input (Chinese, Japanese etc.) should.
					//IME input produces keycode == 229.
					doSearch = typeof key == 'string' || key == 229;
			}
			if(doSearch){
				// need to wait a tad before start search so that the event
				// bubbles through DOM and we have value visible
				this.item = undefined; // undefined means item needs to be set
				this.searchTimer = setTimeout(dojo.hitch(this, "_startSearchFromInput"),1);
			}
		},

		_autoCompleteText: function(/*String*/ text){
			// summary:
			// 		Fill in the textbox with the first item from the drop down
			// 		list, and highlight the characters that were
			// 		auto-completed. For example, if user typed "CA" and the
			// 		drop down list appeared, the textbox would be changed to
			// 		"California" and "ifornia" would be highlighted.

			var fn = this.focusNode;

			// IE7: clear selection so next highlight works all the time
			dijit.selectInputText(fn, fn.value.length);
			// does text autoComplete the value in the textbox?
			var caseFilter = this.ignoreCase? 'toLowerCase' : 'substr';
			if(text[caseFilter](0).indexOf(this.focusNode.value[caseFilter](0)) == 0){
				var cpos = this._getCaretPos(fn);
				// only try to extend if we added the last character at the end of the input
				if((cpos+1) > fn.value.length){
					// only add to input node as we would overwrite Capitalisation of chars
					// actually, that is ok
					fn.value = text;//.substr(cpos);
					// visually highlight the autocompleted characters
					dijit.selectInputText(fn, cpos);
				}
			}else{
				// text does not autoComplete; replace the whole value and highlight
				fn.value = text;
				dijit.selectInputText(fn);
			}
		},

		_openResultList: function(/*Object*/ results, /*Object*/ dataObject){
			// summary:
			//		Callback when a search completes.
			// description:
			//		1. generates drop-down list and calls _showResultList() to display it
			//		2. if this result list is from user pressing "more choices"/"previous choices"
			//			then tell screen reader to announce new option
			this._fetchHandle = null;
			if(	this.disabled ||
				this.readOnly ||
				(dataObject.query[this.searchAttr] != this._lastQuery)
			){
				return;
			}
			var wasSelected = this.dropDown._highlighted_option && dojo.hasClass(this.dropDown._highlighted_option, "dijitMenuItemSelected");
			this.dropDown.clearResultList();
			if(!results.length && !this._maxOptions){ // if no results and not just the previous choices button
				this.closeDropDown();
				return;
			}

			// Fill in the textbox with the first item from the drop down list,
			// and highlight the characters that were auto-completed. For
			// example, if user typed "CA" and the drop down list appeared, the
			// textbox would be changed to "California" and "ifornia" would be
			// highlighted.

			dataObject._maxOptions = this._maxOptions;
			var nodes = this.dropDown.createOptions(
				results,
				dataObject,
				dojo.hitch(this, "_getMenuLabelFromItem")
			);

			// show our list (only if we have content, else nothing)
			this._showResultList();

			// #4091:
			//		tell the screen reader that the paging callback finished by
			//		shouting the next choice
			if(dataObject.direction){
				if(1 == dataObject.direction){
					this.dropDown.highlightFirstOption();
				}else if(-1 == dataObject.direction){
					this.dropDown.highlightLastOption();
				}
				if(wasSelected){
					this._announceOption(this.dropDown.getHighlightedOption());
				}
			}else if(this.autoComplete && !this._prev_key_backspace
				// when the user clicks the arrow button to show the full list,
				// startSearch looks for "*".
				// it does not make sense to autocomplete
				// if they are just previewing the options available.
				&& !/^[*]+$/.test(dataObject.query[this.searchAttr])){
					this._announceOption(nodes[1]); // 1st real item
			}
		},

		_showResultList: function(){
			// summary:
			//		Display the drop down if not already displayed, or if it is displayed, then
			//		reposition it if necessary (reposition may be necessary if drop down's height changed).

			this.closeDropDown(true);

			// hide the tooltip
			this.displayMessage("");

			this.openDropDown();

			dijit.setWaiState(this.domNode, "expanded", "true");
		},

		loadDropDown: function(/*Function*/ callback){
			// Overrides _HasDropDown.loadDropDown().
			// This is called when user has pressed button icon or pressed the down arrow key
			// to open the drop down.
			
			this._startSearchAll();
		},

		isLoaded: function(){
			// signal to _HasDropDown that it needs to call loadDropDown() to load the
			// drop down asynchronously before displaying it
			return false;
		},

		closeDropDown: function(){
			// Overrides _HasDropDown.closeDropDown().  Closes the drop down (assuming that it's open).
			// This method is the callback when the user types ESC or clicking
			// the button icon while the drop down is open.  It's also called by other code.
			this._abortQuery();
			if(this._opened){
				this.inherited(arguments);
				dijit.setWaiState(this.domNode, "expanded", "false");
				dijit.removeWaiState(this.focusNode,"activedescendant");
			}
		},

		_setBlurValue: function(){
			// if the user clicks away from the textbox OR tabs away, set the
			// value to the textbox value
			// #4617:
			//		if value is now more choices or previous choices, revert
			//		the value
			var newvalue = this.get('displayedValue');
			var pw = this.dropDown;
			if(pw && (
				newvalue == pw._messages["previousMessage"] ||
				newvalue == pw._messages["nextMessage"]
				)
			){
				this._setValueAttr(this._lastValueReported, true);
			}else if(typeof this.item == "undefined"){
				// Update 'value' (ex: KY) according to currently displayed text
				this.item = null;
				this.set('displayedValue', newvalue);
			}else{
				if(this.value != this._lastValueReported){
					dijit.form._FormValueWidget.prototype._setValueAttr.call(this, this.value, true);
				}
				this._refreshState();
			}
		},

		_onBlur: function(){
			// summary:
			//		Called magically when focus has shifted away from this widget and it's drop down
			this.closeDropDown();
			this.inherited(arguments);
		},

		_setItemAttr: function(/*item*/ item, /*Boolean?*/ priorityChange, /*String?*/ displayedValue){
			// summary:
			//		Set the displayed valued in the input box, and the hidden value
			//		that gets submitted, based on a dojo.data store item.
			// description:
			//		Users shouldn't call this function; they should be calling
			//		set('item', value)
			// tags:
			//		private
			if(!displayedValue){
				displayedValue = this.store.getValue(item, this.searchAttr);
			}
			var value = this._getValueField() != this.searchAttr? this.store.getIdentity(item) : displayedValue;
			this._set("item", item);
			dijit.form.ComboBox.superclass._setValueAttr.call(this, value, priorityChange, displayedValue);
		},

		_announceOption: function(/*Node*/ node){
			// summary:
			//		a11y code that puts the highlighted option in the textbox.
			//		This way screen readers will know what is happening in the
			//		menu.

			if(!node){
				return;
			}
			// pull the text value from the item attached to the DOM node
			var newValue;
			if(node == this.dropDown.nextButton ||
				node == this.dropDown.previousButton){
				newValue = node.innerHTML;
				this.item = undefined;
				this.value = '';
			}else{
				newValue = this.store.getValue(node.item, this.searchAttr).toString();
				this.set('item', node.item, false, newValue);
			}
			// get the text that the user manually entered (cut off autocompleted text)
			this.focusNode.value = this.focusNode.value.substring(0, this._lastInput.length);
			// set up ARIA activedescendant
			dijit.setWaiState(this.focusNode, "activedescendant", dojo.attr(node, "id"));
			// autocomplete the rest of the option to announce change
			this._autoCompleteText(newValue);
		},

		_selectOption: function(/*Event*/ evt){
			// summary:
			//		Menu callback function, called when an item in the menu is selected.
			if(evt){
				this._announceOption(evt.target);
			}
			this.closeDropDown();
			this._setCaretPos(this.focusNode, this.focusNode.value.length);
			dijit.form._FormValueWidget.prototype._setValueAttr.call(this, this.value, true); // set this.value and fire onChange
		},

		_startSearchAll: function(){
			this._startSearch('');
		},

		_startSearchFromInput: function(){
			this._startSearch(this.focusNode.value.replace(/([\\\*\?])/g, "\\$1"));
		},

		_getQueryString: function(/*String*/ text){
			return dojo.string.substitute(this.queryExpr, [text]);
		},

		_startSearch: function(/*String*/ key){
			// summary:
			//		Starts a search for elements matching key (key=="" means to return all items),
			//		and calls _openResultList() when the search completes, to display the results.
			if(!this.dropDown){
				var popupId = this.id + "_popup",
				dropDownConstructor = dojo.getObject(this.dropDownClass, false);
				this.dropDown = new dropDownConstructor({
					onChange: dojo.hitch(this, this._selectOption),
					id: popupId,
					dir: this.dir
				});
				dijit.removeWaiState(this.focusNode,"activedescendant");
				dijit.setWaiState(this.textbox,"owns",popupId); // associate popup with textbox
			}
			// create a new query to prevent accidentally querying for a hidden
			// value from FilteringSelect's keyField
			var query = dojo.clone(this.query); // #5970
			this._lastInput = key; // Store exactly what was entered by the user.
			this._lastQuery = query[this.searchAttr] = this._getQueryString(key);
			// #5970: set _lastQuery, *then* start the timeout
			// otherwise, if the user types and the last query returns before the timeout,
			// _lastQuery won't be set and their input gets rewritten
			this.searchTimer=setTimeout(dojo.hitch(this, function(query, _this){
				this.searchTimer = null;
				var fetch = {
					queryOptions: {
						ignoreCase: this.ignoreCase,
						deep: true
					},
					query: query,
					onBegin: dojo.hitch(this, "_setMaxOptions"),
					onComplete: dojo.hitch(this, "_openResultList"),
					onError: function(errText){
						_this._fetchHandle = null;
						console.error('dijit.form.ComboBox: ' + errText);
						_this.closeDropDown();
					},
					start: 0,
					count: this.pageSize
				};
				dojo.mixin(fetch, _this.fetchProperties);
				this._fetchHandle = _this.store.fetch(fetch);

				var nextSearch = function(dataObject, direction){
					dataObject.start += dataObject.count*direction;
					// #4091:
					//		tell callback the direction of the paging so the screen
					//		reader knows which menu option to shout
					dataObject.direction = direction;
					this._fetchHandle = this.store.fetch(dataObject);
					this.focus();
				};
				this._nextSearch = this.dropDown.onPage = dojo.hitch(this, nextSearch, this._fetchHandle);
			}, query, this), this.searchDelay);
		},

		_setMaxOptions: function(size, request){
			 this._maxOptions = size;
		},

		_getValueField: function(){
			// summary:
			//		Helper for postMixInProperties() to set this.value based on data inlined into the markup.
			//		Returns the attribute name in the item (in dijit.form._ComboBoxDataStore) to use as the value.
			return this.searchAttr;
		},

		//////////// INITIALIZATION METHODS ///////////////////////////////////////

		constructor: function(){
			this.query={};
			this.fetchProperties={};
		},

		postMixInProperties: function(){
			if(!this.store){
				var srcNodeRef = this.srcNodeRef;

				// if user didn't specify store, then assume there are option tags
				this.store = new dijit.form._ComboBoxDataStore(srcNodeRef);

				// if there is no value set and there is an option list, set
				// the value to the first value to be consistent with native
				// Select

				// Firefox and Safari set value
				// IE6 and Opera set selectedIndex, which is automatically set
				// by the selected attribute of an option tag
				// IE6 does not set value, Opera sets value = selectedIndex
				if(!("value" in this.params)){
					var item = (this.item = this.store.fetchSelectedItem());
					if(item){
						var valueField = this._getValueField();
						this.value = this.store.getValue(item, valueField);
					}
				}
			}

			this.inherited(arguments);
		},

		postCreate: function(){
			// summary:
			//		Subclasses must call this method from their postCreate() methods
			// tags:
			//		protected

			// find any associated label element and add to ComboBox node.
			var label=dojo.query('label[for="'+this.id+'"]');
			if(label.length){
				label[0].id = (this.id+"_label");
				dijit.setWaiState(this.domNode, "labelledby", label[0].id);

			}
			this.inherited(arguments);
		},

		_setHasDownArrowAttr: function(val){
			this.hasDownArrow = val;
			this._buttonNode.style.display = val ? "" : "none";
		},

		_getMenuLabelFromItem: function(/*Item*/ item){
			var label = this.labelFunc(item, this.store),
				labelType = this.labelType;
			// If labelType is not "text" we don't want to screw any markup ot whatever.
			if(this.highlightMatch != "none" && this.labelType == "text" && this._lastInput){
				label = this.doHighlight(label, this._escapeHtml(this._lastInput));
				labelType = "html";
			}
			return {html: labelType == "html", label: label};
		},

		doHighlight: function(/*String*/ label, /*String*/ find){
			// summary:
			//		Highlights the string entered by the user in the menu.  By default this
			//		highlights the first occurrence found. Override this method
			//		to implement your custom highlighting.
			// tags:
			//		protected

			var
				// Add (g)lobal modifier when this.highlightMatch == "all" and (i)gnorecase when this.ignoreCase == true
				modifiers = (this.ignoreCase ? "i" : "") + (this.highlightMatch == "all" ? "g" : ""),
				i = this.queryExpr.indexOf("${0}");
			find = dojo.regexp.escapeString(find); // escape regexp special chars
			return this._escapeHtml(label).replace(
				// prepend ^ when this.queryExpr == "${0}*" and append $ when this.queryExpr == "*${0}"
				new RegExp((i == 0 ? "^" : "") + "("+ find +")" + (i == (this.queryExpr.length - 4) ? "$" : ""), modifiers),
				'<span class="dijitComboBoxHighlightMatch">$1</span>'
			); // returns String, (almost) valid HTML (entities encoded)
		},

		_escapeHtml: function(/*String*/ str){
			// TODO Should become dojo.html.entities(), when exists use instead
			// summary:
			//		Adds escape sequences for special characters in XML: &<>"'
			str = String(str).replace(/&/gm, "&amp;").replace(/</gm, "&lt;")
				.replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
			return str; // string
		},

		reset: function(){
			// Overrides the _FormWidget.reset().
			// Additionally reset the .item (to clean up).
			this.item = null;
			this.inherited(arguments);
		},

		labelFunc: function(/*item*/ item, /*dojo.data.store*/ store){
			// summary:
			//		Computes the label to display based on the dojo.data store item.
			// returns:
			//		The label that the ComboBox should display
			// tags:
			//		private

			// Use toString() because XMLStore returns an XMLItem whereas this
			// method is expected to return a String (#9354)
			return store.getValue(item, this.labelAttr || this.searchAttr).toString(); // String
		}
	}
);

dojo.declare(
	"dijit.form._ComboBoxMenu",
	[dijit._Widget, dijit._Templated, dijit._CssStateMixin],
	{
		// summary:
		//		Focus-less menu for internal use in `dijit.form.ComboBox`
		// tags:
		//		private

		templateString: "<ul class='dijitReset dijitMenu' dojoAttachEvent='onmousedown:_onMouseDown,onmouseup:_onMouseUp,onmouseover:_onMouseOver,onmouseout:_onMouseOut' style='overflow: \"auto\"; overflow-x: \"hidden\";'>"
				+"<li class='dijitMenuItem dijitMenuPreviousButton' dojoAttachPoint='previousButton' role='option'></li>"
				+"<li class='dijitMenuItem dijitMenuNextButton' dojoAttachPoint='nextButton' role='option'></li>"
			+"</ul>",

		// _messages: Object
		//		Holds "next" and "previous" text for paging buttons on drop down
		_messages: null,
		
		baseClass: "dijitComboBoxMenu",

		postMixInProperties: function(){
			this.inherited(arguments);
			this._messages = dojo.i18n.getLocalization("dijit.form", "ComboBox", this.lang);
		},

		buildRendering: function(){
			this.inherited(arguments);

			// fill in template with i18n messages
			this.previousButton.innerHTML = this._messages["previousMessage"];
			this.nextButton.innerHTML = this._messages["nextMessage"];
		},

		_setValueAttr: function(/*Object*/ value){
			this.value = value;
			this.onChange(value);
		},

		// stubs
		onChange: function(/*Object*/ value){
			// summary:
			//		Notifies ComboBox/FilteringSelect that user clicked an option in the drop down menu.
			//		Probably should be called onSelect.
			// tags:
			//		callback
		},
		onPage: function(/*Number*/ direction){
			// summary:
			//		Notifies ComboBox/FilteringSelect that user clicked to advance to next/previous page.
			// tags:
			//		callback
		},

		onClose: function(){
			// summary:
			//		Callback from dijit.popup code to this widget, notifying it that it closed
			// tags:
			//		private
			this._blurOptionNode();
		},

		_createOption: function(/*Object*/ item, labelFunc){
			// summary:
			//		Creates an option to appear on the popup menu subclassed by
			//		`dijit.form.FilteringSelect`.

			var menuitem = dojo.create("li", {
				"class": "dijitReset dijitMenuItem" +(this.isLeftToRight() ? "" : " dijitMenuItemRtl"),
				role: "option"
			});
			var labelObject = labelFunc(item);
			if(labelObject.html){
				menuitem.innerHTML = labelObject.label;
			}else{
				menuitem.appendChild(
					dojo.doc.createTextNode(labelObject.label)
				);
			}
			// #3250: in blank options, assign a normal height
			if(menuitem.innerHTML == ""){
				menuitem.innerHTML = "&nbsp;";
			}
			menuitem.item=item;
			return menuitem;
		},

		createOptions: function(results, dataObject, labelFunc){
			// summary:
			//		Fills in the items in the drop down list
			// results:
			//		Array of dojo.data items
			// dataObject:
			//		dojo.data store
			// labelFunc:
			//		Function to produce a label in the drop down list from a dojo.data item

			//this._dataObject=dataObject;
			//this._dataObject.onComplete=dojo.hitch(comboBox, comboBox._openResultList);
			// display "Previous . . ." button
			this.previousButton.style.display = (dataObject.start == 0) ? "none" : "";
			dojo.attr(this.previousButton, "id", this.id + "_prev");
			// create options using _createOption function defined by parent
			// ComboBox (or FilteringSelect) class
			// #2309:
			//		iterate over cache nondestructively
			dojo.forEach(results, function(item, i){
				var menuitem = this._createOption(item, labelFunc);
				dojo.attr(menuitem, "id", this.id + i);
				this.domNode.insertBefore(menuitem, this.nextButton);
			}, this);
			// display "Next . . ." button
			var displayMore = false;
			//Try to determine if we should show 'more'...
			if(dataObject._maxOptions && dataObject._maxOptions != -1){
				if((dataObject.start + dataObject.count) < dataObject._maxOptions){
					displayMore = true;
				}else if((dataObject.start + dataObject.count) > dataObject._maxOptions && dataObject.count == results.length){
					//Weird return from a datastore, where a start + count > maxOptions
					// implies maxOptions isn't really valid and we have to go into faking it.
					//And more or less assume more if count == results.length
					displayMore = true;
				}
			}else if(dataObject.count == results.length){
				//Don't know the size, so we do the best we can based off count alone.
				//So, if we have an exact match to count, assume more.
				displayMore = true;
			}

			this.nextButton.style.display = displayMore ? "" : "none";
			dojo.attr(this.nextButton,"id", this.id + "_next");
			return this.domNode.childNodes;
		},

		clearResultList: function(){
			// summary:
			//		Clears the entries in the drop down list, but of course keeps the previous and next buttons.
			while(this.domNode.childNodes.length>2){
				this.domNode.removeChild(this.domNode.childNodes[this.domNode.childNodes.length-2]);
			}
			this._blurOptionNode();
		},

		_onMouseDown: function(/*Event*/ evt){
			dojo.stopEvent(evt);
		},

		_onMouseUp: function(/*Event*/ evt){
			if(evt.target === this.domNode || !this._highlighted_option){
				// !this._highlighted_option check to prevent immediate selection when menu appears on top
				// of <input>, see #9898.  Note that _HasDropDown also has code to prevent this.
				return;
			}else if(evt.target == this.previousButton){
				this._blurOptionNode();
				this.onPage(-1);
			}else if(evt.target == this.nextButton){
				this._blurOptionNode();
				this.onPage(1);
			}else{
				var tgt = evt.target;
				// while the clicked node is inside the div
				while(!tgt.item){
					// recurse to the top
					tgt = tgt.parentNode;
				}
				this._setValueAttr({ target: tgt }, true);
			}
		},

		_onMouseOver: function(/*Event*/ evt){
			if(evt.target === this.domNode){ return; }
			var tgt = evt.target;
			if(!(tgt == this.previousButton || tgt == this.nextButton)){
				// while the clicked node is inside the div
				while(!tgt.item){
					// recurse to the top
					tgt = tgt.parentNode;
				}
			}
			this._focusOptionNode(tgt);
		},

		_onMouseOut: function(/*Event*/ evt){
			if(evt.target === this.domNode){ return; }
			this._blurOptionNode();
		},

		_focusOptionNode: function(/*DomNode*/ node){
			// summary:
			//		Does the actual highlight.
			if(this._highlighted_option != node){
				this._blurOptionNode();
				this._highlighted_option = node;
				dojo.addClass(this._highlighted_option, "dijitMenuItemSelected");
			}
		},

		_blurOptionNode: function(){
			// summary:
			//		Removes highlight on highlighted option.
			if(this._highlighted_option){
				dojo.removeClass(this._highlighted_option, "dijitMenuItemSelected");
				this._highlighted_option = null;
			}
		},

		_highlightNextOption: function(){
			// summary:
			// 		Highlight the item just below the current selection.
			// 		If nothing selected, highlight first option.

			// because each press of a button clears the menu,
			// the highlighted option sometimes becomes detached from the menu!
			// test to see if the option has a parent to see if this is the case.
			if(!this.getHighlightedOption()){
				var fc = this.domNode.firstChild;
				this._focusOptionNode(fc.style.display == "none" ? fc.nextSibling : fc);
			}else{
				var ns = this._highlighted_option.nextSibling;
				if(ns && ns.style.display != "none"){
					this._focusOptionNode(ns);
				}else{
					this.highlightFirstOption();
				}
			}
			// scrollIntoView is called outside of _focusOptionNode because in IE putting it inside causes the menu to scroll up on mouseover
			dojo.window.scrollIntoView(this._highlighted_option);
		},

		highlightFirstOption: function(){
			// summary:
			// 		Highlight the first real item in the list (not Previous Choices).
			var first = this.domNode.firstChild;
			var second = first.nextSibling;
			this._focusOptionNode(second.style.display == "none" ? first : second); // remotely possible that Previous Choices is the only thing in the list
			dojo.window.scrollIntoView(this._highlighted_option);
		},

		highlightLastOption: function(){
			// summary:
			// 		Highlight the last real item in the list (not More Choices).
			this._focusOptionNode(this.domNode.lastChild.previousSibling);
			dojo.window.scrollIntoView(this._highlighted_option);
		},

		_highlightPrevOption: function(){
			// summary:
			// 		Highlight the item just above the current selection.
			// 		If nothing selected, highlight last option (if
			// 		you select Previous and try to keep scrolling up the list).
			if(!this.getHighlightedOption()){
				var lc = this.domNode.lastChild;
				this._focusOptionNode(lc.style.display == "none" ? lc.previousSibling : lc);
			}else{
				var ps = this._highlighted_option.previousSibling;
				if(ps && ps.style.display != "none"){
					this._focusOptionNode(ps);
				}else{
					this.highlightLastOption();
				}
			}
			dojo.window.scrollIntoView(this._highlighted_option);
		},

		_page: function(/*Boolean*/ up){
			// summary:
			//		Handles page-up and page-down keypresses

			var scrollamount = 0;
			var oldscroll = this.domNode.scrollTop;
			var height = dojo.style(this.domNode, "height");
			// if no item is highlighted, highlight the first option
			if(!this.getHighlightedOption()){
				this._highlightNextOption();
			}
			while(scrollamount<height){
				if(up){
					// stop at option 1
					if(!this.getHighlightedOption().previousSibling ||
						this._highlighted_option.previousSibling.style.display == "none"){
						break;
					}
					this._highlightPrevOption();
				}else{
					// stop at last option
					if(!this.getHighlightedOption().nextSibling ||
						this._highlighted_option.nextSibling.style.display == "none"){
						break;
					}
					this._highlightNextOption();
				}
				// going backwards
				var newscroll=this.domNode.scrollTop;
				scrollamount+=(newscroll-oldscroll)*(up ? -1:1);
				oldscroll=newscroll;
			}
		},

		pageUp: function(){
			// summary:
			//		Handles pageup keypress.
			//		TODO: just call _page directly from handleKey().
			// tags:
			//		private
			this._page(true);
		},

		pageDown: function(){
			// summary:
			//		Handles pagedown keypress.
			//		TODO: just call _page directly from handleKey().
			// tags:
			//		private
			this._page(false);
		},

		getHighlightedOption: function(){
			// summary:
			//		Returns the highlighted option.
			var ho = this._highlighted_option;
			return (ho && ho.parentNode) ? ho : null;
		},

		handleKey: function(evt){
			// summary:
			//		Handle keystroke event forwarded from ComboBox, returning false if it's
			//		a keystroke I recognize and process, true otherwise.
			switch(evt.charOrCode){
				case dojo.keys.DOWN_ARROW:
					this._highlightNextOption();
					return false;
				case dojo.keys.PAGE_DOWN:
					this.pageDown();
					return false;
				case dojo.keys.UP_ARROW:
					this._highlightPrevOption();
					return false;
				case dojo.keys.PAGE_UP:
					this.pageUp();
					return false;
				default:
					return true;
			}
		}
	}
);

dojo.declare(
	"dijit.form.ComboBox",
	[dijit.form.ValidationTextBox, dijit.form.ComboBoxMixin],
	{
		// summary:
		//		Auto-completing text box, and base class for dijit.form.FilteringSelect.
		//
		// description:
		//		The drop down box's values are populated from an class called
		//		a data provider, which returns a list of values based on the characters
		//		that the user has typed into the input box.
		//		If OPTION tags are used as the data provider via markup,
		//		then the OPTION tag's child text node is used as the widget value
		//		when selected.  The OPTION tag's value attribute is ignored.
		//		To set the default value when using OPTION tags, specify the selected
		//		attribute on 1 of the child OPTION tags.
		//
		//		Some of the options to the ComboBox are actually arguments to the data
		//		provider.

		_setValueAttr: function(/*String*/ value, /*Boolean?*/ priorityChange, /*String?*/ displayedValue){
			// summary:
			//		Hook so set('value', value) works.
			// description:
			//		Sets the value of the select.
			this._set("item", null); // value not looked up in store
			if(!value){ value = ''; } // null translates to blank
			dijit.form.ValidationTextBox.prototype._setValueAttr.call(this, value, priorityChange, displayedValue);
		}
	}
);

dojo.declare("dijit.form._ComboBoxDataStore", null, {
	// summary:
	//		Inefficient but small data store specialized for inlined `dijit.form.ComboBox` data
	//
	// description:
	//		Provides a store for inlined data like:
	//
	//	|	<select>
	//	|		<option value="AL">Alabama</option>
	//	|		...
	//
	//		Actually. just implements the subset of dojo.data.Read/Notification
	//		needed for ComboBox and FilteringSelect to work.
	//
	//		Note that an item is just a pointer to the <option> DomNode.

	constructor: function( /*DomNode*/ root){
		this.root = root;
		if(root.tagName != "SELECT" && root.firstChild){
			root = dojo.query("select", root);
			if(root.length > 0){ // SELECT is a child of srcNodeRef
				root = root[0];
			}else{ // no select, so create 1 to parent the option tags to define selectedIndex
				this.root.innerHTML = "<SELECT>"+this.root.innerHTML+"</SELECT>";
				root = this.root.firstChild;
			}
			this.root = root;
		}
		dojo.query("> option", root).forEach(function(node){
			//	TODO: this was added in #3858 but unclear why/if it's needed;  doesn't seem to be.
			//	If it is needed then can we just hide the select itself instead?
			//node.style.display="none";
			node.innerHTML = dojo.trim(node.innerHTML);
		});

	},

	getValue: function(	/*item*/ item,
						/*attribute-name-string*/ attribute,
						/*value?*/ defaultValue){
		return (attribute == "value") ? item.value : (item.innerText || item.textContent || '');
	},

	isItemLoaded: function(/*anything*/ something){
		return true;
	},

	getFeatures: function(){
		return {"dojo.data.api.Read": true, "dojo.data.api.Identity": true};
	},

	_fetchItems: function(	/*Object*/ args,
							/*Function*/ findCallback,
							/*Function*/ errorCallback){
		// summary:
		//		See dojo.data.util.simpleFetch.fetch()
		if(!args.query){ args.query = {}; }
		if(!args.query.name){ args.query.name = ""; }
		if(!args.queryOptions){ args.queryOptions = {}; }
		var matcher = dojo.data.util.filter.patternToRegExp(args.query.name, args.queryOptions.ignoreCase),
			items = dojo.query("> option", this.root).filter(function(option){
				return (option.innerText || option.textContent || '').match(matcher);
			} );
		if(args.sort){
			items.sort(dojo.data.util.sorter.createSortFunction(args.sort, this));
		}
		findCallback(items, args);
	},

	close: function(/*dojo.data.api.Request || args || null*/ request){
		return;
	},

	getLabel: function(/*item*/ item){
		return item.innerHTML;
	},

	getIdentity: function(/*item*/ item){
		return dojo.attr(item, "value");
	},

	fetchItemByIdentity: function(/*Object*/ args){
		// summary:
		//		Given the identity of an item, this method returns the item that has
		//		that identity through the onItem callback.
		//		Refer to dojo.data.api.Identity.fetchItemByIdentity() for more details.
		//
		// description:
		//		Given arguments like:
		//
		//	|		{identity: "CA", onItem: function(item){...}
		//
		//		Call `onItem()` with the DOM node `<option value="CA">California</option>`
		var item = dojo.query("> option[value='" + args.identity + "']", this.root)[0];
		args.onItem(item);
	},

	fetchSelectedItem: function(){
		// summary:
		//		Get the option marked as selected, like `<option selected>`.
		//		Not part of dojo.data API.
		var root = this.root,
			si = root.selectedIndex;
		return typeof si == "number"
			? dojo.query("> option:nth-child(" + (si != -1 ? si+1 : 1) + ")", root)[0]
			: null;	// dojo.data.Item
	}
});
//Mix in the simple fetch implementation to this class.
dojo.extend(dijit.form._ComboBoxDataStore,dojo.data.util.simpleFetch);

}

if(!dojo._hasResource["dijit.form.FilteringSelect"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.FilteringSelect"] = true;
dojo.provide("dijit.form.FilteringSelect");




dojo.declare(
	"dijit.form.FilteringSelect",
	[dijit.form.MappedTextBox, dijit.form.ComboBoxMixin],
	{
		// summary:
		//		An enhanced version of the HTML SELECT tag, populated dynamically
		//
		// description:
		//		An enhanced version of the HTML SELECT tag, populated dynamically. It works
		//		very nicely with very large data sets because it can load and page data as needed.
		//		It also resembles ComboBox, but does not allow values outside of the provided ones.
		//		If OPTION tags are used as the data provider via markup, then the
		//		OPTION tag's child text node is used as the displayed value when selected
		//		while the OPTION tag's value attribute is used as the widget value on form submit.
		//		To set the default value when using OPTION tags, specify the selected
		//		attribute on 1 of the child OPTION tags.
		//
		//		Similar features:
		//			- There is a drop down list of possible values.
		//			- You can only enter a value from the drop down list.  (You can't
		//				enter an arbitrary value.)
		//			- The value submitted with the form is the hidden value (ex: CA),
		//				not the displayed value a.k.a. label (ex: California)
		//
		//		Enhancements over plain HTML version:
		//			- If you type in some text then it will filter down the list of
		//				possible values in the drop down list.
		//			- List can be specified either as a static list or via a javascript
		//				function (that can get the list from a server)

		// required: Boolean
		//		True (default) if user is required to enter a value into this field.
		required: true,

		_lastDisplayedValue: "",

		_isValidSubset: function(){
			return this._opened;
		},

		isValid: function(){
			// Overrides ValidationTextBox.isValid()
			return this.item || (!this.required && this.get('displayedValue') == ""); // #5974
		},

		_refreshState: function(){
			if(!this.searchTimer){ // state will be refreshed after results are returned
				this.inherited(arguments);
			}
		},

		_callbackSetLabel: function(
						/*Array*/ result,
						/*Object*/ dataObject,
						/*Boolean?*/ priorityChange){
			// summary:
			//		Callback from dojo.data after lookup of user entered value finishes

			// setValue does a synchronous lookup,
			// so it calls _callbackSetLabel directly,
			// and so does not pass dataObject
			// still need to test against _lastQuery in case it came too late
			if((dataObject && dataObject.query[this.searchAttr] != this._lastQuery) || (!dataObject && result.length && this.store.getIdentity(result[0]) != this._lastQuery)){
				return;
			}
			if(!result.length){
				//#3268: don't modify display value on bad input
				//#3285: change CSS to indicate error
				this.valueNode.value = "";
				dijit.form.TextBox.superclass._setValueAttr.call(this, "", priorityChange || (priorityChange === undefined && !this._focused));
				this._set("item", null);
				this.validate(this._focused);
			}else{
				this.set('item', result[0], priorityChange);
			}
		},

		_openResultList: function(/*Object*/ results, /*Object*/ dataObject){
			// Callback when a data store query completes.
			// Overrides ComboBox._openResultList()

			// #3285: tap into search callback to see if user's query resembles a match
			if(dataObject.query[this.searchAttr] != this._lastQuery){
				return;
			}
			dijit.form.ComboBoxMixin.prototype._openResultList.apply(this, arguments);

			if(this.item === undefined){ // item == undefined for keyboard search
				// If the search returned no items that means that the user typed
				// in something invalid (and they can't make it valid by typing more characters),
				// so flag the FilteringSelect as being in an invalid state
				this.validate(true);
			}
		},

		_getValueAttr: function(){
			// summary:
			//		Hook for get('value') to work.

			// don't get the textbox value but rather the previously set hidden value.
			// Use this.valueNode.value which isn't always set for other MappedTextBox widgets until blur
			return this.valueNode.value;
		},

		_getValueField: function(){
			// Overrides ComboBox._getValueField()
			return "value";
		},

		_setValueAttr: function(/*String*/ value, /*Boolean?*/ priorityChange){
			// summary:
			//		Hook so set('value', value) works.
			// description:
			//		Sets the value of the select.
			//		Also sets the label to the corresponding value by reverse lookup.
			if(!this._onChangeActive){ priorityChange = null; }
			this._lastQuery = value;

			if(value === null || value === ''){
				this._setDisplayedValueAttr('', priorityChange);
				return;
			}

			//#3347: fetchItemByIdentity if no keyAttr specified
			var self = this;
			this.store.fetchItemByIdentity({
				identity: value,
				onItem: function(item){
					self._callbackSetLabel(item? [item] : [], undefined, priorityChange);
				}
			});
		},

		_setItemAttr: function(/*item*/ item, /*Boolean?*/ priorityChange, /*String?*/ displayedValue){
			// summary:
			//		Set the displayed valued in the input box, and the hidden value
			//		that gets submitted, based on a dojo.data store item.
			// description:
			//		Users shouldn't call this function; they should be calling
			//		set('item', value)
			// tags:
			//		private
			this.inherited(arguments);
			this.valueNode.value = this.value;
			this._lastDisplayedValue = this.textbox.value;
		},

		_getDisplayQueryString: function(/*String*/ text){
			return text.replace(/([\\\*\?])/g, "\\$1");
		},

		_setDisplayedValueAttr: function(/*String*/ label, /*Boolean?*/ priorityChange){
			// summary:
			//		Hook so set('displayedValue', label) works.
			// description:
			//		Sets textbox to display label. Also performs reverse lookup
			//		to set the hidden value.  label should corresponding to item.searchAttr.

			if(label == null){ label = ''; }

			// This is called at initialization along with every custom setter.
			// Usually (or always?) the call can be ignored.   If it needs to be
			// processed then at least make sure that the XHR request doesn't trigger an onChange()
			// event, even if it returns after creation has finished
			if(!this._created){
				if(!("displayedValue" in this.params)){
					return;
				}
				priorityChange = false;
			}

			// Do a reverse lookup to map the specified displayedValue to the hidden value.
			// Note that if there's a custom labelFunc() this code
			if(this.store){
				this.closeDropDown();
				var query = dojo.clone(this.query); // #6196: populate query with user-specifics
				// escape meta characters of dojo.data.util.filter.patternToRegExp().
				this._lastQuery = query[this.searchAttr] = this._getDisplayQueryString(label);
				// If the label is not valid, the callback will never set it,
				// so the last valid value will get the warning textbox.   Set the
				// textbox value now so that the impending warning will make
				// sense to the user
				this.textbox.value = label;
				this._lastDisplayedValue = label;
				this._set("displayedValue", label);	// for watch("displayedValue") notification
				var _this = this;
				var fetch = {
					query: query,
					queryOptions: {
						ignoreCase: this.ignoreCase,
						deep: true
					},
					onComplete: function(result, dataObject){
						_this._fetchHandle = null;
						dojo.hitch(_this, "_callbackSetLabel")(result, dataObject, priorityChange);
					},
					onError: function(errText){
						_this._fetchHandle = null;
						console.error('dijit.form.FilteringSelect: ' + errText);
						dojo.hitch(_this, "_callbackSetLabel")([], undefined, false);
					}
				};
				dojo.mixin(fetch, this.fetchProperties);
				this._fetchHandle = this.store.fetch(fetch);
			}
		},

		undo: function(){
			this.set('displayedValue', this._lastDisplayedValue);
		}
	}
);

}

if(!dojo._hasResource["dijit.form.NumberTextBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.NumberTextBox"] = true;
dojo.provide("dijit.form.NumberTextBox");





/*=====
dojo.declare(
	"dijit.form.NumberTextBox.__Constraints",
	[dijit.form.RangeBoundTextBox.__Constraints, dojo.number.__FormatOptions, dojo.number.__ParseOptions], {
	// summary:
	//		Specifies both the rules on valid/invalid values (minimum, maximum,
	//		number of required decimal places), and also formatting options for
	//		displaying the value when the field is not focused.
	// example:
	//		Minimum/maximum:
	//		To specify a field between 0 and 120:
	//	|		{min:0,max:120}
	//		To specify a field that must be an integer:
	//	|		{fractional:false}
	//		To specify a field where 0 to 3 decimal places are allowed on input:
	//	|		{places:'0,3'}
});
=====*/

dojo.declare("dijit.form.NumberTextBoxMixin",
	null,
	{
		// summary:
		//		A mixin for all number textboxes
		// tags:
		//		protected

		// Override ValidationTextBox.regExpGen().... we use a reg-ex generating function rather
		// than a straight regexp to deal with locale (plus formatting options too?)
		regExpGen: dojo.number.regexp,

		/*=====
		// constraints: dijit.form.NumberTextBox.__Constraints
		//		Despite the name, this parameter specifies both constraints on the input
		//		(including minimum/maximum allowed values) as well as
		//		formatting options like places (the number of digits to display after
		//		the decimal point).  See `dijit.form.NumberTextBox.__Constraints` for details.
		constraints: {},
		======*/

		// value: Number
		//		The value of this NumberTextBox as a Javascript Number (i.e., not a String).
		//		If the displayed value is blank, the value is NaN, and if the user types in
		//		an gibberish value (like "hello world"), the value is undefined
		//		(i.e. get('value') returns undefined).
		//
		//		Symmetrically, set('value', NaN) will clear the displayed value,
		//		whereas set('value', undefined) will have no effect.
		value: NaN,

		// editOptions: [protected] Object
		//		Properties to mix into constraints when the value is being edited.
		//		This is here because we edit the number in the format "12345", which is
		//		different than the display value (ex: "12,345")
		editOptions: { pattern: '#.######' },

		/*=====
		_formatter: function(value, options){
			// summary:
			//		_formatter() is called by format().  It's the base routine for formatting a number,
			//		as a string, for example converting 12345 into "12,345".
			// value: Number
			//		The number to be converted into a string.
			// options: dojo.number.__FormatOptions?
			//		Formatting options
			// tags:
			//		protected extension

			return "12345";		// String
		},
		 =====*/
		_formatter: dojo.number.format,

		_setConstraintsAttr: function(/*Object*/ constraints){
			var places = typeof constraints.places == "number"? constraints.places : 0;
			if(places){ places++; } // decimal rounding errors take away another digit of precision
			if(typeof constraints.max != "number"){
				constraints.max = 9 * Math.pow(10, 15-places);
			}
			if(typeof constraints.min != "number"){
				constraints.min = -9 * Math.pow(10, 15-places);
			}
			this.inherited(arguments, [ constraints ]);
			if(this.focusNode && this.focusNode.value && !isNaN(this.value)){
				this.set('value', this.value);
			}
		},

		_onFocus: function(){
			if(this.disabled){ return; }
			var val = this.get('value');
			if(typeof val == "number" && !isNaN(val)){
				var formattedValue = this.format(val, this.constraints);
				if(formattedValue !== undefined){
					this.textbox.value = formattedValue;
				}
			}
			this.inherited(arguments);
		},

		format: function(/*Number*/ value, /*dojo.number.__FormatOptions*/ constraints){
			// summary:
			//		Formats the value as a Number, according to constraints.
			// tags:
			//		protected

			var formattedValue = String(value);
			if(typeof value != "number"){ return formattedValue; }
			if(isNaN(value)){ return ""; }
			// check for exponential notation that dojo.number.format chokes on
			if(!("rangeCheck" in this && this.rangeCheck(value, constraints)) && constraints.exponent !== false && /\de[-+]?\d/i.test(formattedValue)){
				return formattedValue;
			}
			if(this.editOptions && this._focused){
				constraints = dojo.mixin({}, constraints, this.editOptions);
			}
			return this._formatter(value, constraints);
		},

		/*=====
		_parser: function(value, constraints){
			// summary:
			//		Parses the string value as a Number, according to constraints.
			// value: String
			//		String representing a number
			// constraints: dojo.number.__ParseOptions
			//		Formatting options
			// tags:
			//		protected

			return 123.45;		// Number
		},
		=====*/
		_parser: dojo.number.parse,

		parse: function(/*String*/ value, /*dojo.number.__FormatOptions*/ constraints){
			// summary:
			//		Replacable function to convert a formatted string to a number value
			// tags:
			//		protected extension

			var v = this._parser(value, dojo.mixin({}, constraints, (this.editOptions && this._focused) ? this.editOptions : {}));
			if(this.editOptions && this._focused && isNaN(v)){
				v = this._parser(value, constraints); // parse w/o editOptions: not technically needed but is nice for the user
			}
			return v;
		},

		_getDisplayedValueAttr: function(){
			var v = this.inherited(arguments);
			return isNaN(v) ? this.textbox.value : v;
		},

		filter: function(/*Number*/ value){
			// summary:
			//		This is called with both the display value (string), and the actual value (a number).
			//		When called with the actual value it does corrections so that '' etc. are represented as NaN.
			//		Otherwise it dispatches to the superclass's filter() method.
			//
			//		See `dijit.form.TextBox.filter` for more details.
			return (value === null || value === '' || value === undefined) ? NaN : this.inherited(arguments); // set('value', null||''||undefined) should fire onChange(NaN)
		},

		serialize: function(/*Number*/ value, /*Object?*/ options){
			// summary:
			//		Convert value (a Number) into a canonical string (ie, how the number literal is written in javascript/java/C/etc.)
			// tags:
			//		protected
			return (typeof value != "number" || isNaN(value)) ? '' : this.inherited(arguments);
		},

		_setBlurValue: function(){
			var val = dojo.hitch(dojo.mixin({}, this, { _focused: true }), "get")('value'); // parse with editOptions
			this._setValueAttr(val, true);
		},

		_setValueAttr: function(/*Number*/ value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue){
			// summary:
			//		Hook so set('value', ...) works.
			if(value !== undefined && formattedValue === undefined){
				formattedValue = String(value);
				if(typeof value == "number"){
					if(isNaN(value)){ formattedValue = '' }
					// check for exponential notation that dojo.number.format chokes on
					else if(("rangeCheck" in this && this.rangeCheck(value, this.constraints)) || this.constraints.exponent === false || !/\de[-+]?\d/i.test(formattedValue)){
						formattedValue = undefined; // lets format comnpute a real string value
					}
				}else if(!value){ // 0 processed in if branch above, ''|null|undefined flow thru here
					formattedValue = '';
					value = NaN;
				}else{ // non-numeric values
					value = undefined;
				}
			}
			this.inherited(arguments, [value, priorityChange, formattedValue]);
		},

		_getValueAttr: function(){
			// summary:
			//		Hook so get('value') works.
			//		Returns Number, NaN for '', or undefined for unparsable text
			var v = this.inherited(arguments); // returns Number for all values accepted by parse() or NaN for all other displayed values

			// If the displayed value of the textbox is gibberish (ex: "hello world"), this.inherited() above
			// returns NaN; this if() branch converts the return value to undefined.
			// Returning undefined prevents user text from being overwritten when doing _setValueAttr(_getValueAttr()).
			// A blank displayed value is still returned as NaN.
			if(isNaN(v) && this.textbox.value !== ''){
				if(this.constraints.exponent !== false && /\de[-+]?\d/i.test(this.textbox.value) && (new RegExp("^"+dojo.number._realNumberRegexp(dojo.mixin({}, this.constraints))+"$").test(this.textbox.value))){	// check for exponential notation that parse() rejected (erroneously?)
					var n = Number(this.textbox.value);
					return isNaN(n) ? undefined : n; // return exponential Number or undefined for random text (may not be possible to do with the above RegExp check)
				}else{
					return undefined; // gibberish
				}
			}else{
				return v; // Number or NaN for ''
			}
		},

		isValid: function(/*Boolean*/ isFocused){
			// Overrides dijit.form.RangeBoundTextBox.isValid to check that the editing-mode value is valid since
			// it may not be formatted according to the regExp vaidation rules
			if(!this._focused || this._isEmpty(this.textbox.value)){
				return this.inherited(arguments);
			}else{
				var v = this.get('value');
				if(!isNaN(v) && this.rangeCheck(v, this.constraints)){
					if(this.constraints.exponent !== false && /\de[-+]?\d/i.test(this.textbox.value)){ // exponential, parse doesn't like it
						return true; // valid exponential number in range
					}else{
						return this.inherited(arguments);
					}
				}else{
					return false;
				}
			}
		}
	}
);

dojo.declare("dijit.form.NumberTextBox",
	[dijit.form.RangeBoundTextBox,dijit.form.NumberTextBoxMixin],
	{
		// summary:
		//		A TextBox for entering numbers, with formatting and range checking
		// description:
		//		NumberTextBox is a textbox for entering and displaying numbers, supporting
		//		the following main features:
		//
		//			1. Enforce minimum/maximum allowed values (as well as enforcing that the user types
		//				a number rather than a random string)
		//			2. NLS support (altering roles of comma and dot as "thousands-separator" and "decimal-point"
		//				depending on locale).
		//			3. Separate modes for editing the value and displaying it, specifically that
		//				the thousands separator character (typically comma) disappears when editing
		//				but reappears after the field is blurred.
		//			4. Formatting and constraints regarding the number of places (digits after the decimal point)
		//				allowed on input, and number of places displayed when blurred (see `constraints` parameter).

		baseClass: "dijitTextBox dijitNumberTextBox"
	}
);

}

if(!dojo._hasResource["dijit.form.CheckBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.CheckBox"] = true;
dojo.provide("dijit.form.CheckBox");




dojo.declare(
	"dijit.form.CheckBox",
	dijit.form.ToggleButton,
	{
		// summary:
		// 		Same as an HTML checkbox, but with fancy styling.
		//
		// description:
		//		User interacts with real html inputs.
		//		On onclick (which occurs by mouse click, space-bar, or
		//		using the arrow keys to switch the selected radio button),
		//		we update the state of the checkbox/radio.
		//
		//		There are two modes:
		//			1. High contrast mode
		//			2. Normal mode
		//
		//		In case 1, the regular html inputs are shown and used by the user.
		//		In case 2, the regular html inputs are invisible but still used by
		//		the user. They are turned quasi-invisible and overlay the background-image.

		templateString: dojo.cache("dijit.form", "templates/CheckBox.html", "<div class=\"dijit dijitReset dijitInline\" role=\"presentation\"\r\n\t><input\r\n\t \t${!nameAttrSetting} type=\"${type}\" ${checkedAttrSetting}\r\n\t\tclass=\"dijitReset dijitCheckBoxInput\"\r\n\t\tdojoAttachPoint=\"focusNode\"\r\n\t \tdojoAttachEvent=\"onclick:_onClick\"\r\n/></div>\r\n"),

		baseClass: "dijitCheckBox",

		// type: [private] String
		//		type attribute on <input> node.
		//		Overrides `dijit.form.Button.type`.  Users should not change this value.
		type: "checkbox",

		// value: String
		//		As an initialization parameter, equivalent to value field on normal checkbox
		//		(if checked, the value is passed as the value when form is submitted).
		//
		//		However, get('value') will return either the string or false depending on
		//		whether or not the checkbox is checked.
		//
		//		set('value', string) will check the checkbox and change the value to the
		//		specified string
		//
		//		set('value', boolean) will change the checked state.
		value: "on",

		// readOnly: Boolean
		//		Should this widget respond to user input?
		//		In markup, this is specified as "readOnly".
		//		Similar to disabled except readOnly form values are submitted.
		readOnly: false,
		
		// the attributeMap should inherit from dijit.form._FormWidget.prototype.attributeMap
		// instead of ToggleButton as the icon mapping has no meaning for a CheckBox
		attributeMap: dojo.delegate(dijit.form._FormWidget.prototype.attributeMap, {
			readOnly: "focusNode"
		}),

		_setReadOnlyAttr: function(/*Boolean*/ value){
			this._set("readOnly", value);
			dojo.attr(this.focusNode, 'readOnly', value);
			dijit.setWaiState(this.focusNode, "readonly", value);
		},

		_setValueAttr: function(/*String|Boolean*/ newValue, /*Boolean*/ priorityChange){
			// summary:
			//		Handler for value= attribute to constructor, and also calls to
			//		set('value', val).
			// description:
			//		During initialization, just saves as attribute to the <input type=checkbox>.
			//
			//		After initialization,
			//		when passed a boolean, controls whether or not the CheckBox is checked.
			//		If passed a string, changes the value attribute of the CheckBox (the one
			//		specified as "value" when the CheckBox was constructed (ex: <input
			//		dojoType="dijit.CheckBox" value="chicken">)
			if(typeof newValue == "string"){
				this._set("value", newValue);
				dojo.attr(this.focusNode, 'value', newValue);
				newValue = true;
			}
			if(this._created){
				this.set('checked', newValue, priorityChange);
			}
		},
		_getValueAttr: function(){
			// summary:
			//		Hook so get('value') works.
			// description:
			//		If the CheckBox is checked, returns the value attribute.
			//		Otherwise returns false.
			return (this.checked ? this.value : false);
		},

		// Override dijit.form.Button._setLabelAttr() since we don't even have a containerNode.
		// Normally users won't try to set label, except when CheckBox or RadioButton is the child of a dojox.layout.TabContainer
		_setLabelAttr: undefined,

		postMixInProperties: function(){
			if(this.value == ""){
				this.value = "on";
			}

			// Need to set initial checked state as part of template, so that form submit works.
			// dojo.attr(node, "checked", bool) doesn't work on IEuntil node has been attached
			// to <body>, see #8666
			this.checkedAttrSetting = this.checked ? "checked" : "";

			this.inherited(arguments);
		},

		 _fillContent: function(/*DomNode*/ source){
			// Override Button::_fillContent() since it doesn't make sense for CheckBox,
			// since CheckBox doesn't even have a container
		},

		reset: function(){
			// Override ToggleButton.reset()

			this._hasBeenBlurred = false;

			this.set('checked', this.params.checked || false);

			// Handle unlikely event that the <input type=checkbox> value attribute has changed
			this._set("value", this.params.value || "on");
			dojo.attr(this.focusNode, 'value', this.value);
		},

		_onFocus: function(){
			if(this.id){
				dojo.query("label[for='"+this.id+"']").addClass("dijitFocusedLabel");
			}
			this.inherited(arguments);
		},

		_onBlur: function(){
			if(this.id){
				dojo.query("label[for='"+this.id+"']").removeClass("dijitFocusedLabel");
			}
			this.inherited(arguments);
		},

		_onClick: function(/*Event*/ e){
			// summary:
			//		Internal function to handle click actions - need to check
			//		readOnly, since button no longer does that check.
			if(this.readOnly){
				dojo.stopEvent(e);
				return false;
			}
			return this.inherited(arguments);
		}
	}
);

dojo.declare(
	"dijit.form.RadioButton",
	dijit.form.CheckBox,
	{
		// summary:
		// 		Same as an HTML radio, but with fancy styling.

		type: "radio",
		baseClass: "dijitRadio",

		_setCheckedAttr: function(/*Boolean*/ value){
			// If I am being checked then have to deselect currently checked radio button
			this.inherited(arguments);
			if(!this._created){ return; }
			if(value){
				var _this = this;
				// search for radio buttons with the same name that need to be unchecked
				dojo.query("INPUT[type=radio]", this.focusNode.form || dojo.doc).forEach( // can't use name= since dojo.query doesn't support [] in the name
					function(inputNode){
						if(inputNode.name == _this.name && inputNode != _this.focusNode && inputNode.form == _this.focusNode.form){
							var widget = dijit.getEnclosingWidget(inputNode);
							if(widget && widget.checked){
								widget.set('checked', false);
							}
						}
					}
				);
			}
		},

		_clicked: function(/*Event*/ e){
			if(!this.checked){
				this.set('checked', true);
			}
		}
	}
);

}

if(!dojo._hasResource["dijit.form.MultiSelect"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.MultiSelect"] = true;
dojo.provide("dijit.form.MultiSelect");




dojo.declare("dijit.form.MultiSelect", dijit.form._FormValueWidget, {
	// summary:
	//		Widget version of a <select multiple=true> element,
	//		for selecting multiple options.

	// size: Number
	//		Number of elements to display on a page
	//		NOTE: may be removed in version 2.0, since elements may have variable height;
	//		set the size via style="..." or CSS class names instead.
	size: 7,

	templateString: "<select multiple='true' ${!nameAttrSetting} dojoAttachPoint='containerNode,focusNode' dojoAttachEvent='onchange: _onChange'></select>",

	attributeMap: dojo.delegate(dijit.form._FormWidget.prototype.attributeMap, {
		size: "focusNode"
	}),

	reset: function(){
		// summary:
		//		Reset the widget's value to what it was at initialization time

		// TODO: once we inherit from FormValueWidget this won't be needed
		this._hasBeenBlurred = false;
		this._setValueAttr(this._resetValue, true);
	},

	addSelected: function(/*dijit.form.MultiSelect*/ select){
		// summary:
		//		Move the selected nodes of a passed Select widget
		//		instance to this Select widget.
		//
		// example:
		// |	// move all the selected values from "bar" to "foo"
		// | 	dijit.byId("foo").addSelected(dijit.byId("bar"));

		select.getSelected().forEach(function(n){
			this.containerNode.appendChild(n);
			// scroll to bottom to see item
			// cannot use scrollIntoView since <option> tags don't support all attributes
			// does not work on IE due to a bug where <select> always shows scrollTop = 0
			this.domNode.scrollTop = this.domNode.offsetHeight; // overshoot will be ignored
			// scrolling the source select is trickier esp. on safari who forgets to change the scrollbar size
			var oldscroll = select.domNode.scrollTop;
			select.domNode.scrollTop = 0;
			select.domNode.scrollTop = oldscroll;
		},this);
	},

	getSelected: function(){
		// summary:
		//		Access the NodeList of the selected options directly
		return dojo.query("option",this.containerNode).filter(function(n){
			return n.selected; // Boolean
		}); // dojo.NodeList
	},

	_getValueAttr: function(){
		// summary:
		//		Hook so get('value') works.
		// description:
		//		Returns an array of the selected options' values.
		return this.getSelected().map(function(n){
			return n.value;
		});
	},

	multiple: true, // for Form

	_setValueAttr: function(/*Array*/ values){
		// summary:
		//		Hook so set('value', values) works.
		// description:
		//		Set the value(s) of this Select based on passed values
		dojo.query("option",this.containerNode).forEach(function(n){
			n.selected = (dojo.indexOf(values,n.value) != -1);
		});
	},

	invertSelection: function(onChange){
		// summary:
		//		Invert the selection
		// onChange: Boolean
		//		If null, onChange is not fired.
		dojo.query("option",this.containerNode).forEach(function(n){
			n.selected = !n.selected;
		});
		this._handleOnChange(this.get('value'), onChange == true);
	},

	_onChange: function(/*Event*/ e){
		this._handleOnChange(this.get('value'), true);
	},

	// for layout widgets:
	resize: function(/*Object*/ size){
		if(size){
			dojo.marginBox(this.domNode, size);
		}
	},

	postCreate: function(){
		this._onChange();
	}
});

}

if(!dojo._hasResource["dojo.cldr.supplemental"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.cldr.supplemental"] = true;
dojo.provide("dojo.cldr.supplemental");



dojo.getObject("cldr.supplemental", true, dojo);

dojo.cldr.supplemental.getFirstDayOfWeek = function(/*String?*/locale){
// summary: Returns a zero-based index for first day of the week
// description:
//		Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar.
//		e.g. Sunday (returns 0), or Monday (returns 1)

	// from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/firstDay
	var firstDay = {/*default is 1=Monday*/
		mv:5,
		ae:6,af:6,bh:6,dj:6,dz:6,eg:6,er:6,et:6,iq:6,ir:6,jo:6,ke:6,kw:6,
		ly:6,ma:6,om:6,qa:6,sa:6,sd:6,so:6,sy:6,tn:6,ye:6,
		ar:0,as:0,az:0,bw:0,ca:0,cn:0,fo:0,ge:0,gl:0,gu:0,hk:0,
		il:0,'in':0,jm:0,jp:0,kg:0,kr:0,la:0,mh:0,mn:0,mo:0,mp:0,
		mt:0,nz:0,ph:0,pk:0,sg:0,th:0,tt:0,tw:0,um:0,us:0,uz:0,
		vi:0,zw:0
// variant. do not use?		gb:0,
	};

	var country = dojo.cldr.supplemental._region(locale);
	var dow = firstDay[country];
	return (dow === undefined) ? 1 : dow; /*Number*/
};

dojo.cldr.supplemental._region = function(/*String?*/locale){
	locale = dojo.i18n.normalizeLocale(locale);
	var tags = locale.split('-');
	var region = tags[1];
	if(!region){
		// IE often gives language only (#2269)
		// Arbitrary mappings of language-only locales to a country:
		region = {de:"de", en:"us", es:"es", fi:"fi", fr:"fr", he:"il", hu:"hu", it:"it",
			ja:"jp", ko:"kr", nl:"nl", pt:"br", sv:"se", zh:"cn"}[tags[0]];
	}else if(region.length == 4){
		// The ISO 3166 country code is usually in the second position, unless a
		// 4-letter script is given. See http://www.ietf.org/rfc/rfc4646.txt
		region = tags[2];
	}
	return region;
};

dojo.cldr.supplemental.getWeekend = function(/*String?*/locale){
// summary: Returns a hash containing the start and end days of the weekend
// description:
//		Returns a hash containing the start and end days of the weekend according to local custom using locale,
//		or by default in the user's locale.
//		e.g. {start:6, end:0}

	// from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/weekend{Start,End}
	var weekendStart = {/*default is 6=Saturday*/
		'in':0,
		af:4,dz:4,ir:4,om:4,sa:4,ye:4,
		ae:5,bh:5,eg:5,il:5,iq:5,jo:5,kw:5,ly:5,ma:5,qa:5,sd:5,sy:5,tn:5
	};

	var weekendEnd = {/*default is 0=Sunday*/
		af:5,dz:5,ir:5,om:5,sa:5,ye:5,
		ae:6,bh:5,eg:6,il:6,iq:6,jo:6,kw:6,ly:6,ma:6,qa:6,sd:6,sy:6,tn:6
	};

	var country = dojo.cldr.supplemental._region(locale);
	var start = weekendStart[country];
	var end = weekendEnd[country];
	if(start === undefined){start=6;}
	if(end === undefined){end=0;}
	return {start:start, end:end}; /*Object {start,end}*/
};

}

if(!dojo._hasResource["dojo.date"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.date"] = true;
dojo.provide("dojo.date");


dojo.getObject("date", true, dojo);

/*=====
dojo.date = {
	// summary: Date manipulation utilities
}
=====*/

dojo.date.getDaysInMonth = function(/*Date*/dateObject){
	//	summary:
	//		Returns the number of days in the month used by dateObject
	var month = dateObject.getMonth();
	var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	if(month == 1 && dojo.date.isLeapYear(dateObject)){ return 29; } // Number
	return days[month]; // Number
};

dojo.date.isLeapYear = function(/*Date*/dateObject){
	//	summary:
	//		Determines if the year of the dateObject is a leap year
	//	description:
	//		Leap years are years with an additional day YYYY-02-29, where the
	//		year number is a multiple of four with the following exception: If
	//		a year is a multiple of 100, then it is only a leap year if it is
	//		also a multiple of 400. For example, 1900 was not a leap year, but
	//		2000 is one.

	var year = dateObject.getFullYear();
	return !(year%400) || (!(year%4) && !!(year%100)); // Boolean
};

// FIXME: This is not localized
dojo.date.getTimezoneName = function(/*Date*/dateObject){
	//	summary:
	//		Get the user's time zone as provided by the browser
	// dateObject:
	//		Needed because the timezone may vary with time (daylight savings)
	//	description:
	//		Try to get time zone info from toString or toLocaleString method of
	//		the Date object -- UTC offset is not a time zone.  See
	//		http://www.twinsun.com/tz/tz-link.htm Note: results may be
	//		inconsistent across browsers.

	var str = dateObject.toString(); // Start looking in toString
	var tz = ''; // The result -- return empty string if nothing found
	var match;

	// First look for something in parentheses -- fast lookup, no regex
	var pos = str.indexOf('(');
	if(pos > -1){
		tz = str.substring(++pos, str.indexOf(')'));
	}else{
		// If at first you don't succeed ...
		// If IE knows about the TZ, it appears before the year
		// Capital letters or slash before a 4-digit year
		// at the end of string
		var pat = /([A-Z\/]+) \d{4}$/;
		if((match = str.match(pat))){
			tz = match[1];
		}else{
		// Some browsers (e.g. Safari) glue the TZ on the end
		// of toLocaleString instead of putting it in toString
			str = dateObject.toLocaleString();
			// Capital letters or slash -- end of string,
			// after space
			pat = / ([A-Z\/]+)$/;
			if((match = str.match(pat))){
				tz = match[1];
			}
		}
	}

	// Make sure it doesn't somehow end up return AM or PM
	return (tz == 'AM' || tz == 'PM') ? '' : tz; // String
};

// Utility methods to do arithmetic calculations with Dates

dojo.date.compare = function(/*Date*/date1, /*Date?*/date2, /*String?*/portion){
	//	summary:
	//		Compare two date objects by date, time, or both.
	//	description:
	//  	Returns 0 if equal, positive if a > b, else negative.
	//	date1:
	//		Date object
	//	date2:
	//		Date object.  If not specified, the current Date is used.
	//	portion:
	//		A string indicating the "date" or "time" portion of a Date object.
	//		Compares both "date" and "time" by default.  One of the following:
	//		"date", "time", "datetime"

	// Extra step required in copy for IE - see #3112
	date1 = new Date(+date1);
	date2 = new Date(+(date2 || new Date()));

	if(portion == "date"){
		// Ignore times and compare dates.
		date1.setHours(0, 0, 0, 0);
		date2.setHours(0, 0, 0, 0);
	}else if(portion == "time"){
		// Ignore dates and compare times.
		date1.setFullYear(0, 0, 0);
		date2.setFullYear(0, 0, 0);
	}
	
	if(date1 > date2){ return 1; } // int
	if(date1 < date2){ return -1; } // int
	return 0; // int
};

dojo.date.add = function(/*Date*/date, /*String*/interval, /*int*/amount){
	//	summary:
	//		Add to a Date in intervals of different size, from milliseconds to years
	//	date: Date
	//		Date object to start with
	//	interval:
	//		A string representing the interval.  One of the following:
	//			"year", "month", "day", "hour", "minute", "second",
	//			"millisecond", "quarter", "week", "weekday"
	//	amount:
	//		How much to add to the date.

	var sum = new Date(+date); // convert to Number before copying to accomodate IE (#3112)
	var fixOvershoot = false;
	var property = "Date";

	switch(interval){
		case "day":
			break;
		case "weekday":
			//i18n FIXME: assumes Saturday/Sunday weekend, but this is not always true.  see dojo.cldr.supplemental

			// Divide the increment time span into weekspans plus leftover days
			// e.g., 8 days is one 5-day weekspan / and two leftover days
			// Can't have zero leftover days, so numbers divisible by 5 get
			// a days value of 5, and the remaining days make up the number of weeks
			var days, weeks;
			var mod = amount % 5;
			if(!mod){
				days = (amount > 0) ? 5 : -5;
				weeks = (amount > 0) ? ((amount-5)/5) : ((amount+5)/5);
			}else{
				days = mod;
				weeks = parseInt(amount/5);
			}
			// Get weekday value for orig date param
			var strt = date.getDay();
			// Orig date is Sat / positive incrementer
			// Jump over Sun
			var adj = 0;
			if(strt == 6 && amount > 0){
				adj = 1;
			}else if(strt == 0 && amount < 0){
			// Orig date is Sun / negative incrementer
			// Jump back over Sat
				adj = -1;
			}
			// Get weekday val for the new date
			var trgt = strt + days;
			// New date is on Sat or Sun
			if(trgt == 0 || trgt == 6){
				adj = (amount > 0) ? 2 : -2;
			}
			// Increment by number of weeks plus leftover days plus
			// weekend adjustments
			amount = (7 * weeks) + days + adj;
			break;
		case "year":
			property = "FullYear";
			// Keep increment/decrement from 2/29 out of March
			fixOvershoot = true;
			break;
		case "week":
			amount *= 7;
			break;
		case "quarter":
			// Naive quarter is just three months
			amount *= 3;
			// fallthrough...
		case "month":
			// Reset to last day of month if you overshoot
			fixOvershoot = true;
			property = "Month";
			break;
//		case "hour":
//		case "minute":
//		case "second":
//		case "millisecond":
		default:
			property = "UTC"+interval.charAt(0).toUpperCase() + interval.substring(1) + "s";
	}

	if(property){
		sum["set"+property](sum["get"+property]()+amount);
	}

	if(fixOvershoot && (sum.getDate() < date.getDate())){
		sum.setDate(0);
	}

	return sum; // Date
};

dojo.date.difference = function(/*Date*/date1, /*Date?*/date2, /*String?*/interval){
	//	summary:
	//		Get the difference in a specific unit of time (e.g., number of
	//		months, weeks, days, etc.) between two dates, rounded to the
	//		nearest integer.
	//	date1:
	//		Date object
	//	date2:
	//		Date object.  If not specified, the current Date is used.
	//	interval:
	//		A string representing the interval.  One of the following:
	//			"year", "month", "day", "hour", "minute", "second",
	//			"millisecond", "quarter", "week", "weekday"
	//		Defaults to "day".

	date2 = date2 || new Date();
	interval = interval || "day";
	var yearDiff = date2.getFullYear() - date1.getFullYear();
	var delta = 1; // Integer return value

	switch(interval){
		case "quarter":
			var m1 = date1.getMonth();
			var m2 = date2.getMonth();
			// Figure out which quarter the months are in
			var q1 = Math.floor(m1/3) + 1;
			var q2 = Math.floor(m2/3) + 1;
			// Add quarters for any year difference between the dates
			q2 += (yearDiff * 4);
			delta = q2 - q1;
			break;
		case "weekday":
			var days = Math.round(dojo.date.difference(date1, date2, "day"));
			var weeks = parseInt(dojo.date.difference(date1, date2, "week"));
			var mod = days % 7;

			// Even number of weeks
			if(mod == 0){
				days = weeks*5;
			}else{
				// Weeks plus spare change (< 7 days)
				var adj = 0;
				var aDay = date1.getDay();
				var bDay = date2.getDay();

				weeks = parseInt(days/7);
				mod = days % 7;
				// Mark the date advanced by the number of
				// round weeks (may be zero)
				var dtMark = new Date(date1);
				dtMark.setDate(dtMark.getDate()+(weeks*7));
				var dayMark = dtMark.getDay();

				// Spare change days -- 6 or less
				if(days > 0){
					switch(true){
						// Range starts on Sat
						case aDay == 6:
							adj = -1;
							break;
						// Range starts on Sun
						case aDay == 0:
							adj = 0;
							break;
						// Range ends on Sat
						case bDay == 6:
							adj = -1;
							break;
						// Range ends on Sun
						case bDay == 0:
							adj = -2;
							break;
						// Range contains weekend
						case (dayMark + mod) > 5:
							adj = -2;
					}
				}else if(days < 0){
					switch(true){
						// Range starts on Sat
						case aDay == 6:
							adj = 0;
							break;
						// Range starts on Sun
						case aDay == 0:
							adj = 1;
							break;
						// Range ends on Sat
						case bDay == 6:
							adj = 2;
							break;
						// Range ends on Sun
						case bDay == 0:
							adj = 1;
							break;
						// Range contains weekend
						case (dayMark + mod) < 0:
							adj = 2;
					}
				}
				days += adj;
				days -= (weeks*2);
			}
			delta = days;
			break;
		case "year":
			delta = yearDiff;
			break;
		case "month":
			delta = (date2.getMonth() - date1.getMonth()) + (yearDiff * 12);
			break;
		case "week":
			// Truncate instead of rounding
			// Don't use Math.floor -- value may be negative
			delta = parseInt(dojo.date.difference(date1, date2, "day")/7);
			break;
		case "day":
			delta /= 24;
			// fallthrough
		case "hour":
			delta /= 60;
			// fallthrough
		case "minute":
			delta /= 60;
			// fallthrough
		case "second":
			delta /= 1000;
			// fallthrough
		case "millisecond":
			delta *= date2.getTime() - date1.getTime();
	}

	// Round for fractional values and DST leaps
	return Math.round(delta); // Number (integer)
};

}

if(!dojo._hasResource["dojo.date.locale"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.date.locale"] = true;
dojo.provide("dojo.date.locale");








dojo.getObject("date.locale", true, dojo);

// Localization methods for Date.   Honor local customs using locale-dependent dojo.cldr data.


// Load the bundles containing localization information for
// names and formats

//NOTE: Everything in this module assumes Gregorian calendars.
// Other calendars will be implemented in separate modules.

(function(){
	// Format a pattern without literals
	function formatPattern(dateObject, bundle, options, pattern){
		return pattern.replace(/([a-z])\1*/ig, function(match){
			var s, pad,
				c = match.charAt(0),
				l = match.length,
				widthList = ["abbr", "wide", "narrow"];
			switch(c){
				case 'G':
					s = bundle[(l < 4) ? "eraAbbr" : "eraNames"][dateObject.getFullYear() < 0 ? 0 : 1];
					break;
				case 'y':
					s = dateObject.getFullYear();
					switch(l){
						case 1:
							break;
						case 2:
							if(!options.fullYear){
								s = String(s); s = s.substr(s.length - 2);
								break;
							}
							// fallthrough
						default:
							pad = true;
					}
					break;
				case 'Q':
				case 'q':
					s = Math.ceil((dateObject.getMonth()+1)/3);
//					switch(l){
//						case 1: case 2:
							pad = true;
//							break;
//						case 3: case 4: // unimplemented
//					}
					break;
				case 'M':
					var m = dateObject.getMonth();
					if(l<3){
						s = m+1; pad = true;
					}else{
						var propM = ["months", "format", widthList[l-3]].join("-");
						s = bundle[propM][m];
					}
					break;
				case 'w':
					var firstDay = 0;
					s = dojo.date.locale._getWeekOfYear(dateObject, firstDay); pad = true;
					break;
				case 'd':
					s = dateObject.getDate(); pad = true;
					break;
				case 'D':
					s = dojo.date.locale._getDayOfYear(dateObject); pad = true;
					break;
				case 'E':
					var d = dateObject.getDay();
					if(l<3){
						s = d+1; pad = true;
					}else{
						var propD = ["days", "format", widthList[l-3]].join("-");
						s = bundle[propD][d];
					}
					break;
				case 'a':
					var timePeriod = (dateObject.getHours() < 12) ? 'am' : 'pm';
					s = options[timePeriod] || bundle['dayPeriods-format-wide-' + timePeriod];
					break;
				case 'h':
				case 'H':
				case 'K':
				case 'k':
					var h = dateObject.getHours();
					// strange choices in the date format make it impossible to write this succinctly
					switch (c){
						case 'h': // 1-12
							s = (h % 12) || 12;
							break;
						case 'H': // 0-23
							s = h;
							break;
						case 'K': // 0-11
							s = (h % 12);
							break;
						case 'k': // 1-24
							s = h || 24;
							break;
					}
					pad = true;
					break;
				case 'm':
					s = dateObject.getMinutes(); pad = true;
					break;
				case 's':
					s = dateObject.getSeconds(); pad = true;
					break;
				case 'S':
					s = Math.round(dateObject.getMilliseconds() * Math.pow(10, l-3)); pad = true;
					break;
				case 'v': // FIXME: don't know what this is. seems to be same as z?
				case 'z':
					// We only have one timezone to offer; the one from the browser
					s = dojo.date.locale._getZone(dateObject, true, options);
					if(s){break;}
					l=4;
					// fallthrough... use GMT if tz not available
				case 'Z':
					var offset = dojo.date.locale._getZone(dateObject, false, options);
					var tz = [
						(offset<=0 ? "+" : "-"),
						dojo.string.pad(Math.floor(Math.abs(offset)/60), 2),
						dojo.string.pad(Math.abs(offset)% 60, 2)
					];
					if(l==4){
						tz.splice(0, 0, "GMT");
						tz.splice(3, 0, ":");
					}
					s = tz.join("");
					break;
//				case 'Y': case 'u': case 'W': case 'F': case 'g': case 'A': case 'e':
//					console.log(match+" modifier unimplemented");
				default:
					throw new Error("dojo.date.locale.format: invalid pattern char: "+pattern);
			}
			if(pad){ s = dojo.string.pad(s, l); }
			return s;
		});
	}

/*=====
	dojo.date.locale.__FormatOptions = function(){
	//	selector: String
	//		choice of 'time','date' (default: date and time)
	//	formatLength: String
	//		choice of long, short, medium or full (plus any custom additions).  Defaults to 'short'
	//	datePattern:String
	//		override pattern with this string
	//	timePattern:String
	//		override pattern with this string
	//	am: String
	//		override strings for am in times
	//	pm: String
	//		override strings for pm in times
	//	locale: String
	//		override the locale used to determine formatting rules
	//	fullYear: Boolean
	//		(format only) use 4 digit years whenever 2 digit years are called for
	//	strict: Boolean
	//		(parse only) strict parsing, off by default
		this.selector = selector;
		this.formatLength = formatLength;
		this.datePattern = datePattern;
		this.timePattern = timePattern;
		this.am = am;
		this.pm = pm;
		this.locale = locale;
		this.fullYear = fullYear;
		this.strict = strict;
	}
=====*/

dojo.date.locale._getZone = function(/*Date*/dateObject, /*boolean*/getName, /*dojo.date.locale.__FormatOptions?*/options){
	// summary:
	//		Returns the zone (or offset) for the given date and options.  This
	//		is broken out into a separate function so that it can be overridden
	//		by timezone-aware code.
	//
	// dateObject:
	//		the date and/or time being formatted.
	//
	// getName:
	//		Whether to return the timezone string (if true), or the offset (if false)
	//
	// options:
	//		The options being used for formatting
	if(getName){
		return dojo.date.getTimezoneName(dateObject);
	}else{
		return dateObject.getTimezoneOffset();
	}
};


dojo.date.locale.format = function(/*Date*/dateObject, /*dojo.date.locale.__FormatOptions?*/options){
	// summary:
	//		Format a Date object as a String, using locale-specific settings.
	//
	// description:
	//		Create a string from a Date object using a known localized pattern.
	//		By default, this method formats both date and time from dateObject.
	//		Formatting patterns are chosen appropriate to the locale.  Different
	//		formatting lengths may be chosen, with "full" used by default.
	//		Custom patterns may be used or registered with translations using
	//		the dojo.date.locale.addCustomFormats method.
	//		Formatting patterns are implemented using [the syntax described at
	//		unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
	//
	// dateObject:
	//		the date and/or time to be formatted.  If a time only is formatted,
	//		the values in the year, month, and day fields are irrelevant.  The
	//		opposite is true when formatting only dates.

	options = options || {};

	var locale = dojo.i18n.normalizeLocale(options.locale),
		formatLength = options.formatLength || 'short',
		bundle = dojo.date.locale._getGregorianBundle(locale),
		str = [],
		sauce = dojo.hitch(this, formatPattern, dateObject, bundle, options);
	if(options.selector == "year"){
		return _processPattern(bundle["dateFormatItem-yyyy"] || "yyyy", sauce);
	}
	var pattern;
	if(options.selector != "date"){
		pattern = options.timePattern || bundle["timeFormat-"+formatLength];
		if(pattern){str.push(_processPattern(pattern, sauce));}
	}
	if(options.selector != "time"){
		pattern = options.datePattern || bundle["dateFormat-"+formatLength];
		if(pattern){str.push(_processPattern(pattern, sauce));}
	}

	return str.length == 1 ? str[0] : bundle["dateTimeFormat-"+formatLength].replace(/\{(\d+)\}/g,
		function(match, key){ return str[key]; }); // String
};

dojo.date.locale.regexp = function(/*dojo.date.locale.__FormatOptions?*/options){
	// summary:
	//		Builds the regular needed to parse a localized date

	return dojo.date.locale._parseInfo(options).regexp; // String
};

dojo.date.locale._parseInfo = function(/*dojo.date.locale.__FormatOptions?*/options){
	options = options || {};
	var locale = dojo.i18n.normalizeLocale(options.locale),
		bundle = dojo.date.locale._getGregorianBundle(locale),
		formatLength = options.formatLength || 'short',
		datePattern = options.datePattern || bundle["dateFormat-" + formatLength],
		timePattern = options.timePattern || bundle["timeFormat-" + formatLength],
		pattern;
	if(options.selector == 'date'){
		pattern = datePattern;
	}else if(options.selector == 'time'){
		pattern = timePattern;
	}else{
		pattern = bundle["dateTimeFormat-"+formatLength].replace(/\{(\d+)\}/g,
			function(match, key){ return [timePattern, datePattern][key]; });
	}

	var tokens = [],
		re = _processPattern(pattern, dojo.hitch(this, _buildDateTimeRE, tokens, bundle, options));
	return {regexp: re, tokens: tokens, bundle: bundle};
};

dojo.date.locale.parse = function(/*String*/value, /*dojo.date.locale.__FormatOptions?*/options){
	// summary:
	//		Convert a properly formatted string to a primitive Date object,
	//		using locale-specific settings.
	//
	// description:
	//		Create a Date object from a string using a known localized pattern.
	//		By default, this method parses looking for both date and time in the string.
	//		Formatting patterns are chosen appropriate to the locale.  Different
	//		formatting lengths may be chosen, with "full" used by default.
	//		Custom patterns may be used or registered with translations using
	//		the dojo.date.locale.addCustomFormats method.
	//
	//		Formatting patterns are implemented using [the syntax described at
	//		unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
	//		When two digit years are used, a century is chosen according to a sliding
	//		window of 80 years before and 20 years after present year, for both `yy` and `yyyy` patterns.
	//		year < 100CE requires strict mode.
	//
	// value:
	//		A string representation of a date

	// remove non-printing bidi control chars from input and pattern
	var controlChars = /[\u200E\u200F\u202A\u202E]/g,
		info = dojo.date.locale._parseInfo(options),
		tokens = info.tokens, bundle = info.bundle,
		re = new RegExp("^" + info.regexp.replace(controlChars, "") + "$",
			info.strict ? "" : "i"),
		match = re.exec(value && value.replace(controlChars, ""));

	if(!match){ return null; } // null

	var widthList = ['abbr', 'wide', 'narrow'],
		result = [1970,0,1,0,0,0,0], // will get converted to a Date at the end
		amPm = "",
		valid = dojo.every(match, function(v, i){
		if(!i){return true;}
		var token=tokens[i-1];
		var l=token.length;
		switch(token.charAt(0)){
			case 'y':
				if(l != 2 && options.strict){
					//interpret year literally, so '5' would be 5 A.D.
					result[0] = v;
				}else{
					if(v<100){
						v = Number(v);
						//choose century to apply, according to a sliding window
						//of 80 years before and 20 years after present year
						var year = '' + new Date().getFullYear(),
							century = year.substring(0, 2) * 100,
							cutoff = Math.min(Number(year.substring(2, 4)) + 20, 99),
							num = (v < cutoff) ? century + v : century - 100 + v;
						result[0] = num;
					}else{
						//we expected 2 digits and got more...
						if(options.strict){
							return false;
						}
						//interpret literally, so '150' would be 150 A.D.
						//also tolerate '1950', if 'yyyy' input passed to 'yy' format
						result[0] = v;
					}
				}
				break;
			case 'M':
				if(l>2){
					var months = bundle['months-format-' + widthList[l-3]].concat();
					if(!options.strict){
						//Tolerate abbreviating period in month part
						//Case-insensitive comparison
						v = v.replace(".","").toLowerCase();
						months = dojo.map(months, function(s){ return s.replace(".","").toLowerCase(); } );
					}
					v = dojo.indexOf(months, v);
					if(v == -1){
//						console.log("dojo.date.locale.parse: Could not parse month name: '" + v + "'.");
						return false;
					}
				}else{
					v--;
				}
				result[1] = v;
				break;
			case 'E':
			case 'e':
				var days = bundle['days-format-' + widthList[l-3]].concat();
				if(!options.strict){
					//Case-insensitive comparison
					v = v.toLowerCase();
					days = dojo.map(days, function(d){return d.toLowerCase();});
				}
				v = dojo.indexOf(days, v);
				if(v == -1){
//					console.log("dojo.date.locale.parse: Could not parse weekday name: '" + v + "'.");
					return false;
				}

				//TODO: not sure what to actually do with this input,
				//in terms of setting something on the Date obj...?
				//without more context, can't affect the actual date
				//TODO: just validate?
				break;
			case 'D':
				result[1] = 0;
				// fallthrough...
			case 'd':
				result[2] = v;
				break;
			case 'a': //am/pm
				var am = options.am || bundle['dayPeriods-format-wide-am'],
					pm = options.pm || bundle['dayPeriods-format-wide-pm'];
				if(!options.strict){
					var period = /\./g;
					v = v.replace(period,'').toLowerCase();
					am = am.replace(period,'').toLowerCase();
					pm = pm.replace(period,'').toLowerCase();
				}
				if(options.strict && v != am && v != pm){
//					console.log("dojo.date.locale.parse: Could not parse am/pm part.");
					return false;
				}

				// we might not have seen the hours field yet, so store the state and apply hour change later
				amPm = (v == pm) ? 'p' : (v == am) ? 'a' : '';
				break;
			case 'K': //hour (1-24)
				if(v == 24){ v = 0; }
				// fallthrough...
			case 'h': //hour (1-12)
			case 'H': //hour (0-23)
			case 'k': //hour (0-11)
				//TODO: strict bounds checking, padding
				if(v > 23){
//					console.log("dojo.date.locale.parse: Illegal hours value");
					return false;
				}

				//in the 12-hour case, adjusting for am/pm requires the 'a' part
				//which could come before or after the hour, so we will adjust later
				result[3] = v;
				break;
			case 'm': //minutes
				result[4] = v;
				break;
			case 's': //seconds
				result[5] = v;
				break;
			case 'S': //milliseconds
				result[6] = v;
//				break;
//			case 'w':
//TODO				var firstDay = 0;
//			default:
//TODO: throw?
//				console.log("dojo.date.locale.parse: unsupported pattern char=" + token.charAt(0));
		}
		return true;
	});

	var hours = +result[3];
	if(amPm === 'p' && hours < 12){
		result[3] = hours + 12; //e.g., 3pm -> 15
	}else if(amPm === 'a' && hours == 12){
		result[3] = 0; //12am -> 0
	}

	//TODO: implement a getWeekday() method in order to test
	//validity of input strings containing 'EEE' or 'EEEE'...

	var dateObject = new Date(result[0], result[1], result[2], result[3], result[4], result[5], result[6]); // Date
	if(options.strict){
		dateObject.setFullYear(result[0]);
	}

	// Check for overflow.  The Date() constructor normalizes things like April 32nd...
	//TODO: why isn't this done for times as well?
	var allTokens = tokens.join(""),
		dateToken = allTokens.indexOf('d') != -1,
		monthToken = allTokens.indexOf('M') != -1;

	if(!valid ||
		(monthToken && dateObject.getMonth() > result[1]) ||
		(dateToken && dateObject.getDate() > result[2])){
		return null;
	}

	// Check for underflow, due to DST shifts.  See #9366
	// This assumes a 1 hour dst shift correction at midnight
	// We could compare the timezone offset after the shift and add the difference instead.
	if((monthToken && dateObject.getMonth() < result[1]) ||
		(dateToken && dateObject.getDate() < result[2])){
		dateObject = dojo.date.add(dateObject, "hour", 1);
	}

	return dateObject; // Date
};

function _processPattern(pattern, applyPattern, applyLiteral, applyAll){
	//summary: Process a pattern with literals in it

	// Break up on single quotes, treat every other one as a literal, except '' which becomes '
	var identity = function(x){return x;};
	applyPattern = applyPattern || identity;
	applyLiteral = applyLiteral || identity;
	applyAll = applyAll || identity;

	//split on single quotes (which escape literals in date format strings)
	//but preserve escaped single quotes (e.g., o''clock)
	var chunks = pattern.match(/(''|[^'])+/g),
		literal = pattern.charAt(0) == "'";

	dojo.forEach(chunks, function(chunk, i){
		if(!chunk){
			chunks[i]='';
		}else{
			chunks[i]=(literal ? applyLiteral : applyPattern)(chunk.replace(/''/g, "'"));
			literal = !literal;
		}
	});
	return applyAll(chunks.join(''));
}

function _buildDateTimeRE(tokens, bundle, options, pattern){
	pattern = dojo.regexp.escapeString(pattern);
	if(!options.strict){ pattern = pattern.replace(" a", " ?a"); } // kludge to tolerate no space before am/pm
	return pattern.replace(/([a-z])\1*/ig, function(match){
		// Build a simple regexp.  Avoid captures, which would ruin the tokens list
		var s,
			c = match.charAt(0),
			l = match.length,
			p2 = '', p3 = '';
		if(options.strict){
			if(l > 1){ p2 = '0' + '{'+(l-1)+'}'; }
			if(l > 2){ p3 = '0' + '{'+(l-2)+'}'; }
		}else{
			p2 = '0?'; p3 = '0{0,2}';
		}
		switch(c){
			case 'y':
				s = '\\d{2,4}';
				break;
			case 'M':
				s = (l>2) ? '\\S+?' : '1[0-2]|'+p2+'[1-9]';
				break;
			case 'D':
				s = '[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|'+p3+'[1-9][0-9]|'+p2+'[1-9]';
				break;
			case 'd':
				s = '3[01]|[12]\\d|'+p2+'[1-9]';
				break;
			case 'w':
				s = '[1-4][0-9]|5[0-3]|'+p2+'[1-9]';
				break;
			case 'E':
				s = '\\S+';
				break;
			case 'h': //hour (1-12)
				s = '1[0-2]|'+p2+'[1-9]';
				break;
			case 'k': //hour (0-11)
				s = '1[01]|'+p2+'\\d';
				break;
			case 'H': //hour (0-23)
				s = '1\\d|2[0-3]|'+p2+'\\d';
				break;
			case 'K': //hour (1-24)
				s = '1\\d|2[0-4]|'+p2+'[1-9]';
				break;
			case 'm':
			case 's':
				s = '[0-5]\\d';
				break;
			case 'S':
				s = '\\d{'+l+'}';
				break;
			case 'a':
				var am = options.am || bundle['dayPeriods-format-wide-am'],
					pm = options.pm || bundle['dayPeriods-format-wide-pm'];
				s = am + '|' + pm;
				if(!options.strict){
					if(am != am.toLowerCase()){ s += '|' + am.toLowerCase(); }
					if(pm != pm.toLowerCase()){ s += '|' + pm.toLowerCase(); }
					if(s.indexOf('.') != -1){ s += '|' + s.replace(/\./g, ""); }
				}
				s = s.replace(/\./g, "\\.");
				break;
			default:
			// case 'v':
			// case 'z':
			// case 'Z':
				s = ".*";
//				console.log("parse of date format, pattern=" + pattern);
		}

		if(tokens){ tokens.push(match); }

		return "(" + s + ")"; // add capture
	}).replace(/[\xa0 ]/g, "[\\s\\xa0]"); // normalize whitespace.  Need explicit handling of \xa0 for IE.
}
})();

(function(){
var _customFormats = [];
dojo.date.locale.addCustomFormats = function(/*String*/packageName, /*String*/bundleName){
	// summary:
	//		Add a reference to a bundle containing localized custom formats to be
	//		used by date/time formatting and parsing routines.
	//
	// description:
	//		The user may add custom localized formats where the bundle has properties following the
	//		same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx`
	//		The pattern string should match the format used by the CLDR.
	//		See dojo.date.locale.format() for details.
	//		The resources must be loaded by dojo.requireLocalization() prior to use

	_customFormats.push({pkg:packageName,name:bundleName});
};

dojo.date.locale._getGregorianBundle = function(/*String*/locale){
	var gregorian = {};
	dojo.forEach(_customFormats, function(desc){
		var bundle = dojo.i18n.getLocalization(desc.pkg, desc.name, locale);
		gregorian = dojo.mixin(gregorian, bundle);
	}, this);
	return gregorian; /*Object*/
};
})();

dojo.date.locale.addCustomFormats("dojo.cldr","gregorian");

dojo.date.locale.getNames = function(/*String*/item, /*String*/type, /*String?*/context, /*String?*/locale){
	// summary:
	//		Used to get localized strings from dojo.cldr for day or month names.
	//
	// item:
	//	'months' || 'days'
	// type:
	//	'wide' || 'narrow' || 'abbr' (e.g. "Monday", "Mon", or "M" respectively, in English)
	// context:
	//	'standAlone' || 'format' (default)
	// locale:
	//	override locale used to find the names

	var label,
		lookup = dojo.date.locale._getGregorianBundle(locale),
		props = [item, context, type];
	if(context == 'standAlone'){
		var key = props.join('-');
		label = lookup[key];
		// Fall back to 'format' flavor of name
		if(label[0] == 1){ label = undefined; } // kludge, in the absence of real aliasing support in dojo.cldr
	}
	props[1] = 'format';

	// return by copy so changes won't be made accidentally to the in-memory model
	return (label || lookup[props.join('-')]).concat(); /*Array*/
};

dojo.date.locale.isWeekend = function(/*Date?*/dateObject, /*String?*/locale){
	// summary:
	//	Determines if the date falls on a weekend, according to local custom.

	var weekend = dojo.cldr.supplemental.getWeekend(locale),
		day = (dateObject || new Date()).getDay();
	if(weekend.end < weekend.start){
		weekend.end += 7;
		if(day < weekend.start){ day += 7; }
	}
	return day >= weekend.start && day <= weekend.end; // Boolean
};

// These are used only by format and strftime.  Do they need to be public?  Which module should they go in?

dojo.date.locale._getDayOfYear = function(/*Date*/dateObject){
	// summary: gets the day of the year as represented by dateObject
	return dojo.date.difference(new Date(dateObject.getFullYear(), 0, 1, dateObject.getHours()), dateObject) + 1; // Number
};

dojo.date.locale._getWeekOfYear = function(/*Date*/dateObject, /*Number*/firstDayOfWeek){
	if(arguments.length == 1){ firstDayOfWeek = 0; } // Sunday

	var firstDayOfYear = new Date(dateObject.getFullYear(), 0, 1).getDay(),
		adj = (firstDayOfYear - firstDayOfWeek + 7) % 7,
		week = Math.floor((dojo.date.locale._getDayOfYear(dateObject) + adj - 1) / 7);

	// if year starts on the specified day, start counting weeks at 1
	if(firstDayOfYear == firstDayOfWeek){ week++; }

	return week; // Number
};

}

if(!dojo._hasResource["dijit.form.DropDownButton"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.DropDownButton"] = true;
dojo.provide("dijit.form.DropDownButton");




}

if(!dojo._hasResource["dijit.Calendar"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.Calendar"] = true;
dojo.provide("dijit.Calendar");










dojo.declare(
	"dijit.Calendar",
	[dijit._Widget, dijit._Templated, dijit._CssStateMixin],
	{
		// summary:
		//		A simple GUI for choosing a date in the context of a monthly calendar.
		//
		// description:
		//		A simple GUI for choosing a date in the context of a monthly calendar.
		//		This widget can't be used in a form because it doesn't serialize the date to an
		//		`<input>` field.  For a form element, use dijit.form.DateTextBox instead.
		//
		//		Note that the parser takes all dates attributes passed in the
		//		[RFC 3339 format](http://www.faqs.org/rfcs/rfc3339.html), e.g. `2005-06-30T08:05:00-07:00`
		//		so that they are serializable and locale-independent.
		//
		// example:
		//	|	var calendar = new dijit.Calendar({}, dojo.byId("calendarNode"));
		//
		// example:
		//	|	<div dojoType="dijit.Calendar"></div>

		templateString: dojo.cache("dijit", "templates/Calendar.html", "<table cellspacing=\"0\" cellpadding=\"0\" class=\"dijitCalendarContainer\" role=\"grid\" dojoAttachEvent=\"onkeypress: _onKeyPress\" aria-labelledby=\"${id}_year\">\r\n\t<thead>\r\n\t\t<tr class=\"dijitReset dijitCalendarMonthContainer\" valign=\"top\">\r\n\t\t\t<th class='dijitReset dijitCalendarArrow' dojoAttachPoint=\"decrementMonth\">\r\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarDecrease\" role=\"presentation\"/>\r\n\t\t\t\t<span dojoAttachPoint=\"decreaseArrowNode\" class=\"dijitA11ySideArrow\">-</span>\r\n\t\t\t</th>\r\n\t\t\t<th class='dijitReset' colspan=\"5\">\r\n\t\t\t\t<div dojoType=\"dijit.form.DropDownButton\" dojoAttachPoint=\"monthDropDownButton\"\r\n\t\t\t\t\tid=\"${id}_mddb\" tabIndex=\"-1\">\r\n\t\t\t\t</div>\r\n\t\t\t</th>\r\n\t\t\t<th class='dijitReset dijitCalendarArrow' dojoAttachPoint=\"incrementMonth\">\r\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarIncrease\" role=\"presentation\"/>\r\n\t\t\t\t<span dojoAttachPoint=\"increaseArrowNode\" class=\"dijitA11ySideArrow\">+</span>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th class=\"dijitReset dijitCalendarDayLabelTemplate\" role=\"columnheader\"><span class=\"dijitCalendarDayLabel\"></span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody dojoAttachEvent=\"onclick: _onDayClick, onmouseover: _onDayMouseOver, onmouseout: _onDayMouseOut, onmousedown: _onDayMouseDown, onmouseup: _onDayMouseUp\" class=\"dijitReset dijitCalendarBodyContainer\">\r\n\t\t<tr class=\"dijitReset dijitCalendarWeekTemplate\" role=\"row\">\r\n\t\t\t<td class=\"dijitReset dijitCalendarDateTemplate\" role=\"gridcell\"><span class=\"dijitCalendarDateLabel\"></span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n\t<tfoot class=\"dijitReset dijitCalendarYearContainer\">\r\n\t\t<tr>\r\n\t\t\t<td class='dijitReset' valign=\"top\" colspan=\"7\">\r\n\t\t\t\t<h3 class=\"dijitCalendarYearLabel\">\r\n\t\t\t\t\t<span dojoAttachPoint=\"previousYearLabelNode\" class=\"dijitInline dijitCalendarPreviousYear\"></span>\r\n\t\t\t\t\t<span dojoAttachPoint=\"currentYearLabelNode\" class=\"dijitInline dijitCalendarSelectedYear\" id=\"${id}_year\"></span>\r\n\t\t\t\t\t<span dojoAttachPoint=\"nextYearLabelNode\" class=\"dijitInline dijitCalendarNextYear\"></span>\r\n\t\t\t\t</h3>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tfoot>\r\n</table>\r\n"),
		widgetsInTemplate: true,

		// value: Date
		//		The currently selected Date, initially set to invalid date to indicate no selection.
		value: new Date(""),
		// TODO: for 2.0 make this a string (ISO format) rather than a Date

		// datePackage: String
		//		JavaScript namespace to find Calendar routines.  Uses Gregorian Calendar routines
		//		at dojo.date by default.
		datePackage: "dojo.date",

		// dayWidth: String
		//		How to represent the days of the week in the calendar header. See dojo.date.locale
		dayWidth: "narrow",

		// tabIndex: Integer
		//		Order fields are traversed when user hits the tab key
		tabIndex: "0",
		
		// currentFocus: Date
		//		Date object containing the currently focused date, or the date which would be focused
		//		if the calendar itself was focused.   Also indicates which year and month to display,
		//		i.e. the current "page" the calendar is on.
		currentFocus: new Date(),

		baseClass:"dijitCalendar",

		// Set node classes for various mouse events, see dijit._CssStateMixin for more details
		cssStateNodes: {
			"decrementMonth": "dijitCalendarArrow",
			"incrementMonth": "dijitCalendarArrow",
			"previousYearLabelNode": "dijitCalendarPreviousYear",
			"nextYearLabelNode": "dijitCalendarNextYear"
		},

		_isValidDate: function(/*Date*/ value){
			// summary:
			//		Runs various tests on the value, checking that it's a valid date, rather
			//		than blank or NaN.
			// tags:
			//		private
			return value && !isNaN(value) && typeof value == "object" &&
				value.toString() != this.constructor.prototype.value.toString();
		},

		setValue: function(/*Date*/ value){
			// summary:
			//      Deprecated.   Use set('value', ...) instead.
			// tags:
			//      deprecated
			dojo.deprecated("dijit.Calendar:setValue() is deprecated.  Use set('value', ...) instead.", "", "2.0");
			this.set('value', value);
		},

		_getValueAttr: function(){
			// summary:
			//		Support get('value')

			// this.value is set to 1AM, but return midnight, local time for back-compat
			var value = new this.dateClassObj(this.value);
			value.setHours(0, 0, 0, 0);

			// If daylight savings pushes midnight to the previous date, fix the Date
			// object to point at 1am so it will represent the correct day. See #9366
			if(value.getDate() < this.value.getDate()){
				value = this.dateFuncObj.add(value, "hour", 1);
			}
			return value;
		},

		_setValueAttr: function(/*Date|Number*/ value, /*Boolean*/ priorityChange){
			// summary:
			//		Support set("value", ...)
			// description:
			// 		Set the current date and update the UI.  If the date is disabled, the value will
			//		not change, but the display will change to the corresponding month.
			// value:
			//		Either a Date or the number of seconds since 1970.
			// tags:
			//      protected
			if(value){
				// convert from Number to Date, or make copy of Date object so that setHours() call below
				// doesn't affect original value
				value = new this.dateClassObj(value);
			}
			if(this._isValidDate(value)){
				if(!this._isValidDate(this.value) || this.dateFuncObj.compare(value, this.value)){
					value.setHours(1, 0, 0, 0); // round to nearest day (1am to avoid issues when DST shift occurs at midnight, see #8521, #9366)
	
					if(!this.isDisabledDate(value, this.lang)){
						this._set("value", value);
		
						// Set focus cell to the new value.   Arguably this should only happen when there isn't a current
						// focus point.   This will also repopulate the grid, showing the new selected value (and possibly
						// new month/year).
						this.set("currentFocus", value);
	
						if(priorityChange || typeof priorityChange == "undefined"){
							this.onChange(this.get('value'));
							this.onValueSelected(this.get('value'));	// remove in 2.0
						}
					}
				}
			}else{
				// clear value, and repopulate grid (to deselect the previously selected day) without changing currentFocus
				this._set("value", null);
				this.set("currentFocus", this.currentFocus);
			}
		},

		_setText: function(node, text){
			// summary:
			//		This just sets the content of node to the specified text.
			//		Can't do "node.innerHTML=text" because of an IE bug w/tables, see #3434.
			// tags:
			//      private
			while(node.firstChild){
				node.removeChild(node.firstChild);
			}
			node.appendChild(dojo.doc.createTextNode(text));
		},

		_populateGrid: function(){
			// summary:
			//      Fills in the calendar grid with each day (1-31)
			// tags:
			//      private

			var month = new this.dateClassObj(this.currentFocus);
			month.setDate(1);

			var firstDay = month.getDay(),
				daysInMonth = this.dateFuncObj.getDaysInMonth(month),
				daysInPreviousMonth = this.dateFuncObj.getDaysInMonth(this.dateFuncObj.add(month, "month", -1)),
				today = new this.dateClassObj(),
				dayOffset = dojo.cldr.supplemental.getFirstDayOfWeek(this.lang);
			if(dayOffset > firstDay){ dayOffset -= 7; }

			// Iterate through dates in the calendar and fill in date numbers and style info
			dojo.query(".dijitCalendarDateTemplate", this.domNode).forEach(function(template, i){
				i += dayOffset;
				var date = new this.dateClassObj(month),
					number, clazz = "dijitCalendar", adj = 0;

				if(i < firstDay){
					number = daysInPreviousMonth - firstDay + i + 1;
					adj = -1;
					clazz += "Previous";
				}else if(i >= (firstDay + daysInMonth)){
					number = i - firstDay - daysInMonth + 1;
					adj = 1;
					clazz += "Next";
				}else{
					number = i - firstDay + 1;
					clazz += "Current";
				}

				if(adj){
					date = this.dateFuncObj.add(date, "month", adj);
				}
				date.setDate(number);

				if(!this.dateFuncObj.compare(date, today, "date")){
					clazz = "dijitCalendarCurrentDate " + clazz;
				}

				if(this._isSelectedDate(date, this.lang)){
					clazz = "dijitCalendarSelectedDate " + clazz;
				}

				if(this.isDisabledDate(date, this.lang)){
					clazz = "dijitCalendarDisabledDate " + clazz;
				}

				var clazz2 = this.getClassForDate(date, this.lang);
				if(clazz2){
					clazz = clazz2 + " " + clazz;
				}

				template.className = clazz + "Month dijitCalendarDateTemplate";
				template.dijitDateValue = date.valueOf();				// original code
				dojo.attr(template, "dijitDateValue", date.valueOf());	// so I can dojo.query() it
				var label = dojo.query(".dijitCalendarDateLabel", template)[0],
					text = date.getDateLocalized ? date.getDateLocalized(this.lang) : date.getDate();
				this._setText(label, text);
			}, this);

			// Repopulate month drop down list based on current year.
			// Need to do this to hide leap months in Hebrew calendar.
			var monthNames = this.dateLocaleModule.getNames('months', 'wide', 'standAlone', this.lang, month);
			this.monthDropDownButton.dropDown.set("months", monthNames);

			// Set name of current month and also fill in spacer element with all the month names
			// (invisible) so that the maximum width will affect layout.   But not on IE6 because then
			// the center <TH> overlaps the right <TH> (due to a browser bug).
			this.monthDropDownButton.containerNode.innerHTML =
				(dojo.isIE == 6 ? "" : "<div class='dijitSpacer'>" + this.monthDropDownButton.dropDown.domNode.innerHTML + "</div>") +
				"<div class='dijitCalendarMonthLabel dijitCalendarCurrentMonthLabel'>" +  monthNames[month.getMonth()] + "</div>";

			// Fill in localized prev/current/next years
			var y = month.getFullYear() - 1;
			var d = new this.dateClassObj();
			dojo.forEach(["previous", "current", "next"], function(name){
				d.setFullYear(y++);
				this._setText(this[name+"YearLabelNode"],
					this.dateLocaleModule.format(d, {selector:'year', locale:this.lang}));
			}, this);
		},

		goToToday: function(){
			// summary:
			//      Sets calendar's value to today's date
			this.set('value', new this.dateClassObj());
		},

		constructor: function(/*Object*/args){
			var dateClass = (args.datePackage && (args.datePackage != "dojo.date"))? args.datePackage + ".Date" : "Date";
			this.dateClassObj = dojo.getObject(dateClass, false);
			this.datePackage = args.datePackage || this.datePackage;
			this.dateFuncObj = dojo.getObject(this.datePackage, false);
			this.dateLocaleModule = dojo.getObject(this.datePackage + ".locale", false);
		},

		postMixInProperties: function(){
			// Parser.instantiate sometimes passes in NaN for IE.  Use default value in prototype instead.
			// TODO: remove this for 2.0 (thanks to #11511)
			if(isNaN(this.value)){ delete this.value; }

			this.inherited(arguments);
		},

		buildRendering: function(){
			this.inherited(arguments);
			dojo.setSelectable(this.domNode, false);

			var cloneClass = dojo.hitch(this, function(clazz, n){
				var template = dojo.query(clazz, this.domNode)[0];
	 			for(var i=0; i<n; i++){
					template.parentNode.appendChild(template.cloneNode(true));
				}
			});

			// clone the day label and calendar day templates 6 times to make 7 columns
			cloneClass(".dijitCalendarDayLabelTemplate", 6);
			cloneClass(".dijitCalendarDateTemplate", 6);

			// now make 6 week rows
			cloneClass(".dijitCalendarWeekTemplate", 5);

			// insert localized day names in the header
			var dayNames = this.dateLocaleModule.getNames('days', this.dayWidth, 'standAlone', this.lang);
			var dayOffset = dojo.cldr.supplemental.getFirstDayOfWeek(this.lang);
			dojo.query(".dijitCalendarDayLabel", this.domNode).forEach(function(label, i){
				this._setText(label, dayNames[(i + dayOffset) % 7]);
			}, this);

			var dateObj = new this.dateClassObj(this.currentFocus);

			this.monthDropDownButton.dropDown = new dijit.Calendar._MonthDropDown({
				id: this.id + "_mdd",
				onChange: dojo.hitch(this, "_onMonthSelect")
			});

			this.set('currentFocus', dateObj, false);	// draw the grid to the month specified by currentFocus

			// Set up repeating mouse behavior for increment/decrement of months/years
			var _this = this;
			var typematic = function(nodeProp, dateProp, adj){
				_this._connects.push(
					dijit.typematic.addMouseListener(_this[nodeProp], _this, function(count){
						if(count >= 0){ _this._adjustDisplay(dateProp, adj); }
					}, 0.8, 500)
				);
			};
			typematic("incrementMonth", "month", 1);
			typematic("decrementMonth", "month", -1);
			typematic("nextYearLabelNode", "year", 1);
			typematic("previousYearLabelNode", "year", -1);
		},

		_adjustDisplay: function(/*String*/ part, /*int*/ amount){
			// summary:
			//      Moves calendar forwards or backwards by months or years
			// part:
			//      "month" or "year"
			// amount:
			//      Number of months or years
			// tags:
			//      private
			this._setCurrentFocusAttr(this.dateFuncObj.add(this.currentFocus, part, amount));
		},

		_setCurrentFocusAttr: function(/*Date*/ date, /*Boolean*/ forceFocus){
			// summary:
			//		If the calendar currently has focus, then focuses specified date,
			//		changing the currently displayed month/year if necessary.
			//		If the calendar doesn't have focus, updates currently
			//		displayed month/year, and sets the cell that will get focus.
			// forceFocus:
			//		If true, will focus() the cell even if calendar itself doesn't have focus

			var oldFocus = this.currentFocus,
				oldCell = oldFocus ? dojo.query("[dijitDateValue=" + oldFocus.valueOf() + "]", this.domNode)[0] : null;

			// round specified value to nearest day (1am to avoid issues when DST shift occurs at midnight, see #8521, #9366)
			date = new this.dateClassObj(date);
			date.setHours(1, 0, 0, 0);

			this._set("currentFocus", date);

			// TODO: only re-populate grid when month/year has changed
			this._populateGrid();

			// set tabIndex=0 on new cell, and focus it (but only if Calendar itself is focused)
			var newCell = dojo.query("[dijitDateValue=" + date.valueOf() + "]", this.domNode)[0];
			newCell.setAttribute("tabIndex", this.tabIndex);
			if(this._focused || forceFocus){
				newCell.focus();
			}

			// set tabIndex=-1 on old focusable cell
			if(oldCell && oldCell != newCell){
				if(dojo.isWebKit){	// see #11064 about webkit bug
					oldCell.setAttribute("tabIndex", "-1");
				}else{
						oldCell.removeAttribute("tabIndex");
				}
			}
		},

		focus: function(){
			// summary:
			//		Focus the calendar by focusing one of the calendar cells
			this._setCurrentFocusAttr(this.currentFocus, true);
		},

		_onMonthSelect: function(/*Number*/ newMonth){
			// summary:
			//      Handler for when user selects a month from the drop down list
			// tags:
			//      protected

			// move to selected month, bounding by the number of days in the month
			// (ex: dec 31 --> jan 28, not jan 31)
			this.currentFocus = this.dateFuncObj.add(this.currentFocus, "month",
				newMonth - this.currentFocus.getMonth());
			this._populateGrid();
		},

		_onDayClick: function(/*Event*/ evt){
			// summary:
			//      Handler for day clicks, selects the date if appropriate
			// tags:
			//      protected
			dojo.stopEvent(evt);
			for(var node = evt.target; node && !node.dijitDateValue; node = node.parentNode);
			if(node && !dojo.hasClass(node, "dijitCalendarDisabledDate")){
				this.set('value', node.dijitDateValue);
			}
		},

		_onDayMouseOver: function(/*Event*/ evt){
			// summary:
			//      Handler for mouse over events on days, sets hovered style
			// tags:
			//      protected

			// event can occur on <td> or the <span> inside the td,
			// set node to the <td>.
			var node =
				dojo.hasClass(evt.target, "dijitCalendarDateLabel") ?
				evt.target.parentNode :
				evt.target;

			if(node && (node.dijitDateValue || node == this.previousYearLabelNode || node == this.nextYearLabelNode) ){
				dojo.addClass(node, "dijitCalendarHoveredDate");
				this._currentNode = node;
			}
		},

		_onDayMouseOut: function(/*Event*/ evt){
			// summary:
			//      Handler for mouse out events on days, clears hovered style
			// tags:
			//      protected
	
			if(!this._currentNode){ return; }
			
			// if mouse out occurs moving from <td> to <span> inside <td>, ignore it
			if(evt.relatedTarget && evt.relatedTarget.parentNode == this._currentNode){ return; }
			var cls = "dijitCalendarHoveredDate";
			if(dojo.hasClass(this._currentNode, "dijitCalendarActiveDate")) {
				cls += " dijitCalendarActiveDate";
			}
			dojo.removeClass(this._currentNode, cls);
			this._currentNode = null;
		},
		
		_onDayMouseDown: function(/*Event*/ evt){
			var node = evt.target.parentNode;
			if(node && node.dijitDateValue){
				dojo.addClass(node, "dijitCalendarActiveDate");
				this._currentNode = node;
			}
		},
		
		_onDayMouseUp: function(/*Event*/ evt){
			var node = evt.target.parentNode;
			if(node && node.dijitDateValue){
				dojo.removeClass(node, "dijitCalendarActiveDate");
			}
		},

//TODO: use typematic
		handleKey: function(/*Event*/ evt){
			// summary:
			//		Provides keyboard navigation of calendar.
			// description:
			//		Called from _onKeyPress() to handle keypress on a stand alone Calendar,
			//		and also from `dijit.form._DateTimeTextBox` to pass a keypress event
			//		from the `dijit.form.DateTextBox` to be handled in this widget
			// returns:
			//		False if the key was recognized as a navigation key,
			//		to indicate that the event was handled by Calendar and shouldn't be propogated
			// tags:
			//		protected
			var dk = dojo.keys,
				increment = -1,
				interval,
				newValue = this.currentFocus;
			switch(evt.keyCode){
				case dk.RIGHT_ARROW:
					increment = 1;
					//fallthrough...
				case dk.LEFT_ARROW:
					interval = "day";
					if(!this.isLeftToRight()){ increment *= -1; }
					break;
				case dk.DOWN_ARROW:
					increment = 1;
					//fallthrough...
				case dk.UP_ARROW:
					interval = "week";
					break;
				case dk.PAGE_DOWN:
					increment = 1;
					//fallthrough...
				case dk.PAGE_UP:
					interval = evt.ctrlKey || evt.altKey ? "year" : "month";
					break;
				case dk.END:
					// go to the next month
					newValue = this.dateFuncObj.add(newValue, "month", 1);
					// subtract a day from the result when we're done
					interval = "day";
					//fallthrough...
				case dk.HOME:
					newValue = new this.dateClassObj(newValue);
					newValue.setDate(1);
					break;
				case dk.ENTER:
				case dk.SPACE:
					this.set("value", this.currentFocus);
					break;
				default:
					return true;
			}

			if(interval){
				newValue = this.dateFuncObj.add(newValue, interval, increment);
			}

			this._setCurrentFocusAttr(newValue);

			return false;
		},

		_onKeyPress: function(/*Event*/ evt){
			// summary:
			//		For handling keypress events on a stand alone calendar
			if(!this.handleKey(evt)){
				dojo.stopEvent(evt);
			}
		},

		onValueSelected: function(/*Date*/ date){
			// summary:
			//		Notification that a date cell was selected.  It may be the same as the previous value.
			// description:
			//      Formerly used by `dijit.form._DateTimeTextBox` (and thus `dijit.form.DateTextBox`)
			//      to get notification when the user has clicked a date.  Now onExecute() (above) is used.
			// tags:
			//      protected
		},

		onChange: function(/*Date*/ date){
			// summary:
			//		Called only when the selected date has changed
		},

		_isSelectedDate: function(/*Date*/ dateObject, /*String?*/ locale){
			// summary:
			//		Extension point so developers can subclass Calendar to
			//		support multiple (concurrently) selected dates
			// tags:
			//		protected extension
			return this._isValidDate(this.value) && !this.dateFuncObj.compare(dateObject, this.value, "date")
		},

		isDisabledDate: function(/*Date*/ dateObject, /*String?*/ locale){
			// summary:
			//		May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`
			// tags:
			//      extension
/*=====
			return false; // Boolean
=====*/
		},

		getClassForDate: function(/*Date*/ dateObject, /*String?*/ locale){
			// summary:
			//		May be overridden to return CSS classes to associate with the date entry for the given dateObject,
			//		for example to indicate a holiday in specified locale.
			// tags:
			//      extension

/*=====
			return ""; // String
=====*/
		}
	}
);

dojo.declare("dijit.Calendar._MonthDropDown", [dijit._Widget, dijit._Templated], {
	// summary:
	//		The month drop down

	// months: String[]
	//		List of names of months, possibly w/some undefined entries for Hebrew leap months
	//		(ex: ["January", "February", undefined, "April", ...])
	months: [],

	templateString: "<div class='dijitCalendarMonthMenu dijitMenu' " +
		"dojoAttachEvent='onclick:_onClick,onmouseover:_onMenuHover,onmouseout:_onMenuHover'></div>",

	_setMonthsAttr: function(/*String[]*/ months){
		this.domNode.innerHTML = dojo.map(months, function(month, idx){
				return month ? "<div class='dijitCalendarMonthLabel' month='" + idx +"'>" + month + "</div>" : "";
			}).join("");
	},

	_onClick: function(/*Event*/ evt){
		this.onChange(dojo.attr(evt.target, "month"));
	},

	onChange: function(/*Number*/ month){
		// summary:
		//		Callback when month is selected from drop down
	},

	_onMenuHover: function(evt){
		dojo.toggleClass(evt.target, "dijitCalendarMonthLabelHover", evt.type == "mouseover");
	}
});

}

if(!dojo._hasResource["dijit.form._DateTimeTextBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form._DateTimeTextBox"] = true;
dojo.provide("dijit.form._DateTimeTextBox");








new Date("X"); // workaround for #11279, new Date("") == NaN

/*=====
dojo.declare(
	"dijit.form._DateTimeTextBox.__Constraints",
	[dijit.form.RangeBoundTextBox.__Constraints, dojo.date.locale.__FormatOptions], {
	// summary:
	//		Specifies both the rules on valid/invalid values (first/last date/time allowed),
	//		and also formatting options for how the date/time is displayed.
	// example:
	//		To restrict to dates within 2004, displayed in a long format like "December 25, 2005":
	//	|		{min:'2004-01-01',max:'2004-12-31', formatLength:'long'}
});
=====*/

dojo.declare(
	"dijit.form._DateTimeTextBox",
	[ dijit.form.RangeBoundTextBox, dijit._HasDropDown ],
	{
		// summary:
		//		Base class for validating, serializable, range-bound date or time text box.

		templateString: dojo.cache("dijit.form", "templates/DropDownBox.html", "<div class=\"dijit dijitReset dijitInlineTable dijitLeft\"\r\n\tid=\"widget_${id}\"\r\n\trole=\"combobox\"\r\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\r\n\t\tdojoAttachPoint=\"_buttonNode, _popupStateNode\" role=\"presentation\"\r\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t\t\t${_buttonInputDisabled}\r\n\t/></div\r\n\t><div class='dijitReset dijitValidationContainer'\r\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t/></div\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\r\n\t\t\tdojoAttachPoint=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\r\n\t/></div\r\n></div>\r\n"),

		// hasDownArrow: [const] Boolean
		//		Set this textbox to display a down arrow button, to open the drop down list.
		hasDownArrow: true,

		// openOnClick: [const] Boolean
		//		Set to true to open drop down upon clicking anywhere on the textbox.
		openOnClick: true,

		/*=====
		// constraints: dijit.form._DateTimeTextBox.__Constraints
		//		Despite the name, this parameter specifies both constraints on the input
		//		(including starting/ending dates/times allowed) as well as
		//		formatting options like whether the date is displayed in long (ex: December 25, 2005)
		//		or short (ex: 12/25/2005) format.  See `dijit.form._DateTimeTextBox.__Constraints` for details.
		constraints: {},
		======*/

		// Override ValidationTextBox.regExpGen().... we use a reg-ex generating function rather
		// than a straight regexp to deal with locale  (plus formatting options too?)
		regExpGen: dojo.date.locale.regexp,

		// datePackage: String
		//		JavaScript namespace to find calendar routines.	 Uses Gregorian calendar routines
		//		at dojo.date, by default.
		datePackage: "dojo.date",

		// Override _FormWidget.compare() to work for dates/times
		compare: function(/*Date*/ val1, /*Date*/ val2){
			var isInvalid1 = this._isInvalidDate(val1);
			var isInvalid2 = this._isInvalidDate(val2);
			return isInvalid1 ? (isInvalid2 ? 0 : -1) : (isInvalid2 ? 1 : dojo.date.compare(val1, val2, this._selector));
		},

		// flag to _HasDropDown to make drop down Calendar width == <input> width
		forceWidth: true,

		format: function(/*Date*/ value, /*dojo.date.locale.__FormatOptions*/ constraints){
			// summary:
			//		Formats the value as a Date, according to specified locale (second argument)
			// tags:
			//		protected
			if(!value){ return ''; }
			return this.dateLocaleModule.format(value, constraints);
		},

		"parse": function(/*String*/ value, /*dojo.date.locale.__FormatOptions*/ constraints){
			// summary:
			//		Parses as string as a Date, according to constraints
			// tags:
			//		protected

			return this.dateLocaleModule.parse(value, constraints) || (this._isEmpty(value) ? null : undefined);	 // Date
		},

		// Overrides ValidationTextBox.serialize() to serialize a date in canonical ISO format.
		serialize: function(/*anything*/ val, /*Object?*/ options){
			if(val.toGregorian){
				val = val.toGregorian();
			}
			return dojo.date.stamp.toISOString(val, options);
		},

		// dropDownDefaultValue: Date
		//		The default value to focus in the popupClass widget when the textbox value is empty.
		dropDownDefaultValue : new Date(),

		// value: Date
		//		The value of this widget as a JavaScript Date object.  Use get("value") / set("value", val) to manipulate.
		//		When passed to the parser in markup, must be specified according to `dojo.date.stamp.fromISOString`
		value: new Date(""),	// value.toString()="NaN"

		_blankValue: null,	// used by filter() when the textbox is blank

		// popupClass: [protected extension] String
		//		Name of the popup widget class used to select a date/time.
		//		Subclasses should specify this.
		popupClass: "", // default is no popup = text only


		// _selector: [protected extension] String
		//		Specifies constraints.selector passed to dojo.date functions, should be either
		//		"date" or "time".
		//		Subclass must specify this.
		_selector: "",

		constructor: function(/*Object*/ args){
			var dateClass = args.datePackage ? args.datePackage + ".Date" : "Date";
			this.dateClassObj = dojo.getObject(dateClass, false);
			this.value = new this.dateClassObj("");

			this.datePackage = args.datePackage || this.datePackage;
			this.dateLocaleModule = dojo.getObject(this.datePackage + ".locale", false);
			this.regExpGen = this.dateLocaleModule.regexp;
			this._invalidDate = dijit.form._DateTimeTextBox.prototype.value.toString();
		},

		buildRendering: function(){
			this.inherited(arguments);

			if(!this.hasDownArrow){
				this._buttonNode.style.display = "none";
			}

			// If openOnClick is true, we basically just want to treat the whole widget as the
			// button.  We need to do that also if the actual drop down button will be hidden,
			// so that there's a mouse method for opening the drop down.
			if(this.openOnClick || !this.hasDownArrow){
				this._buttonNode = this.domNode;
				this.baseClass += " dijitComboBoxOpenOnClick";
			}
		},

		_setConstraintsAttr: function(/*Object*/ constraints){
			constraints.selector = this._selector;
			constraints.fullYear = true; // see #5465 - always format with 4-digit years
			var fromISO = dojo.date.stamp.fromISOString;
			if(typeof constraints.min == "string"){ constraints.min = fromISO(constraints.min); }
 			if(typeof constraints.max == "string"){ constraints.max = fromISO(constraints.max); }
			this.inherited(arguments);
		},

		_isInvalidDate: function(/*Date*/ value){
			// summary:
			//		Runs various tests on the value, checking for invalid conditions
			// tags:
			//		private
			return !value || isNaN(value) || typeof value != "object" || value.toString() == this._invalidDate;
		},

		_setValueAttr: function(/*Date|String*/ value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue){
			// summary:
			//		Sets the date on this textbox. Note: value can be a JavaScript Date literal or a string to be parsed.
			if(value !== undefined){
				if(typeof value == "string"){
					value = dojo.date.stamp.fromISOString(value);
				}
				if(this._isInvalidDate(value)){
					value = null;
				}
				if(value instanceof Date && !(this.dateClassObj instanceof Date)){
					value = new this.dateClassObj(value);
				}
			}
			this.inherited(arguments);
			if(this.dropDown){
				this.dropDown.set('value', value, false);
			}
		},

		_set: function(attr, value){
			// Avoid spurious watch() notifications when value is changed to new Date object w/the same value
			if(attr == "value" && this.value instanceof Date && this.compare(value, this.value) == 0){
				return;
			}
			this.inherited(arguments);
		},

		_setDropDownDefaultValueAttr: function(/*Date*/ val){
			if(this._isInvalidDate(val)){
				// convert null setting into today's date, since there needs to be *some* default at all times.
				 val = new this.dateClassObj()
						}
			this.dropDownDefaultValue = val;
		},

		openDropDown: function(/*Function*/ callback){
			// rebuild drop down every time, so that constraints get copied (#6002)
			if(this.dropDown){
				this.dropDown.destroy();
			}
			var PopupProto = dojo.getObject(this.popupClass, false),
				textBox = this,
				value = this.get("value");
			this.dropDown = new PopupProto({
				onChange: function(value){
						// this will cause InlineEditBox and other handlers to do stuff so make sure it's last
						dijit.form._DateTimeTextBox.superclass._setValueAttr.call(textBox, value, true);
					},
					id: this.id + "_popup",
					dir: textBox.dir,
					lang: textBox.lang,
				value: value,
				currentFocus: !this._isInvalidDate(value) ? value : this.dropDownDefaultValue,
					constraints: textBox.constraints,
				filterString: textBox.filterString, // for TimeTextBox, to filter times shown

					datePackage: textBox.datePackage,

					isDisabledDate: function(/*Date*/ date){
						// summary:
						// 	disables dates outside of the min/max of the _DateTimeTextBox
						return !textBox.rangeCheck(date, textBox.constraints);
					}
				});

			this.inherited(arguments);
		},

		_getDisplayedValueAttr: function(){
			return this.textbox.value;
		},

		_setDisplayedValueAttr: function(/*String*/ value, /*Boolean?*/ priorityChange){
			this._setValueAttr(this.parse(value, this.constraints), priorityChange, value);
		}
	}
);

}

if(!dojo._hasResource["dijit.form.DateTextBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.DateTextBox"] = true;
dojo.provide("dijit.form.DateTextBox");





dojo.declare(
	"dijit.form.DateTextBox",
	dijit.form._DateTimeTextBox,
	{
		// summary:
		//		A validating, serializable, range-bound date text box with a drop down calendar
		//
		//		Example:
		// |	new dijit.form.DateTextBox({value: new Date(2009, 0, 20)})
		//
		//		Example:
		// |	<input dojotype='dijit.form.DateTextBox' value='2009-01-20'>

		baseClass: "dijitTextBox dijitComboBox dijitDateTextBox",
		popupClass: "dijit.Calendar",
		_selector: "date",

		// value: Date
		//		The value of this widget as a JavaScript Date object, with only year/month/day specified.
		//		If specified in markup, use the format specified in `dojo.date.stamp.fromISOString`.
		//		set("value", ...) accepts either a Date object or a string.
		value: new Date("")	// value.toString()="NaN"
	}
);

}

if(!dojo._hasResource["dijit.form.SimpleTextarea"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.SimpleTextarea"] = true;
dojo.provide("dijit.form.SimpleTextarea");




dojo.declare("dijit.form.SimpleTextarea",
	dijit.form.TextBox,
	{
	// summary:
	//		A simple textarea that degrades, and responds to
	// 		minimal LayoutContainer usage, and works with dijit.form.Form.
	//		Doesn't automatically size according to input, like Textarea.
	//
	// example:
	//	|	<textarea dojoType="dijit.form.SimpleTextarea" name="foo" value="bar" rows=30 cols=40></textarea>
	//
	// example:
	//	|	new dijit.form.SimpleTextarea({ rows:20, cols:30 }, "foo");

	baseClass: "dijitTextBox dijitTextArea",

	attributeMap: dojo.delegate(dijit.form._FormValueWidget.prototype.attributeMap, {
		rows:"textbox", cols: "textbox"
	}),

	// rows: Number
	//		The number of rows of text.
	rows: "3",

	// rows: Number
	//		The number of characters per line.
	cols: "20",

	templateString: "<textarea ${!nameAttrSetting} dojoAttachPoint='focusNode,containerNode,textbox' autocomplete='off'></textarea>",

	postMixInProperties: function(){
		// Copy value from srcNodeRef, unless user specified a value explicitly (or there is no srcNodeRef)
		// TODO: parser will handle this in 2.0
		if(!this.value && this.srcNodeRef){
			this.value = this.srcNodeRef.value;
		}
		this.inherited(arguments);
	},

	buildRendering: function(){
		this.inherited(arguments);
		if(dojo.isIE && this.cols){ // attribute selectors is not supported in IE6
			dojo.addClass(this.textbox, "dijitTextAreaCols");
		}
	},

	filter: function(/*String*/ value){
		// Override TextBox.filter to deal with newlines... specifically (IIRC) this is for IE which writes newlines
		// as \r\n instead of just \n
		if(value){
			value = value.replace(/\r/g,"");
		}
		return this.inherited(arguments);
	},

	_previousValue: "",
	_onInput: function(/*Event?*/ e){
		// Override TextBox._onInput() to enforce maxLength restriction
		if(this.maxLength){
			var maxLength = parseInt(this.maxLength);
			var value = this.textbox.value.replace(/\r/g,'');
			var overflow = value.length - maxLength;
			if(overflow > 0){
				if(e){ dojo.stopEvent(e); }
				var textarea = this.textbox;
				if(textarea.selectionStart){
					var pos = textarea.selectionStart;
					var cr = 0;
					if(dojo.isOpera){
						cr = (this.textbox.value.substring(0,pos).match(/\r/g) || []).length;
					}
					this.textbox.value = value.substring(0,pos-overflow-cr)+value.substring(pos-cr);
					textarea.setSelectionRange(pos-overflow, pos-overflow);
				}else if(dojo.doc.selection){ //IE
					textarea.focus();
					var range = dojo.doc.selection.createRange();
					// delete overflow characters
					range.moveStart("character", -overflow);
					range.text = '';
					// show cursor
					range.select();
				}
			}
			this._previousValue = this.textbox.value;
		}
		this.inherited(arguments);
	}
});

}

if(!dojo._hasResource["dijit.form.Textarea"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.Textarea"] = true;
dojo.provide("dijit.form.Textarea");




dojo.declare(
	"dijit.form.Textarea",
	dijit.form.SimpleTextarea,
	{
	// summary:
	//		A textarea widget that adjusts it's height according to the amount of data.
	//
	// description:
	//		A textarea that dynamically expands/contracts (changing it's height) as
	//		the user types, to display all the text without requiring a scroll bar.
	//
	//		Takes nearly all the parameters (name, value, etc.) that a vanilla textarea takes.
	//		Rows is not supported since this widget adjusts the height.
	//
	// example:
	// |	<textarea dojoType="dijit.form.TextArea">...</textarea>


	// TODO: for 2.0, rename this to ExpandingTextArea, and rename SimpleTextarea to Textarea

	baseClass: "dijitTextBox dijitTextArea dijitExpandingTextArea",

	// Override SimpleTextArea.cols to default to width:100%, for backward compatibility
	cols: "",

	_previousNewlines: 0,
	_strictMode: (dojo.doc.compatMode != 'BackCompat'), // not the same as !dojo.isQuirks

	_getHeight: function(textarea){
		var newH = textarea.scrollHeight;
		if(dojo.isIE){
			newH += textarea.offsetHeight - textarea.clientHeight - ((dojo.isIE < 8 && this._strictMode) ? dojo._getPadBorderExtents(textarea).h : 0);
		}else if(dojo.isMoz){
			newH += textarea.offsetHeight - textarea.clientHeight; // creates room for horizontal scrollbar
		}else if(dojo.isWebKit){
			newH += dojo._getBorderExtents(textarea).h;
		}else{ // Opera 9.6 (TODO: test if this is still needed)
			newH += dojo._getPadBorderExtents(textarea).h;
		}
		return newH;
	},

	_estimateHeight: function(textarea){
		// summary:
		// 		Approximate the height when the textarea is invisible with the number of lines in the text.
		// 		Fails when someone calls setValue with a long wrapping line, but the layout fixes itself when the user clicks inside so . . .
		// 		In IE, the resize event is supposed to fire when the textarea becomes visible again and that will correct the size automatically.
		//
		textarea.style.maxHeight = "";
		textarea.style.height = "auto";
		// #rows = #newlines+1
		// Note: on Moz, the following #rows appears to be 1 too many.
		// Actually, Moz is reserving room for the scrollbar.
		// If you increase the font size, this behavior becomes readily apparent as the last line gets cut off without the +1.
		textarea.rows = (textarea.value.match(/\n/g) || []).length + 1;
	},

	_needsHelpShrinking: dojo.isMoz || dojo.isWebKit,

	_onInput: function(){
		// Override SimpleTextArea._onInput() to deal with height adjustment
		this.inherited(arguments);
		if(this._busyResizing){ return; }
		this._busyResizing = true;
		var textarea = this.textbox;
		if(textarea.scrollHeight && textarea.offsetHeight && textarea.clientHeight){
			var newH = this._getHeight(textarea) + "px";
			if(textarea.style.height != newH){
				textarea.style.maxHeight = textarea.style.height = newH;
			}
			if(this._needsHelpShrinking){
				if(this._setTimeoutHandle){
					clearTimeout(this._setTimeoutHandle);
				}
				this._setTimeoutHandle = setTimeout(dojo.hitch(this, "_shrink"), 0); // try to collapse multiple shrinks into 1
			}
		}else{
			// hidden content of unknown size
			this._estimateHeight(textarea);
		}
		this._busyResizing = false;
	},

	_busyResizing: false,
	_shrink: function(){
		// grow paddingBottom to see if scrollHeight shrinks (when it is unneccesarily big)
		this._setTimeoutHandle = null;
		if(this._needsHelpShrinking && !this._busyResizing){
			this._busyResizing = true;
			var textarea = this.textbox;
			var empty = false;
			if(textarea.value == ''){
				textarea.value = ' '; // prevent collapse all the way back to 0
				empty = true;
			}
			var scrollHeight = textarea.scrollHeight;
			if(!scrollHeight){
				this._estimateHeight(textarea);
			}else{
				var oldPadding = textarea.style.paddingBottom;
				var newPadding = dojo._getPadExtents(textarea);
				newPadding = newPadding.h - newPadding.t;
				textarea.style.paddingBottom = newPadding + 1 + "px"; // tweak padding to see if height can be reduced
				var newH = this._getHeight(textarea) - 1 + "px"; // see if the height changed by the 1px added
				if(textarea.style.maxHeight != newH){ // if can be reduced, so now try a big chunk
					textarea.style.paddingBottom = newPadding + scrollHeight + "px";
					textarea.scrollTop = 0;
					textarea.style.maxHeight = this._getHeight(textarea) - scrollHeight + "px"; // scrollHeight is the added padding
				}
				textarea.style.paddingBottom = oldPadding;
			}
			if(empty){
				textarea.value = '';
			}
			this._busyResizing = false;
		}
	},

	resize: function(){
		// summary:
		//		Resizes the textarea vertically (should be called after a style/value change)
		this._onInput();
	},

	_setValueAttr: function(){
		this.inherited(arguments);
		this.resize();
	},

	buildRendering: function(){
		this.inherited(arguments);

		// tweak textarea style to reduce browser differences
		dojo.style(this.textbox, { overflowY: 'hidden', overflowX: 'auto', boxSizing: 'border-box', MsBoxSizing: 'border-box', WebkitBoxSizing: 'border-box', MozBoxSizing: 'border-box' });
	},

	postCreate: function(){
		this.inherited(arguments);

		this.connect(this.textbox, "onscroll", "_onInput");
		this.connect(this.textbox, "onresize", "_onInput");
		this.connect(this.textbox, "onfocus", "_onInput"); // useful when a previous estimate was off a bit
		this._setTimeoutHandle = setTimeout(dojo.hitch(this, "resize"), 0);
	},

	uninitialize: function(){
		if(this._setTimeoutHandle){
			clearTimeout(this._setTimeoutHandle);
		}
		this.inherited(arguments);
	}
});

}

if(!dojo._hasResource["dojox.layout.ExpandoPane"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.layout.ExpandoPane"] = true;
dojo.provide("dojox.layout.ExpandoPane");
dojo.experimental("dojox.layout.ExpandoPane"); // just to show it can be done?





dojo.declare("dojox.layout.ExpandoPane",
	[dijit.layout.ContentPane, dijit._Templated, dijit._Contained, dijit._Container],
	{
	// summary: An experimental collapsing-pane for dijit.layout.BorderContainer
	//
	// description:
	//		Works just like a ContentPane inside of a borderContainer. Will expand/collapse on
	//		command, and supports having Layout Children as direct descendants
	//

	//maxHeight: "",
	//maxWidth: "",
	//splitter: false,
	attributeMap: dojo.delegate(dijit.layout.ContentPane.prototype.attributeMap, {
	        title: { node: "titleNode", type: "innerHTML" }
	}),
	
	templateString: dojo.cache("dojox.layout", "resources/ExpandoPane.html", "<div class=\"dojoxExpandoPane\">\r\n\t<div dojoAttachPoint=\"titleWrapper\" class=\"dojoxExpandoTitle\">\r\n\t\t<div class=\"dojoxExpandoIcon\" dojoAttachPoint=\"iconNode\" dojoAttachEvent=\"onclick:toggle\"><span class=\"a11yNode\">X</span></div>\t\t\t\r\n\t\t<span class=\"dojoxExpandoTitleNode\" dojoAttachPoint=\"titleNode\">${title}</span>\r\n\t</div>\r\n\t<div class=\"dojoxExpandoWrapper\" dojoAttachPoint=\"cwrapper\" dojoAttachEvent=\"ondblclick:_trap\">\r\n\t\t<div class=\"dojoxExpandoContent\" dojoAttachPoint=\"containerNode\"></div>\r\n\t</div>\r\n</div>\r\n"),

	// easeOut: String|Function
	//		easing function used to hide pane
	easeOut: "dojo._DefaultEasing",
	
	// easeIn: String|Function
	//		easing function use to show pane
	easeIn: "dojo._DefaultEasing",
	
	// duration: Integer
	//		duration to run show/hide animations
	duration: 420,

	// startExpanded: Boolean
	//		Does this widget start in an open (true) or closed (false) state
	startExpanded: true,

	// previewOpacity: Float
	//		A value from 0 .. 1 indicating the opacity to use on the container
	//		when only showing a preview
	previewOpacity: 0.75,
	
	// previewOnDblClick: Boolean
	//		If true, will override the default behavior of a double-click calling a full toggle.
	//		If false, a double-click will cause the preview to popup
	previewOnDblClick: false,

	baseClass: "dijitExpandoPane",

	postCreate: function(){
		this.inherited(arguments);
		this._animConnects = [];

		this._isHorizontal = true;
		
		if(dojo.isString(this.easeOut)){
			this.easeOut = dojo.getObject(this.easeOut);
		}
		if(dojo.isString(this.easeIn)){
			this.easeIn = dojo.getObject(this.easeIn);
		}
	
		var thisClass = "", rtl = !this.isLeftToRight();
		if(this.region){
			switch(this.region){
				case "trailing" :
				case "right" :
					thisClass = rtl ? "Left" : "Right";
					break;
				case "leading" :
				case "left" :
					thisClass = rtl ? "Right" : "Left";
					break;
				case "top" :
					thisClass = "Top";
					break;
				case "bottom" :
					thisClass = "Bottom";
					break;
			}
			dojo.addClass(this.domNode, "dojoxExpando" + thisClass);
			dojo.addClass(this.iconNode, "dojoxExpandoIcon" + thisClass);
			this._isHorizontal = /top|bottom/.test(this.region);
		}
		dojo.style(this.domNode, {
			overflow: "hidden",
			padding:0
		});
		
		this.connect(this.domNode, "ondblclick", this.previewOnDblClick ? "preview" : "toggle");
		
		if(this.previewOnDblClick){
			this.connect(this.getParent(), "_layoutChildren", dojo.hitch(this, function(){
				this._isonlypreview = false;
			}));
		}
		
	},
	
	_startupSizes: function(){
		
		this._container = this.getParent();
		this._closedSize = this._titleHeight = dojo.marginBox(this.titleWrapper).h;
		
		if(this.splitter){
			// find our splitter and tie into it's drag logic
			var myid = this.id;
			dijit.registry.filter(function(w){
				return w && w.child && w.child.id == myid;
			}).forEach(dojo.hitch(this,function(w){
				this.connect(w,"_stopDrag","_afterResize");
			}));
		}
		
		this._currentSize = dojo.contentBox(this.domNode);	// TODO: can compute this from passed in value to resize(), see _LayoutWidget for example
		this._showSize = this._currentSize[(this._isHorizontal ? "h" : "w")];
		this._setupAnims();

		if(this.startExpanded){
			this._showing = true;
		}else{
			this._showing = false;
			this._hideWrapper();
			this._hideAnim.gotoPercent(99,true);
		}
		
		this._hasSizes = true;
	},
	
	_afterResize: function(e){
		var tmp = this._currentSize;						// the old size
		this._currentSize = dojo.marginBox(this.domNode);	// the new size
		var n = this._currentSize[(this._isHorizontal ? "h" : "w")]
		if(n > this._titleHeight){
			if(!this._showing){
				this._showing = !this._showing;
				this._showEnd();
			}
			this._showSize = n;
			this._setupAnims();
		}else{
			this._showSize = tmp[(this._isHorizontal ? "h" : "w")];
			this._showing = false;
			this._hideWrapper();
			this._hideAnim.gotoPercent(89,true);
		}
		
	},
	
	_setupAnims: function(){
		// summary: Create the show and hide animations
		dojo.forEach(this._animConnects, dojo.disconnect);
		
		var _common = {
				node:this.domNode,
				duration:this.duration
			},
			isHorizontal = this._isHorizontal,
			showProps = {},
			hideProps = {},
			dimension = isHorizontal ? "height" : "width"
		;

		showProps[dimension] = {
			end: this._showSize
		};
		hideProps[dimension] = {
			end: this._closedSize
		};
		
		this._showAnim = dojo.animateProperty(dojo.mixin(_common,{
			easing:this.easeIn,
			properties: showProps
		}));
		this._hideAnim = dojo.animateProperty(dojo.mixin(_common,{
			easing:this.easeOut,
			properties: hideProps
		}));

		this._animConnects = [
			dojo.connect(this._showAnim, "onEnd", this, "_showEnd"),
			dojo.connect(this._hideAnim, "onEnd", this, "_hideEnd")
		];
	},
	
	preview: function(){
		// summary: Expand this pane in preview mode (does not affect surrounding layout)

		if(!this._showing){
			this._isonlypreview = !this._isonlypreview;
		}
		this.toggle();
	},

	toggle: function(){
		// summary: Toggle this pane's visibility
		if(this._showing){
			this._hideWrapper();
			this._showAnim && this._showAnim.stop();
			this._hideAnim.play();
		}else{
			this._hideAnim && this._hideAnim.stop();
			this._showAnim.play();
		}
		this._showing = !this._showing;
	},
	
	_hideWrapper: function(){
		// summary: Set the Expando state to "closed"
		dojo.addClass(this.domNode, "dojoxExpandoClosed");
		
		dojo.style(this.cwrapper,{
			visibility: "hidden",
			opacity: "0",
			overflow: "hidden"
		});
	},
	
	_showEnd: function(){
		// summary: Common animation onEnd code - "unclose"
		dojo.style(this.cwrapper, {
			opacity: 0,
			visibility:"visible"
		});
		dojo.anim(this.cwrapper, {
			opacity: this._isonlypreview ? this.previewOpacity : 1
		}, 227);
		dojo.removeClass(this.domNode, "dojoxExpandoClosed");
		if(!this._isonlypreview){
			setTimeout(dojo.hitch(this._container, "layout"), 15);
		}else{
			this._previewShowing = true;
			this.resize();
		}
	},
	
	_hideEnd: function(){
		// summary: Callback for the hide animation - "close"

		// every time we hide, reset the "only preview" state
		if(!this._isonlypreview){
			setTimeout(dojo.hitch(this._container, "layout"), 25);
		}else{
			this._previewShowing = false;
		}
		this._isonlypreview = false;
		
	},
	
	resize: function(/* Object? */newSize){
		// summary:
		//		we aren't a layout widget, but need to act like one:
		// newSize: Object
		//		The size object to resize to

		if(!this._hasSizes){ this._startupSizes(newSize); }
		
		// compute size of container (ie, size left over after title bar)
		var currentSize = dojo.marginBox(this.domNode);
		this._contentBox = {
			w: newSize && "w" in newSize ? newSize.w : currentSize.w,
			h: (newSize && "h" in newSize ? newSize.h : currentSize.h) - this._titleHeight
		};
		dojo.style(this.containerNode, "height", this._contentBox.h + "px");

		if(newSize){
			dojo.marginBox(this.domNode, newSize);
		}

		this._layoutChildren();
	},
	
	_trap: function(e){
		// summary: Trap stray events
		dojo.stopEvent(e);
	}

});

}

if(!dojo._hasResource["dijit.dijit"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.dijit"] = true;
dojo.provide("dijit.dijit");










/*=====
dijit.dijit = {
	// summary:
	//		A roll-up for common dijit methods
	// description:
	//	A rollup file for the build system including the core and common
	//	dijit files.
	//
	// example:
	// | <script type="text/javascript" src="js/dojo/dijit/dijit.js"></script>
	//
};
=====*/

// All the stuff in _base (these are the function that are guaranteed available without an explicit dojo.require)

// And some other stuff that we tend to pull in all the time anyway

}

if(!dojo._hasResource["dojox.html.metrics"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.html.metrics"] = true;
dojo.provide("dojox.html.metrics");

(function(){
	var dhm = dojox.html.metrics;

	//	derived from Morris John's emResized measurer
	dhm.getFontMeasurements = function(){
		//	summary
		//	Returns an object that has pixel equivilents of standard font size values.
		var heights = {
			'1em':0, '1ex':0, '100%':0, '12pt':0, '16px':0, 'xx-small':0, 'x-small':0,
			'small':0, 'medium':0, 'large':0, 'x-large':0, 'xx-large':0
		};
	
		if(dojo.isIE){
			//	we do a font-size fix if and only if one isn't applied already.
			//	NOTE: If someone set the fontSize on the HTML Element, this will kill it.
			dojo.doc.documentElement.style.fontSize="100%";
		}
	
		//	set up the measuring node.
		var div=dojo.doc.createElement("div");
		var ds = div.style;
		ds.position="absolute";
		ds.left="-100px";
		ds.top="0";
		ds.width="30px";
		ds.height="1000em";
		ds.borderWidth="0";
		ds.margin="0";
		ds.padding="0";
		ds.outline="0";
		ds.lineHeight="1";
		ds.overflow="hidden";
		dojo.body().appendChild(div);
	
		//	do the measurements.
		for(var p in heights){
			ds.fontSize = p;
			heights[p] = Math.round(div.offsetHeight * 12/16) * 16/12 / 1000;
		}
		
		dojo.body().removeChild(div);
		div = null;
		return heights; 	//	object
	};

	var fontMeasurements = null;
	
	dhm.getCachedFontMeasurements = function(recalculate){
		if(recalculate || !fontMeasurements){
			fontMeasurements = dhm.getFontMeasurements();
		}
		return fontMeasurements;
	};

	var measuringNode = null, empty = {};
	dhm.getTextBox = function(/* String */ text, /* Object */ style, /* String? */ className){
		var m, s;
		if(!measuringNode){
			m = measuringNode = dojo.doc.createElement("div");
			// Container that we can set contraints on so that it doesn't
			// trigger a scrollbar.
			var c = dojo.doc.createElement("div");
			c.appendChild(m);
			s = c.style;
			s.overflow='scroll';
			s.position = "absolute";
			s.left = "0px";
			s.top = "-10000px";
			s.width = "1px";
			s.height = "1px";
			s.visibility = "hidden";
			s.borderWidth = "0";
			s.margin = "0";
			s.padding = "0";
			s.outline = "0";
			dojo.body().appendChild(c);
		}else{
			m = measuringNode;
		}
		// reset styles
		m.className = "";
		s = m.style;
		s.borderWidth = "0";
		s.margin = "0";
		s.padding = "0";
		s.outline = "0";
		// set new style
		if(arguments.length > 1 && style){
			for(var i in style){
				if(i in empty){ continue; }
				s[i] = style[i];
			}
		}
		// set classes
		if(arguments.length > 2 && className){
			m.className = className;
		}
		// take a measure
		m.innerHTML = text;
		var box = dojo.position(m);
		// position doesn't report right (reports 1, since parent is 1)
		// So we have to look at the scrollWidth to get the real width
		// Height is right.
		box.w = m.parentNode.scrollWidth;
		return box;
	};

	//	determine the scrollbar sizes on load.
	var scroll={ w:16, h:16 };
	dhm.getScrollbar=function(){ return { w:scroll.w, h:scroll.h }; };

	dhm._fontResizeNode = null;

	dhm.initOnFontResize = function(interval){
		var f = dhm._fontResizeNode = dojo.doc.createElement("iframe");
		var fs = f.style;
		fs.position = "absolute";
		fs.width = "5em";
		fs.height = "10em";
		fs.top = "-10000px";
		if(dojo.isIE){
			f.onreadystatechange = function(){
				if(f.contentWindow.document.readyState == "complete"){
					f.onresize = f.contentWindow.parent[dojox._scopeName].html.metrics._fontresize;
				}
			};
		}else{
			f.onload = function(){
				f.contentWindow.onresize = f.contentWindow.parent[dojox._scopeName].html.metrics._fontresize;
			};
		}
		//The script tag is to work around a known firebug race condition.  See comments in bug #9046
		f.setAttribute("src", "javascript:'<html><head><script>if(\"loadFirebugConsole\" in window){window.loadFirebugConsole();}</script></head><body></body></html>'");
		dojo.body().appendChild(f);
		dhm.initOnFontResize = function(){};
	};

	dhm.onFontResize = function(){};
	dhm._fontresize = function(){
		dhm.onFontResize();
	}

	dojo.addOnUnload(function(){
		// destroy our font resize iframe if we have one
		var f = dhm._fontResizeNode;
		if(f){
			if(dojo.isIE && f.onresize){
				f.onresize = null;
			}else if(f.contentWindow && f.contentWindow.onresize){
				f.contentWindow.onresize = null;
			}
			dhm._fontResizeNode = null;
		}
	});

	dojo.addOnLoad(function(){
		// getScrollbar metrics node
		try{
			var n=dojo.doc.createElement("div");
			n.style.cssText = "top:0;left:0;width:100px;height:100px;overflow:scroll;position:absolute;visibility:hidden;";
			dojo.body().appendChild(n);
			scroll.w = n.offsetWidth - n.clientWidth;
			scroll.h = n.offsetHeight - n.clientHeight;
			dojo.body().removeChild(n);
			//console.log("Scroll bar dimensions: ", scroll);
			delete n;
		}catch(e){}

		// text size poll setup
		if("fontSizeWatch" in dojo.config && !!dojo.config.fontSizeWatch){
			dhm.initOnFontResize();
		}
	});
})();

}

if(!dojo._hasResource["dojox.grid.util"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.util"] = true;
dojo.provide("dojox.grid.util");

// summary: grid utility library
(function(){
	var dgu = dojox.grid.util;

	dgu.na = '...';
	dgu.rowIndexTag = "gridRowIndex";
	dgu.gridViewTag = "gridView";


	dgu.fire = function(ob, ev, args){
		var fn = ob && ev && ob[ev];
		return fn && (args ? fn.apply(ob, args) : ob[ev]());
	};
	
	dgu.setStyleHeightPx = function(inElement, inHeight){
		if(inHeight >= 0){
			var s = inElement.style;
			var v = inHeight + 'px';
			if(inElement && s['height'] != v){
				s['height'] = v;
			}
		}
	};
	
	dgu.mouseEvents = [ 'mouseover', 'mouseout', /*'mousemove',*/ 'mousedown', 'mouseup', 'click', 'dblclick', 'contextmenu' ];

	dgu.keyEvents = [ 'keyup', 'keydown', 'keypress' ];

	dgu.funnelEvents = function(inNode, inObject, inMethod, inEvents){
		var evts = (inEvents ? inEvents : dgu.mouseEvents.concat(dgu.keyEvents));
		for (var i=0, l=evts.length; i<l; i++){
			inObject.connect(inNode, 'on' + evts[i], inMethod);
		}
	};

	dgu.removeNode = function(inNode){
		inNode = dojo.byId(inNode);
		inNode && inNode.parentNode && inNode.parentNode.removeChild(inNode);
		return inNode;
	};
	
	dgu.arrayCompare = function(inA, inB){
		for(var i=0,l=inA.length; i<l; i++){
			if(inA[i] != inB[i]){return false;}
		}
		return (inA.length == inB.length);
	};
	
	dgu.arrayInsert = function(inArray, inIndex, inValue){
		if(inArray.length <= inIndex){
			inArray[inIndex] = inValue;
		}else{
			inArray.splice(inIndex, 0, inValue);
		}
	};
	
	dgu.arrayRemove = function(inArray, inIndex){
		inArray.splice(inIndex, 1);
	};
	
	dgu.arraySwap = function(inArray, inI, inJ){
		var cache = inArray[inI];
		inArray[inI] = inArray[inJ];
		inArray[inJ] = cache;
	};
})();

}

if(!dojo._hasResource["dojox.grid._Scroller"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._Scroller"] = true;
dojo.provide("dojox.grid._Scroller");

(function(){
	var indexInParent = function(inNode){
		var i=0, n, p=inNode.parentNode;
		while((n = p.childNodes[i++])){
			if(n == inNode){
				return i - 1;
			}
		}
		return -1;
	};
	
	var cleanNode = function(inNode){
		if(!inNode){
			return;
		}
		var filter = function(inW){
			return inW.domNode && dojo.isDescendant(inW.domNode, inNode, true);
		};
		var ws = dijit.registry.filter(filter);
		for(var i=0, w; (w=ws[i]); i++){
			w.destroy();
		}
		delete ws;
	};

	var getTagName = function(inNodeOrId){
		var node = dojo.byId(inNodeOrId);
		return (node && node.tagName ? node.tagName.toLowerCase() : '');
	};
	
	var nodeKids = function(inNode, inTag){
		var result = [];
		var i=0, n;
		while((n = inNode.childNodes[i])){
			i++;
			if(getTagName(n) == inTag){
				result.push(n);
			}
		}
		return result;
	};
	
	var divkids = function(inNode){
		return nodeKids(inNode, 'div');
	};

	dojo.declare("dojox.grid._Scroller", null, {
		constructor: function(inContentNodes){
			this.setContentNodes(inContentNodes);
			this.pageHeights = [];
			this.pageNodes = [];
			this.stack = [];
		},
		// specified
		rowCount: 0, // total number of rows to manage
		defaultRowHeight: 32, // default height of a row
		keepRows: 100, // maximum number of rows that should exist at one time
		contentNode: null, // node to contain pages
		scrollboxNode: null, // node that controls scrolling
		// calculated
		defaultPageHeight: 0, // default height of a page
		keepPages: 10, // maximum number of pages that should exists at one time
		pageCount: 0,
		windowHeight: 0,
		firstVisibleRow: 0,
		lastVisibleRow: 0,
		averageRowHeight: 0, // the average height of a row
		// private
		page: 0,
		pageTop: 0,
		// init
		init: function(inRowCount, inKeepRows, inRowsPerPage){
			switch(arguments.length){
				case 3: this.rowsPerPage = inRowsPerPage;
				case 2: this.keepRows = inKeepRows;
				case 1: this.rowCount = inRowCount;
				default: break;
			}
			this.defaultPageHeight = this.defaultRowHeight * this.rowsPerPage;
			this.pageCount = this._getPageCount(this.rowCount, this.rowsPerPage);
			this.setKeepInfo(this.keepRows);
			this.invalidate();
			if(this.scrollboxNode){
				this.scrollboxNode.scrollTop = 0;
				this.scroll(0);
				this.scrollboxNode.onscroll = dojo.hitch(this, 'onscroll');
			}
		},
		_getPageCount: function(rowCount, rowsPerPage){
			return rowCount ? (Math.ceil(rowCount / rowsPerPage) || 1) : 0;
		},
		destroy: function(){
			this.invalidateNodes();
			delete this.contentNodes;
			delete this.contentNode;
			delete this.scrollboxNode;
		},
		setKeepInfo: function(inKeepRows){
			this.keepRows = inKeepRows;
			this.keepPages = !this.keepRows ? this.keepPages : Math.max(Math.ceil(this.keepRows / this.rowsPerPage), 2);
		},
		// nodes
		setContentNodes: function(inNodes){
			this.contentNodes = inNodes;
			this.colCount = (this.contentNodes ? this.contentNodes.length : 0);
			this.pageNodes = [];
			for(var i=0; i<this.colCount; i++){
				this.pageNodes[i] = [];
			}
		},
		getDefaultNodes: function(){
			return this.pageNodes[0] || [];
		},
		// updating
		invalidate: function(){
			this._invalidating = true;
			this.invalidateNodes();
			this.pageHeights = [];
			this.height = (this.pageCount ? (this.pageCount - 1)* this.defaultPageHeight + this.calcLastPageHeight() : 0);
			this.resize();
			this._invalidating = false;
		},
		updateRowCount: function(inRowCount){
			this.invalidateNodes();
			this.rowCount = inRowCount;
			// update page count, adjust document height
			var oldPageCount = this.pageCount;
			if(oldPageCount === 0){
				//We want to have at least 1px in height to keep scroller.  Otherwise with an
				//empty grid you can't scroll to see the header.
				this.height = 1;
			}
			this.pageCount = this._getPageCount(this.rowCount, this.rowsPerPage);
			if(this.pageCount < oldPageCount){
				for(var i=oldPageCount-1; i>=this.pageCount; i--){
					this.height -= this.getPageHeight(i);
					delete this.pageHeights[i];
				}
			}else if(this.pageCount > oldPageCount){
				this.height += this.defaultPageHeight * (this.pageCount - oldPageCount - 1) + this.calcLastPageHeight();
			}
			this.resize();
		},
		// implementation for page manager
		pageExists: function(inPageIndex){
			return Boolean(this.getDefaultPageNode(inPageIndex));
		},
		measurePage: function(inPageIndex){
			if(this.grid.rowHeight){
				var height = this.grid.rowHeight + 1;
				return ((inPageIndex + 1) * this.rowsPerPage > this.rowCount ?
					this.rowCount - inPageIndex * this.rowsPerPage :
					this.rowsPerPage) * height;
					 
			}
			var n = this.getDefaultPageNode(inPageIndex);
			return (n && n.innerHTML) ? n.offsetHeight : undefined;
		},
		positionPage: function(inPageIndex, inPos){
			for(var i=0; i<this.colCount; i++){
				this.pageNodes[i][inPageIndex].style.top = inPos + 'px';
			}
		},
		repositionPages: function(inPageIndex){
			var nodes = this.getDefaultNodes();
			var last = 0;

			for(var i=0; i<this.stack.length; i++){
				last = Math.max(this.stack[i], last);
			}
			//
			var n = nodes[inPageIndex];
			var y = (n ? this.getPageNodePosition(n) + this.getPageHeight(inPageIndex) : 0);
			for(var p=inPageIndex+1; p<=last; p++){
				n = nodes[p];
				if(n){
					if(this.getPageNodePosition(n) == y){
						return;
					}
					this.positionPage(p, y);
				}
				y += this.getPageHeight(p);
			}
		},
		installPage: function(inPageIndex){
			for(var i=0; i<this.colCount; i++){
				this.contentNodes[i].appendChild(this.pageNodes[i][inPageIndex]);
			}
		},
		preparePage: function(inPageIndex, inReuseNode){
			var p = (inReuseNode ? this.popPage() : null);
			for(var i=0; i<this.colCount; i++){
				var nodes = this.pageNodes[i];
				var new_p = (p === null ? this.createPageNode() : this.invalidatePageNode(p, nodes));
				new_p.pageIndex = inPageIndex;
				nodes[inPageIndex] = new_p;
			}
		},
		// rendering implementation
		renderPage: function(inPageIndex){
			var nodes = [];
			var i, j;
			for(i=0; i<this.colCount; i++){
				nodes[i] = this.pageNodes[i][inPageIndex];
			}
			for(i=0, j=inPageIndex*this.rowsPerPage; (i<this.rowsPerPage)&&(j<this.rowCount); i++, j++){
				this.renderRow(j, nodes);
			}
		},
		removePage: function(inPageIndex){
			for(var i=0, j=inPageIndex*this.rowsPerPage; i<this.rowsPerPage; i++, j++){
				this.removeRow(j);
			}
		},
		destroyPage: function(inPageIndex){
			for(var i=0; i<this.colCount; i++){
				var n = this.invalidatePageNode(inPageIndex, this.pageNodes[i]);
				if(n){
					dojo.destroy(n);
				}
			}
		},
		pacify: function(inShouldPacify){
		},
		// pacification
		pacifying: false,
		pacifyTicks: 200,
		setPacifying: function(inPacifying){
			if(this.pacifying != inPacifying){
				this.pacifying = inPacifying;
				this.pacify(this.pacifying);
			}
		},
		startPacify: function(){
			this.startPacifyTicks = new Date().getTime();
		},
		doPacify: function(){
			var result = (new Date().getTime() - this.startPacifyTicks) > this.pacifyTicks;
			this.setPacifying(true);
			this.startPacify();
			return result;
		},
		endPacify: function(){
			this.setPacifying(false);
		},
		// default sizing implementation
		resize: function(){
			if(this.scrollboxNode){
				this.windowHeight = this.scrollboxNode.clientHeight;
			}
			for(var i=0; i<this.colCount; i++){
				//We want to have 1px in height min to keep scroller.  Otherwise can't scroll
				//and see header in empty grid.
				dojox.grid.util.setStyleHeightPx(this.contentNodes[i], Math.max(1,this.height));
			}
			
			// Calculate the average row height and update the defaults (row and page).
			var needPage = (!this._invalidating);
			if(!needPage){
				var ah = this.grid.get("autoHeight");
				if(typeof ah == "number" && ah <= Math.min(this.rowsPerPage, this.rowCount)){
					needPage = true;
				}
			}
			if(needPage){
				this.needPage(this.page, this.pageTop);
			}
			var rowsOnPage = (this.page < this.pageCount - 1) ? this.rowsPerPage : ((this.rowCount % this.rowsPerPage) || this.rowsPerPage);
			var pageHeight = this.getPageHeight(this.page);
			this.averageRowHeight = (pageHeight > 0 && rowsOnPage > 0) ? (pageHeight / rowsOnPage) : 0;
		},
		calcLastPageHeight: function(){
			if(!this.pageCount){
				return 0;
			}
			var lastPage = this.pageCount - 1;
			var lastPageHeight = ((this.rowCount % this.rowsPerPage)||(this.rowsPerPage)) * this.defaultRowHeight;
			this.pageHeights[lastPage] = lastPageHeight;
			return lastPageHeight;
		},
		updateContentHeight: function(inDh){
			this.height += inDh;
			this.resize();
		},
		updatePageHeight: function(inPageIndex, fromBuild, fromAsynRendering){
			if(this.pageExists(inPageIndex)){
				var oh = this.getPageHeight(inPageIndex);
				var h = (this.measurePage(inPageIndex));
				if(h === undefined){
					h = oh;
				}
				this.pageHeights[inPageIndex] = h;
				if(oh != h){
					this.updateContentHeight(h - oh);
					var ah = this.grid.get("autoHeight");
					if((typeof ah == "number" && ah > this.rowCount)||(ah === true && !fromBuild)){
						if(!fromAsynRendering){
							this.grid.sizeChange();
						}else{//fix #11101 by using fromAsynRendering to avoid deadlock
							var ns = this.grid.viewsNode.style;
							ns.height = parseInt(ns.height) + h - oh + 'px';
							this.repositionPages(inPageIndex);
						}
					}else{
						this.repositionPages(inPageIndex);
					}
				}
				return h;
			}
			return 0;
		},
		rowHeightChanged: function(inRowIndex, fromAsynRendering){
			this.updatePageHeight(Math.floor(inRowIndex / this.rowsPerPage), false, fromAsynRendering);
		},
		// scroller core
		invalidateNodes: function(){
			while(this.stack.length){
				this.destroyPage(this.popPage());
			}
		},
		createPageNode: function(){
			var p = document.createElement('div');
			dojo.attr(p,"role","presentation");
			p.style.position = 'absolute';
			//p.style.width = '100%';
			p.style[dojo._isBodyLtr() ? "left" : "right"] = '0';
			return p;
		},
		getPageHeight: function(inPageIndex){
			var ph = this.pageHeights[inPageIndex];
			return (ph !== undefined ? ph : this.defaultPageHeight);
		},
		// FIXME: this is not a stack, it's a FIFO list
		pushPage: function(inPageIndex){
			return this.stack.push(inPageIndex);
		},
		popPage: function(){
			return this.stack.shift();
		},
		findPage: function(inTop){
			var i = 0, h = 0;
			for(var ph = 0; i<this.pageCount; i++, h += ph){
				ph = this.getPageHeight(i);
				if(h + ph >= inTop){
					break;
				}
			}
			this.page = i;
			this.pageTop = h;
		},
		buildPage: function(inPageIndex, inReuseNode, inPos){
			this.preparePage(inPageIndex, inReuseNode);
			this.positionPage(inPageIndex, inPos);
			// order of operations is key below
			this.installPage(inPageIndex);
			this.renderPage(inPageIndex);
			// order of operations is key above
			this.pushPage(inPageIndex);
		},
		needPage: function(inPageIndex, inPos){
			var h = this.getPageHeight(inPageIndex), oh = h;
			if(!this.pageExists(inPageIndex)){
				this.buildPage(inPageIndex, (!this.grid._autoHeight/*fix #10543*/ && this.keepPages&&(this.stack.length >= this.keepPages)), inPos);
				h = this.updatePageHeight(inPageIndex, true);
			}else{
				this.positionPage(inPageIndex, inPos);
			}
			return h;
		},
		onscroll: function(){
			this.scroll(this.scrollboxNode.scrollTop);
		},
		scroll: function(inTop){
			this.grid.scrollTop = inTop;
			if(this.colCount){
				this.startPacify();
				this.findPage(inTop);
				var h = this.height;
				var b = this.getScrollBottom(inTop);
				for(var p=this.page, y=this.pageTop; (p<this.pageCount)&&((b<0)||(y<b)); p++){
					y += this.needPage(p, y);
				}
				this.firstVisibleRow = this.getFirstVisibleRow(this.page, this.pageTop, inTop);
				this.lastVisibleRow = this.getLastVisibleRow(p - 1, y, b);
				// indicates some page size has been updated
				if(h != this.height){
					this.repositionPages(p-1);
				}
				this.endPacify();
			}
		},
		getScrollBottom: function(inTop){
			return (this.windowHeight >= 0 ? inTop + this.windowHeight : -1);
		},
		// events
		processNodeEvent: function(e, inNode){
			var t = e.target;
			while(t && (t != inNode) && t.parentNode && (t.parentNode.parentNode != inNode)){
				t = t.parentNode;
			}
			if(!t || !t.parentNode || (t.parentNode.parentNode != inNode)){
				return false;
			}
			var page = t.parentNode;
			e.topRowIndex = page.pageIndex * this.rowsPerPage;
			e.rowIndex = e.topRowIndex + indexInParent(t);
			e.rowTarget = t;
			return true;
		},
		processEvent: function(e){
			return this.processNodeEvent(e, this.contentNode);
		},
		// virtual rendering interface
		renderRow: function(inRowIndex, inPageNode){
		},
		removeRow: function(inRowIndex){
		},
		// page node operations
		getDefaultPageNode: function(inPageIndex){
			return this.getDefaultNodes()[inPageIndex];
		},
		positionPageNode: function(inNode, inPos){
		},
		getPageNodePosition: function(inNode){
			return inNode.offsetTop;
		},
		invalidatePageNode: function(inPageIndex, inNodes){
			var p = inNodes[inPageIndex];
			if(p){
				delete inNodes[inPageIndex];
				this.removePage(inPageIndex, p);
				cleanNode(p);
				p.innerHTML = '';
			}
			return p;
		},
		// scroll control
		getPageRow: function(inPage){
			return inPage * this.rowsPerPage;
		},
		getLastPageRow: function(inPage){
			return Math.min(this.rowCount, this.getPageRow(inPage + 1)) - 1;
		},
		getFirstVisibleRow: function(inPage, inPageTop, inScrollTop){
			if(!this.pageExists(inPage)){
				return 0;
			}
			var row = this.getPageRow(inPage);
			var nodes = this.getDefaultNodes();
			var rows = divkids(nodes[inPage]);
			for(var i=0,l=rows.length; i<l && inPageTop<inScrollTop; i++, row++){
				inPageTop += rows[i].offsetHeight;
			}
			return (row ? row - 1 : row);
		},
		getLastVisibleRow: function(inPage, inBottom, inScrollBottom){
			if(!this.pageExists(inPage)){
				return 0;
			}
			var nodes = this.getDefaultNodes();
			var row = this.getLastPageRow(inPage);
			var rows = divkids(nodes[inPage]);
			for(var i=rows.length-1; i>=0 && inBottom>inScrollBottom; i--, row--){
				inBottom -= rows[i].offsetHeight;
			}
			return row + 1;
		},
		findTopRow: function(inScrollTop){
			var nodes = this.getDefaultNodes();
			var rows = divkids(nodes[this.page]);
			for(var i=0,l=rows.length,t=this.pageTop,h; i<l; i++){
				h = rows[i].offsetHeight;
				t += h;
				if(t >= inScrollTop){
					this.offset = h - (t - inScrollTop);
					return i + this.page * this.rowsPerPage;
				}
			}
			return -1;
		},
		findScrollTop: function(inRow){
			var rowPage = Math.floor(inRow / this.rowsPerPage);
			var t = 0;
			var i, l;
			for(i=0; i<rowPage; i++){
				t += this.getPageHeight(i);
			}
			this.pageTop = t;
			this.page = rowPage;//fix #10543
			this.needPage(rowPage, this.pageTop);

			var nodes = this.getDefaultNodes();
			var rows = divkids(nodes[rowPage]);
			var r = inRow - this.rowsPerPage * rowPage;
			for(i=0,l=rows.length; i<l && i<r; i++){
				t += rows[i].offsetHeight;
			}
			return t;
		},
		dummy: 0
	});
})();

}

if(!dojo._hasResource["dojox.grid.cells._base"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.cells._base"] = true;
dojo.provide("dojox.grid.cells._base");




dojo.declare("dojox.grid._DeferredTextWidget", dijit._Widget, {
	deferred: null,
	_destroyOnRemove: true,
	postCreate: function(){
		if(this.deferred){
			this.deferred.addBoth(dojo.hitch(this, function(text){
				if(this.domNode){
					this.domNode.innerHTML = text;
				}
			}));
		}
	}
});

(function(){
	var focusSelectNode = function(inNode){
		try{
			dojox.grid.util.fire(inNode, "focus");
			dojox.grid.util.fire(inNode, "select");
		}catch(e){// IE sux bad
		}
	};
	
	var whenIdle = function(/*inContext, inMethod, args ...*/){
		setTimeout(dojo.hitch.apply(dojo, arguments), 0);
	};

	var dgc = dojox.grid.cells;

	dojo.declare("dojox.grid.cells._Base", null, {
		// summary:
		//	Respresents a grid cell and contains information about column options and methods
		//	for retrieving cell related information.
		//	Each column in a grid layout has a cell object and most events and many methods
		//	provide access to these objects.
		styles: '',
		classes: '',
		editable: false,
		alwaysEditing: false,
		formatter: null,
		defaultValue: '...',
		value: null,
		hidden: false,
		noresize: false,
		draggable: true,
		//private
		_valueProp: "value",
		_formatPending: false,

		constructor: function(inProps){
			this._props = inProps || {};
			dojo.mixin(this, inProps);
			if(this.draggable === undefined){
				this.draggable = true;
			}
		},

		_defaultFormat: function(inValue, callArgs){
			var s = this.grid.formatterScope || this;
			var f = this.formatter;
			if(f && s && typeof f == "string"){
				f = this.formatter = s[f];
			}
			var v = (inValue != this.defaultValue && f) ? f.apply(s, callArgs) : inValue;
			if(typeof v == "undefined"){
				return this.defaultValue;
			}
			if(v && v.addBoth){
				// Check if it's a deferred
				v = new dojox.grid._DeferredTextWidget({deferred: v},
									dojo.create("span", {innerHTML: this.defaultValue}));
			}
			if(v && v.declaredClass && v.startup){
				return "<div class='dojoxGridStubNode' linkWidget='" +
						v.id +
						"' cellIdx='" +
						this.index +
						"'>" +
						this.defaultValue +
						"</div>";
			}
			return v;
		},
		
		// data source
		format: function(inRowIndex, inItem){
			// summary:
			//	provides the html for a given grid cell.
			// inRowIndex: int
			// grid row index
			// returns: html for a given grid cell
			var f, i=this.grid.edit.info, d=this.get ? this.get(inRowIndex, inItem) : (this.value || this.defaultValue);
			d = (d && d.replace && this.grid.escapeHTMLInData) ? d.replace(/&/g, '&amp;').replace(/</g, '&lt;') : d;
			if(this.editable && (this.alwaysEditing || (i.rowIndex==inRowIndex && i.cell==this))){
				return this.formatEditing(d, inRowIndex);
			}else{
				return this._defaultFormat(d, [d, inRowIndex, this]);
			}
		},
		formatEditing: function(inDatum, inRowIndex){
			// summary:
			//	formats the cell for editing
			// inDatum: anything
			//	cell data to edit
			// inRowIndex: int
			//	grid row index
			// returns: string of html to place in grid cell
		},
		// utility
		getNode: function(inRowIndex){
			// summary:
			//	gets the dom node for a given grid cell.
			// inRowIndex: int
			// grid row index
			// returns: dom node for a given grid cell
			return this.view.getCellNode(inRowIndex, this.index);
		},
		getHeaderNode: function(){
			return this.view.getHeaderCellNode(this.index);
		},
		getEditNode: function(inRowIndex){
			return (this.getNode(inRowIndex) || 0).firstChild || 0;
		},
		canResize: function(){
			var uw = this.unitWidth;
			return uw && (uw!=='auto');
		},
		isFlex: function(){
			var uw = this.unitWidth;
			return uw && dojo.isString(uw) && (uw=='auto' || uw.slice(-1)=='%');
		},
		// edit support
		applyEdit: function(inValue, inRowIndex){
			this.grid.edit.applyCellEdit(inValue, this, inRowIndex);
		},
		cancelEdit: function(inRowIndex){
			this.grid.doCancelEdit(inRowIndex);
		},
		_onEditBlur: function(inRowIndex){
			if(this.grid.edit.isEditCell(inRowIndex, this.index)){
				//console.log('editor onblur', e);
				this.grid.edit.apply();
			}
		},
		registerOnBlur: function(inNode, inRowIndex){
			if(this.commitOnBlur){
				dojo.connect(inNode, "onblur", function(e){
					// hack: if editor still thinks this editor is current some ms after it blurs, assume we've focused away from grid
					setTimeout(dojo.hitch(this, "_onEditBlur", inRowIndex), 250);
				});
			}
		},
		//protected
		needFormatNode: function(inDatum, inRowIndex){
			this._formatPending = true;
			whenIdle(this, "_formatNode", inDatum, inRowIndex);
		},
		cancelFormatNode: function(){
			this._formatPending = false;
		},
		//private
		_formatNode: function(inDatum, inRowIndex){
			if(this._formatPending){
				this._formatPending = false;
				// make cell selectable
				dojo.setSelectable(this.grid.domNode, true);
				this.formatNode(this.getEditNode(inRowIndex), inDatum, inRowIndex);
			}
		},
		//protected
		formatNode: function(inNode, inDatum, inRowIndex){
			// summary:
			//	format the editing dom node. Use when editor is a widget.
			// inNode: dom node
			// dom node for the editor
			// inDatum: anything
			//	cell data to edit
			// inRowIndex: int
			//	grid row index
			if(dojo.isIE){
				// IE sux bad
				whenIdle(this, "focus", inRowIndex, inNode);
			}else{
				this.focus(inRowIndex, inNode);
			}
		},
		dispatchEvent: function(m, e){
			if(m in this){
				return this[m](e);
			}
		},
		//public
		getValue: function(inRowIndex){
			// summary:
			//	returns value entered into editor
			// inRowIndex: int
			// grid row index
			// returns:
			//	value of editor
			return this.getEditNode(inRowIndex)[this._valueProp];
		},
		setValue: function(inRowIndex, inValue){
			// summary:
			//	set the value of the grid editor
			// inRowIndex: int
			// grid row index
			// inValue: anything
			//	value of editor
			var n = this.getEditNode(inRowIndex);
			if(n){
				n[this._valueProp] = inValue;
			}
		},
		focus: function(inRowIndex, inNode){
			// summary:
			//	focus the grid editor
			// inRowIndex: int
			// grid row index
			// inNode: dom node
			//	editor node
			focusSelectNode(inNode || this.getEditNode(inRowIndex));
		},
		save: function(inRowIndex){
			// summary:
			//	save editor state
			// inRowIndex: int
			// grid row index
			this.value = this.value || this.getValue(inRowIndex);
			//console.log("save", this.value, inCell.index, inRowIndex);
		},
		restore: function(inRowIndex){
			// summary:
			//	restore editor state
			// inRowIndex: int
			// grid row index
			this.setValue(inRowIndex, this.value);
			//console.log("restore", this.value, inCell.index, inRowIndex);
		},
		//protected
		_finish: function(inRowIndex){
			// summary:
			//	called when editing is completed to clean up editor
			// inRowIndex: int
			// grid row index
			dojo.setSelectable(this.grid.domNode, false);
			this.cancelFormatNode();
		},
		//public
		apply: function(inRowIndex){
			// summary:
			//	apply edit from cell editor
			// inRowIndex: int
			// grid row index
			this.applyEdit(this.getValue(inRowIndex), inRowIndex);
			this._finish(inRowIndex);
		},
		cancel: function(inRowIndex){
			// summary:
			//	cancel cell edit
			// inRowIndex: int
			// grid row index
			this.cancelEdit(inRowIndex);
			this._finish(inRowIndex);
		}
	});
	dgc._Base.markupFactory = function(node, cellDef){
		var d = dojo;
		var formatter = d.trim(d.attr(node, "formatter")||"");
		if(formatter){
			cellDef.formatter = dojo.getObject(formatter)||formatter;
		}
		var get = d.trim(d.attr(node, "get")||"");
		if(get){
			cellDef.get = dojo.getObject(get);
		}
		var getBoolAttr = function(attr, cell, cellAttr){
			var value = d.trim(d.attr(node, attr)||"");
			if(value){ cell[cellAttr||attr] = !(value.toLowerCase()=="false"); }
		};
		getBoolAttr("sortDesc", cellDef);
		getBoolAttr("editable", cellDef);
		getBoolAttr("alwaysEditing", cellDef);
		getBoolAttr("noresize", cellDef);
		getBoolAttr("draggable", cellDef);

		var value = d.trim(d.attr(node, "loadingText")||d.attr(node, "defaultValue")||"");
		if(value){
			cellDef.defaultValue = value;
		}

		var getStrAttr = function(attr, cell, cellAttr){
			var value = d.trim(d.attr(node, attr)||"")||undefined;
			if(value){ cell[cellAttr||attr] = value; }
		};
		getStrAttr("styles", cellDef);
		getStrAttr("headerStyles", cellDef);
		getStrAttr("cellStyles", cellDef);
		getStrAttr("classes", cellDef);
		getStrAttr("headerClasses", cellDef);
		getStrAttr("cellClasses", cellDef);
	};

	dojo.declare("dojox.grid.cells.Cell", dgc._Base, {
		// summary
		// grid cell that provides a standard text input box upon editing
		constructor: function(){
			this.keyFilter = this.keyFilter;
		},
		// keyFilter: RegExp
		//		optional regex for disallowing keypresses
		keyFilter: null,
		formatEditing: function(inDatum, inRowIndex){
			this.needFormatNode(inDatum, inRowIndex);
			return '<input class="dojoxGridInput" type="text" value="' + inDatum + '">';
		},
		formatNode: function(inNode, inDatum, inRowIndex){
			this.inherited(arguments);
			// FIXME: feels too specific for this interface
			this.registerOnBlur(inNode, inRowIndex);
		},
		doKey: function(e){
			if(this.keyFilter){
				var key = String.fromCharCode(e.charCode);
				if(key.search(this.keyFilter) == -1){
					dojo.stopEvent(e);
				}
			}
		},
		_finish: function(inRowIndex){
			this.inherited(arguments);
			var n = this.getEditNode(inRowIndex);
			try{
				dojox.grid.util.fire(n, "blur");
			}catch(e){}
		}
	});
	dgc.Cell.markupFactory = function(node, cellDef){
		dgc._Base.markupFactory(node, cellDef);
		var d = dojo;
		var keyFilter = d.trim(d.attr(node, "keyFilter")||"");
		if(keyFilter){
			cellDef.keyFilter = new RegExp(keyFilter);
		}
	};

	dojo.declare("dojox.grid.cells.RowIndex", dgc.Cell, {
		name: 'Row',

		postscript: function(){
			this.editable = false;
		},
		get: function(inRowIndex){
			return inRowIndex + 1;
		}
	});
	dgc.RowIndex.markupFactory = function(node, cellDef){
		dgc.Cell.markupFactory(node, cellDef);
	};

	dojo.declare("dojox.grid.cells.Select", dgc.Cell, {
		// summary:
		// grid cell that provides a standard select for editing

		// options: Array
		// 		text of each item
		options: null,

		// values: Array
		//		value for each item
		values: null,

		// returnIndex: Integer
		// 		editor returns only the index of the selected option and not the value
		returnIndex: -1,

		constructor: function(inCell){
			this.values = this.values || this.options;
		},
		formatEditing: function(inDatum, inRowIndex){
			this.needFormatNode(inDatum, inRowIndex);
			var h = [ '<select class="dojoxGridSelect">' ];
			for (var i=0, o, v; ((o=this.options[i]) !== undefined)&&((v=this.values[i]) !== undefined); i++){
				h.push("<option", (inDatum==v ? ' selected' : ''), ' value="' + v + '"', ">", o, "</option>");
			}
			h.push('</select>');
			return h.join('');
		},
		getValue: function(inRowIndex){
			var n = this.getEditNode(inRowIndex);
			if(n){
				var i = n.selectedIndex, o = n.options[i];
				return this.returnIndex > -1 ? i : o.value || o.innerHTML;
			}
		}
	});
	dgc.Select.markupFactory = function(node, cell){
		dgc.Cell.markupFactory(node, cell);
		var d=dojo;
		var options = d.trim(d.attr(node, "options")||"");
		if(options){
			var o = options.split(',');
			if(o[0] != options){
				cell.options = o;
			}
		}
		var values = d.trim(d.attr(node, "values")||"");
		if(values){
			var v = values.split(',');
			if(v[0] != values){
				cell.values = v;
			}
		}
	};

	dojo.declare("dojox.grid.cells.AlwaysEdit", dgc.Cell, {
		// summary:
		// grid cell that is always in an editable state, regardless of grid editing state
		alwaysEditing: true,
		_formatNode: function(inDatum, inRowIndex){
			this.formatNode(this.getEditNode(inRowIndex), inDatum, inRowIndex);
		},
		applyStaticValue: function(inRowIndex){
			var e = this.grid.edit;
			e.applyCellEdit(this.getValue(inRowIndex), this, inRowIndex);
			e.start(this, inRowIndex, true);
		}
	});
	dgc.AlwaysEdit.markupFactory = function(node, cell){
		dgc.Cell.markupFactory(node, cell);
	};

	dojo.declare("dojox.grid.cells.Bool", dgc.AlwaysEdit, {
		// summary:
		// grid cell that provides a standard checkbox that is always on for editing
		_valueProp: "checked",
		formatEditing: function(inDatum, inRowIndex){
			return '<input class="dojoxGridInput" type="checkbox"' + (inDatum ? ' checked="checked"' : '') + ' style="width: auto" />';
		},
		doclick: function(e){
			if(e.target.tagName == 'INPUT'){
				this.applyStaticValue(e.rowIndex);
			}
		}
	});
	dgc.Bool.markupFactory = function(node, cell){
		dgc.AlwaysEdit.markupFactory(node, cell);
	};
})();

}

if(!dojo._hasResource["dojox.grid.cells"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.cells"] = true;
dojo.provide("dojox.grid.cells");


}

if(!dojo._hasResource["dojox.grid._Builder"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._Builder"] = true;
dojo.provide("dojox.grid._Builder");




(function(){
	var dg = dojox.grid;

	var getTdIndex = function(td){
		return td.cellIndex >=0 ? td.cellIndex : dojo.indexOf(td.parentNode.cells, td);
	};
	
	var getTrIndex = function(tr){
		return tr.rowIndex >=0 ? tr.rowIndex : dojo.indexOf(tr.parentNode.childNodes, tr);
	};
	
	var getTr = function(rowOwner, index){
		return rowOwner && ((rowOwner.rows||0)[index] || rowOwner.childNodes[index]);
	};

	var findTable = function(node){
		for(var n=node; n && n.tagName!='TABLE'; n=n.parentNode){}
		return n;
	};
	
	var ascendDom = function(inNode, inWhile){
		for(var n=inNode; n && inWhile(n); n=n.parentNode){}
		return n;
	};
	
	var makeNotTagName = function(inTagName){
		var name = inTagName.toUpperCase();
		return function(node){ return node.tagName != name; };
	};

	var rowIndexTag = dojox.grid.util.rowIndexTag;
	var gridViewTag = dojox.grid.util.gridViewTag;

	// base class for generating markup for the views
	dg._Builder = dojo.extend(function(view){
		if(view){
			this.view = view;
			this.grid = view.grid;
		}
	},{
		view: null,
		// boilerplate HTML
		_table: '<table class="dojoxGridRowTable" border="0" cellspacing="0" cellpadding="0" role="presentation"',

		// Returns the table variable as an array - and with the view width, if specified
		getTableArray: function(){
			var html = [this._table];
			if(this.view.viewWidth){
				html.push([' style="width:', this.view.viewWidth, ';"'].join(''));
			}
			html.push('>');
			return html;
		},
		
		// generate starting tags for a cell
		generateCellMarkup: function(inCell, inMoreStyles, inMoreClasses, isHeader){
			var result = [], html;
			if(isHeader){
				var sortInfo = inCell.index != inCell.grid.getSortIndex() ? "" : inCell.grid.sortInfo > 0 ? 'aria-sort="ascending"' : 'aria-sort="descending"';
				if (!inCell.id){
					inCell.id = this.grid.id + "Hdr" + inCell.index;
				}
				// column headers are not editable, mark as aria-readonly=true
				html = ['<th tabIndex="-1" aria-readonly="true" role="columnheader"', sortInfo, 'id="', inCell.id, '"'];
			}else{
				// cells inherit grid aria-readonly property; default value for aria-readonly is false(grid is editable)
				// if grid is editable (had any editable cells), mark non editable cells as aria-readonly=true
				// if no editable cells, grid's aria-readonly value will have been set to true and cells will inherit
				var editInfo = this.grid.editable && !inCell.editable ? 'aria-readonly="true"' : "";
				html = ['<td tabIndex="-1" role="gridcell"', editInfo];
			}
			if(inCell.colSpan){
				html.push(' colspan="', inCell.colSpan, '"');
			}
			if(inCell.rowSpan){
				html.push(' rowspan="', inCell.rowSpan, '"');
			}
			html.push(' class="dojoxGridCell ');
			if(inCell.classes){
				html.push(inCell.classes, ' ');
			}
			if(inMoreClasses){
				html.push(inMoreClasses, ' ');
			}
			// result[0] => td opener, style
			result.push(html.join(''));
			// SLOT: result[1] => td classes
			result.push('');
			html = ['" idx="', inCell.index, '" style="'];
			if(inMoreStyles && inMoreStyles[inMoreStyles.length-1] != ';'){
				inMoreStyles += ';';
			}
			html.push(inCell.styles, inMoreStyles||'', inCell.hidden?'display:none;':'');
			if(inCell.unitWidth){
				html.push('width:', inCell.unitWidth, ';');
			}
			// result[2] => markup
			result.push(html.join(''));
			// SLOT: result[3] => td style
			result.push('');
			html = [ '"' ];
			if(inCell.attrs){
				html.push(" ", inCell.attrs);
			}
			html.push('>');
			// result[4] => td postfix
			result.push(html.join(''));
			// SLOT: result[5] => content
			result.push('');
			// result[6] => td closes
			result.push(isHeader?'</th>':'</td>');
			return result; // Array
		},

		// cell finding
		isCellNode: function(inNode){
			return Boolean(inNode && inNode!=dojo.doc && dojo.attr(inNode, "idx"));
		},
		
		getCellNodeIndex: function(inCellNode){
			return inCellNode ? Number(dojo.attr(inCellNode, "idx")) : -1;
		},
		
		getCellNode: function(inRowNode, inCellIndex){
			for(var i=0, row; ((row = getTr(inRowNode.firstChild, i)) && row.cells); i++){
				for(var j=0, cell; (cell = row.cells[j]); j++){
					if(this.getCellNodeIndex(cell) == inCellIndex){
						return cell;
					}
				}
			}
			return null;
		},
		
		findCellTarget: function(inSourceNode, inTopNode){
			var n = inSourceNode;
			while(n && (!this.isCellNode(n) || (n.offsetParent && gridViewTag in n.offsetParent.parentNode && n.offsetParent.parentNode[gridViewTag] != this.view.id)) && (n!=inTopNode)){
				n = n.parentNode;
			}
			return n!=inTopNode ? n : null;
		},
		
		// event decoration
		baseDecorateEvent: function(e){
			e.dispatch = 'do' + e.type;
			e.grid = this.grid;
			e.sourceView = this.view;
			e.cellNode = this.findCellTarget(e.target, e.rowNode);
			e.cellIndex = this.getCellNodeIndex(e.cellNode);
			e.cell = (e.cellIndex >= 0 ? this.grid.getCell(e.cellIndex) : null);
		},
		
		// event dispatch
		findTarget: function(inSource, inTag){
			var n = inSource;
			while(n && (n!=this.domNode) && (!(inTag in n) || (gridViewTag in n && n[gridViewTag] != this.view.id))){
				n = n.parentNode;
			}
			return (n != this.domNode) ? n : null;
		},

		findRowTarget: function(inSource){
			return this.findTarget(inSource, rowIndexTag);
		},

		isIntraNodeEvent: function(e){
			try{
				return (e.cellNode && e.relatedTarget && dojo.isDescendant(e.relatedTarget, e.cellNode));
			}catch(x){
				// e.relatedTarget has permission problem in FF if it's an input: https://bugzilla.mozilla.org/show_bug.cgi?id=208427
				return false;
			}
		},

		isIntraRowEvent: function(e){
			try{
				var row = e.relatedTarget && this.findRowTarget(e.relatedTarget);
				return !row && (e.rowIndex==-1) || row && (e.rowIndex==row.gridRowIndex);
			}catch(x){
				// e.relatedTarget on INPUT has permission problem in FF: https://bugzilla.mozilla.org/show_bug.cgi?id=208427
				return false;
			}
		},

		dispatchEvent: function(e){
			if(e.dispatch in this){
				return this[e.dispatch](e);
			}
			return false;
		},

		// dispatched event handlers
		domouseover: function(e){
			if(e.cellNode && (e.cellNode!=this.lastOverCellNode)){
				this.lastOverCellNode = e.cellNode;
				this.grid.onMouseOver(e);
			}
			this.grid.onMouseOverRow(e);
		},

		domouseout: function(e){
			if(e.cellNode && (e.cellNode==this.lastOverCellNode) && !this.isIntraNodeEvent(e, this.lastOverCellNode)){
				this.lastOverCellNode = null;
				this.grid.onMouseOut(e);
				if(!this.isIntraRowEvent(e)){
					this.grid.onMouseOutRow(e);
				}
			}
		},
		
		domousedown: function(e){
			if (e.cellNode)
				this.grid.onMouseDown(e);
			this.grid.onMouseDownRow(e);
		}
	});

	// Produces html for grid data content. Owned by grid and used internally
	// for rendering data. Override to implement custom rendering.
	dg._ContentBuilder = dojo.extend(function(view){
		dg._Builder.call(this, view);
	},dg._Builder.prototype,{
		update: function(){
			this.prepareHtml();
		},

		// cache html for rendering data rows
		prepareHtml: function(){
			var defaultGet=this.grid.get, cells=this.view.structure.cells;
			for(var j=0, row; (row=cells[j]); j++){
				for(var i=0, cell; (cell=row[i]); i++){
					cell.get = cell.get || (cell.value == undefined) && defaultGet;
					cell.markup = this.generateCellMarkup(cell, cell.cellStyles, cell.cellClasses, false);
					if (!this.grid.editable && cell.editable){
						this.grid.editable = true;
					}
				}
			}
		},

		// time critical: generate html using cache and data source
		generateHtml: function(inDataIndex, inRowIndex){
			var
				html = this.getTableArray(),
				v = this.view,
				cells = v.structure.cells,
				item = this.grid.getItem(inRowIndex);

			dojox.grid.util.fire(this.view, "onBeforeRow", [inRowIndex, cells]);
			for(var j=0, row; (row=cells[j]); j++){
				if(row.hidden || row.header){
					continue;
				}
				html.push(!row.invisible ? '<tr>' : '<tr class="dojoxGridInvisible">');
				for(var i=0, cell, m, cc, cs; (cell=row[i]); i++){
					m = cell.markup; cc = cell.customClasses = []; cs = cell.customStyles = [];
					// content (format can fill in cc and cs as side-effects)
					m[5] = cell.format(inRowIndex, item);
					// classes
					m[1] = cc.join(' ');
					// styles
					m[3] = cs.join(';');
					// in-place concat
					html.push.apply(html, m);
				}
				html.push('</tr>');
			}
			html.push('</table>');
			return html.join(''); // String
		},

		decorateEvent: function(e){
			e.rowNode = this.findRowTarget(e.target);
			if(!e.rowNode){return false;}
			e.rowIndex = e.rowNode[rowIndexTag];
			this.baseDecorateEvent(e);
			e.cell = this.grid.getCell(e.cellIndex);
			return true; // Boolean
		}
	});

	// Produces html for grid header content. Owned by grid and used internally
	// for rendering data. Override to implement custom rendering.
	dg._HeaderBuilder = dojo.extend(function(view){
		this.moveable = null;
		dg._Builder.call(this, view);
	},dg._Builder.prototype,{
		_skipBogusClicks: false,
		overResizeWidth: 4,
		minColWidth: 1,
		
		update: function(){
			if(this.tableMap){
				this.tableMap.mapRows(this.view.structure.cells);
			}else{
				this.tableMap = new dg._TableMap(this.view.structure.cells);
			}
		},

		generateHtml: function(inGetValue, inValue){
			var html = this.getTableArray(), cells = this.view.structure.cells;
			
			dojox.grid.util.fire(this.view, "onBeforeRow", [-1, cells]);
			for(var j=0, row; (row=cells[j]); j++){
				if(row.hidden){
					continue;
				}
				html.push(!row.invisible ? '<tr>' : '<tr class="dojoxGridInvisible">');
				for(var i=0, cell, markup; (cell=row[i]); i++){
					cell.customClasses = [];
					cell.customStyles = [];
					if(this.view.simpleStructure){
						if(cell.draggable){
							if(cell.headerClasses){
								if(cell.headerClasses.indexOf('dojoDndItem') == -1){
									cell.headerClasses += ' dojoDndItem';
								}
							}else{
								cell.headerClasses = 'dojoDndItem';
							}
						}
						if(cell.attrs){
							if(cell.attrs.indexOf("dndType='gridColumn_") == -1){
								cell.attrs += " dndType='gridColumn_" + this.grid.id + "'";
							}
						}else{
							cell.attrs = "dndType='gridColumn_" + this.grid.id + "'";
						}
					}
					markup = this.generateCellMarkup(cell, cell.headerStyles, cell.headerClasses, true);
					// content
					markup[5] = (inValue != undefined ? inValue : inGetValue(cell));
					// styles
					markup[3] = cell.customStyles.join(';');
					// classes
					markup[1] = cell.customClasses.join(' '); //(cell.customClasses ? ' ' + cell.customClasses : '');
					html.push(markup.join(''));
				}
				html.push('</tr>');
			}
			html.push('</table>');
			return html.join('');
		},

		// event helpers
		getCellX: function(e){
			var n, x = e.layerX;
			if(dojo.isMoz || dojo.isIE >= 9){
				n = ascendDom(e.target, makeNotTagName("th"));
				x -= (n && n.offsetLeft) || 0;
				var t = e.sourceView.getScrollbarWidth();
				if(!dojo._isBodyLtr()/*&& e.sourceView.headerNode.scrollLeft < t*/){
					//fix #11253
					table = ascendDom(n,makeNotTagName("table"));
					x -= (table && table.offsetLeft) || 0;
				}
				//x -= getProp(ascendDom(e.target, mkNotTagName("td")), "offsetLeft") || 0;
			}
			n = ascendDom(e.target, function(){
				if(!n || n == e.cellNode){
					return false;
				}
				// Mozilla 1.8 (FF 1.5) has a bug that makes offsetLeft = -parent border width
				// when parent has border, overflow: hidden, and is positioned
				// handle this problem here ... not a general solution!
				x += (n.offsetLeft < 0 ? 0 : n.offsetLeft);
				return true;
			});
			return x;
		},

		// event decoration
		decorateEvent: function(e){
			this.baseDecorateEvent(e);
			e.rowIndex = -1;
			e.cellX = this.getCellX(e);
			return true;
		},

		// event handlers
		// resizing
		prepareResize: function(e, mod){
			do{
				var i = getTdIndex(e.cellNode);
				e.cellNode = (i ? e.cellNode.parentNode.cells[i+mod] : null);
				e.cellIndex = (e.cellNode ? this.getCellNodeIndex(e.cellNode) : -1);
			}while(e.cellNode && e.cellNode.style.display == "none");
			return Boolean(e.cellNode);
		},

		canResize: function(e){
			if(!e.cellNode || e.cellNode.colSpan > 1){
				return false;
			}
			var cell = this.grid.getCell(e.cellIndex);
			return !cell.noresize && cell.canResize();
		},

		overLeftResizeArea: function(e){
			// We are never over a resize area if we are in the process of moving
			if(dojo.hasClass(dojo.body(), "dojoDndMove")){
				return false;
			}
			//Bugfix for crazy IE problem (#8807).  IE returns position information for the icon and text arrow divs
			//as if they were still on the left instead of returning the position they were 'float: right' to.
			//So, the resize check ends up checking the wrong adjacent cell.  This checks to see if the hover was over
			//the image or text nodes, then just ignored them/treat them not in scale range.
			if(dojo.isIE){
				var tN = e.target;
				if(dojo.hasClass(tN, "dojoxGridArrowButtonNode") ||
					dojo.hasClass(tN, "dojoxGridArrowButtonChar")){
					return false;
				}
			}

			if(dojo._isBodyLtr()){
				return (e.cellIndex>0) && (e.cellX > 0 && e.cellX < this.overResizeWidth) && this.prepareResize(e, -1);
			}
			var t = e.cellNode && (e.cellX > 0 && e.cellX < this.overResizeWidth);
			return t;
		},

		overRightResizeArea: function(e){
			// We are never over a resize area if we are in the process of moving
			if(dojo.hasClass(dojo.body(), "dojoDndMove")){
				return false;
			}
			//Bugfix for crazy IE problem (#8807).  IE returns position information for the icon and text arrow divs
			//as if they were still on the left instead of returning the position they were 'float: right' to.
			//So, the resize check ends up checking the wrong adjacent cell.  This checks to see if the hover was over
			//the image or text nodes, then just ignored them/treat them not in scale range.
			if(dojo.isIE){
				var tN = e.target;
				if(dojo.hasClass(tN, "dojoxGridArrowButtonNode") ||
					dojo.hasClass(tN, "dojoxGridArrowButtonChar")){
					return false;
				}
			}

			if(dojo._isBodyLtr()){
				return e.cellNode && (e.cellX >= e.cellNode.offsetWidth - this.overResizeWidth);
			}
			return (e.cellIndex>0) && (e.cellX >= e.cellNode.offsetWidth - this.overResizeWidth) && this.prepareResize(e, -1);
		},

		domousemove: function(e){
			//console.log(e.cellIndex, e.cellX, e.cellNode.offsetWidth);
			if(!this.moveable){
				var c = (this.overRightResizeArea(e) ? 'dojoxGridColResize' : (this.overLeftResizeArea(e) ? 'dojoxGridColResize' : ''));
				if(c && !this.canResize(e)){
					c = 'dojoxGridColNoResize';
				}
				dojo.toggleClass(e.sourceView.headerNode, "dojoxGridColNoResize", (c == "dojoxGridColNoResize"));
				dojo.toggleClass(e.sourceView.headerNode, "dojoxGridColResize", (c == "dojoxGridColResize"));
				if(dojo.isIE){
					var t = e.sourceView.headerNode.scrollLeft;
					e.sourceView.headerNode.scrollLeft = t;
				}
				if(c){
					dojo.stopEvent(e);
				}
			}
		},

		domousedown: function(e){
			if(!this.moveable){
				if((this.overRightResizeArea(e) || this.overLeftResizeArea(e)) && this.canResize(e)){
					this.beginColumnResize(e);
				}else{
					this.grid.onMouseDown(e);
					this.grid.onMouseOverRow(e);
				}
				//else{
				//	this.beginMoveColumn(e);
				//}
			}
		},

		doclick: function(e) {
			if(this._skipBogusClicks){
				dojo.stopEvent(e);
				return true;
			}
			return false;
		},

		// column resizing
		colResizeSetup: function(/*Event Object*/e, /*boolean*/ isMouse ){
			//Set up the drag object for column resizing
			// Called with mouse event in case of drag and drop,
			// Also called from keyboard shift-arrow event when focus is on a header
			var headContentBox = dojo.contentBox(e.sourceView.headerNode);
			
			if(isMouse){  //IE draws line even with no mouse down so separate from keyboard
				this.lineDiv = document.createElement('div');

				// NOTE: this is for backwards compatibility with Dojo 1.3
				var vw = (dojo.position||dojo._abs)(e.sourceView.headerNode, true);
				var bodyContentBox = dojo.contentBox(e.sourceView.domNode);
				//fix #11340
				var l = e.pageX;
				if(!dojo._isBodyLtr() && dojo.isIE < 8){
					l -= dojox.html.metrics.getScrollbar().w;
				}
				dojo.style(this.lineDiv, {
					top: vw.y + "px",
					left: l + "px",
					height: (bodyContentBox.h + headContentBox.h) + "px"
				});
				dojo.addClass(this.lineDiv, "dojoxGridResizeColLine");
				this.lineDiv._origLeft = l;
				dojo.body().appendChild(this.lineDiv);
			}
			var spanners = [], nodes = this.tableMap.findOverlappingNodes(e.cellNode);
			for(var i=0, cell; (cell=nodes[i]); i++){
				spanners.push({ node: cell, index: this.getCellNodeIndex(cell), width: cell.offsetWidth });
				//console.log("spanner: " + this.getCellNodeIndex(cell));
			}

			var view = e.sourceView;
			var adj = dojo._isBodyLtr() ? 1 : -1;
			var views = e.grid.views.views;
			var followers = [];
			for(var j=view.idx+adj, cView; (cView=views[j]); j=j+adj){
				followers.push({ node: cView.headerNode, left: window.parseInt(cView.headerNode.style.left) });
			}
			var table = view.headerContentNode.firstChild;
			var drag = {
				scrollLeft: e.sourceView.headerNode.scrollLeft,
				view: view,
				node: e.cellNode,
				index: e.cellIndex,
				w: dojo.contentBox(e.cellNode).w,
				vw: headContentBox.w,
				table: table,
				tw: dojo.contentBox(table).w,
				spanners: spanners,
				followers: followers
			};
			return drag;
		},
		beginColumnResize: function(e){
			this.moverDiv = document.createElement("div");
			dojo.style(this.moverDiv,{position: "absolute", left:0}); // to make DnD work with dir=rtl
			dojo.body().appendChild(this.moverDiv);
			dojo.addClass(this.grid.domNode, "dojoxGridColumnResizing");
			var m = (this.moveable = new dojo.dnd.Moveable(this.moverDiv));

			var drag = this.colResizeSetup(e,true);

			m.onMove = dojo.hitch(this, "doResizeColumn", drag);

			dojo.connect(m, "onMoveStop", dojo.hitch(this, function(){
				this.endResizeColumn(drag);
				if(drag.node.releaseCapture){
					drag.node.releaseCapture();
				}
				this.moveable.destroy();
				delete this.moveable;
				this.moveable = null;
				dojo.removeClass(this.grid.domNode, "dojoxGridColumnResizing");
			}));

			if(e.cellNode.setCapture){
				e.cellNode.setCapture();
			}
			m.onMouseDown(e);
		},

		doResizeColumn: function(inDrag, mover, leftTop){
			var changeX = leftTop.l;
			var data = {
				deltaX: changeX,
				w: inDrag.w + (dojo._isBodyLtr() ? changeX : -changeX),//fix #11341
				vw: inDrag.vw + changeX,
				tw: inDrag.tw + changeX
			};
			
			this.dragRecord = {inDrag: inDrag, mover: mover, leftTop:leftTop};
			
			if(data.w >= this.minColWidth){
				if (!mover) { // we are using keyboard do immediate resize
					this.doResizeNow(inDrag, data);
				}
				else{
					dojo.style(this.lineDiv, "left", (this.lineDiv._origLeft + data.deltaX) + "px");
				}
			}
		},

		endResizeColumn: function(inDrag){
			if(this.dragRecord){
				var leftTop = this.dragRecord.leftTop;
				var changeX = dojo._isBodyLtr() ? leftTop.l : -leftTop.l;
				// Make sure we are not under our minimum
				// http://bugs.dojotoolkit.org/ticket/9390
				changeX += Math.max(inDrag.w + changeX, this.minColWidth) - (inDrag.w + changeX);
				if(dojo.isWebKit && inDrag.spanners.length){
					// Webkit needs the pad border extents back in
					changeX += dojo._getPadBorderExtents(inDrag.spanners[0].node).w;
				}
				var data = {
					deltaX: changeX,
					w: inDrag.w + changeX,
					vw: inDrag.vw + changeX,
					tw: inDrag.tw + changeX
				};
				// Only resize the columns when the drag has finished
				this.doResizeNow(inDrag, data);
				delete this.dragRecord;
			}
			
			dojo.destroy(this.lineDiv);
 			dojo.destroy(this.moverDiv);
			dojo.destroy(this.moverDiv);
			delete this.moverDiv;
			this._skipBogusClicks = true;
			inDrag.view.update();
			this._skipBogusClicks = false;
			this.grid.onResizeColumn(inDrag.index);
		},
		doResizeNow: function(inDrag, data){
			inDrag.view.convertColPctToFixed();
			if(inDrag.view.flexCells && !inDrag.view.testFlexCells()){
				var t = findTable(inDrag.node);
				if(t){
					(t.style.width = '');
				}
			}
			var i, s, sw, f, fl;
			for(i=0; (s=inDrag.spanners[i]); i++){
				sw = s.width + data.deltaX;
				if(sw > 0){
					s.node.style.width = sw + 'px';
					inDrag.view.setColWidth(s.index, sw);
				}
			}
			if(dojo._isBodyLtr() || !dojo.isIE){//fix #11339
				for(i=0; (f=inDrag.followers[i]); i++){
					fl = f.left + data.deltaX;
					f.node.style.left = fl + 'px';
				}
			}
			inDrag.node.style.width = data.w + 'px';
			inDrag.view.setColWidth(inDrag.index, data.w);
			inDrag.view.headerNode.style.width = data.vw + 'px';
			inDrag.view.setColumnsWidth(data.tw);
			if(!dojo._isBodyLtr()){
				inDrag.view.headerNode.scrollLeft = inDrag.scrollLeft + data.deltaX;
			}
		}
	});

	// Maps an html table into a structure parsable for information about cell row and col spanning.
	// Used by HeaderBuilder.
	dg._TableMap = dojo.extend(function(rows){
		this.mapRows(rows);
	},{
		map: null,

		mapRows: function(inRows){
			// summary: Map table topography

			//console.log('mapRows');
			// # of rows
			var rowCount = inRows.length;
			if(!rowCount){
				return;
			}
			// map which columns and rows fill which cells
			this.map = [];
			var row;
			for(var k=0; (row=inRows[k]); k++){
				this.map[k] = [];
			}
			for(var j=0; (row=inRows[j]); j++){
				for(var i=0, x=0, cell, colSpan, rowSpan; (cell=row[i]); i++){
					while(this.map[j][x]){x++;}
					this.map[j][x] = { c: i, r: j };
					rowSpan = cell.rowSpan || 1;
					colSpan = cell.colSpan || 1;
					for(var y=0; y<rowSpan; y++){
						for(var s=0; s<colSpan; s++){
							this.map[j+y][x+s] = this.map[j][x];
						}
					}
					x += colSpan;
				}
			}
			//this.dumMap();
		},

		dumpMap: function(){
			for(var j=0, row, h=''; (row=this.map[j]); j++,h=''){
				for(var i=0, cell; (cell=row[i]); i++){
					h += cell.r + ',' + cell.c + '   ';
				}
			}
		},

		getMapCoords: function(inRow, inCol){
			// summary: Find node's map coords by it's structure coords
			for(var j=0, row; (row=this.map[j]); j++){
				for(var i=0, cell; (cell=row[i]); i++){
					if(cell.c==inCol && cell.r == inRow){
						return { j: j, i: i };
					}
					//else{console.log(inRow, inCol, ' : ', i, j, " : ", cell.r, cell.c); };
				}
			}
			return { j: -1, i: -1 };
		},
		
		getNode: function(inTable, inRow, inCol){
			// summary: Find a node in inNode's table with the given structure coords
			var row = inTable && inTable.rows[inRow];
			return row && row.cells[inCol];
		},
		
		_findOverlappingNodes: function(inTable, inRow, inCol){
			var nodes = [];
			var m = this.getMapCoords(inRow, inCol);
			//console.log("node j: %d, i: %d", m.j, m.i);
			for(var j=0, row; (row=this.map[j]); j++){
				if(j == m.j){ continue; }
				var rw = row[m.i];
				//console.log("overlaps: r: %d, c: %d", rw.r, rw.c);
				var n = (rw?this.getNode(inTable, rw.r, rw.c):null);
				if(n){ nodes.push(n); }
			}
			//console.log(nodes);
			return nodes;
		},
		
		findOverlappingNodes: function(inNode){
			return this._findOverlappingNodes(findTable(inNode), getTrIndex(inNode.parentNode), getTdIndex(inNode));
		}
	});
})();

}

if(!dojo._hasResource["dojo.dnd.Selector"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.Selector"] = true;
dojo.provide("dojo.dnd.Selector");





/*
	Container item states:
		""			- an item is not selected
		"Selected"	- an item is selected
		"Anchor"	- an item is selected, and is an anchor for a "shift" selection
*/

/*=====
dojo.declare("dojo.dnd.__SelectorArgs", [dojo.dnd.__ContainerArgs], {
	//	singular: Boolean
	//		allows selection of only one element, if true
	singular: false,

	//	autoSync: Boolean
	//		autosynchronizes the source with its list of DnD nodes,
	autoSync: false
});
=====*/

dojo.declare("dojo.dnd.Selector", dojo.dnd.Container, {
	// summary:
	//		a Selector object, which knows how to select its children
	
	/*=====
	// selection: Set<String>
	//		The set of id's that are currently selected, such that this.selection[id] == 1
	//		if the node w/that id is selected.  Can iterate over selected node's id's like:
	//	|		for(var id in this.selection)
	selection: {},
	=====*/

	constructor: function(node, params){
		// summary:
		//		constructor of the Selector
		// node: Node||String
		//		node or node's id to build the selector on
		// params: dojo.dnd.__SelectorArgs?
		//		a dictionary of parameters
		if(!params){ params = {}; }
		this.singular = params.singular;
		this.autoSync = params.autoSync;
		// class-specific variables
		this.selection = {};
		this.anchor = null;
		this.simpleSelection = false;
		// set up events
		this.events.push(
			dojo.connect(this.node, "onmousedown", this, "onMouseDown"),
			dojo.connect(this.node, "onmouseup",   this, "onMouseUp"));
	},
	
	// object attributes (for markup)
	singular: false,	// is singular property
	
	// methods
	getSelectedNodes: function(){
		// summary:
		//		returns a list (an array) of selected nodes
		var t = new dojo.NodeList();
		var e = dojo.dnd._empty;
		for(var i in this.selection){
			if(i in e){ continue; }
			t.push(dojo.byId(i));
		}
		return t;	// NodeList
	},
	selectNone: function(){
		// summary:
		//		unselects all items
		return this._removeSelection()._removeAnchor();	// self
	},
	selectAll: function(){
		// summary:
		//		selects all items
		this.forInItems(function(data, id){
			this._addItemClass(dojo.byId(id), "Selected");
			this.selection[id] = 1;
		}, this);
		return this._removeAnchor();	// self
	},
	deleteSelectedNodes: function(){
		// summary:
		//		deletes all selected items
		var e = dojo.dnd._empty;
		for(var i in this.selection){
			if(i in e){ continue; }
			var n = dojo.byId(i);
			this.delItem(i);
			dojo.destroy(n);
		}
		this.anchor = null;
		this.selection = {};
		return this;	// self
	},
	forInSelectedItems: function(/*Function*/ f, /*Object?*/ o){
		// summary:
		//		iterates over selected items;
		//		see `dojo.dnd.Container.forInItems()` for details
		o = o || dojo.global;
		var s = this.selection, e = dojo.dnd._empty;
		for(var i in s){
			if(i in e){ continue; }
			f.call(o, this.getItem(i), i, this);
		}
	},
	sync: function(){
		// summary:
		//		sync up the node list with the data map
		
		dojo.dnd.Selector.superclass.sync.call(this);
		
		// fix the anchor
		if(this.anchor){
			if(!this.getItem(this.anchor.id)){
				this.anchor = null;
			}
		}
		
		// fix the selection
		var t = [], e = dojo.dnd._empty;
		for(var i in this.selection){
			if(i in e){ continue; }
			if(!this.getItem(i)){
				t.push(i);
			}
		}
		dojo.forEach(t, function(i){
			delete this.selection[i];
		}, this);
		
		return this;	// self
	},
	insertNodes: function(addSelected, data, before, anchor){
		// summary:
		//		inserts new data items (see `dojo.dnd.Container.insertNodes()` method for details)
		// addSelected: Boolean
		//		all new nodes will be added to selected items, if true, no selection change otherwise
		// data: Array
		//		a list of data items, which should be processed by the creator function
		// before: Boolean
		//		insert before the anchor, if true, and after the anchor otherwise
		// anchor: Node
		//		the anchor node to be used as a point of insertion
		var oldCreator = this._normalizedCreator;
		this._normalizedCreator = function(item, hint){
			var t = oldCreator.call(this, item, hint);
			if(addSelected){
				if(!this.anchor){
					this.anchor = t.node;
					this._removeItemClass(t.node, "Selected");
					this._addItemClass(this.anchor, "Anchor");
				}else if(this.anchor != t.node){
					this._removeItemClass(t.node, "Anchor");
					this._addItemClass(t.node, "Selected");
				}
				this.selection[t.node.id] = 1;
			}else{
				this._removeItemClass(t.node, "Selected");
				this._removeItemClass(t.node, "Anchor");
			}
			return t;
		};
		dojo.dnd.Selector.superclass.insertNodes.call(this, data, before, anchor);
		this._normalizedCreator = oldCreator;
		return this;	// self
	},
	destroy: function(){
		// summary:
		//		prepares the object to be garbage-collected
		dojo.dnd.Selector.superclass.destroy.call(this);
		this.selection = this.anchor = null;
	},

	// markup methods
	markupFactory: function(params, node){
		params._skipStartup = true;
		return new dojo.dnd.Selector(node, params);
	},

	// mouse events
	onMouseDown: function(e){
		// summary:
		//		event processor for onmousedown
		// e: Event
		//		mouse event
		if(this.autoSync){ this.sync(); }
		if(!this.current){ return; }
		if(!this.singular && !dojo.isCopyKey(e) && !e.shiftKey && (this.current.id in this.selection)){
			this.simpleSelection = true;
			if(e.button === dojo.mouseButtons.LEFT){
				// accept the left button and stop the event
				// for IE we don't stop event when multiple buttons are pressed
				dojo.stopEvent(e);
			}
			return;
		}
		if(!this.singular && e.shiftKey){
			if(!dojo.isCopyKey(e)){
				this._removeSelection();
			}
			var c = this.getAllNodes();
			if(c.length){
				if(!this.anchor){
					this.anchor = c[0];
					this._addItemClass(this.anchor, "Anchor");
				}
				this.selection[this.anchor.id] = 1;
				if(this.anchor != this.current){
					var i = 0;
					for(; i < c.length; ++i){
						var node = c[i];
						if(node == this.anchor || node == this.current){ break; }
					}
					for(++i; i < c.length; ++i){
						var node = c[i];
						if(node == this.anchor || node == this.current){ break; }
						this._addItemClass(node, "Selected");
						this.selection[node.id] = 1;
					}
					this._addItemClass(this.current, "Selected");
					this.selection[this.current.id] = 1;
				}
			}
		}else{
			if(this.singular){
				if(this.anchor == this.current){
					if(dojo.isCopyKey(e)){
						this.selectNone();
					}
				}else{
					this.selectNone();
					this.anchor = this.current;
					this._addItemClass(this.anchor, "Anchor");
					this.selection[this.current.id] = 1;
				}
			}else{
				if(dojo.isCopyKey(e)){
					if(this.anchor == this.current){
						delete this.selection[this.anchor.id];
						this._removeAnchor();
					}else{
						if(this.current.id in this.selection){
							this._removeItemClass(this.current, "Selected");
							delete this.selection[this.current.id];
						}else{
							if(this.anchor){
								this._removeItemClass(this.anchor, "Anchor");
								this._addItemClass(this.anchor, "Selected");
							}
							this.anchor = this.current;
							this._addItemClass(this.current, "Anchor");
							this.selection[this.current.id] = 1;
						}
					}
				}else{
					if(!(this.current.id in this.selection)){
						this.selectNone();
						this.anchor = this.current;
						this._addItemClass(this.current, "Anchor");
						this.selection[this.current.id] = 1;
					}
				}
			}
		}
		dojo.stopEvent(e);
	},
	onMouseUp: function(e){
		// summary:
		//		event processor for onmouseup
		// e: Event
		//		mouse event
		if(!this.simpleSelection){ return; }
		this.simpleSelection = false;
		this.selectNone();
		if(this.current){
			this.anchor = this.current;
			this._addItemClass(this.anchor, "Anchor");
			this.selection[this.current.id] = 1;
		}
	},
	onMouseMove: function(e){
		// summary
		//		event processor for onmousemove
		// e: Event
		//		mouse event
		this.simpleSelection = false;
	},
	
	// utilities
	onOverEvent: function(){
		// summary:
		//		this function is called once, when mouse is over our container
		this.onmousemoveEvent = dojo.connect(this.node, "onmousemove", this, "onMouseMove");
	},
	onOutEvent: function(){
		// summary:
		//		this function is called once, when mouse is out of our container
		dojo.disconnect(this.onmousemoveEvent);
		delete this.onmousemoveEvent;
	},
	_removeSelection: function(){
		// summary:
		//		unselects all items
		var e = dojo.dnd._empty;
		for(var i in this.selection){
			if(i in e){ continue; }
			var node = dojo.byId(i);
			if(node){ this._removeItemClass(node, "Selected"); }
		}
		this.selection = {};
		return this;	// self
	},
	_removeAnchor: function(){
		if(this.anchor){
			this._removeItemClass(this.anchor, "Anchor");
			this.anchor = null;
		}
		return this;	// self
	}
});

}

if(!dojo._hasResource["dojo.dnd.Avatar"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.Avatar"] = true;
dojo.provide("dojo.dnd.Avatar");




dojo.declare("dojo.dnd.Avatar", null, {
	// summary:
	//		Object that represents transferred DnD items visually
	// manager: Object
	//		a DnD manager object

	constructor: function(manager){
		this.manager = manager;
		this.construct();
	},

	// methods
	construct: function(){
		// summary:
		//		constructor function;
		//		it is separate so it can be (dynamically) overwritten in case of need
		this.isA11y = dojo.hasClass(dojo.body(),"dijit_a11y");
		var a = dojo.create("table", {
				"class": "dojoDndAvatar",
				style: {
					position: "absolute",
					zIndex:   "1999",
					margin:   "0px"
				}
			}),
			source = this.manager.source, node,
			b = dojo.create("tbody", null, a),
			tr = dojo.create("tr", null, b),
			td = dojo.create("td", null, tr),
			icon = this.isA11y ? dojo.create("span", {
						id : "a11yIcon",
						innerHTML : this.manager.copy ? '+' : "<"
					}, td) : null,
			span = dojo.create("span", {
				innerHTML: source.generateText ? this._generateText() : ""
			}, td),
			k = Math.min(5, this.manager.nodes.length), i = 0;
		// we have to set the opacity on IE only after the node is live
		dojo.attr(tr, {
			"class": "dojoDndAvatarHeader",
			style: {opacity: 0.9}
		});
		for(; i < k; ++i){
			if(source.creator){
				// create an avatar representation of the node
				node = source._normalizedCreator(source.getItem(this.manager.nodes[i].id).data, "avatar").node;
			}else{
				// or just clone the node and hope it works
				node = this.manager.nodes[i].cloneNode(true);
				if(node.tagName.toLowerCase() == "tr"){
					// insert extra table nodes
					var table = dojo.create("table"),
						tbody = dojo.create("tbody", null, table);
					tbody.appendChild(node);
					node = table;
				}
			}
			node.id = "";
			tr = dojo.create("tr", null, b);
			td = dojo.create("td", null, tr);
			td.appendChild(node);
			dojo.attr(tr, {
				"class": "dojoDndAvatarItem",
				style: {opacity: (9 - i) / 10}
			});
		}
		this.node = a;
	},
	destroy: function(){
		// summary:
		//		destructor for the avatar; called to remove all references so it can be garbage-collected
		dojo.destroy(this.node);
		this.node = false;
	},
	update: function(){
		// summary:
		//		updates the avatar to reflect the current DnD state
		dojo[(this.manager.canDropFlag ? "add" : "remove") + "Class"](this.node, "dojoDndAvatarCanDrop");
		if (this.isA11y){
			var icon = dojo.byId("a11yIcon");
			var text = '+';   // assume canDrop && copy
			if (this.manager.canDropFlag && !this.manager.copy) {
				text = '< '; // canDrop && move
			}else if (!this.manager.canDropFlag && !this.manager.copy) {
				text = "o"; //!canDrop && move
			}else if(!this.manager.canDropFlag){
				text = 'x';  // !canDrop && copy
			}
			icon.innerHTML=text;
		}
		// replace text
		dojo.query(("tr.dojoDndAvatarHeader td span" +(this.isA11y ? " span" : "")), this.node).forEach(
			function(node){
				node.innerHTML = this._generateText();
			}, this);
	},
	_generateText: function(){
		// summary: generates a proper text to reflect copying or moving of items
		return this.manager.nodes.length.toString();
	}
});

}

if(!dojo._hasResource["dojo.dnd.Manager"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.Manager"] = true;
dojo.provide("dojo.dnd.Manager");






dojo.declare("dojo.dnd.Manager", null, {
	// summary:
	//		the manager of DnD operations (usually a singleton)
	constructor: function(){
		this.avatar  = null;
		this.source = null;
		this.nodes = [];
		this.copy  = true;
		this.target = null;
		this.canDropFlag = false;
		this.events = [];
	},

	// avatar's offset from the mouse
	OFFSET_X: 16,
	OFFSET_Y: 16,
	
	// methods
	overSource: function(source){
		// summary:
		//		called when a source detected a mouse-over condition
		// source: Object
		//		the reporter
		if(this.avatar){
			this.target = (source && source.targetState != "Disabled") ? source : null;
			this.canDropFlag = Boolean(this.target);
			this.avatar.update();
		}
		dojo.publish("/dnd/source/over", [source]);
	},
	outSource: function(source){
		// summary:
		//		called when a source detected a mouse-out condition
		// source: Object
		//		the reporter
		if(this.avatar){
			if(this.target == source){
				this.target = null;
				this.canDropFlag = false;
				this.avatar.update();
				dojo.publish("/dnd/source/over", [null]);
			}
		}else{
			dojo.publish("/dnd/source/over", [null]);
		}
	},
	startDrag: function(source, nodes, copy){
		// summary:
		//		called to initiate the DnD operation
		// source: Object
		//		the source which provides items
		// nodes: Array
		//		the list of transferred items
		// copy: Boolean
		//		copy items, if true, move items otherwise
		this.source = source;
		this.nodes  = nodes;
		this.copy   = Boolean(copy); // normalizing to true boolean
		this.avatar = this.makeAvatar();
		dojo.body().appendChild(this.avatar.node);
		dojo.publish("/dnd/start", [source, nodes, this.copy]);
		this.events = [
			dojo.connect(dojo.doc, "onmousemove", this, "onMouseMove"),
			dojo.connect(dojo.doc, "onmouseup",   this, "onMouseUp"),
			dojo.connect(dojo.doc, "onkeydown",   this, "onKeyDown"),
			dojo.connect(dojo.doc, "onkeyup",     this, "onKeyUp"),
			// cancel text selection and text dragging
			dojo.connect(dojo.doc, "ondragstart",   dojo.stopEvent),
			dojo.connect(dojo.body(), "onselectstart", dojo.stopEvent)
		];
		var c = "dojoDnd" + (copy ? "Copy" : "Move");
		dojo.addClass(dojo.body(), c);
	},
	canDrop: function(flag){
		// summary:
		//		called to notify if the current target can accept items
		var canDropFlag = Boolean(this.target && flag);
		if(this.canDropFlag != canDropFlag){
			this.canDropFlag = canDropFlag;
			this.avatar.update();
		}
	},
	stopDrag: function(){
		// summary:
		//		stop the DnD in progress
		dojo.removeClass(dojo.body(), ["dojoDndCopy", "dojoDndMove"]);
		dojo.forEach(this.events, dojo.disconnect);
		this.events = [];
		this.avatar.destroy();
		this.avatar = null;
		this.source = this.target = null;
		this.nodes = [];
	},
	makeAvatar: function(){
		// summary:
		//		makes the avatar; it is separate to be overwritten dynamically, if needed
		return new dojo.dnd.Avatar(this);
	},
	updateAvatar: function(){
		// summary:
		//		updates the avatar; it is separate to be overwritten dynamically, if needed
		this.avatar.update();
	},
	
	// mouse event processors
	onMouseMove: function(e){
		// summary:
		//		event processor for onmousemove
		// e: Event
		//		mouse event
		var a = this.avatar;
		if(a){
			dojo.dnd.autoScrollNodes(e);
			//dojo.dnd.autoScroll(e);
			var s = a.node.style;
			s.left = (e.pageX + this.OFFSET_X) + "px";
			s.top  = (e.pageY + this.OFFSET_Y) + "px";
			var copy = Boolean(this.source.copyState(dojo.isCopyKey(e)));
			if(this.copy != copy){
				this._setCopyStatus(copy);
			}
		}
	},
	onMouseUp: function(e){
		// summary:
		//		event processor for onmouseup
		// e: Event
		//		mouse event
		if(this.avatar){
			if(this.target && this.canDropFlag){
				var copy = Boolean(this.source.copyState(dojo.isCopyKey(e))),
				params = [this.source, this.nodes, copy, this.target, e];
				dojo.publish("/dnd/drop/before", params);
				dojo.publish("/dnd/drop", params);
			}else{
				dojo.publish("/dnd/cancel");
			}
			this.stopDrag();
		}
	},
	
	// keyboard event processors
	onKeyDown: function(e){
		// summary:
		//		event processor for onkeydown:
		//		watching for CTRL for copy/move status, watching for ESCAPE to cancel the drag
		// e: Event
		//		keyboard event
		if(this.avatar){
			switch(e.keyCode){
				case dojo.keys.CTRL:
					var copy = Boolean(this.source.copyState(true));
					if(this.copy != copy){
						this._setCopyStatus(copy);
					}
					break;
				case dojo.keys.ESCAPE:
					dojo.publish("/dnd/cancel");
					this.stopDrag();
					break;
			}
		}
	},
	onKeyUp: function(e){
		// summary:
		//		event processor for onkeyup, watching for CTRL for copy/move status
		// e: Event
		//		keyboard event
		if(this.avatar && e.keyCode == dojo.keys.CTRL){
			var copy = Boolean(this.source.copyState(false));
			if(this.copy != copy){
				this._setCopyStatus(copy);
			}
		}
	},
	
	// utilities
	_setCopyStatus: function(copy){
		// summary:
		//		changes the copy status
		// copy: Boolean
		//		the copy status
		this.copy = copy;
		this.source._markDndStatus(this.copy);
		this.updateAvatar();
		dojo.replaceClass(dojo.body(),
			"dojoDnd" + (this.copy ? "Copy" : "Move"),
			"dojoDnd" + (this.copy ? "Move" : "Copy"));
	}
});

// dojo.dnd._manager:
//		The manager singleton variable. Can be overwritten if needed.
dojo.dnd._manager = null;

dojo.dnd.manager = function(){
	// summary:
	//		Returns the current DnD manager.  Creates one if it is not created yet.
	if(!dojo.dnd._manager){
		dojo.dnd._manager = new dojo.dnd.Manager();
	}
	return dojo.dnd._manager;	// Object
};

}

if(!dojo._hasResource["dojo.dnd.Source"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.dnd.Source"] = true;
dojo.provide("dojo.dnd.Source");





/*
	Container property:
		"Horizontal"- if this is the horizontal container
	Source states:
		""			- normal state
		"Moved"		- this source is being moved
		"Copied"	- this source is being copied
	Target states:
		""			- normal state
		"Disabled"	- the target cannot accept an avatar
	Target anchor state:
		""			- item is not selected
		"Before"	- insert point is before the anchor
		"After"		- insert point is after the anchor
*/

/*=====
dojo.dnd.__SourceArgs = function(){
	//	summary:
	//		a dict of parameters for DnD Source configuration. Note that any
	//		property on Source elements may be configured, but this is the
	//		short-list
	//	isSource: Boolean?
	//		can be used as a DnD source. Defaults to true.
	//	accept: Array?
	//		list of accepted types (text strings) for a target; defaults to
	//		["text"]
	//	autoSync: Boolean
	//		if true refreshes the node list on every operation; false by default
	//	copyOnly: Boolean?
	//		copy items, if true, use a state of Ctrl key otherwise,
	//		see selfCopy and selfAccept for more details
	//	delay: Number
	//		the move delay in pixels before detecting a drag; 0 by default
	//	horizontal: Boolean?
	//		a horizontal container, if true, vertical otherwise or when omitted
	//	selfCopy: Boolean?
	//		copy items by default when dropping on itself,
	//		false by default, works only if copyOnly is true
	//	selfAccept: Boolean?
	//		accept its own items when copyOnly is true,
	//		true by default, works only if copyOnly is true
	//	withHandles: Boolean?
	//		allows dragging only by handles, false by default
	//  generateText: Boolean?
	//		generate text node for drag and drop, true by default
	this.isSource = isSource;
	this.accept = accept;
	this.autoSync = autoSync;
	this.copyOnly = copyOnly;
	this.delay = delay;
	this.horizontal = horizontal;
	this.selfCopy = selfCopy;
	this.selfAccept = selfAccept;
	this.withHandles = withHandles;
	this.generateText = true;
}
=====*/

dojo.declare("dojo.dnd.Source", dojo.dnd.Selector, {
	// summary:
	//		a Source object, which can be used as a DnD source, or a DnD target
	
	// object attributes (for markup)
	isSource: true,
	horizontal: false,
	copyOnly: false,
	selfCopy: false,
	selfAccept: true,
	skipForm: false,
	withHandles: false,
	autoSync: false,
	delay: 0, // pixels
	accept: ["text"],
	generateText: true,
	
	constructor: function(/*DOMNode|String*/node, /*dojo.dnd.__SourceArgs?*/params){
		// summary:
		//		a constructor of the Source
		// node:
		//		node or node's id to build the source on
		// params:
		//		any property of this class may be configured via the params
		//		object which is mixed-in to the `dojo.dnd.Source` instance
		dojo.mixin(this, dojo.mixin({}, params));
		var type = this.accept;
		if(type.length){
			this.accept = {};
			for(var i = 0; i < type.length; ++i){
				this.accept[type[i]] = 1;
			}
		}
		// class-specific variables
		this.isDragging = false;
		this.mouseDown = false;
		this.targetAnchor = null;
		this.targetBox = null;
		this.before = true;
		this._lastX = 0;
		this._lastY = 0;
		// states
		this.sourceState  = "";
		if(this.isSource){
			dojo.addClass(this.node, "dojoDndSource");
		}
		this.targetState  = "";
		if(this.accept){
			dojo.addClass(this.node, "dojoDndTarget");
		}
		if(this.horizontal){
			dojo.addClass(this.node, "dojoDndHorizontal");
		}
		// set up events
		this.topics = [
			dojo.subscribe("/dnd/source/over", this, "onDndSourceOver"),
			dojo.subscribe("/dnd/start",  this, "onDndStart"),
			dojo.subscribe("/dnd/drop",   this, "onDndDrop"),
			dojo.subscribe("/dnd/cancel", this, "onDndCancel")
		];
	},
	
	// methods
	checkAcceptance: function(source, nodes){
		// summary:
		//		checks if the target can accept nodes from this source
		// source: Object
		//		the source which provides items
		// nodes: Array
		//		the list of transferred items
		if(this == source){
			return !this.copyOnly || this.selfAccept;
		}
		for(var i = 0; i < nodes.length; ++i){
			var type = source.getItem(nodes[i].id).type;
			// type instanceof Array
			var flag = false;
			for(var j = 0; j < type.length; ++j){
				if(type[j] in this.accept){
					flag = true;
					break;
				}
			}
			if(!flag){
				return false;	// Boolean
			}
		}
		return true;	// Boolean
	},
	copyState: function(keyPressed, self){
		// summary:
		//		Returns true if we need to copy items, false to move.
		//		It is separated to be overwritten dynamically, if needed.
		// keyPressed: Boolean
		//		the "copy" key was pressed
		// self: Boolean?
		//		optional flag that means that we are about to drop on itself
		
		if(keyPressed){ return true; }
		if(arguments.length < 2){
			self = this == dojo.dnd.manager().target;
		}
		if(self){
			if(this.copyOnly){
				return this.selfCopy;
			}
		}else{
			return this.copyOnly;
		}
		return false;	// Boolean
	},
	destroy: function(){
		// summary:
		//		prepares the object to be garbage-collected
		dojo.dnd.Source.superclass.destroy.call(this);
		dojo.forEach(this.topics, dojo.unsubscribe);
		this.targetAnchor = null;
	},

	// markup methods
	markupFactory: function(params, node){
		params._skipStartup = true;
		return new dojo.dnd.Source(node, params);
	},

	// mouse event processors
	onMouseMove: function(e){
		// summary:
		//		event processor for onmousemove
		// e: Event
		//		mouse event
		if(this.isDragging && this.targetState == "Disabled"){ return; }
		dojo.dnd.Source.superclass.onMouseMove.call(this, e);
		var m = dojo.dnd.manager();
		if(!this.isDragging){
			if(this.mouseDown && this.isSource &&
					(Math.abs(e.pageX - this._lastX) > this.delay || Math.abs(e.pageY - this._lastY) > this.delay)){
				var nodes = this.getSelectedNodes();
				if(nodes.length){
					m.startDrag(this, nodes, this.copyState(dojo.isCopyKey(e), true));
				}
			}
		}
		if(this.isDragging){
			// calculate before/after
			var before = false;
			if(this.current){
				if(!this.targetBox || this.targetAnchor != this.current){
					this.targetBox = dojo.position(this.current, true);
				}
				if(this.horizontal){
					before = (e.pageX - this.targetBox.x) < (this.targetBox.w / 2);
				}else{
					before = (e.pageY - this.targetBox.y) < (this.targetBox.h / 2);
				}
			}
			if(this.current != this.targetAnchor || before != this.before){
				this._markTargetAnchor(before);
				m.canDrop(!this.current || m.source != this || !(this.current.id in this.selection));
			}
		}
	},
	onMouseDown: function(e){
		// summary:
		//		event processor for onmousedown
		// e: Event
		//		mouse event
		if(!this.mouseDown && this._legalMouseDown(e) && (!this.skipForm || !dojo.dnd.isFormElement(e))){
			this.mouseDown = true;
			this._lastX = e.pageX;
			this._lastY = e.pageY;
			dojo.dnd.Source.superclass.onMouseDown.call(this, e);
		}
	},
	onMouseUp: function(e){
		// summary:
		//		event processor for onmouseup
		// e: Event
		//		mouse event
		if(this.mouseDown){
			this.mouseDown = false;
			dojo.dnd.Source.superclass.onMouseUp.call(this, e);
		}
	},
	
	// topic event processors
	onDndSourceOver: function(source){
		// summary:
		//		topic event processor for /dnd/source/over, called when detected a current source
		// source: Object
		//		the source which has the mouse over it
		if(this != source){
			this.mouseDown = false;
			if(this.targetAnchor){
				this._unmarkTargetAnchor();
			}
		}else if(this.isDragging){
			var m = dojo.dnd.manager();
			m.canDrop(this.targetState != "Disabled" && (!this.current || m.source != this || !(this.current.id in this.selection)));
		}
	},
	onDndStart: function(source, nodes, copy){
		// summary:
		//		topic event processor for /dnd/start, called to initiate the DnD operation
		// source: Object
		//		the source which provides items
		// nodes: Array
		//		the list of transferred items
		// copy: Boolean
		//		copy items, if true, move items otherwise
		if(this.autoSync){ this.sync(); }
		if(this.isSource){
			this._changeState("Source", this == source ? (copy ? "Copied" : "Moved") : "");
		}
		var accepted = this.accept && this.checkAcceptance(source, nodes);
		this._changeState("Target", accepted ? "" : "Disabled");
		if(this == source){
			dojo.dnd.manager().overSource(this);
		}
		this.isDragging = true;
	},
	onDndDrop: function(source, nodes, copy, target){
		// summary:
		//		topic event processor for /dnd/drop, called to finish the DnD operation
		// source: Object
		//		the source which provides items
		// nodes: Array
		//		the list of transferred items
		// copy: Boolean
		//		copy items, if true, move items otherwise
		// target: Object
		//		the target which accepts items
		if(this == target){
			// this one is for us => move nodes!
			this.onDrop(source, nodes, copy);
		}
		this.onDndCancel();
	},
	onDndCancel: function(){
		// summary:
		//		topic event processor for /dnd/cancel, called to cancel the DnD operation
		if(this.targetAnchor){
			this._unmarkTargetAnchor();
			this.targetAnchor = null;
		}
		this.before = true;
		this.isDragging = false;
		this.mouseDown = false;
		this._changeState("Source", "");
		this._changeState("Target", "");
	},
	
	// local events
	onDrop: function(source, nodes, copy){
		// summary:
		//		called only on the current target, when drop is performed
		// source: Object
		//		the source which provides items
		// nodes: Array
		//		the list of transferred items
		// copy: Boolean
		//		copy items, if true, move items otherwise
		
		if(this != source){
			this.onDropExternal(source, nodes, copy);
		}else{
			this.onDropInternal(nodes, copy);
		}
	},
	onDropExternal: function(source, nodes, copy){
		// summary:
		//		called only on the current target, when drop is performed
		//		from an external source
		// source: Object
		//		the source which provides items
		// nodes: Array
		//		the list of transferred items
		// copy: Boolean
		//		copy items, if true, move items otherwise
		
		var oldCreator = this._normalizedCreator;
		// transferring nodes from the source to the target
		if(this.creator){
			// use defined creator
			this._normalizedCreator = function(node, hint){
				return oldCreator.call(this, source.getItem(node.id).data, hint);
			};
		}else{
			// we have no creator defined => move/clone nodes
			if(copy){
				// clone nodes
				this._normalizedCreator = function(node, hint){
					var t = source.getItem(node.id);
					var n = node.cloneNode(true);
					n.id = dojo.dnd.getUniqueId();
					return {node: n, data: t.data, type: t.type};
				};
			}else{
				// move nodes
				this._normalizedCreator = function(node, hint){
					var t = source.getItem(node.id);
					source.delItem(node.id);
					return {node: node, data: t.data, type: t.type};
				};
			}
		}
		this.selectNone();
		if(!copy && !this.creator){
			source.selectNone();
		}
		this.insertNodes(true, nodes, this.before, this.current);
		if(!copy && this.creator){
			source.deleteSelectedNodes();
		}
		this._normalizedCreator = oldCreator;
	},
	onDropInternal: function(nodes, copy){
		// summary:
		//		called only on the current target, when drop is performed
		//		from the same target/source
		// nodes: Array
		//		the list of transferred items
		// copy: Boolean
		//		copy items, if true, move items otherwise
		
		var oldCreator = this._normalizedCreator;
		// transferring nodes within the single source
		if(this.current && this.current.id in this.selection){
			// do nothing
			return;
		}
		if(copy){
			if(this.creator){
				// create new copies of data items
				this._normalizedCreator = function(node, hint){
					return oldCreator.call(this, this.getItem(node.id).data, hint);
				};
			}else{
				// clone nodes
				this._normalizedCreator = function(node, hint){
					var t = this.getItem(node.id);
					var n = node.cloneNode(true);
					n.id = dojo.dnd.getUniqueId();
					return {node: n, data: t.data, type: t.type};
				};
			}
		}else{
			// move nodes
			if(!this.current){
				// do nothing
				return;
			}
			this._normalizedCreator = function(node, hint){
				var t = this.getItem(node.id);
				return {node: node, data: t.data, type: t.type};
			};
		}
		this._removeSelection();
		this.insertNodes(true, nodes, this.before, this.current);
		this._normalizedCreator = oldCreator;
	},
	onDraggingOver: function(){
		// summary:
		//		called during the active DnD operation, when items
		//		are dragged over this target, and it is not disabled
	},
	onDraggingOut: function(){
		// summary:
		//		called during the active DnD operation, when items
		//		are dragged away from this target, and it is not disabled
	},
	
	// utilities
	onOverEvent: function(){
		// summary:
		//		this function is called once, when mouse is over our container
		dojo.dnd.Source.superclass.onOverEvent.call(this);
		dojo.dnd.manager().overSource(this);
		if(this.isDragging && this.targetState != "Disabled"){
			this.onDraggingOver();
		}
	},
	onOutEvent: function(){
		// summary:
		//		this function is called once, when mouse is out of our container
		dojo.dnd.Source.superclass.onOutEvent.call(this);
		dojo.dnd.manager().outSource(this);
		if(this.isDragging && this.targetState != "Disabled"){
			this.onDraggingOut();
		}
	},
	_markTargetAnchor: function(before){
		// summary:
		//		assigns a class to the current target anchor based on "before" status
		// before: Boolean
		//		insert before, if true, after otherwise
		if(this.current == this.targetAnchor && this.before == before){ return; }
		if(this.targetAnchor){
			this._removeItemClass(this.targetAnchor, this.before ? "Before" : "After");
		}
		this.targetAnchor = this.current;
		this.targetBox = null;
		this.before = before;
		if(this.targetAnchor){
			this._addItemClass(this.targetAnchor, this.before ? "Before" : "After");
		}
	},
	_unmarkTargetAnchor: function(){
		// summary:
		//		removes a class of the current target anchor based on "before" status
		if(!this.targetAnchor){ return; }
		this._removeItemClass(this.targetAnchor, this.before ? "Before" : "After");
		this.targetAnchor = null;
		this.targetBox = null;
		this.before = true;
	},
	_markDndStatus: function(copy){
		// summary:
		//		changes source's state based on "copy" status
		this._changeState("Source", copy ? "Copied" : "Moved");
	},
	_legalMouseDown: function(e){
		// summary:
		//		checks if user clicked on "approved" items
		// e: Event
		//		mouse event
		
		// accept only the left mouse button
		if(!dojo.mouseButtons.isLeft(e)){ return false; }
		
		if(!this.withHandles){ return true; }
		
		// check for handles
		for(var node = e.target; node && node !== this.node; node = node.parentNode){
			if(dojo.hasClass(node, "dojoDndHandle")){ return true; }
			if(dojo.hasClass(node, "dojoDndItem") || dojo.hasClass(node, "dojoDndIgnore")){ break; }
		}
		return false;	// Boolean
	}
});

dojo.declare("dojo.dnd.Target", dojo.dnd.Source, {
	// summary: a Target object, which can be used as a DnD target
	
	constructor: function(node, params){
		// summary:
		//		a constructor of the Target --- see the `dojo.dnd.Source.constructor` for details
		this.isSource = false;
		dojo.removeClass(this.node, "dojoDndSource");
	},

	// markup methods
	markupFactory: function(params, node){
		params._skipStartup = true;
		return new dojo.dnd.Target(node, params);
	}
});

dojo.declare("dojo.dnd.AutoSource", dojo.dnd.Source, {
	// summary:
	//		a source that syncs its DnD nodes by default
	
	constructor: function(node, params){
		// summary:
		//		constructor of the AutoSource --- see the Source constructor for details
		this.autoSync = true;
	},

	// markup methods
	markupFactory: function(params, node){
		params._skipStartup = true;
		return new dojo.dnd.AutoSource(node, params);
	}
});

}

if(!dojo._hasResource["dojox.grid._View"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._View"] = true;
dojo.provide("dojox.grid._View");










(function(){
	// a private function
	var getStyleText = function(inNode, inStyleText){
		return inNode.style.cssText == undefined ? inNode.getAttribute("style") : inNode.style.cssText;
	};

	// some public functions
	dojo.declare('dojox.grid._View', [dijit._Widget, dijit._Templated], {
		// summary:
		//		A collection of grid columns. A grid is comprised of a set of views that stack horizontally.
		//		Grid creates views automatically based on grid's layout structure.
		//		Users should typically not need to access individual views directly.
		//
		// defaultWidth: String
		//		Default width of the view
		defaultWidth: "18em",

		// viewWidth: String
		// 		Width for the view, in valid css unit
		viewWidth: "",

		templateString:"<div class=\"dojoxGridView\" role=\"presentation\">\r\n\t<div class=\"dojoxGridHeader\" dojoAttachPoint=\"headerNode\" role=\"presentation\">\r\n\t\t<div dojoAttachPoint=\"headerNodeContainer\" style=\"width:9000em\" role=\"presentation\">\r\n\t\t\t<div dojoAttachPoint=\"headerContentNode\" role=\"row\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<input type=\"checkbox\" class=\"dojoxGridHiddenFocus\" dojoAttachPoint=\"hiddenFocusNode\" role=\"presentation\" />\r\n\t<input type=\"checkbox\" class=\"dojoxGridHiddenFocus\" role=\"presentation\" />\r\n\t<div class=\"dojoxGridScrollbox\" dojoAttachPoint=\"scrollboxNode\" role=\"presentation\">\r\n\t\t<div class=\"dojoxGridContent\" dojoAttachPoint=\"contentNode\" hidefocus=\"hidefocus\" role=\"presentation\"></div>\r\n\t</div>\r\n</div>\r\n",
		
		themeable: false,
		classTag: 'dojoxGrid',
		marginBottom: 0,
		rowPad: 2,

		// _togglingColumn: int
		//		Width of the column being toggled (-1 for none)
		_togglingColumn: -1,
		
		// _headerBuilderClass: Object
		//		The class to use for our header builder
		_headerBuilderClass: dojox.grid._HeaderBuilder,
		
		// _contentBuilderClass: Object
		//		The class to use for our content builder
		_contentBuilderClass: dojox.grid._ContentBuilder,
		
		postMixInProperties: function(){
			this.rowNodes = {};
		},

		postCreate: function(){
			this.connect(this.scrollboxNode,"onscroll","doscroll");
			dojox.grid.util.funnelEvents(this.contentNode, this, "doContentEvent", [ 'mouseover', 'mouseout', 'click', 'dblclick', 'contextmenu', 'mousedown' ]);
			dojox.grid.util.funnelEvents(this.headerNode, this, "doHeaderEvent", [ 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'click', 'contextmenu' ]);
			this.content = new this._contentBuilderClass(this);
			this.header = new this._headerBuilderClass(this);
			//BiDi: in RTL case, style width='9000em' causes scrolling problem in head node
			if(!dojo._isBodyLtr()){
				this.headerNodeContainer.style.width = "";
			}
		},

		destroy: function(){
			dojo.destroy(this.headerNode);
			delete this.headerNode;
			for(var i in this.rowNodes){
				dojo.destroy(this.rowNodes[i]);
			}
			this.rowNodes = {};
			if(this.source){
				this.source.destroy();
			}
			this.inherited(arguments);
		},

		// focus
		focus: function(){
			if(dojo.isIE || dojo.isWebKit || dojo.isOpera){
				this.hiddenFocusNode.focus();
			}else{
				this.scrollboxNode.focus();
			}
		},

		setStructure: function(inStructure){
			var vs = (this.structure = inStructure);
			// FIXME: similar logic is duplicated in layout
			if(vs.width && !isNaN(vs.width)){
				this.viewWidth = vs.width + 'em';
			}else{
				this.viewWidth = vs.width || (vs.noscroll ? 'auto' : this.viewWidth); //|| this.defaultWidth;
			}
			this._onBeforeRow = vs.onBeforeRow||function(){};
			this._onAfterRow = vs.onAfterRow||function(){};
			this.noscroll = vs.noscroll;
			if(this.noscroll){
				this.scrollboxNode.style.overflow = "hidden";
			}
			this.simpleStructure = Boolean(vs.cells.length == 1);
			// bookkeeping
			this.testFlexCells();
			// accomodate new structure
			this.updateStructure();
		},
		
		_cleanupRowWidgets: function(inRowNode){
			// Summary:
			//		Cleans up the widgets for the given row node so that
			//		we can reattach them if needed
			if(inRowNode){
				dojo.forEach(dojo.query("[widgetId]", inRowNode).map(dijit.byNode), function(w){
					if(w._destroyOnRemove){
						w.destroy();
						delete w;
					}else if(w.domNode && w.domNode.parentNode){
						w.domNode.parentNode.removeChild(w.domNode);
					}
				});
			}
		},
		
		onBeforeRow: function(inRowIndex, cells){
			this._onBeforeRow(inRowIndex, cells);
			if(inRowIndex >= 0){
				this._cleanupRowWidgets(this.getRowNode(inRowIndex));
			}
		},
		
		onAfterRow: function(inRowIndex, cells, inRowNode){
			this._onAfterRow(inRowIndex, cells, inRowNode);
			var g = this.grid;
			dojo.forEach(dojo.query(".dojoxGridStubNode", inRowNode), function(n){
				if(n && n.parentNode){
					var lw = n.getAttribute("linkWidget");
					var cellIdx = window.parseInt(dojo.attr(n, "cellIdx"), 10);
					var cellDef = g.getCell(cellIdx);
					var w = dijit.byId(lw);
					if(w){
						n.parentNode.replaceChild(w.domNode, n);
						if(!w._started){
							w.startup();
						}
					}else{
						n.innerHTML = "";
					}
				}
			}, this);
		},

		testFlexCells: function(){
			// FIXME: cheater, this function does double duty as initializer and tester
			this.flexCells = false;
			for(var j=0, row; (row=this.structure.cells[j]); j++){
				for(var i=0, cell; (cell=row[i]); i++){
					cell.view = this;
					this.flexCells = this.flexCells || cell.isFlex();
				}
			}
			return this.flexCells;
		},

		updateStructure: function(){
			// header builder needs to update table map
			this.header.update();
			// content builder needs to update markup cache
			this.content.update();
		},

		getScrollbarWidth: function(){
			var hasScrollSpace = this.hasVScrollbar();
			var overflow = dojo.style(this.scrollboxNode, "overflow");
			if(this.noscroll || !overflow || overflow == "hidden"){
				hasScrollSpace = false;
			}else if(overflow == "scroll"){
				hasScrollSpace = true;
			}
			return (hasScrollSpace ? dojox.html.metrics.getScrollbar().w : 0); // Integer
		},

		getColumnsWidth: function(){
			var h = this.headerContentNode;
			return h && h.firstChild ? h.firstChild.offsetWidth : 0; // Integer
		},

		setColumnsWidth: function(width){
			this.headerContentNode.firstChild.style.width = width + 'px';
			if(this.viewWidth){
				this.viewWidth = width + 'px';
			}
		},

		getWidth: function(){
			return this.viewWidth || (this.getColumnsWidth()+this.getScrollbarWidth()) +'px'; // String
		},

		getContentWidth: function(){
			return Math.max(0, dojo._getContentBox(this.domNode).w - this.getScrollbarWidth()) + 'px'; // String
		},

		render: function(){
			this.scrollboxNode.style.height = '';
			this.renderHeader();
			if(this._togglingColumn >= 0){
				this.setColumnsWidth(this.getColumnsWidth() - this._togglingColumn);
				this._togglingColumn = -1;
			}
			var cells = this.grid.layout.cells;
			var getSibling = dojo.hitch(this, function(node, before){
				!dojo._isBodyLtr() && (before = !before);
				var inc = before?-1:1;
				var idx = this.header.getCellNodeIndex(node) + inc;
				var cell = cells[idx];
				while(cell && cell.getHeaderNode() && cell.getHeaderNode().style.display == "none"){
					idx += inc;
					cell = cells[idx];
				}
				if(cell){
					return cell.getHeaderNode();
				}
				return null;
			});
			if(this.grid.columnReordering && this.simpleStructure){
				if(this.source){
					this.source.destroy();
				}
				
				// Create the top and bottom markers
				var bottomMarkerId = "dojoxGrid_bottomMarker";
				var topMarkerId = "dojoxGrid_topMarker";
				if(this.bottomMarker){
					dojo.destroy(this.bottomMarker);
				}
				this.bottomMarker = dojo.byId(bottomMarkerId);
				if(this.topMarker){
					dojo.destroy(this.topMarker);
				}
				this.topMarker = dojo.byId(topMarkerId);
				if (!this.bottomMarker) {
					this.bottomMarker = dojo.create("div", {
						"id": bottomMarkerId,
						"class": "dojoxGridColPlaceBottom"
					}, dojo.body());
					this._hide(this.bottomMarker);

					
					this.topMarker = dojo.create("div", {
						"id": topMarkerId,
						"class": "dojoxGridColPlaceTop"
					}, dojo.body());
					this._hide(this.topMarker);
				}
				this.arrowDim = dojo.contentBox(this.bottomMarker);

				var headerHeight = dojo.contentBox(this.headerContentNode.firstChild.rows[0]).h;
				
				this.source = new dojo.dnd.Source(this.headerContentNode.firstChild.rows[0], {
					horizontal: true,
					accept: [ "gridColumn_" + this.grid.id ],
					viewIndex: this.index,
					generateText: false,
					onMouseDown: dojo.hitch(this, function(e){
						this.header.decorateEvent(e);
						if((this.header.overRightResizeArea(e) || this.header.overLeftResizeArea(e)) &&
							this.header.canResize(e) && !this.header.moveable){
							this.header.beginColumnResize(e);
						}else{
							if(this.grid.headerMenu){
								this.grid.headerMenu.onCancel(true);
							}
							// IE reports a left click as 1, where everything else reports 0
							if(e.button === (dojo.isIE ? 1 : 0)){
								dojo.dnd.Source.prototype.onMouseDown.call(this.source, e);
							}
						}
					}),
					onMouseOver: dojo.hitch(this, function(e){
						var src = this.source;
						if(src._getChildByEvent(e)){
							dojo.dnd.Source.prototype.onMouseOver.apply(src, arguments);
						}
					}),
					_markTargetAnchor: dojo.hitch(this, function(before){
						var src = this.source;
						if(src.current == src.targetAnchor && src.before == before){ return; }
						if(src.targetAnchor && getSibling(src.targetAnchor, src.before)){
							src._removeItemClass(getSibling(src.targetAnchor, src.before), src.before ? "After" : "Before");
						}
						dojo.dnd.Source.prototype._markTargetAnchor.call(src, before);
						
						var target = before ? src.targetAnchor : getSibling(src.targetAnchor, src.before);
						var endAdd = 0;

						if (!target) {
							target = src.targetAnchor;
							endAdd = dojo.contentBox(target).w + this.arrowDim.w/2 + 2;
						}

						// NOTE: this is for backwards compatibility with Dojo 1.3
						var pos = (dojo.position||dojo._abs)(target, true);
						var left = Math.floor(pos.x - this.arrowDim.w/2 + endAdd);

						dojo.style(this.bottomMarker, "visibility", "visible");
						dojo.style(this.topMarker, "visibility", "visible");
						dojo.style(this.bottomMarker, {
							"left": left + "px",
							"top" : (headerHeight + pos.y) + "px"
						});

						dojo.style(this.topMarker, {
							"left": left + "px",
							"top" : (pos.y - this.arrowDim.h) + "px"
						});

						if(src.targetAnchor && getSibling(src.targetAnchor, src.before)){
							src._addItemClass(getSibling(src.targetAnchor, src.before), src.before ? "After" : "Before");
						}
					}),
					_unmarkTargetAnchor: dojo.hitch(this, function(){
						var src = this.source;
						if(!src.targetAnchor){ return; }
						if(src.targetAnchor && getSibling(src.targetAnchor, src.before)){
							src._removeItemClass(getSibling(src.targetAnchor, src.before), src.before ? "After" : "Before");
						}
						this._hide(this.bottomMarker);
						this._hide(this.topMarker);
						dojo.dnd.Source.prototype._unmarkTargetAnchor.call(src);
					}),
					destroy: dojo.hitch(this, function(){
						dojo.disconnect(this._source_conn);
						dojo.unsubscribe(this._source_sub);
						dojo.dnd.Source.prototype.destroy.call(this.source);
						if(this.bottomMarker){
							dojo.destroy(this.bottomMarker);
							delete this.bottomMarker;
						}
						if(this.topMarker){
							dojo.destroy(this.topMarker);
							delete this.topMarker;
						}
					}),
					onDndCancel: dojo.hitch(this, function(){
						dojo.dnd.Source.prototype.onDndCancel.call(this.source);
						this._hide(this.bottomMarker);
						this._hide(this.topMarker);
					})
				});

				this._source_conn = dojo.connect(this.source, "onDndDrop", this, "_onDndDrop");
				this._source_sub = dojo.subscribe("/dnd/drop/before", this, "_onDndDropBefore");
				this.source.startup();
			}
		},
		
		_hide: function(node){
			dojo.style(node, {
				left: "-10000px",
				top: "-10000px",
				"visibility": "hidden"
			});
		},

		_onDndDropBefore: function(source, nodes, copy){
			if(dojo.dnd.manager().target !== this.source){
				return;
			}
			this.source._targetNode = this.source.targetAnchor;
			this.source._beforeTarget = this.source.before;
			var views = this.grid.views.views;
			var srcView = views[source.viewIndex];
			var tgtView = views[this.index];
			if(tgtView != srcView){
				srcView.convertColPctToFixed();
				tgtView.convertColPctToFixed();
			}
		},

		_onDndDrop: function(source, nodes, copy){
			if(dojo.dnd.manager().target !== this.source){
				if(dojo.dnd.manager().source === this.source){
					this._removingColumn = true;
				}
				return;
			}
			this._hide(this.bottomMarker);
			this._hide(this.topMarker);

			var getIdx = function(n){
				return n ? dojo.attr(n, "idx") : null;
			};
			var w = dojo.marginBox(nodes[0]).w;
			if(source.viewIndex !== this.index){
				var views = this.grid.views.views;
				var srcView = views[source.viewIndex];
				var tgtView = views[this.index];
				if(srcView.viewWidth && srcView.viewWidth != "auto"){
					srcView.setColumnsWidth(srcView.getColumnsWidth() - w);
				}
				if(tgtView.viewWidth && tgtView.viewWidth != "auto"){
					tgtView.setColumnsWidth(tgtView.getColumnsWidth());
				}
			}
			var stn = this.source._targetNode;
			var stb = this.source._beforeTarget;
			!dojo._isBodyLtr() && (stb = !stb);
			var layout = this.grid.layout;
			var idx = this.index;
			delete this.source._targetNode;
			delete this.source._beforeTarget;
			
			layout.moveColumn(
				source.viewIndex,
				idx,
				getIdx(nodes[0]),
				getIdx(stn),
				stb);
		},

		renderHeader: function(){
			this.headerContentNode.innerHTML = this.header.generateHtml(this._getHeaderContent);
			if(this.flexCells){
				this.contentWidth = this.getContentWidth();
				this.headerContentNode.firstChild.style.width = this.contentWidth;
			}
			dojox.grid.util.fire(this, "onAfterRow", [-1, this.structure.cells, this.headerContentNode]);
		},

		// note: not called in 'view' context
		_getHeaderContent: function(inCell){
			var n = inCell.name || inCell.grid.getCellName(inCell);
			var ret = [ '<div class="dojoxGridSortNode' ];
			
			if(inCell.index != inCell.grid.getSortIndex()){
				ret.push('">');
			}else{
				ret = ret.concat([ ' ',
							inCell.grid.sortInfo > 0 ? 'dojoxGridSortUp' : 'dojoxGridSortDown',
							'"><div class="dojoxGridArrowButtonChar">',
							inCell.grid.sortInfo > 0 ? '&#9650;' : '&#9660;',
							'</div><div class="dojoxGridArrowButtonNode" role="presentation"></div>',
							'<div class="dojoxGridColCaption">']);
			}
			ret = ret.concat([n, '</div></div>']);
			return ret.join('');
		},

		resize: function(){
			this.adaptHeight();
			this.adaptWidth();
		},

		hasHScrollbar: function(reset){
			var hadScroll = this._hasHScroll||false;
			if(this._hasHScroll == undefined || reset){
				if(this.noscroll){
					this._hasHScroll = false;
				}else{
					var style = dojo.style(this.scrollboxNode, "overflow");
					if(style == "hidden"){
						this._hasHScroll = false;
					}else if(style == "scroll"){
						this._hasHScroll = true;
					}else{
						this._hasHScroll = (this.scrollboxNode.offsetWidth - this.getScrollbarWidth() < this.contentNode.offsetWidth );
					}
				}
			}
			if(hadScroll !== this._hasHScroll){
				this.grid.update();
			}
			return this._hasHScroll; // Boolean
		},

		hasVScrollbar: function(reset){
			var hadScroll = this._hasVScroll||false;
			if(this._hasVScroll == undefined || reset){
				if(this.noscroll){
					this._hasVScroll = false;
				}else{
					var style = dojo.style(this.scrollboxNode, "overflow");
					if(style == "hidden"){
						this._hasVScroll = false;
					}else if(style == "scroll"){
						this._hasVScroll = true;
					}else{
						this._hasVScroll = (this.scrollboxNode.scrollHeight > this.scrollboxNode.clientHeight);
					}
				}
			}
			if(hadScroll !== this._hasVScroll){
				this.grid.update();
			}
			return this._hasVScroll; // Boolean
		},
		
		convertColPctToFixed: function(){
			// Fix any percentage widths to be pixel values
			var hasPct = false;
			this.grid.initialWidth = "";
			var cellNodes = dojo.query("th", this.headerContentNode);
			var fixedWidths = dojo.map(cellNodes, function(c, vIdx){
				var w = c.style.width;
				dojo.attr(c, "vIdx", vIdx);
				if(w && w.slice(-1) == "%"){
					hasPct = true;
				}else if(w && w.slice(-2) == "px"){
					return window.parseInt(w, 10);
				}
				return dojo.contentBox(c).w;
			});
			if(hasPct){
				dojo.forEach(this.grid.layout.cells, function(cell, idx){
					if(cell.view == this){
						var cellNode = cell.view.getHeaderCellNode(cell.index);
						if(cellNode && dojo.hasAttr(cellNode, "vIdx")){
							var vIdx = window.parseInt(dojo.attr(cellNode, "vIdx"));
							this.setColWidth(idx, fixedWidths[vIdx]);
							dojo.removeAttr(cellNode, "vIdx");
						}
					}
				}, this);
				return true;
			}
			return false;
		},

		adaptHeight: function(minusScroll){
			if(!this.grid._autoHeight){
				var h = (this.domNode.style.height && parseInt(this.domNode.style.height.replace(/px/,''), 10)) || this.domNode.clientHeight;
				var self = this;
				var checkOtherViewScrollers = function(){
					var v;
					for(var i in self.grid.views.views){
						v = self.grid.views.views[i];
						if(v !== self && v.hasHScrollbar()){
							return true;
						}
					}
					return false;
				};
				if(minusScroll || (this.noscroll && checkOtherViewScrollers())){
					h -= dojox.html.metrics.getScrollbar().h;
				}
				dojox.grid.util.setStyleHeightPx(this.scrollboxNode, h);
			}
			this.hasVScrollbar(true);
		},

		adaptWidth: function(){
			if(this.flexCells){
				// the view content width
				this.contentWidth = this.getContentWidth();
				this.headerContentNode.firstChild.style.width = this.contentWidth;
			}
			// FIXME: it should be easier to get w from this.scrollboxNode.clientWidth,
			// but clientWidth seemingly does not include scrollbar width in some cases
			var w = this.scrollboxNode.offsetWidth - this.getScrollbarWidth();
			if(!this._removingColumn){
				w = Math.max(w, this.getColumnsWidth()) + 'px';
			}else{
				w = Math.min(w, this.getColumnsWidth()) + 'px';
				this._removingColumn = false;
			}
			var cn = this.contentNode;
			cn.style.width = w;
			this.hasHScrollbar(true);
		},

		setSize: function(w, h){
			var ds = this.domNode.style;
			var hs = this.headerNode.style;

			if(w){
				ds.width = w;
				hs.width = w;
			}
			ds.height = (h >= 0 ? h + 'px' : '');
		},

		renderRow: function(inRowIndex){
			var rowNode = this.createRowNode(inRowIndex);
			this.buildRow(inRowIndex, rowNode);
			this.grid.edit.restore(this, inRowIndex);
			return rowNode;
		},

		createRowNode: function(inRowIndex){
			var node = document.createElement("div");
			node.className = this.classTag + 'Row';
			if (this instanceof dojox.grid._RowSelector){
				dojo.attr(node,"role","presentation");
			}else{
				dojo.attr(node,"role","row");
				if (this.grid.selectionMode != "none") {
					dojo.attr(node, "aria-selected", "false"); //rows can be selected so add aria-selected prop
				}
			}
			node[dojox.grid.util.gridViewTag] = this.id;
			node[dojox.grid.util.rowIndexTag] = inRowIndex;
			this.rowNodes[inRowIndex] = node;
			return node;
		},

		buildRow: function(inRowIndex, inRowNode){
			
			this.buildRowContent(inRowIndex, inRowNode);
		  	
			this.styleRow(inRowIndex, inRowNode);
		  
		 
		},

		buildRowContent: function(inRowIndex, inRowNode){
			inRowNode.innerHTML = this.content.generateHtml(inRowIndex, inRowIndex);
			if(this.flexCells && this.contentWidth){
				// FIXME: accessing firstChild here breaks encapsulation
				inRowNode.firstChild.style.width = this.contentWidth;
			}
			dojox.grid.util.fire(this, "onAfterRow", [inRowIndex, this.structure.cells, inRowNode]);
		},

		rowRemoved:function(inRowIndex){
			if(inRowIndex >= 0){
				this._cleanupRowWidgets(this.getRowNode(inRowIndex));
			}
			this.grid.edit.save(this, inRowIndex);
			delete this.rowNodes[inRowIndex];
		},

		getRowNode: function(inRowIndex){
			return this.rowNodes[inRowIndex];
		},

		getCellNode: function(inRowIndex, inCellIndex){
			var row = this.getRowNode(inRowIndex);
			if(row){
				return this.content.getCellNode(row, inCellIndex);
			}
		},

		getHeaderCellNode: function(inCellIndex){
			if(this.headerContentNode){
				return this.header.getCellNode(this.headerContentNode, inCellIndex);
			}
		},

		// styling
		styleRow: function(inRowIndex, inRowNode){
			inRowNode._style = getStyleText(inRowNode);
			this.styleRowNode(inRowIndex, inRowNode);
		},

		styleRowNode: function(inRowIndex, inRowNode){
			if(inRowNode){
				this.doStyleRowNode(inRowIndex, inRowNode);
			}
		},

		doStyleRowNode: function(inRowIndex, inRowNode){
			this.grid.styleRowNode(inRowIndex, inRowNode);
		},

		// updating
		updateRow: function(inRowIndex){
			var rowNode = this.getRowNode(inRowIndex);
			if(rowNode){
				rowNode.style.height = '';
				this.buildRow(inRowIndex, rowNode);
			}
			return rowNode;
		},

		updateRowStyles: function(inRowIndex){
			this.styleRowNode(inRowIndex, this.getRowNode(inRowIndex));
		},

		// scrolling
		lastTop: 0,
		firstScroll:0,

		doscroll: function(inEvent){
			//var s = dojo.marginBox(this.headerContentNode.firstChild);
			var isLtr = dojo._isBodyLtr();
			if(this.firstScroll < 2){
				if((!isLtr && this.firstScroll == 1) || (isLtr && this.firstScroll === 0)){
					var s = dojo.marginBox(this.headerNodeContainer);
					if(dojo.isIE){
						this.headerNodeContainer.style.width = s.w + this.getScrollbarWidth() + 'px';
					}else if(dojo.isMoz){
						//TODO currently only for FF, not sure for safari and opera
						this.headerNodeContainer.style.width = s.w - this.getScrollbarWidth() + 'px';
						//this.headerNodeContainer.style.width = s.w + 'px';
						//set scroll to right in FF
						this.scrollboxNode.scrollLeft = isLtr ?
							this.scrollboxNode.clientWidth - this.scrollboxNode.scrollWidth :
							this.scrollboxNode.scrollWidth - this.scrollboxNode.clientWidth;
					}
				}
				this.firstScroll++;
			}
			this.headerNode.scrollLeft = this.scrollboxNode.scrollLeft;
			// 'lastTop' is a semaphore to prevent feedback-loop with setScrollTop below
			var top = this.scrollboxNode.scrollTop;
			if(top !== this.lastTop){
				this.grid.scrollTo(top);
			}
		},

		setScrollTop: function(inTop){
			// 'lastTop' is a semaphore to prevent feedback-loop with doScroll above
			this.lastTop = inTop;
			this.scrollboxNode.scrollTop = inTop;
			return this.scrollboxNode.scrollTop;
		},

		// event handlers (direct from DOM)
		doContentEvent: function(e){
			if(this.content.decorateEvent(e)){
				this.grid.onContentEvent(e);
			}
		},

		doHeaderEvent: function(e){
			if(this.header.decorateEvent(e)){
				this.grid.onHeaderEvent(e);
			}
		},

		// event dispatch(from Grid)
		dispatchContentEvent: function(e){
			return this.content.dispatchEvent(e);
		},

		dispatchHeaderEvent: function(e){
			return this.header.dispatchEvent(e);
		},

		// column resizing
		setColWidth: function(inIndex, inWidth){
			this.grid.setCellWidth(inIndex, inWidth + 'px');
		},

		update: function(){
			if(!this.domNode){
				return;
			}
			this.content.update();
			this.grid.update();
			//get scroll after update or scroll left setting goes wrong on IE.
			//See trac: #8040
			var left = this.scrollboxNode.scrollLeft;
			this.scrollboxNode.scrollLeft = left;
			this.headerNode.scrollLeft = left;
		}
	});

	dojo.declare("dojox.grid._GridAvatar", dojo.dnd.Avatar, {
		construct: function(){
			var dd = dojo.doc;

			var a = dd.createElement("table");
			a.cellPadding = a.cellSpacing = "0";
			a.className = "dojoxGridDndAvatar";
			a.style.position = "absolute";
			a.style.zIndex = 1999;
			a.style.margin = "0px"; // to avoid dojo.marginBox() problems with table's margins
			var b = dd.createElement("tbody");
			var tr = dd.createElement("tr");
			var td = dd.createElement("td");
			var img = dd.createElement("td");
			tr.className = "dojoxGridDndAvatarItem";
			img.className = "dojoxGridDndAvatarItemImage";
			img.style.width = "16px";
			var source = this.manager.source, node;
			if(source.creator){
				// create an avatar representation of the node
				node = source._normalizedCreator(source.getItem(this.manager.nodes[0].id).data, "avatar").node;
			}else{
				// or just clone the node and hope it works
				node = this.manager.nodes[0].cloneNode(true);
				var table, tbody;
				if(node.tagName.toLowerCase() == "tr"){
					// insert extra table nodes
					table = dd.createElement("table");
					tbody = dd.createElement("tbody");
					tbody.appendChild(node);
					table.appendChild(tbody);
					node = table;
				}else if(node.tagName.toLowerCase() == "th"){
					// insert extra table nodes
					table = dd.createElement("table");
					tbody = dd.createElement("tbody");
					var r = dd.createElement("tr");
					table.cellPadding = table.cellSpacing = "0";
					r.appendChild(node);
					tbody.appendChild(r);
					table.appendChild(tbody);
					node = table;
				}
			}
			node.id = "";
			td.appendChild(node);
			tr.appendChild(img);
			tr.appendChild(td);
			dojo.style(tr, "opacity", 0.9);
			b.appendChild(tr);

			a.appendChild(b);
			this.node = a;

			var m = dojo.dnd.manager();
			this.oldOffsetY = m.OFFSET_Y;
			m.OFFSET_Y = 1;
		},
		destroy: function(){
			dojo.dnd.manager().OFFSET_Y = this.oldOffsetY;
			this.inherited(arguments);
		}
	});

	var oldMakeAvatar = dojo.dnd.manager().makeAvatar;
	dojo.dnd.manager().makeAvatar = function(){
		var src = this.source;
		if(src.viewIndex !== undefined && !dojo.hasClass(dojo.body(),"dijit_a11y")){
			return new dojox.grid._GridAvatar(this);
		}
		return oldMakeAvatar.call(dojo.dnd.manager());
	};
})();

}

if(!dojo._hasResource["dojox.grid._RowSelector"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._RowSelector"] = true;
dojo.provide("dojox.grid._RowSelector");


dojo.declare('dojox.grid._RowSelector', dojox.grid._View, {
	// summary:
	//	Custom grid view. If used in a grid structure, provides a small selectable region for grid rows.
	defaultWidth: "2em",
	noscroll: true,
	padBorderWidth: 2,
	buildRendering: function(){
		this.inherited('buildRendering', arguments);
		this.scrollboxNode.style.overflow = "hidden";
		this.headerNode.style.visibility = "hidden";
	},
	getWidth: function(){
		return this.viewWidth || this.defaultWidth;
	},
	buildRowContent: function(inRowIndex, inRowNode){
		var w = this.contentWidth || 0;
		inRowNode.innerHTML = '<table class="dojoxGridRowbarTable" style="width:' + w + 'px;height:1px;" border="0" cellspacing="0" cellpadding="0" role="presentation"><tr><td class="dojoxGridRowbarInner">&nbsp;</td></tr></table>';
	},
	renderHeader: function(){
	},
	updateRow: function(){
	},
	resize: function(){
		this.adaptHeight();
	},
	adaptWidth: function(){
		// Only calculate this here - rather than every call to buildRowContent
		if(!("contentWidth" in this) && this.contentNode){
			this.contentWidth = this.contentNode.offsetWidth - this.padBorderWidth;
		}
	},
	// styling
	doStyleRowNode: function(inRowIndex, inRowNode){
		var n = [ "dojoxGridRowbar dojoxGridNonNormalizedCell" ];
		if(this.grid.rows.isOver(inRowIndex)){
			n.push("dojoxGridRowbarOver");
		}
		if(this.grid.selection.isSelected(inRowIndex)){
			n.push("dojoxGridRowbarSelected");
		}
		inRowNode.className = n.join(" ");
	},
	// event handlers
	domouseover: function(e){
		this.grid.onMouseOverRow(e);
	},
	domouseout: function(e){
		if(!this.isIntraRowEvent(e)){
			this.grid.onMouseOutRow(e);
		}
	}
});

}

if(!dojo._hasResource["dojox.grid._Layout"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._Layout"] = true;
dojo.provide("dojox.grid._Layout");



dojo.declare("dojox.grid._Layout", null, {
	// summary:
	//	Controls grid cell layout. Owned by grid and used internally.
	constructor: function(inGrid){
		this.grid = inGrid;
	},
	// flat array of grid cells
	cells: [],
	// structured array of grid cells
	structure: null,
	// default cell width
	defaultWidth: '6em',

	// methods
	moveColumn: function(sourceViewIndex, destViewIndex, cellIndex, targetIndex, before){
		var source_cells = this.structure[sourceViewIndex].cells[0];
		var dest_cells = this.structure[destViewIndex].cells[0];

		var cell = null;
		var cell_ri = 0;
		var target_ri = 0;

		for(var i=0, c; c=source_cells[i]; i++){
			if(c.index == cellIndex){
				cell_ri = i;
				break;
			}
		}
		cell = source_cells.splice(cell_ri, 1)[0];
		cell.view = this.grid.views.views[destViewIndex];

		for(i=0, c=null; c=dest_cells[i]; i++){
			if(c.index == targetIndex){
				target_ri = i;
				break;
			}
		}
		if(!before){
			target_ri += 1;
		}
		dest_cells.splice(target_ri, 0, cell);

		var sortedCell = this.grid.getCell(this.grid.getSortIndex());
		if(sortedCell){
			sortedCell._currentlySorted = this.grid.getSortAsc();
		}

		this.cells = [];
		cellIndex = 0;
		var v;
		for(i=0; v=this.structure[i]; i++){
			for(var j=0, cs; cs=v.cells[j]; j++){
				for(var k=0; c=cs[k]; k++){
					c.index = cellIndex;
					this.cells.push(c);
					if("_currentlySorted" in c){
						var si = cellIndex + 1;
						si *= c._currentlySorted ? 1 : -1;
						this.grid.sortInfo = si;
						delete c._currentlySorted;
					}
					cellIndex++;
				}
			}
		}
		
		//Fix #9481 - reset idx in cell markup
		dojo.forEach(this.cells, function(c){
			var marks = c.markup[2].split(" ");
			var oldIdx = parseInt(marks[1].substring(5));//get old "idx"
			if(oldIdx != c.index){
				marks[1] = "idx=\"" + c.index + "\"";
				c.markup[2] = marks.join(" ");
			}
		});
		
		this.grid.setupHeaderMenu();
		//this.grid.renderOnIdle();
	},

	setColumnVisibility: function(columnIndex, visible){
		var cell = this.cells[columnIndex];
		if(cell.hidden == visible){
			cell.hidden = !visible;
			var v = cell.view, w = v.viewWidth;
			if(w && w != "auto"){
				v._togglingColumn = dojo.marginBox(cell.getHeaderNode()).w || 0;
			}
			v.update();
			return true;
		}else{
			return false;
		}
	},
	
	addCellDef: function(inRowIndex, inCellIndex, inDef){
		var self = this;
		var getCellWidth = function(inDef){
			var w = 0;
			if(inDef.colSpan > 1){
				w = 0;
			}else{
				w = inDef.width || self._defaultCellProps.width || self.defaultWidth;

				if(!isNaN(w)){
					w = w + "em";
				}
			}
			return w;
		};

		var props = {
			grid: this.grid,
			subrow: inRowIndex,
			layoutIndex: inCellIndex,
			index: this.cells.length
		};

		if(inDef && inDef instanceof dojox.grid.cells._Base){
			var new_cell = dojo.clone(inDef);
			props.unitWidth = getCellWidth(new_cell._props);
			new_cell = dojo.mixin(new_cell, this._defaultCellProps, inDef._props, props);
			return new_cell;
		}

		var cell_type = inDef.type || inDef.cellType || this._defaultCellProps.type || this._defaultCellProps.cellType || dojox.grid.cells.Cell;

		props.unitWidth = getCellWidth(inDef);
		return new cell_type(dojo.mixin({}, this._defaultCellProps, inDef, props));
	},
	
	addRowDef: function(inRowIndex, inDef){
		var result = [];
		var relSum = 0, pctSum = 0, doRel = true;
		for(var i=0, def, cell; (def=inDef[i]); i++){
			cell = this.addCellDef(inRowIndex, i, def);
			result.push(cell);
			this.cells.push(cell);
			// Check and calculate the sum of all relative widths
			if(doRel && cell.relWidth){
				relSum += cell.relWidth;
			}else if(cell.width){
				var w = cell.width;
				if(typeof w == "string" && w.slice(-1) == "%"){
					pctSum += window.parseInt(w, 10);
				}else if(w == "auto"){
					// relative widths doesn't play nice with auto - since we
					// don't have a way of knowing how much space the auto is
					// supposed to take up.
					doRel = false;
				}
			}
		}
		if(relSum && doRel){
			// We have some kind of relWidths specified - so change them to %
			dojo.forEach(result, function(cell){
				if(cell.relWidth){
					cell.width = cell.unitWidth = ((cell.relWidth / relSum) * (100 - pctSum)) + "%";
				}
			});
		}
		return result;
	
	},

	addRowsDef: function(inDef){
		var result = [];
		if(dojo.isArray(inDef)){
			if(dojo.isArray(inDef[0])){
				for(var i=0, row; inDef && (row=inDef[i]); i++){
					result.push(this.addRowDef(i, row));
				}
			}else{
				result.push(this.addRowDef(0, inDef));
			}
		}
		return result;
	},
	
	addViewDef: function(inDef){
		this._defaultCellProps = inDef.defaultCell || {};
		if(inDef.width && inDef.width == "auto"){
			delete inDef.width;
		}
		return dojo.mixin({}, inDef, {cells: this.addRowsDef(inDef.rows || inDef.cells)});
	},
	
	setStructure: function(inStructure){
		this.fieldIndex = 0;
		this.cells = [];
		var s = this.structure = [];

		if(this.grid.rowSelector){
			var sel = { type: dojox._scopeName + ".grid._RowSelector" };

			if(dojo.isString(this.grid.rowSelector)){
				var width = this.grid.rowSelector;

				if(width == "false"){
					sel = null;
				}else if(width != "true"){
					sel['width'] = width;
				}
			}else{
				if(!this.grid.rowSelector){
					sel = null;
				}
			}

			if(sel){
				s.push(this.addViewDef(sel));
			}
		}

		var isCell = function(def){
			return ("name" in def || "field" in def || "get" in def);
		};

		var isRowDef = function(def){
			if(dojo.isArray(def)){
				if(dojo.isArray(def[0]) || isCell(def[0])){
					return true;
				}
			}
			return false;
		};

		var isView = function(def){
			return (def !== null && dojo.isObject(def) &&
					("cells" in def || "rows" in def || ("type" in def && !isCell(def))));
		};

		if(dojo.isArray(inStructure)){
			var hasViews = false;
			for(var i=0, st; (st=inStructure[i]); i++){
				if(isView(st)){
					hasViews = true;
					break;
				}
			}
			if(!hasViews){
				s.push(this.addViewDef({ cells: inStructure }));
			}else{
				for(i=0; (st=inStructure[i]); i++){
					if(isRowDef(st)){
						s.push(this.addViewDef({ cells: st }));
					}else if(isView(st)){
						s.push(this.addViewDef(st));
					}
				}
			}
		}else if(isView(inStructure)){
			// it's a view object
			s.push(this.addViewDef(inStructure));
		}

		this.cellCount = this.cells.length;
		this.grid.setupHeaderMenu();
	}
});

}

if(!dojo._hasResource["dojox.grid._ViewManager"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._ViewManager"] = true;
dojo.provide("dojox.grid._ViewManager");

dojo.declare('dojox.grid._ViewManager', null, {
	// summary:
	//		A collection of grid views. Owned by grid and used internally for managing grid views.
	// description:
	//		Grid creates views automatically based on grid's layout structure.
	//		Users should typically not need to access individual views or the views collection directly.
	constructor: function(inGrid){
		this.grid = inGrid;
	},

	defaultWidth: 200,

	views: [],

	// operations
	resize: function(){
		this.onEach("resize");
	},

	render: function(){
		this.onEach("render");
	},

	// views
	addView: function(inView){
		inView.idx = this.views.length;
		this.views.push(inView);
	},

	destroyViews: function(){
		for(var i=0, v; v=this.views[i]; i++){
			v.destroy();
		}
		this.views = [];
	},

	getContentNodes: function(){
		var nodes = [];
		for(var i=0, v; v=this.views[i]; i++){
			nodes.push(v.contentNode);
		}
		return nodes;
	},

	forEach: function(inCallback){
		for(var i=0, v; v=this.views[i]; i++){
			inCallback(v, i);
		}
	},

	onEach: function(inMethod, inArgs){
		inArgs = inArgs || [];
		for(var i=0, v; v=this.views[i]; i++){
			if(inMethod in v){
				v[inMethod].apply(v, inArgs);
			}
		}
	},

	// layout
	normalizeHeaderNodeHeight: function(){
		var rowNodes = [];
		for(var i=0, v; (v=this.views[i]); i++){
			if(v.headerContentNode.firstChild){
				rowNodes.push(v.headerContentNode);
			}
		}
		this.normalizeRowNodeHeights(rowNodes);
	},

	normalizeRowNodeHeights: function(inRowNodes){
		var h = 0;
		var currHeights = [];
		if(this.grid.rowHeight){
			h = this.grid.rowHeight;
		}else{
			if(inRowNodes.length <= 1){
				// no need to normalize if we are the only one...
				return;
			}
			for(var i=0, n; (n=inRowNodes[i]); i++){
				// We only care about the height - so don't use marginBox.  This
				// depends on the container not having any margin (which it shouldn't)
				// Also - we only look up the height if the cell doesn't have the
				// dojoxGridNonNormalizedCell class (like for row selectors)
				if(!dojo.hasClass(n, "dojoxGridNonNormalizedCell")){
					currHeights[i] = n.firstChild.offsetHeight;
					h =  Math.max(h, currHeights[i]);
				}
			}
			h = (h >= 0 ? h : 0);
	
			//Work around odd FF3 rendering bug: #8864.
			//A one px increase fixes FireFox 3's rounding bug for fractional font sizes.
			if(dojo.isMoz && h){h++;}
		}
		for(i=0; (n=inRowNodes[i]); i++){
			if(currHeights[i] != h){
				n.firstChild.style.height = h + "px";
			}
		}
	},
	
	resetHeaderNodeHeight: function(){
		for(var i=0, v, n; (v=this.views[i]); i++){
			n = v.headerContentNode.firstChild;
			if(n){
				n.style.height = "";
			}
		}
	},

	renormalizeRow: function(inRowIndex){
		var rowNodes = [];
		for(var i=0, v, n; (v=this.views[i])&&(n=v.getRowNode(inRowIndex)); i++){
			n.firstChild.style.height = '';
			rowNodes.push(n);
		}
		this.normalizeRowNodeHeights(rowNodes);
	},

	getViewWidth: function(inIndex){
		return this.views[inIndex].getWidth() || this.defaultWidth;
	},

	// must be called after view widths are properly set or height can be miscalculated
	// if there are flex columns
	measureHeader: function(){
		// need to reset view header heights so they are properly measured.
		this.resetHeaderNodeHeight();
		this.forEach(function(inView){
			inView.headerContentNode.style.height = '';
		});
		var h = 0;
		// calculate maximum view header height
		this.forEach(function(inView){
			h = Math.max(inView.headerNode.offsetHeight, h);
		});
		return h;
	},

	measureContent: function(){
		var h = 0;
		this.forEach(function(inView){
			h = Math.max(inView.domNode.offsetHeight, h);
		});
		return h;
	},

	findClient: function(inAutoWidth){
		// try to use user defined client
		var c = this.grid.elasticView || -1;
		// attempt to find implicit client
		if(c < 0){
			for(var i=1, v; (v=this.views[i]); i++){
				if(v.viewWidth){
					for(i=1; (v=this.views[i]); i++){
						if(!v.viewWidth){
							c = i;
							break;
						}
					}
					break;
				}
			}
		}
		// client is in the middle by default
		if(c < 0){
			c = Math.floor(this.views.length / 2);
		}
		return c;
	},

	arrange: function(l, w){
		var i, v, vw, len = this.views.length;
		// find the client
		var c = (w <= 0 ? len : this.findClient());
		// layout views
		var setPosition = function(v, l){
			var ds = v.domNode.style;
			var hs = v.headerNode.style;

			if(!dojo._isBodyLtr()){
				ds.right = l + 'px';
				// fixed rtl, the scrollbar is on the right side in FF
				if (dojo.isMoz) {
					hs.right = l + v.getScrollbarWidth() + 'px';
					hs.width = parseInt(hs.width, 10) - v.getScrollbarWidth() + 'px';
				}else{
					hs.right = l + 'px';
				}
			}else{
				ds.left = l + 'px';
				hs.left = l + 'px';
			}
			ds.top = 0 + 'px';
			hs.top = 0;
		};
		// for views left of the client
		//BiDi TODO: The left and right should not appear in BIDI environment. Should be replaced with
		//leading and tailing concept.
		for(i=0; (v=this.views[i])&&(i<c); i++){
			// get width
			vw = this.getViewWidth(i);
			// process boxes
			v.setSize(vw, 0);
			setPosition(v, l);
			if(v.headerContentNode && v.headerContentNode.firstChild){
				vw = v.getColumnsWidth()+v.getScrollbarWidth();
			}else{
				vw = v.domNode.offsetWidth;
			}
			// update position
			l += vw;
		}
		// next view (is the client, i++ == c)
		i++;
		// start from the right edge
		var r = w;
		// for views right of the client (iterated from the right)
		for(var j=len-1; (v=this.views[j])&&(i<=j); j--){
			// get width
			vw = this.getViewWidth(j);
			// set size
			v.setSize(vw, 0);
			// measure in pixels
			vw = v.domNode.offsetWidth;
			// update position
			r -= vw;
			// set position
			setPosition(v, r);
		}
		if(c<len){
			v = this.views[c];
			// position the client box between left and right boxes
			vw = Math.max(1, r-l);
			// set size
			v.setSize(vw + 'px', 0);
			setPosition(v, l);
		}
		return l;
	},

	// rendering
	renderRow: function(inRowIndex, inNodes, skipRenorm){
		var rowNodes = [];
		for(var i=0, v, n, rowNode; (v=this.views[i])&&(n=inNodes[i]); i++){
			rowNode = v.renderRow(inRowIndex);
			n.appendChild(rowNode);
			rowNodes.push(rowNode);
		}
		if(!skipRenorm){
			this.normalizeRowNodeHeights(rowNodes);
		}
	},
	
	rowRemoved: function(inRowIndex){
		this.onEach("rowRemoved", [ inRowIndex ]);
	},
	
	// updating
	updateRow: function(inRowIndex, skipRenorm){
		for(var i=0, v; v=this.views[i]; i++){
			v.updateRow(inRowIndex);
		}
		if(!skipRenorm){
			this.renormalizeRow(inRowIndex);
		}
	},
	
	updateRowStyles: function(inRowIndex){
		this.onEach("updateRowStyles", [ inRowIndex ]);
	},
	
	// scrolling
	setScrollTop: function(inTop){
		var top = inTop;
		for(var i=0, v; v=this.views[i]; i++){
			top = v.setScrollTop(inTop);
			// Work around IE not firing scroll events that cause header offset
			// issues to occur.
			if(dojo.isIE && v.headerNode && v.scrollboxNode){
				v.headerNode.scrollLeft = v.scrollboxNode.scrollLeft;
			}
		}
		return top;
		//this.onEach("setScrollTop", [ inTop ]);
	},
	
	getFirstScrollingView: function(){
		// summary: Returns the first grid view with a scroll bar
		for(var i=0, v; (v=this.views[i]); i++){
			if(v.hasHScrollbar() || v.hasVScrollbar()){
				return v;
			}
		}
		return null;
	}
	
});

}

if(!dojo._hasResource["dojox.grid._RowManager"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._RowManager"] = true;
dojo.provide("dojox.grid._RowManager");

(function(){
	var setStyleText = function(inNode, inStyleText){
		if(inNode.style.cssText == undefined){
			inNode.setAttribute("style", inStyleText);
		}else{
			inNode.style.cssText = inStyleText;
		}
	};

	dojo.declare("dojox.grid._RowManager", null, {
		//	Stores information about grid rows. Owned by grid and used internally.
		constructor: function(inGrid){
			this.grid = inGrid;
		},
		linesToEms: 2,
		overRow: -2,
		// styles
		prepareStylingRow: function(inRowIndex, inRowNode){
			return {
				index: inRowIndex,
				node: inRowNode,
				odd: Boolean(inRowIndex&1),
				selected: !!this.grid.selection.isSelected(inRowIndex),
				over: this.isOver(inRowIndex),
				customStyles: "",
				customClasses: "dojoxGridRow"
			};
		},
		styleRowNode: function(inRowIndex, inRowNode){
			var row = this.prepareStylingRow(inRowIndex, inRowNode);
			this.grid.onStyleRow(row);
			this.applyStyles(row);
		},
		applyStyles: function(inRow){
			var i = inRow;

			i.node.className = i.customClasses;
			var h = i.node.style.height;
			setStyleText(i.node, i.customStyles + ';' + (i.node._style||''));
			i.node.style.height = h;
		},
		updateStyles: function(inRowIndex){
			this.grid.updateRowStyles(inRowIndex);
		},
		// states and events
		setOverRow: function(inRowIndex){
			var last = this.overRow;
			this.overRow = inRowIndex;
			if((last!=this.overRow)&&(dojo.isString(last) || last >= 0)){
				this.updateStyles(last);
			}
			this.updateStyles(this.overRow);
		},
		isOver: function(inRowIndex){
			return (this.overRow == inRowIndex && !dojo.hasClass(this.grid.domNode, "dojoxGridColumnResizing"));
		}
	});
})();

}

if(!dojo._hasResource["dojox.grid._FocusManager"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._FocusManager"] = true;
dojo.provide("dojox.grid._FocusManager");



// focus management
dojo.declare("dojox.grid._FocusManager", null, {
	// summary:
	//	Controls grid cell focus. Owned by grid and used internally for focusing.
	//	Note: grid cell actually receives keyboard input only when cell is being edited.
	constructor: function(inGrid){
		this.grid = inGrid;
		this.cell = null;
		this.rowIndex = -1;
		this._connects = [];
		this._headerConnects = [];
		this.headerMenu = this.grid.headerMenu;
		this._connects.push(dojo.connect(this.grid.domNode, "onfocus", this, "doFocus"));
		this._connects.push(dojo.connect(this.grid.domNode, "onblur", this, "doBlur"));
		this._connects.push(dojo.connect(this.grid.domNode, "oncontextmenu", this, "doContextMenu"));
		this._connects.push(dojo.connect(this.grid.lastFocusNode, "onfocus", this, "doLastNodeFocus"));
		this._connects.push(dojo.connect(this.grid.lastFocusNode, "onblur", this, "doLastNodeBlur"));
		this._connects.push(dojo.connect(this.grid,"_onFetchComplete", this, "_delayedCellFocus"));
		this._connects.push(dojo.connect(this.grid,"postrender", this, "_delayedHeaderFocus"));
	},
	destroy: function(){
		dojo.forEach(this._connects, dojo.disconnect);
		dojo.forEach(this._headerConnects, dojo.disconnect);
		delete this.grid;
		delete this.cell;
	},
	_colHeadNode: null,
	_colHeadFocusIdx: null,
	_contextMenuBindNode: null,
	tabbingOut: false,
	focusClass: "dojoxGridCellFocus",
	focusView: null,
	initFocusView: function(){
		this.focusView = this.grid.views.getFirstScrollingView() || this.focusView || this.grid.views.views[0];
		this._initColumnHeaders();
	},
	isFocusCell: function(inCell, inRowIndex){
		// summary:
		//	states if the given cell is focused
		// inCell: object
		//	grid cell object
		// inRowIndex: int
		//	grid row index
		// returns:
		//	true of the given grid cell is focused
		return (this.cell == inCell) && (this.rowIndex == inRowIndex);
	},
	isLastFocusCell: function(){
		if(this.cell){
			return (this.rowIndex == this.grid.rowCount-1) && (this.cell.index == this.grid.layout.cellCount-1);
		}
		return false;
	},
	isFirstFocusCell: function(){
		if(this.cell){
			return (this.rowIndex === 0) && (this.cell.index === 0);
		}
		return false;
	},
	isNoFocusCell: function(){
		return (this.rowIndex < 0) || !this.cell;
	},
	isNavHeader: function(){
		// summary:
		//	states whether currently navigating among column headers.
		// returns:
		//	true if focus is on a column header; false otherwise.
		return (!!this._colHeadNode);
	},
	getHeaderIndex: function(){
		// summary:
		//	if one of the column headers currently has focus, return its index.
		// returns:
		//	index of the focused column header, or -1 if none have focus.
		if(this._colHeadNode){
			return dojo.indexOf(this._findHeaderCells(), this._colHeadNode);
		}else{
			return -1;
		}
	},
	_focusifyCellNode: function(inBork){
		var n = this.cell && this.cell.getNode(this.rowIndex);
		if(n){
			dojo.toggleClass(n, this.focusClass, inBork);
			if(inBork){
				var sl = this.scrollIntoView();
				try{
					if(!this.grid.edit.isEditing()){
						dojox.grid.util.fire(n, "focus");
						if(sl){ this.cell.view.scrollboxNode.scrollLeft = sl; }
					}
				}catch(e){}
			}
		}
	},
	_delayedCellFocus: function(){
		if(this.isNavHeader()||!this.grid._focused){
				return;
		}
		var n = this.cell && this.cell.getNode(this.rowIndex);
		if(n){
			try{
				if(!this.grid.edit.isEditing()){
					dojo.toggleClass(n, this.focusClass, true);
					this.blurHeader();
					dojox.grid.util.fire(n, "focus");
				}
			}
			catch(e){}
		}
	},
	_delayedHeaderFocus: function(){
		if(this.isNavHeader()){
			this.focusHeader();
			this.grid.domNode.focus();
		}
	},
	_initColumnHeaders: function(){
		dojo.forEach(this._headerConnects, dojo.disconnect);
		this._headerConnects = [];
		var headers = this._findHeaderCells();
		for(var i = 0; i < headers.length; i++){
			this._headerConnects.push(dojo.connect(headers[i], "onfocus", this, "doColHeaderFocus"));
			this._headerConnects.push(dojo.connect(headers[i], "onblur", this, "doColHeaderBlur"));
		}
	},
	_findHeaderCells: function(){
		// This should be a one liner:
		//	dojo.query("th[tabindex=-1]", this.grid.viewsHeaderNode);
		// But there is a bug in dojo.query() for IE -- see trac #7037.
		var allHeads = dojo.query("th", this.grid.viewsHeaderNode);
		var headers = [];
		for (var i = 0; i < allHeads.length; i++){
			var aHead = allHeads[i];
			var hasTabIdx = dojo.hasAttr(aHead, "tabIndex");
			var tabindex = dojo.attr(aHead, "tabIndex");
			if (hasTabIdx && tabindex < 0) {
				headers.push(aHead);
			}
		}
		return headers;
	},
	_setActiveColHeader: function(/*Node*/colHeaderNode, /*Integer*/colFocusIdx, /*Integer*/ prevColFocusIdx){
		//console.log("setActiveColHeader() - colHeaderNode:colFocusIdx:prevColFocusIdx = " + colHeaderNode + ":" + colFocusIdx + ":" + prevColFocusIdx);
		dojo.attr(this.grid.domNode, "aria-activedescendant",colHeaderNode.id);
		if (prevColFocusIdx != null && prevColFocusIdx >= 0 && prevColFocusIdx != colFocusIdx){
			dojo.toggleClass(this._findHeaderCells()[prevColFocusIdx],this.focusClass,false);
		}
		dojo.toggleClass(colHeaderNode,this.focusClass, true);
		this._colHeadNode = colHeaderNode;
		this._colHeadFocusIdx = colFocusIdx;
		this._scrollHeader(this._colHeadFocusIdx);
	},
	scrollIntoView: function(){
		var info = (this.cell ? this._scrollInfo(this.cell) : null);
		if(!info || !info.s){
			return null;
		}
		var rt = this.grid.scroller.findScrollTop(this.rowIndex);
		// place cell within horizontal view
		if(info.n && info.sr){
			if(info.n.offsetLeft + info.n.offsetWidth > info.sr.l + info.sr.w){
				info.s.scrollLeft = info.n.offsetLeft + info.n.offsetWidth - info.sr.w;
			}else if(info.n.offsetLeft < info.sr.l){
				info.s.scrollLeft = info.n.offsetLeft;
			}
		}
		// place cell within vertical view
		if(info.r && info.sr){
			if(rt + info.r.offsetHeight > info.sr.t + info.sr.h){
				this.grid.setScrollTop(rt + info.r.offsetHeight - info.sr.h);
			}else if(rt < info.sr.t){
				this.grid.setScrollTop(rt);
			}
		}

		return info.s.scrollLeft;
	},
	_scrollInfo: function(cell, domNode){
		if(cell){
			var cl = cell,
				sbn = cl.view.scrollboxNode,
				sbnr = {
					w: sbn.clientWidth,
					l: sbn.scrollLeft,
					t: sbn.scrollTop,
					h: sbn.clientHeight
				},
				rn = cl.view.getRowNode(this.rowIndex);
			return {
				c: cl,
				s: sbn,
				sr: sbnr,
				n: (domNode ? domNode : cell.getNode(this.rowIndex)),
				r: rn
			};
		}
		return null;
	},
	_scrollHeader: function(currentIdx){
		var info = null;
		if(this._colHeadNode){
			var cell = this.grid.getCell(currentIdx);
			info = this._scrollInfo(cell, cell.getNode(0));
		}
		if(info && info.s && info.sr && info.n){
			// scroll horizontally as needed.
			var scroll = info.sr.l + info.sr.w;
			if(info.n.offsetLeft + info.n.offsetWidth > scroll){
				info.s.scrollLeft = info.n.offsetLeft + info.n.offsetWidth - info.sr.w;
			}else if(info.n.offsetLeft < info.sr.l){
				info.s.scrollLeft = info.n.offsetLeft;
			}else if(dojo.isIE <= 7 && cell && cell.view.headerNode){
				// Trac 7158: scroll dojoxGridHeader for IE7 and lower
				cell.view.headerNode.scrollLeft = info.s.scrollLeft;
			}
		}
	},
	_isHeaderHidden: function(){
		// summary:
		//		determine if the grid headers are hidden
		//		relies on documented technique of setting .dojoxGridHeader { display:none; }
		// returns: Boolean
		//		true if headers are hidden
		//		false if headers are not hidden
		
		var curView = this.focusView;
		if (!curView){
			// find one so we can determine if headers are hidden
			// there is no focusView after adding items to empty grid (test_data_grid_empty.html)
			for (var i = 0, cView; (cView = this.grid.views.views[i]); i++) {
				if(cView.headerNode ){
					curView=cView;
					break;
				}
			}
		}
		return (curView && dojo.getComputedStyle(curView.headerNode).display == "none");
	},
	colSizeAdjust: function (e, colIdx, delta){ // adjust the column specified by colIdx by the specified delta px
		var headers = this._findHeaderCells();
		var view = this.focusView;
		if (!view) {
			for (var i = 0, cView; (cView = this.grid.views.views[i]); i++) {
				// find first view with a tableMap in order to work with empty grid
				if(cView.header.tableMap.map ){
					view=cView;
					break;
				}
			}
		}
		var curHeader = headers[colIdx];
		if (!view || (colIdx == headers.length-1 && colIdx === 0)){
			return; // can't adjust single col. grid
		}
		view.content.baseDecorateEvent(e);
		// need to adjust event with header cell info since focus is no longer on header cell
		e.cellNode = curHeader; //this.findCellTarget(e.target, e.rowNode);
		e.cellIndex = view.content.getCellNodeIndex(e.cellNode);
		e.cell = (e.cellIndex >= 0 ? this.grid.getCell(e.cellIndex) : null);
		if (view.header.canResize(e)){
			var deltaObj = {
				l: delta
			};
			var drag = view.header.colResizeSetup(e,false);
			view.header.doResizeColumn(drag, null, deltaObj);
			view.update();
		}
	},
	styleRow: function(inRow){
		return;
	},
	setFocusIndex: function(inRowIndex, inCellIndex){
		// summary:
		//	focuses the given grid cell
		// inRowIndex: int
		//	grid row index
		// inCellIndex: int
		//	grid cell index
		this.setFocusCell(this.grid.getCell(inCellIndex), inRowIndex);
	},
	setFocusCell: function(inCell, inRowIndex){
		// summary:
		//	focuses the given grid cell
		// inCell: object
		//	grid cell object
		// inRowIndex: int
		//	grid row index
		if(inCell && !this.isFocusCell(inCell, inRowIndex)){
			this.tabbingOut = false;
			if (this._colHeadNode){
				this.blurHeader();
			}
			this._colHeadNode = this._colHeadFocusIdx = null;
			this.focusGridView();
			this._focusifyCellNode(false);
			this.cell = inCell;
			this.rowIndex = inRowIndex;
			this._focusifyCellNode(true);
		}
		// even if this cell isFocusCell, the document focus may need to be rejiggered
		// call opera on delay to prevent keypress from altering focus
		if(dojo.isOpera){
			setTimeout(dojo.hitch(this.grid, 'onCellFocus', this.cell, this.rowIndex), 1);
		}else{
			this.grid.onCellFocus(this.cell, this.rowIndex);
		}
	},
	next: function(){
		// summary:
		//	focus next grid cell
		if(this.cell){
			var row=this.rowIndex, col=this.cell.index+1, cc=this.grid.layout.cellCount-1, rc=this.grid.rowCount-1;
			if(col > cc){
				col = 0;
				row++;
			}
			if(row > rc){
				col = cc;
				row = rc;
			}
			if(this.grid.edit.isEditing()){ //when editing, only navigate to editable cells
				var nextCell = this.grid.getCell(col);
				if (!this.isLastFocusCell() && (!nextCell.editable ||
					this.grid.canEdit && !this.grid.canEdit(nextCell, row))){
					this.cell=nextCell;
					this.rowIndex=row;
					this.next();
					return;
				}
			}
			this.setFocusIndex(row, col);
		}
	},
	previous: function(){
		// summary:
		//	focus previous grid cell
		if(this.cell){
			var row=(this.rowIndex || 0), col=(this.cell.index || 0) - 1;
			if(col < 0){
				col = this.grid.layout.cellCount-1;
				row--;
			}
			if(row < 0){
				row = 0;
				col = 0;
			}
			if(this.grid.edit.isEditing()){ //when editing, only navigate to editable cells
				var prevCell = this.grid.getCell(col);
				if (!this.isFirstFocusCell() && !prevCell.editable){
					this.cell=prevCell;
					this.rowIndex=row;
					this.previous();
					return;
				}
			}
			this.setFocusIndex(row, col);
		}
	},
	move: function(inRowDelta, inColDelta) {
		// summary:
		//	focus grid cell or  simulate focus to column header based on position relative to current focus
		// inRowDelta: int
		// vertical distance from current focus
		// inColDelta: int
		// horizontal distance from current focus

		var colDir = inColDelta < 0 ? -1 : 1;
		// Handle column headers.
		if(this.isNavHeader()){
			var headers = this._findHeaderCells();
			var savedIdx = currentIdx = dojo.indexOf(headers, this._colHeadNode);
			currentIdx += inColDelta;
			while(currentIdx >=0 && currentIdx < headers.length && headers[currentIdx].style.display == "none"){
				// skip over hidden column headers
				currentIdx += colDir;
			}
			if((currentIdx >= 0) && (currentIdx < headers.length)){
				this._setActiveColHeader(headers[currentIdx],currentIdx, savedIdx);
			}
		}else{
			if(this.cell){
				// Handle grid proper.
				var sc = this.grid.scroller,
					r = this.rowIndex,
					rc = this.grid.rowCount-1,
					row = Math.min(rc, Math.max(0, r+inRowDelta));
				if(inRowDelta){
					if(inRowDelta>0){
						if(row > sc.getLastPageRow(sc.page)){
							//need to load additional data, let scroller do that
							this.grid.setScrollTop(this.grid.scrollTop+sc.findScrollTop(row)-sc.findScrollTop(r));
						}
					}else if(inRowDelta<0){
						if(row <= sc.getPageRow(sc.page)){
							//need to load additional data, let scroller do that
							this.grid.setScrollTop(this.grid.scrollTop-sc.findScrollTop(r)-sc.findScrollTop(row));
						}
					}
				}
				var cc = this.grid.layout.cellCount-1,
				i = this.cell.index,
				col = Math.min(cc, Math.max(0, i+inColDelta));
				var cell = this.grid.getCell(col);
				while(col>=0 && col < cc && cell && cell.hidden === true){
					// skip hidden cells
					col += colDir;
					cell = this.grid.getCell(col);
				}
				if (!cell || cell.hidden === true){
					// don't change col if would move to hidden
					col = i;
				}
				//skip hidden row|cell
				var n = cell.getNode(row);
				if(!n && inRowDelta){
					if((row + inRowDelta) >= 0 && (row + inRowDelta) <= rc){
						this.move(inRowDelta > 0 ? ++inRowDelta : --inRowDelta, inColDelta);
					}
					return;
				}else if((!n || dojo.style(n, "display") === "none") && inColDelta){
					if((col + inRowDelta) >= 0 && (col + inRowDelta) <= cc){
						this.move(inRowDelta, inColDelta > 0 ? ++inColDelta : --inColDelta);
					}
					return;
				}
				this.setFocusIndex(row, col);
				if(inRowDelta){
					this.grid.updateRow(r);
				}
			}
		}
	},
	previousKey: function(e){
		if(this.grid.edit.isEditing()){
			dojo.stopEvent(e);
			this.previous();
		}else if(!this.isNavHeader() && !this._isHeaderHidden()) {
			this.grid.domNode.focus(); // will call doFocus and set focus into header.
			dojo.stopEvent(e);
		}else{
			this.tabOut(this.grid.domNode);
			if (this._colHeadFocusIdx != null) { // clear grid header focus
				dojo.toggleClass(this._findHeaderCells()[this._colHeadFocusIdx], this.focusClass, false);
				this._colHeadFocusIdx = null;
			}
			this._focusifyCellNode(false);
		}
	},
	nextKey: function(e) {
		var isEmpty = (this.grid.rowCount === 0);
		if(e.target === this.grid.domNode && this._colHeadFocusIdx == null){
			this.focusHeader();
			dojo.stopEvent(e);
		}else if(this.isNavHeader()){
			// if tabbing from col header, then go to grid proper.
			this.blurHeader();
			if(!this.findAndFocusGridCell()){
				this.tabOut(this.grid.lastFocusNode);
			}
			this._colHeadNode = this._colHeadFocusIdx= null;
		}else if(this.grid.edit.isEditing()){
			dojo.stopEvent(e);
			this.next();
		}else{
			this.tabOut(this.grid.lastFocusNode);
		}
	},
	tabOut: function(inFocusNode){
		this.tabbingOut = true;
		inFocusNode.focus();
	},
	focusGridView: function(){
		dojox.grid.util.fire(this.focusView, "focus");
	},
	focusGrid: function(inSkipFocusCell){
		this.focusGridView();
		this._focusifyCellNode(true);
	},
	findAndFocusGridCell: function(){
		// summary:
		//		find the first focusable grid cell
		// returns: Boolean
		//		true if focus was set to a cell
		//		false if no cell found to set focus onto
		
		var didFocus = true;
		var isEmpty = (this.grid.rowCount === 0); // If grid is empty this.grid.rowCount == 0
		if (this.isNoFocusCell() && !isEmpty){
			var cellIdx = 0;
			var cell = this.grid.getCell(cellIdx);
			if (cell.hidden) {
				// if first cell isn't visible, use _colHeadFocusIdx
				// could also use a while loop to find first visible cell - not sure that is worth it
				cellIdx = this.isNavHeader() ? this._colHeadFocusIdx : 0;
			}
			this.setFocusIndex(0, cellIdx);
		}
		else if (this.cell && !isEmpty){
			if (this.focusView && !this.focusView.rowNodes[this.rowIndex]){
				// if rowNode for current index is undefined (likely as a result of a sort and because of #7304)
				// scroll to that row
				this.grid.scrollToRow(this.rowIndex);
			}
			this.focusGrid();
		}else {
			didFocus = false;
		}
		this._colHeadNode = this._colHeadFocusIdx= null;
		return didFocus;
	},
	focusHeader: function(){
		var headerNodes = this._findHeaderCells();
		var saveColHeadFocusIdx = this._colHeadFocusIdx;
		if (this._isHeaderHidden()){
			// grid header is hidden, focus a cell
			this.findAndFocusGridCell();
		}
		else if (!this._colHeadFocusIdx) {
			if (this.isNoFocusCell()) {
				this._colHeadFocusIdx = 0;
			}
			else {
				this._colHeadFocusIdx = this.cell.index;
			}
		}
		this._colHeadNode = headerNodes[this._colHeadFocusIdx];
		while(this._colHeadNode && this._colHeadFocusIdx >=0 && this._colHeadFocusIdx < headerNodes.length &&
				this._colHeadNode.style.display == "none"){
			// skip over hidden column headers
			this._colHeadFocusIdx++;
			this._colHeadNode = headerNodes[this._colHeadFocusIdx];
		}
		if(this._colHeadNode && this._colHeadNode.style.display != "none"){
			// Column header cells know longer receive actual focus.  So, for keyboard invocation of
			// contextMenu to work, the contextMenu must be bound to the grid.domNode rather than the viewsHeaderNode.
			// unbind the contextmenu from the viewsHeaderNode and to the grid when header cells are active.  Reset
			// the binding back to the viewsHeaderNode when header cells are no longer acive (in blurHeader) #10483
			if (this.headerMenu && this._contextMenuBindNode != this.grid.domNode){
				this.headerMenu.unBindDomNode(this.grid.viewsHeaderNode);
				this.headerMenu.bindDomNode(this.grid.domNode);
				this._contextMenuBindNode = this.grid.domNode;
			}
			this._setActiveColHeader(this._colHeadNode, this._colHeadFocusIdx, saveColHeadFocusIdx);
			this._scrollHeader(this._colHeadFocusIdx);
			this._focusifyCellNode(false);
		}else {
			// all col head nodes are hidden - focus the grid
			this.findAndFocusGridCell();
		}
	},
	blurHeader: function(){
		dojo.removeClass(this._colHeadNode, this.focusClass);
		dojo.removeAttr(this.grid.domNode,"aria-activedescendant");
		// reset contextMenu onto viewsHeaderNode so right mouse on header will invoke (see focusHeader)
		if (this.headerMenu && this._contextMenuBindNode == this.grid.domNode) {
			var viewsHeader = this.grid.viewsHeaderNode;
			this.headerMenu.unBindDomNode(this.grid.domNode);
			this.headerMenu.bindDomNode(viewsHeader);
			this._contextMenuBindNode = viewsHeader;
		}
	},
	doFocus: function(e){
		// trap focus only for grid dom node
		if(e && e.target != e.currentTarget){
			dojo.stopEvent(e);
			return;
		}
		// do not focus for scrolling if grid is about to blur
		if(!this.tabbingOut){
			this.focusHeader();
		}
		this.tabbingOut = false;
		dojo.stopEvent(e);
	},
	doBlur: function(e){
		dojo.stopEvent(e);	// FF2
	},
	doContextMenu: function(e){
	//stop contextMenu event if no header Menu to prevent default/browser contextMenu
		if (!this.headerMenu){
			dojo.stopEvent(e);
		}
	},
	doLastNodeFocus: function(e){
		if (this.tabbingOut){
			this._focusifyCellNode(false);
		}else if(this.grid.rowCount >0){
			if (this.isNoFocusCell()){
				this.setFocusIndex(0,0);
			}
			this._focusifyCellNode(true);
		}else {
			this.focusHeader();
		}
		this.tabbingOut = false;
		dojo.stopEvent(e);	 // FF2
	},
	doLastNodeBlur: function(e){
		dojo.stopEvent(e);	 // FF2
	},
	doColHeaderFocus: function(e){
		this._setActiveColHeader(e.target,dojo.attr(e.target, "idx"),this._colHeadFocusIdx);
		this._scrollHeader(this.getHeaderIndex());
		dojo.stopEvent(e);
	},
	doColHeaderBlur: function(e){
		dojo.toggleClass(e.target, this.focusClass, false);
	}
});

}

if(!dojo._hasResource["dojox.grid._EditManager"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._EditManager"] = true;
dojo.provide("dojox.grid._EditManager");



dojo.declare("dojox.grid._EditManager", null, {
	// summary:
	//		Controls grid cell editing process. Owned by grid and used internally for editing.
	constructor: function(inGrid){
		// inGrid: dojox.Grid
		//		The dojox.Grid this editor should be attached to
		this.grid = inGrid;
		if(dojo.isIE){
			this.connections = [dojo.connect(document.body, "onfocus", dojo.hitch(this, "_boomerangFocus"))];
		}else{
			this.connections = [dojo.connect(this.grid, 'onBlur', this, 'apply')];
		}
	},
	
	info: {},

	destroy: function(){
		dojo.forEach(this.connections,dojo.disconnect);
	},

	cellFocus: function(inCell, inRowIndex){
		// summary:
		//		Invoke editing when cell is focused
		// inCell: cell object
		//		Grid cell object
		// inRowIndex: Integer
		//		Grid row index
		if(this.grid.singleClickEdit || this.isEditRow(inRowIndex)){
			// if same row or quick editing, edit
			this.setEditCell(inCell, inRowIndex);
		}else{
			// otherwise, apply any pending row edits
			this.apply();
		}
		// if dynamic or static editing...
		if(this.isEditing() || (inCell && inCell.editable && inCell.alwaysEditing)){
			// let the editor focus itself as needed
			this._focusEditor(inCell, inRowIndex);
		}
	},

	rowClick: function(e){
		if(this.isEditing() && !this.isEditRow(e.rowIndex)){
			this.apply();
		}
	},

	styleRow: function(inRow){
		if(inRow.index == this.info.rowIndex){
			inRow.customClasses += ' dojoxGridRowEditing';
		}
	},

	dispatchEvent: function(e){
		var c = e.cell, ed = (c && c["editable"]) ? c : 0;
		return ed && ed.dispatchEvent(e.dispatch, e);
	},

	// Editing
	isEditing: function(){
		// summary:
		//		Indicates editing state of the grid.
		// returns: Boolean
		//	 	True if grid is actively editing
		return this.info.rowIndex !== undefined;
	},

	isEditCell: function(inRowIndex, inCellIndex){
		// summary:
		//		Indicates if the given cell is being edited.
		// inRowIndex: Integer
		//		Grid row index
		// inCellIndex: Integer
		//		Grid cell index
		// returns: Boolean
		//	 	True if given cell is being edited
		return (this.info.rowIndex === inRowIndex) && (this.info.cell.index == inCellIndex);
	},

	isEditRow: function(inRowIndex){
		// summary:
		//		Indicates if the given row is being edited.
		// inRowIndex: Integer
		//		Grid row index
		// returns: Boolean
		//	 	True if given row is being edited
		return this.info.rowIndex === inRowIndex;
	},

	setEditCell: function(inCell, inRowIndex){
		// summary:
		//		Set the given cell to be edited
		// inRowIndex: Integer
		//		Grid row index
		// inCell: Object
		//		Grid cell object
		if(!this.isEditCell(inRowIndex, inCell.index) && this.grid.canEdit && this.grid.canEdit(inCell, inRowIndex)){
			this.start(inCell, inRowIndex, this.isEditRow(inRowIndex) || inCell.editable);
		}
	},

	_focusEditor: function(inCell, inRowIndex){
		dojox.grid.util.fire(inCell, "focus", [inRowIndex]);
	},

	focusEditor: function(){
		if(this.isEditing()){
			this._focusEditor(this.info.cell, this.info.rowIndex);
		}
	},

	// implement fix for focus boomerang effect on IE
	_boomerangWindow: 500,
	_shouldCatchBoomerang: function(){
		return this._catchBoomerang > new Date().getTime();
	},
	_boomerangFocus: function(){
		//console.log("_boomerangFocus");
		if(this._shouldCatchBoomerang()){
			// make sure we don't utterly lose focus
			this.grid.focus.focusGrid();
			// let the editor focus itself as needed
			this.focusEditor();
			// only catch once
			this._catchBoomerang = 0;
		}
	},
	_doCatchBoomerang: function(){
		// give ourselves a few ms to boomerang IE focus effects
		if(dojo.isIE){this._catchBoomerang = new Date().getTime() + this._boomerangWindow;}
	},
	// end boomerang fix API

	start: function(inCell, inRowIndex, inEditing){
		this.grid.beginUpdate();
		this.editorApply();
		if(this.isEditing() && !this.isEditRow(inRowIndex)){
			this.applyRowEdit();
			this.grid.updateRow(inRowIndex);
		}
		if(inEditing){
			this.info = { cell: inCell, rowIndex: inRowIndex };
			this.grid.doStartEdit(inCell, inRowIndex);
			this.grid.updateRow(inRowIndex);
		}else{
			this.info = {};
		}
		this.grid.endUpdate();
		// make sure we don't utterly lose focus
		this.grid.focus.focusGrid();
		// let the editor focus itself as needed
		this._focusEditor(inCell, inRowIndex);
		// give ourselves a few ms to boomerang IE focus effects
		this._doCatchBoomerang();
	},

	_editorDo: function(inMethod){
		var c = this.info.cell;
		//c && c.editor && c.editor[inMethod](c, this.info.rowIndex);
		if(c && c.editable){
			c[inMethod](this.info.rowIndex);
		}
	},

	editorApply: function(){
		this._editorDo("apply");
	},

	editorCancel: function(){
		this._editorDo("cancel");
	},

	applyCellEdit: function(inValue, inCell, inRowIndex){
		if(this.grid.canEdit(inCell, inRowIndex)){
			this.grid.doApplyCellEdit(inValue, inRowIndex, inCell.field);
		}
	},

	applyRowEdit: function(){
		this.grid.doApplyEdit(this.info.rowIndex, this.info.cell.field);
	},

	apply: function(){
		// summary:
		//		Apply a grid edit
		if(this.isEditing()){
			this.grid.beginUpdate();
			this.editorApply();
			this.applyRowEdit();
			this.info = {};
			this.grid.endUpdate();
			this.grid.focus.focusGrid();
			this._doCatchBoomerang();
		}
	},

	cancel: function(){
		// summary:
		//		Cancel a grid edit
		if(this.isEditing()){
			this.grid.beginUpdate();
			this.editorCancel();
			this.info = {};
			this.grid.endUpdate();
			this.grid.focus.focusGrid();
			this._doCatchBoomerang();
		}
	},

	save: function(inRowIndex, inView){
		// summary:
		//		Save the grid editing state
		// inRowIndex: Integer
		//		Grid row index
		// inView: Object
		//		Grid view
		var c = this.info.cell;
		if(this.isEditRow(inRowIndex) && (!inView || c.view==inView) && c.editable){
			c.save(c, this.info.rowIndex);
		}
	},

	restore: function(inView, inRowIndex){
		// summary:
		//		Restores the grid editing state
		// inRowIndex: Integer
		//		Grid row index
		// inView: Object
		//		Grid view
		var c = this.info.cell;
		if(this.isEditRow(inRowIndex) && c.view == inView && c.editable){
			c.restore(c, this.info.rowIndex);
		}
	}
});

}

if(!dojo._hasResource['dojox.grid.Selection']){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource['dojox.grid.Selection'] = true;
dojo.provide('dojox.grid.Selection');

dojo.declare("dojox.grid.Selection", null, {
	// summary:
	//		Manages row selection for grid. Owned by grid and used internally
	//		for selection. Override to implement custom selection.

	constructor: function(inGrid){
		this.grid = inGrid;
		this.selected = [];

		this.setMode(inGrid.selectionMode);
	},

	mode: 'extended',

	selected: null,
	updating: 0,
	selectedIndex: -1,

	setMode: function(mode){
		if(this.selected.length){
			this.deselectAll();
		}
		if(mode != 'extended' && mode != 'multiple' && mode != 'single' && mode != 'none'){
			this.mode = 'extended';
		}else{
			this.mode = mode;
		}
	},

	onCanSelect: function(inIndex){
		return this.grid.onCanSelect(inIndex);
	},

	onCanDeselect: function(inIndex){
		return this.grid.onCanDeselect(inIndex);
	},

	onSelected: function(inIndex){
	},

	onDeselected: function(inIndex){
	},

	//onSetSelected: function(inIndex, inSelect) { };
	onChanging: function(){
	},

	onChanged: function(){
	},

	isSelected: function(inIndex){
		if(this.mode == 'none'){
			return false;
		}
		return this.selected[inIndex];
	},

	getFirstSelected: function(){
		if(!this.selected.length||this.mode == 'none'){ return -1; }
		for(var i=0, l=this.selected.length; i<l; i++){
			if(this.selected[i]){
				return i;
			}
		}
		return -1;
	},

	getNextSelected: function(inPrev){
		if(this.mode == 'none'){ return -1; }
		for(var i=inPrev+1, l=this.selected.length; i<l; i++){
			if(this.selected[i]){
				return i;
			}
		}
		return -1;
	},

	getSelected: function(){
		var result = [];
		for(var i=0, l=this.selected.length; i<l; i++){
			if(this.selected[i]){
				result.push(i);
			}
		}
		return result;
	},

	getSelectedCount: function(){
		var c = 0;
		for(var i=0; i<this.selected.length; i++){
			if(this.selected[i]){
				c++;
			}
		}
		return c;
	},

	_beginUpdate: function(){
		if(this.updating === 0){
			this.onChanging();
		}
		this.updating++;
	},

	_endUpdate: function(){
		this.updating--;
		if(this.updating === 0){
			this.onChanged();
		}
	},

	select: function(inIndex){
		if(this.mode == 'none'){ return; }
		if(this.mode != 'multiple'){
			this.deselectAll(inIndex);
			this.addToSelection(inIndex);
		}else{
			this.toggleSelect(inIndex);
		}
	},

	addToSelection: function(inIndex){
		if(this.mode == 'none'){ return; }
		if(dojo.isArray(inIndex)){
			dojo.forEach(inIndex, this.addToSelection, this);
			return;
		}
		inIndex = Number(inIndex);
		if(this.selected[inIndex]){
			this.selectedIndex = inIndex;
		}else{
			if(this.onCanSelect(inIndex) !== false){
				this.selectedIndex = inIndex;
				var rowNode = this.grid.getRowNode(inIndex);
				if(rowNode){
					dojo.attr(rowNode,"aria-selected","true");
				}
				this._beginUpdate();
				this.selected[inIndex] = true;
				//this.grid.onSelected(inIndex);
				this.onSelected(inIndex);
				//this.onSetSelected(inIndex, true);
				this._endUpdate();
			}
		}
	},

	deselect: function(inIndex){
		if(this.mode == 'none'){ return; }
		if(dojo.isArray(inIndex)){
			dojo.forEach(inIndex, this.deselect, this);
			return;
		}
		inIndex = Number(inIndex);
		if(this.selectedIndex == inIndex){
			this.selectedIndex = -1;
		}
		if(this.selected[inIndex]){
			if(this.onCanDeselect(inIndex) === false){
				return;
			}
			var rowNode = this.grid.getRowNode(inIndex);
			if(rowNode){
				dojo.attr(rowNode,"aria-selected","false");
			}
			this._beginUpdate();
			delete this.selected[inIndex];
			//this.grid.onDeselected(inIndex);
			this.onDeselected(inIndex);
			//this.onSetSelected(inIndex, false);
			this._endUpdate();
		}
	},

	setSelected: function(inIndex, inSelect){
		this[(inSelect ? 'addToSelection' : 'deselect')](inIndex);
	},

	toggleSelect: function(inIndex){
		if(dojo.isArray(inIndex)){
			dojo.forEach(inIndex, this.toggleSelect, this);
			return;
		}
		this.setSelected(inIndex, !this.selected[inIndex]);
	},

	_range: function(inFrom, inTo, func){
		var s = (inFrom >= 0 ? inFrom : inTo), e = inTo;
		if(s > e){
			e = s;
			s = inTo;
		}
		for(var i=s; i<=e; i++){
			func(i);
		}
	},

	selectRange: function(inFrom, inTo){
		this._range(inFrom, inTo, dojo.hitch(this, "addToSelection"));
	},

	deselectRange: function(inFrom, inTo){
		this._range(inFrom, inTo, dojo.hitch(this, "deselect"));
	},

	insert: function(inIndex){
		this.selected.splice(inIndex, 0, false);
		if(this.selectedIndex >= inIndex){
			this.selectedIndex++;
		}
	},

	remove: function(inIndex){
		this.selected.splice(inIndex, 1);
		if(this.selectedIndex >= inIndex){
			this.selectedIndex--;
		}
	},

	deselectAll: function(inExcept){
		for(var i in this.selected){
			if((i!=inExcept)&&(this.selected[i]===true)){
				this.deselect(i);
			}
		}
	},

	clickSelect: function(inIndex, inCtrlKey, inShiftKey){
		if(this.mode == 'none'){ return; }
		this._beginUpdate();
		if(this.mode != 'extended'){
			this.select(inIndex);
		}else{
			var lastSelected = this.selectedIndex;
			if(!inCtrlKey){
				this.deselectAll(inIndex);
			}
			if(inShiftKey){
				this.selectRange(lastSelected, inIndex);
			}else if(inCtrlKey){
				this.toggleSelect(inIndex);
			}else{
				this.addToSelection(inIndex);
			}
		}
		this._endUpdate();
	},

	clickSelectEvent: function(e){
		this.clickSelect(e.rowIndex, dojo.isCopyKey(e), e.shiftKey);
	},

	clear: function(){
		this._beginUpdate();
		this.deselectAll();
		this._endUpdate();
	}
});

}

if(!dojo._hasResource["dojox.grid._Events"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._Events"] = true;
dojo.provide("dojox.grid._Events");

dojo.declare("dojox.grid._Events", null, {
	// summary:
	//		_Grid mixin that provides default implementations for grid events.
	// description:
	//		Default synthetic events dispatched for _Grid. dojo.connect to events to
	//		retain default implementation or override them for custom handling.
	
	// cellOverClass: String
	// 		css class to apply to grid cells over which the cursor is placed.
	cellOverClass: "dojoxGridCellOver",
	
	onKeyEvent: function(e){
		// summary: top level handler for Key Events
		this.dispatchKeyEvent(e);
	},

	onContentEvent: function(e){
		// summary: Top level handler for Content events
		this.dispatchContentEvent(e);
	},

	onHeaderEvent: function(e){
		// summary: Top level handler for header events
		this.dispatchHeaderEvent(e);
	},

	onStyleRow: function(inRow){
		// summary:
		//		Perform row styling on a given row. Called whenever row styling is updated.
		//
		// inRow: Object
		// 		Object containing row state information: selected, true if the row is selcted; over:
		// 		true of the mouse is over the row; odd: true if the row is odd. Use customClasses and
		// 		customStyles to control row css classes and styles; both properties are strings.
		//
		// example: onStyleRow({ selected: true, over:true, odd:false })
		var i = inRow;
		i.customClasses += (i.odd?" dojoxGridRowOdd":"") + (i.selected?" dojoxGridRowSelected":"") + (i.over?" dojoxGridRowOver":"");
		this.focus.styleRow(inRow);
		this.edit.styleRow(inRow);
	},
	
	onKeyDown: function(e){
		// summary:
		// 		Grid key event handler. By default enter begins editing and applies edits, escape cancels an edit,
		// 		tab, shift-tab, and arrow keys move grid cell focus.
		if(e.altKey || e.metaKey){
			return;
		}
		var dk = dojo.keys;
		var colIdx;
		switch(e.keyCode){
			case dk.ESCAPE:
				this.edit.cancel();
				break;
			case dk.ENTER:
				if(!this.edit.isEditing()){
					colIdx = this.focus.getHeaderIndex();
					if(colIdx >= 0) {
						this.setSortIndex(colIdx);
						break;
					}else {
						this.selection.clickSelect(this.focus.rowIndex, dojo.isCopyKey(e), e.shiftKey);
					}
					dojo.stopEvent(e);
				}
				if(!e.shiftKey){
					var isEditing = this.edit.isEditing();
					this.edit.apply();
					if(!isEditing){
						this.edit.setEditCell(this.focus.cell, this.focus.rowIndex);
					}
				}
				if (!this.edit.isEditing()){
					var curView = this.focus.focusView || this.views.views[0];  //if no focusView than only one view
					curView.content.decorateEvent(e);
					this.onRowClick(e);
					dojo.stopEvent(e);
				}
				break;
			case dk.SPACE:
				if(!this.edit.isEditing()){
					colIdx = this.focus.getHeaderIndex();
					if(colIdx >= 0) {
						this.setSortIndex(colIdx);
						break;
					}else {
						this.selection.clickSelect(this.focus.rowIndex, dojo.isCopyKey(e), e.shiftKey);
					}
					dojo.stopEvent(e);
				}
				break;
			case dk.TAB:
				this.focus[e.shiftKey ? 'previousKey' : 'nextKey'](e);
				break;
			case dk.LEFT_ARROW:
			case dk.RIGHT_ARROW:
				if(!this.edit.isEditing()){
					var keyCode = e.keyCode;  // IE seems to lose after stopEvent when modifier keys
					dojo.stopEvent(e);
					colIdx = this.focus.getHeaderIndex();
					if (colIdx >= 0 && (e.shiftKey && e.ctrlKey)){
						this.focus.colSizeAdjust(e, colIdx, (keyCode == dk.LEFT_ARROW ? -1 : 1)*5);
					}
					else{
						var offset = (keyCode == dk.LEFT_ARROW) ? 1 : -1;
						if(dojo._isBodyLtr()){ offset *= -1; }
						this.focus.move(0, offset);
					}
				}
				break;
			case dk.UP_ARROW:
				if(!this.edit.isEditing() && this.focus.rowIndex !== 0){
					dojo.stopEvent(e);
					this.focus.move(-1, 0);
				}
				break;
			case dk.DOWN_ARROW:
				if(!this.edit.isEditing() && this.focus.rowIndex+1 != this.rowCount){
					dojo.stopEvent(e);
					this.focus.move(1, 0);
				}
				break;
			case dk.PAGE_UP:
				if(!this.edit.isEditing() && this.focus.rowIndex !== 0){
					dojo.stopEvent(e);
					if(this.focus.rowIndex != this.scroller.firstVisibleRow+1){
						this.focus.move(this.scroller.firstVisibleRow-this.focus.rowIndex, 0);
					}else{
						this.setScrollTop(this.scroller.findScrollTop(this.focus.rowIndex-1));
						this.focus.move(this.scroller.firstVisibleRow-this.scroller.lastVisibleRow+1, 0);
					}
				}
				break;
			case dk.PAGE_DOWN:
				if(!this.edit.isEditing() && this.focus.rowIndex+1 != this.rowCount){
					dojo.stopEvent(e);
					if(this.focus.rowIndex != this.scroller.lastVisibleRow-1){
						this.focus.move(this.scroller.lastVisibleRow-this.focus.rowIndex-1, 0);
					}else{
						this.setScrollTop(this.scroller.findScrollTop(this.focus.rowIndex+1));
						this.focus.move(this.scroller.lastVisibleRow-this.scroller.firstVisibleRow-1, 0);
					}
				}
				break;
			default:
				break;
		}
	},
	
	onMouseOver: function(e){
		// summary:
		//		Event fired when mouse is over the grid.
		// e: Event
		//		Decorated event object contains reference to grid, cell, and rowIndex
		e.rowIndex == -1 ? this.onHeaderCellMouseOver(e) : this.onCellMouseOver(e);
	},
	
	onMouseOut: function(e){
		// summary:
		//		Event fired when mouse moves out of the grid.
		// e: Event
		//		Decorated event object that contains reference to grid, cell, and rowIndex
		e.rowIndex == -1 ? this.onHeaderCellMouseOut(e) : this.onCellMouseOut(e);
	},
	
	onMouseDown: function(e){
		// summary:
		//		Event fired when mouse is down inside grid.
		// e: Event
		//		Decorated event object that contains reference to grid, cell, and rowIndex
		e.rowIndex == -1 ? this.onHeaderCellMouseDown(e) : this.onCellMouseDown(e);
	},
	
	onMouseOverRow: function(e){
		// summary:
		//		Event fired when mouse is over any row (data or header).
		// e: Event
		//		Decorated event object contains reference to grid, cell, and rowIndex
		if(!this.rows.isOver(e.rowIndex)){
			this.rows.setOverRow(e.rowIndex);
			e.rowIndex == -1 ? this.onHeaderMouseOver(e) : this.onRowMouseOver(e);
		}
	},
	onMouseOutRow: function(e){
		// summary:
		//		Event fired when mouse moves out of any row (data or header).
		// e: Event
		//		Decorated event object contains reference to grid, cell, and rowIndex
		if(this.rows.isOver(-1)){
			this.onHeaderMouseOut(e);
		}else if(!this.rows.isOver(-2)){
			this.rows.setOverRow(-2);
			this.onRowMouseOut(e);
		}
	},
	
	onMouseDownRow: function(e){
		// summary:
		//		Event fired when mouse is down inside grid row
		// e: Event
		//		Decorated event object that contains reference to grid, cell, and rowIndex
		if(e.rowIndex != -1)
			this.onRowMouseDown(e);
	},

	// cell events
	onCellMouseOver: function(e){
		// summary:
		//		Event fired when mouse is over a cell.
		// e: Event
		//		Decorated event object contains reference to grid, cell, and rowIndex
		if(e.cellNode){
			dojo.addClass(e.cellNode, this.cellOverClass);
		}
	},
	
	onCellMouseOut: function(e){
		// summary:
		//		Event fired when mouse moves out of a cell.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
		if(e.cellNode){
			dojo.removeClass(e.cellNode, this.cellOverClass);
		}
	},
	
	onCellMouseDown: function(e){
		// summary:
		//		Event fired when mouse is down in a header cell.
		// e: Event
		// 		Decorated event object which contains reference to grid, cell, and rowIndex
	},

	onCellClick: function(e){
		// summary:
		//		Event fired when a cell is clicked.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
		this._click[0] = this._click[1];
		this._click[1] = e;
		if(!this.edit.isEditCell(e.rowIndex, e.cellIndex)){
			this.focus.setFocusCell(e.cell, e.rowIndex);
		}
		this.onRowClick(e);
	},

	onCellDblClick: function(e){
		// summary:
		//		Event fired when a cell is double-clicked.
		// e: Event
		//		Decorated event object contains reference to grid, cell, and rowIndex
		if(this._click.length > 1 && dojo.isIE){
			this.edit.setEditCell(this._click[1].cell, this._click[1].rowIndex);
		}else if(this._click.length > 1 && this._click[0].rowIndex != this._click[1].rowIndex){
			this.edit.setEditCell(this._click[0].cell, this._click[0].rowIndex);
		}else{
			this.edit.setEditCell(e.cell, e.rowIndex);
		}
		this.onRowDblClick(e);
	},

	onCellContextMenu: function(e){
		// summary:
		//		Event fired when a cell context menu is accessed via mouse right click.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
		this.onRowContextMenu(e);
	},

	onCellFocus: function(inCell, inRowIndex){
		// summary:
		//		Event fired when a cell receives focus.
		// inCell: Object
		//		Cell object containing properties of the grid column.
		// inRowIndex: Integer
		//		Index of the grid row
		this.edit.cellFocus(inCell, inRowIndex);
	},

	// row events
	onRowClick: function(e){
		// summary:
		//		Event fired when a row is clicked.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
		this.edit.rowClick(e);
		this.selection.clickSelectEvent(e);
	},

	onRowDblClick: function(e){
		// summary:
		//		Event fired when a row is double clicked.
		// e: Event
		//		decorated event object which contains reference to grid, cell, and rowIndex
	},

	onRowMouseOver: function(e){
		// summary:
		//		Event fired when mouse moves over a data row.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
	},

	onRowMouseOut: function(e){
		// summary:
		//		Event fired when mouse moves out of a data row.
		// e: Event
		// 		Decorated event object contains reference to grid, cell, and rowIndex
	},
	
	onRowMouseDown: function(e){
		// summary:
		//		Event fired when mouse is down in a row.
		// e: Event
		// 		Decorated event object which contains reference to grid, cell, and rowIndex
	},

	onRowContextMenu: function(e){
		// summary:
		//		Event fired when a row context menu is accessed via mouse right click.
		// e: Event
		// 		Decorated event object which contains reference to grid, cell, and rowIndex
		dojo.stopEvent(e);
	},

	// header events
	onHeaderMouseOver: function(e){
		// summary:
		//		Event fired when mouse moves over the grid header.
		// e: Event
		// 		Decorated event object contains reference to grid, cell, and rowIndex
	},

	onHeaderMouseOut: function(e){
		// summary:
		//		Event fired when mouse moves out of the grid header.
		// e: Event
		// 		Decorated event object which contains reference to grid, cell, and rowIndex
	},

	onHeaderCellMouseOver: function(e){
		// summary:
		//		Event fired when mouse moves over a header cell.
		// e: Event
		// 		Decorated event object which contains reference to grid, cell, and rowIndex
		if(e.cellNode){
			dojo.addClass(e.cellNode, this.cellOverClass);
		}
	},

	onHeaderCellMouseOut: function(e){
		// summary:
		//		Event fired when mouse moves out of a header cell.
		// e: Event
		// 		Decorated event object which contains reference to grid, cell, and rowIndex
		if(e.cellNode){
			dojo.removeClass(e.cellNode, this.cellOverClass);
		}
	},
	
	onHeaderCellMouseDown: function(e) {
		// summary:
		//		Event fired when mouse is down in a header cell.
		// e: Event
		// 		Decorated event object which contains reference to grid, cell, and rowIndex
	},

	onHeaderClick: function(e){
		// summary:
		//		Event fired when the grid header is clicked.
		// e: Event
		// Decorated event object which contains reference to grid, cell, and rowIndex
	},

	onHeaderCellClick: function(e){
		// summary:
		//		Event fired when a header cell is clicked.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
		this.setSortIndex(e.cell.index);
		this.onHeaderClick(e);
	},

	onHeaderDblClick: function(e){
		// summary:
		//		Event fired when the grid header is double clicked.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
	},

	onHeaderCellDblClick: function(e){
		// summary:
		//		Event fired when a header cell is double clicked.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
		this.onHeaderDblClick(e);
	},

	onHeaderCellContextMenu: function(e){
		// summary:
		//		Event fired when a header cell context menu is accessed via mouse right click.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
		this.onHeaderContextMenu(e);
	},

	onHeaderContextMenu: function(e){
		// summary:
		//		Event fired when the grid header context menu is accessed via mouse right click.
		// e: Event
		//		Decorated event object which contains reference to grid, cell, and rowIndex
		if(!this.headerMenu){
			dojo.stopEvent(e);
		}
	},

	// editing
	onStartEdit: function(inCell, inRowIndex){
		// summary:
		//		Event fired when editing is started for a given grid cell
		// inCell: Object
		//		Cell object containing properties of the grid column.
		// inRowIndex: Integer
		//		Index of the grid row
	},

	onApplyCellEdit: function(inValue, inRowIndex, inFieldIndex){
		// summary:
		//		Event fired when editing is applied for a given grid cell
		// inValue: String
		//		Value from cell editor
		// inRowIndex: Integer
		//		Index of the grid row
		// inFieldIndex: Integer
		//		Index in the grid's data store
	},

	onCancelEdit: function(inRowIndex){
		// summary:
		//		Event fired when editing is cancelled for a given grid cell
		// inRowIndex: Integer
		//		Index of the grid row
	},

	onApplyEdit: function(inRowIndex){
		// summary:
		//		Event fired when editing is applied for a given grid row
		// inRowIndex: Integer
		//		Index of the grid row
	},

	onCanSelect: function(inRowIndex){
		// summary:
		//		Event to determine if a grid row may be selected
		// inRowIndex: Integer
		//		Index of the grid row
		// returns: Boolean
		//		true if the row can be selected
		return true;
	},

	onCanDeselect: function(inRowIndex){
		// summary:
		//		Event to determine if a grid row may be deselected
		// inRowIndex: Integer
		//		Index of the grid row
		// returns: Boolean
		//		true if the row can be deselected
		return true;
	},

	onSelected: function(inRowIndex){
		// summary:
		//		Event fired when a grid row is selected
		// inRowIndex: Integer
		//		Index of the grid row
		this.updateRowStyles(inRowIndex);
	},

	onDeselected: function(inRowIndex){
		// summary:
		//		Event fired when a grid row is deselected
		// inRowIndex: Integer
		//		Index of the grid row
		this.updateRowStyles(inRowIndex);
	},

	onSelectionChanged: function(){
	}
});

}

if(!dojo._hasResource["dojox.grid._Grid"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid._Grid"] = true;
dojo.provide("dojox.grid._Grid");




















(function(){
	// NOTE: this is for backwards compatibility with Dojo 1.3
	if(!dojo.isCopyKey){
		dojo.isCopyKey = dojo.dnd.getCopyKeyState;
	}
	/*=====
	dojox.grid.__CellDef = function(){
		//	name: String?
		//		The text to use in the header of the grid for this cell.
		//	get: Function?
		//		function(rowIndex){} rowIndex is of type Integer.  This
		//		function will be called when a cell	requests data.  Returns the
		//		unformatted data for the cell.
		//	value: String?
		//		If "get" is not specified, this is used as the data for the cell.
		//	defaultValue: String?
		//		If "get" and "value" aren't specified or if "get" returns an undefined
		//		value, this is used as the data for the cell.  "formatter" is not run
		//		on this if "get" returns an undefined value.
		//	formatter: Function?
		//		function(data, rowIndex){} data is of type anything, rowIndex
		//		is of type Integer.  This function will be called after the cell
		//		has its data but before it passes it back to the grid to render.
		//		Returns the formatted version of the cell's data.
		//	type: dojox.grid.cells._Base|Function?
		//		TODO
		//	editable: Boolean?
		//		Whether this cell should be editable or not.
		//	hidden: Boolean?
		//		If true, the cell will not be displayed.
		//	noresize: Boolean?
		//		If true, the cell will not be able to be resized.
		//	width: Integer|String?
		//		A CSS size.  If it's an Integer, the width will be in em's.
		//	colSpan: Integer?
		//		How many columns to span this cell.  Will not work in the first
		//		sub-row of cells.
		//	rowSpan: Integer?
		//		How many sub-rows to span this cell.
		//	styles: String?
		//		A string of styles to apply to both the header cell and main
		//		grid cells.  Must end in a ';'.
		//	headerStyles: String?
		//		A string of styles to apply to just the header cell.  Must end
		//		in a ';'
		//	cellStyles: String?
		//		A string of styles to apply to just the main grid cells.  Must
		//		end in a ';'
		//	classes: String?
		//		A space separated list of classes to apply to both the header
		//		cell and the main grid cells.
		//	headerClasses: String?
		//		A space separated list of classes to apply to just the header
		//		cell.
		//	cellClasses: String?
		//		A space separated list of classes to apply to just the main
		//		grid cells.
		//	attrs: String?
		//		A space separated string of attribute='value' pairs to add to
		//		the header cell element and main grid cell elements.
		this.name = name;
		this.value = value;
		this.get = get;
		this.formatter = formatter;
		this.type = type;
		this.editable = editable;
		this.hidden = hidden;
		this.width = width;
		this.colSpan = colSpan;
		this.rowSpan = rowSpan;
		this.styles = styles;
		this.headerStyles = headerStyles;
		this.cellStyles = cellStyles;
		this.classes = classes;
		this.headerClasses = headerClasses;
		this.cellClasses = cellClasses;
		this.attrs = attrs;
	}
	=====*/

	/*=====
	dojox.grid.__ViewDef = function(){
		//	noscroll: Boolean?
		//		If true, no scrollbars will be rendered without scrollbars.
		//	width: Integer|String?
		//		A CSS size.  If it's an Integer, the width will be in em's. If
		//		"noscroll" is true, this value is ignored.
		//	cells: dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]]?
		//		The structure of the cells within this grid.
		//	type: String?
		//		A string containing the constructor of a subclass of
		//		dojox.grid._View.  If this is not specified, dojox.grid._View
		//		is used.
		//	defaultCell: dojox.grid.__CellDef?
		//		A cell definition with default values for all cells in this view.  If
		//		a property is defined in a cell definition in the "cells" array and
		//		this property, the cell definition's property will override this
		//		property's property.
		//	onBeforeRow: Function?
		//		function(rowIndex, cells){} rowIndex is of type Integer, cells
		//		is of type Array[dojox.grid.__CellDef[]].  This function is called
		//		before each row of data is rendered.  Before the header is
		//		rendered, rowIndex will be -1.  "cells" is a reference to the
		//		internal structure of this view's cells so any changes you make to
		//		it will persist between calls.
		//	onAfterRow: Function?
		//		function(rowIndex, cells, rowNode){} rowIndex is of type Integer, cells
		//		is of type Array[dojox.grid.__CellDef[]], rowNode is of type DOMNode.
		//		This function is called	after each row of data is rendered.  After the
		//		header is rendered, rowIndex will be -1.  "cells" is a reference to the
		//		internal structure of this view's cells so any changes you make to
		//		it will persist between calls.
		this.noscroll = noscroll;
		this.width = width;
		this.cells = cells;
		this.type = type;
		this.defaultCell = defaultCell;
		this.onBeforeRow = onBeforeRow;
		this.onAfterRow = onAfterRow;
	}
	=====*/

	dojo.declare('dojox.grid._Grid',
		[ dijit._Widget, dijit._Templated, dojox.grid._Events ],
		{
		// summary:
		// 		A grid widget with virtual scrolling, cell editing, complex rows,
		// 		sorting, fixed columns, sizeable columns, etc.
		//
		//	description:
		//		_Grid provides the full set of grid features without any
		//		direct connection to a data store.
		//
		//		The grid exposes a get function for the grid, or optionally
		//		individual columns, to populate cell contents.
		//
		//		The grid is rendered based on its structure, an object describing
		//		column and cell layout.
		//
		//	example:
		//		A quick sample:
		//
		//		define a get function
		//	|	function get(inRowIndex){ // called in cell context
		//	|		return [this.index, inRowIndex].join(', ');
		//	|	}
		//
		//		define the grid structure:
		//	|	var structure = [ // array of view objects
		//	|		{ cells: [// array of rows, a row is an array of cells
		//	|			[
		//	|				{ name: "Alpha", width: 6 },
		//	|				{ name: "Beta" },
		//	|				{ name: "Gamma", get: get }]
		//	|		]}
		//	|	];
		//
		//	|	<div id="grid"
		//	|		rowCount="100" get="get"
		//	|		structure="structure"
		//	|		dojoType="dojox.grid._Grid"></div>

		templateString:"<div hidefocus=\"hidefocus\" role=\"grid\" dojoAttachEvent=\"onmouseout:_mouseOut\">\r\n\t<div class=\"dojoxGridMasterHeader\" dojoAttachPoint=\"viewsHeaderNode\" role=\"presentation\"></div>\r\n\t<div class=\"dojoxGridMasterView\" dojoAttachPoint=\"viewsNode\" role=\"presentation\"></div>\r\n\t<div class=\"dojoxGridMasterMessages\" style=\"display: none;\" dojoAttachPoint=\"messagesNode\"></div>\r\n\t<span dojoAttachPoint=\"lastFocusNode\" tabindex=\"0\"></span>\r\n</div>\r\n",

		// classTag: String
		// 		CSS class applied to the grid's domNode
		classTag: 'dojoxGrid',

		// settings
		// rowCount: Integer
		//		Number of rows to display.
		rowCount: 5,

		// keepRows: Integer
		//		Number of rows to keep in the rendering cache.
		keepRows: 75,

		// rowsPerPage: Integer
		//		Number of rows to render at a time.
		rowsPerPage: 25,

		// autoWidth: Boolean
		//		If autoWidth is true, grid width is automatically set to fit the data.
		autoWidth: false,
		
		// initialWidth: String
		//		A css string to use to set our initial width (only used if autoWidth
		//		is true).  The first rendering of the grid will be this width, any
		//		resizing of columns, etc will result in the grid switching to
		//		autoWidth mode.  Note, this width will override any styling in a
		//		stylesheet or directly on the node.
		initialWidth: "",

		// autoHeight: Boolean|Integer
		//		If autoHeight is true, grid height is automatically set to fit the data.
		//		If it is an integer, the height will be automatically set to fit the data
		//		if there are fewer than that many rows - and the height will be set to show
		//		that many rows if there are more
		autoHeight: '',

		// rowHeight: Integer
		//		If rowHeight is set to a positive number, it will define the height of the rows
		//		in pixels. This can provide a significant performance advantage, since it
		//		eliminates the need to measure row sizes during rendering, which is one
		// 		the primary bottlenecks in the DataGrid's performance.
		rowHeight: 0,
		
		// autoRender: Boolean
		//		If autoRender is true, grid will render itself after initialization.
		autoRender: true,

		// defaultHeight: String
		//		default height of the grid, measured in any valid css unit.
		defaultHeight: '15em',
		
		// height: String
		//		explicit height of the grid, measured in any valid css unit.  This will be populated (and overridden)
		//		if the height: css attribute exists on the source node.
		height: '',

		// structure: dojox.grid.__ViewDef|dojox.grid.__ViewDef[]|dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]]
		//		View layout defintion.
		structure: null,

		// elasticView: Integer
		//	Override defaults and make the indexed grid view elastic, thus filling available horizontal space.
		elasticView: -1,

		// singleClickEdit: boolean
		//		Single-click starts editing. Default is double-click
		singleClickEdit: false,

		// selectionMode: String
		//		Set the selection mode of grid's Selection.  Value must be 'single', 'multiple',
		//		or 'extended'.  Default is 'extended'.
		selectionMode: 'extended',

		// rowSelector: Boolean|String
		// 		If set to true, will add a row selector view to this grid.  If set to a CSS width, will add
		// 		a row selector of that width to this grid.
		rowSelector: '',

		// columnReordering: Boolean
		// 		If set to true, will add drag and drop reordering to views with one row of columns.
		columnReordering: false,

		// headerMenu: dijit.Menu
		// 		If set to a dijit.Menu, will use this as a context menu for the grid headers.
		headerMenu: null,

		// placeholderLabel: String
		// 		Label of placeholders to search for in the header menu to replace with column toggling
		// 		menu items.
		placeholderLabel: "GridColumns",
		
		// selectable: Boolean
		//		Set to true if you want to be able to select the text within the grid.
		selectable: false,
		
		// Used to store the last two clicks, to ensure double-clicking occurs based on the intended row
		_click: null,
		
		// loadingMessage: String
		//  Message that shows while the grid is loading
		loadingMessage: "<span class='dojoxGridLoading'>${loadingState}</span>",

		// errorMessage: String
		//  Message that shows when the grid encounters an error loading
		errorMessage: "<span class='dojoxGridError'>${errorState}</span>",

		// noDataMessage: String
		//  Message that shows if the grid has no data - wrap it in a
		//  span with class 'dojoxGridNoData' if you want it to be
		//  styled similar to the loading and error messages
		noDataMessage: "",
		
		// escapeHTMLInData: Boolean
		//		This will escape HTML brackets from the data to prevent HTML from
		// 		user-inputted data being rendered with may contain JavaScript and result in
		// 		XSS attacks. This is true by default, and it is recommended that it remain
		// 		true. Setting this to false will allow data to be displayed in the grid without
		// 		filtering, and should be only used if it is known that the data won't contain
		// 		malicious scripts. If HTML is needed in grid cells, it is recommended that
		// 		you use the formatter function to generate the HTML (the output of
		// 		formatter functions is not filtered, even with escapeHTMLInData set to true).
		escapeHTMLInData: true,
		
		// formatterScope: Object
		//		An object to execute format functions within.  If not set, the
		//		format functions will execute within the scope of the cell that
		//		has a format function.
		formatterScope: null,
		
		// editable: boolean
		// indicates if the grid contains editable cells, default is false
		// set to true if editable cell encountered during rendering
		editable: false,
		
		// private
		sortInfo: 0,
		themeable: true,
		_placeholders: null,

		// _layoutClass: Object
		//	The class to use for our layout - can be overridden by grid subclasses
		_layoutClass: dojox.grid._Layout,

		// initialization
		buildRendering: function(){
			this.inherited(arguments);
			if(!this.domNode.getAttribute('tabIndex')){
				this.domNode.tabIndex = "0";
			}
			this.createScroller();
			this.createLayout();
			this.createViews();
			this.createManagers();

			this.createSelection();

			this.connect(this.selection, "onSelected", "onSelected");
			this.connect(this.selection, "onDeselected", "onDeselected");
			this.connect(this.selection, "onChanged", "onSelectionChanged");

			dojox.html.metrics.initOnFontResize();
			this.connect(dojox.html.metrics, "onFontResize", "textSizeChanged");
			dojox.grid.util.funnelEvents(this.domNode, this, 'doKeyEvent', dojox.grid.util.keyEvents);
			if (this.selectionMode != "none") {
				dojo.attr(this.domNode, "aria-multiselectable", this.selectionMode == "single" ? "false" : "true");
			}

			dojo.addClass(this.domNode, this.classTag);
			if(!this.isLeftToRight()){
				dojo.addClass(this.domNode, this.classTag+"Rtl");
			}
		},
		
		postMixInProperties: function(){
			this.inherited(arguments);
			var messages = dojo.i18n.getLocalization("dijit", "loading", this.lang);
			this.loadingMessage = dojo.string.substitute(this.loadingMessage, messages);
			this.errorMessage = dojo.string.substitute(this.errorMessage, messages);
			if(this.srcNodeRef && this.srcNodeRef.style.height){
				this.height = this.srcNodeRef.style.height;
			}
			// Call this to update our autoheight to start out
			this._setAutoHeightAttr(this.autoHeight, true);
			this.lastScrollTop = this.scrollTop = 0;
		},
		
		postCreate: function(){
			this._placeholders = [];
			this._setHeaderMenuAttr(this.headerMenu);
			this._setStructureAttr(this.structure);
			this._click = [];
			this.inherited(arguments);
			if(this.domNode && this.autoWidth && this.initialWidth){
				this.domNode.style.width = this.initialWidth;
			}
			if (this.domNode && !this.editable){
				// default value for aria-readonly is false, set to true if grid is not editable
				dojo.attr(this.domNode,"aria-readonly", "true");
			}
		},

		destroy: function(){
			this.domNode.onReveal = null;
			this.domNode.onSizeChange = null;

			// Fixes IE domNode leak
			delete this._click;

			this.edit.destroy();
			delete this.edit;

			this.views.destroyViews();
			if(this.scroller){
				this.scroller.destroy();
				delete this.scroller;
			}
			if(this.focus){
				this.focus.destroy();
				delete this.focus;
			}
			if(this.headerMenu&&this._placeholders.length){
				dojo.forEach(this._placeholders, function(p){ p.unReplace(true); });
				this.headerMenu.unBindDomNode(this.viewsHeaderNode);
			}
			this.inherited(arguments);
		},

		_setAutoHeightAttr: function(ah, skipRender){
			// Calculate our autoheight - turn it into a boolean or an integer
			if(typeof ah == "string"){
				if(!ah || ah == "false"){
					ah = false;
				}else if (ah == "true"){
					ah = true;
				}else{
					ah = window.parseInt(ah, 10);
				}
			}
			if(typeof ah == "number"){
				if(isNaN(ah)){
					ah = false;
				}
				// Autoheight must be at least 1, if it's a number.  If it's
				// less than 0, we'll take that to mean "all" rows (same as
				// autoHeight=true - if it is equal to zero, we'll take that
				// to mean autoHeight=false
				if(ah < 0){
					ah = true;
				}else if (ah === 0){
					ah = false;
				}
			}
			this.autoHeight = ah;
			if(typeof ah == "boolean"){
				this._autoHeight = ah;
			}else if(typeof ah == "number"){
				this._autoHeight = (ah >= this.get('rowCount'));
			}else{
				this._autoHeight = false;
			}
			if(this._started && !skipRender){
				this.render();
			}
		},

		_getRowCountAttr: function(){
			return this.updating && this.invalidated && this.invalidated.rowCount != undefined ?
				this.invalidated.rowCount : this.rowCount;
		},
		
		textSizeChanged: function(){
			this.render();
		},

		sizeChange: function(){
			this.update();
		},

		createManagers: function(){
			// summary:
			//		create grid managers for various tasks including rows, focus, selection, editing

			// row manager
			this.rows = new dojox.grid._RowManager(this);
			// focus manager
			this.focus = new dojox.grid._FocusManager(this);
			// edit manager
			this.edit = new dojox.grid._EditManager(this);
		},

		createSelection: function(){
			// summary:	Creates a new Grid selection manager.

			// selection manager
			this.selection = new dojox.grid.Selection(this);
		},

		createScroller: function(){
			// summary: Creates a new virtual scroller
			this.scroller = new dojox.grid._Scroller();
			this.scroller.grid = this;
			this.scroller.renderRow = dojo.hitch(this, "renderRow");
			this.scroller.removeRow = dojo.hitch(this, "rowRemoved");
		},

		createLayout: function(){
			// summary: Creates a new Grid layout
			this.layout = new this._layoutClass(this);
			this.connect(this.layout, "moveColumn", "onMoveColumn");
		},

		onMoveColumn: function(){
			this.render();
		},
		
		onResizeColumn: function(/*int*/ cellIdx){
			// Called when a column is resized.
		},

		// views
		createViews: function(){
			this.views = new dojox.grid._ViewManager(this);
			this.views.createView = dojo.hitch(this, "createView");
		},

		createView: function(inClass, idx){
			var c = dojo.getObject(inClass);
			var view = new c({ grid: this, index: idx });
			this.viewsNode.appendChild(view.domNode);
			this.viewsHeaderNode.appendChild(view.headerNode);
			this.views.addView(view);
			dojo.attr(this.domNode, "align", dojo._isBodyLtr() ? 'left' : 'right');
			return view;
		},

		buildViews: function(){
			for(var i=0, vs; (vs=this.layout.structure[i]); i++){
				this.createView(vs.type || dojox._scopeName + ".grid._View", i).setStructure(vs);
			}
			this.scroller.setContentNodes(this.views.getContentNodes());
		},

		_setStructureAttr: function(structure){
			var s = structure;
			if(s && dojo.isString(s)){
				dojo.deprecated("dojox.grid._Grid.set('structure', 'objVar')", "use dojox.grid._Grid.set('structure', objVar) instead", "2.0");
				s=dojo.getObject(s);
			}
			this.structure = s;
			if(!s){
				if(this.layout.structure){
					s = this.layout.structure;
				}else{
					return;
				}
			}
			this.views.destroyViews();
			this.focus.focusView = null;
			if(s !== this.layout.structure){
				this.layout.setStructure(s);
			}
			this._structureChanged();
		},

		setStructure: function(/* dojox.grid.__ViewDef|dojox.grid.__ViewDef[]|dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]] */ inStructure){
			// summary:
			//		Install a new structure and rebuild the grid.
			dojo.deprecated("dojox.grid._Grid.setStructure(obj)", "use dojox.grid._Grid.set('structure', obj) instead.", "2.0");
			this._setStructureAttr(inStructure);
		},
		
		getColumnTogglingItems: function(){
			// Summary: returns an array of dijit.CheckedMenuItem widgets that can be
			//		added to a menu for toggling columns on and off.
			return dojo.map(this.layout.cells, function(cell){
				if(!cell.menuItems){ cell.menuItems = []; }

				var self = this;
				var item = new dijit.CheckedMenuItem({
					label: cell.name,
					checked: !cell.hidden,
					_gridCell: cell,
					onChange: function(checked){
						if(self.layout.setColumnVisibility(this._gridCell.index, checked)){
							var items = this._gridCell.menuItems;
							if(items.length > 1){
								dojo.forEach(items, function(item){
									if(item !== this){
										item.setAttribute("checked", checked);
									}
								}, this);
							}
							checked = dojo.filter(self.layout.cells, function(c){
								if(c.menuItems.length > 1){
									dojo.forEach(c.menuItems, "item.set('disabled', false);");
								}else{
									c.menuItems[0].set('disabled', false);
								}
								return !c.hidden;
							});
							if(checked.length == 1){
								dojo.forEach(checked[0].menuItems, "item.set('disabled', true);");
							}
						}
					},
					destroy: function(){
						var index = dojo.indexOf(this._gridCell.menuItems, this);
						this._gridCell.menuItems.splice(index, 1);
						delete this._gridCell;
						dijit.CheckedMenuItem.prototype.destroy.apply(this, arguments);
					}
				});
				cell.menuItems.push(item);
				return item;
			}, this); // dijit.CheckedMenuItem[]
		},

		_setHeaderMenuAttr: function(menu){
			if(this._placeholders && this._placeholders.length){
				dojo.forEach(this._placeholders, function(p){
					p.unReplace(true);
				});
				this._placeholders = [];
			}
			if(this.headerMenu){
				this.headerMenu.unBindDomNode(this.viewsHeaderNode);
			}
			this.headerMenu = menu;
			if(!menu){ return; }

			this.headerMenu.bindDomNode(this.viewsHeaderNode);
			if(this.headerMenu.getPlaceholders){
				this._placeholders = this.headerMenu.getPlaceholders(this.placeholderLabel);
			}
		},

		setHeaderMenu: function(/* dijit.Menu */ menu){
			dojo.deprecated("dojox.grid._Grid.setHeaderMenu(obj)", "use dojox.grid._Grid.set('headerMenu', obj) instead.", "2.0");
			this._setHeaderMenuAttr(menu);
		},
		
		setupHeaderMenu: function(){
			if(this._placeholders && this._placeholders.length){
				dojo.forEach(this._placeholders, function(p){
					if(p._replaced){
						p.unReplace(true);
					}
					p.replace(this.getColumnTogglingItems());
				}, this);
			}
		},

		_fetch: function(start){
			this.setScrollTop(0);
		},

		getItem: function(inRowIndex){
			return null;
		},
		
		showMessage: function(message){
			if(message){
				this.messagesNode.innerHTML = message;
				this.messagesNode.style.display = "";
			}else{
				this.messagesNode.innerHTML = "";
				this.messagesNode.style.display = "none";
			}
		},

		_structureChanged: function() {
			this.buildViews();
			if(this.autoRender && this._started){
				this.render();
			}
		},

		hasLayout: function() {
			return this.layout.cells.length;
		},

		// sizing
		resize: function(changeSize, resultSize){
			// summary:
			//		Update the grid's rendering dimensions and resize it
			
			// Calling sizeChange calls update() which calls _resize...so let's
			// save our input values, if any, and use them there when it gets
			// called.  This saves us an extra call to _resize(), which can
			// get kind of heavy.
			this._pendingChangeSize = changeSize;
			this._pendingResultSize = resultSize;
			this.sizeChange();
		},

		_getPadBorder: function() {
			this._padBorder = this._padBorder || dojo._getPadBorderExtents(this.domNode);
			return this._padBorder;
		},

		_getHeaderHeight: function(){
			var vns = this.viewsHeaderNode.style, t = vns.display == "none" ? 0 : this.views.measureHeader();
			vns.height = t + 'px';
			// header heights are reset during measuring so must be normalized after measuring.
			this.views.normalizeHeaderNodeHeight();
			return t;
		},
		
		_resize: function(changeSize, resultSize){
			// Restore our pending values, if any
			changeSize = changeSize || this._pendingChangeSize;
			resultSize = resultSize || this._pendingResultSize;
			delete this._pendingChangeSize;
			delete this._pendingResultSize;
			// if we have set up everything except the DOM, we cannot resize
			if(!this.domNode){ return; }
			var pn = this.domNode.parentNode;
			if(!pn || pn.nodeType != 1 || !this.hasLayout() || pn.style.visibility == "hidden" || pn.style.display == "none"){
				return;
			}
			// useful measurement
			var padBorder = this._getPadBorder();
			var hh = undefined;
			var h;
			// grid height
			if(this._autoHeight){
				this.domNode.style.height = 'auto';
			}else if(typeof this.autoHeight == "number"){
				h = hh = this._getHeaderHeight();
				h += (this.scroller.averageRowHeight * this.autoHeight);
				this.domNode.style.height = h + "px";
			}else if(this.domNode.clientHeight <= padBorder.h){
				if(pn == document.body){
					this.domNode.style.height = this.defaultHeight;
				}else if(this.height){
					this.domNode.style.height = this.height;
				}else{
					this.fitTo = "parent";
				}
			}
			// if we are given dimensions, size the grid's domNode to those dimensions
			if(resultSize){
				changeSize = resultSize;
			}
			if(changeSize){
				dojo.marginBox(this.domNode, changeSize);
				this.height = this.domNode.style.height;
				delete this.fitTo;
			}else if(this.fitTo == "parent"){
				h = this._parentContentBoxHeight = this._parentContentBoxHeight || dojo._getContentBox(pn).h;
				this.domNode.style.height = Math.max(0, h) + "px";
			}
			
			var hasFlex = dojo.some(this.views.views, function(v){ return v.flexCells; });

			if(!this._autoHeight && (h || dojo._getContentBox(this.domNode).h) === 0){
				// We need to hide the header, since the Grid is essentially hidden.
				this.viewsHeaderNode.style.display = "none";
			}else{
				// Otherwise, show the header and give it an appropriate height.
				this.viewsHeaderNode.style.display = "block";
				if(!hasFlex && hh === undefined){
					hh = this._getHeaderHeight();
				}
			}
			if(hasFlex){
				hh = undefined;
			}

			// NOTE: it is essential that width be applied before height
			// Header height can only be calculated properly after view widths have been set.
			// This is because flex column width is naturally 0 in Firefox.
			// Therefore prior to width sizing flex columns with spaces are maximally wrapped
			// and calculated to be too tall.
			this.adaptWidth();
			this.adaptHeight(hh);

			this.postresize();
		},

		adaptWidth: function() {
			// private: sets width and position for views and update grid width if necessary
			var doAutoWidth = (!this.initialWidth && this.autoWidth);
			var w = doAutoWidth ? 0 : this.domNode.clientWidth || (this.domNode.offsetWidth - this._getPadBorder().w),
				vw = this.views.arrange(1, w);
			this.views.onEach("adaptWidth");
			if(doAutoWidth){
				this.domNode.style.width = vw + "px";
			}
		},

		adaptHeight: function(inHeaderHeight){
			// private: measures and normalizes header height, then sets view heights, and then updates scroller
			// content extent
			var t = inHeaderHeight === undefined ? this._getHeaderHeight() : inHeaderHeight;
			var h = (this._autoHeight ? -1 : Math.max(this.domNode.clientHeight - t, 0) || 0);
			this.views.onEach('setSize', [0, h]);
			this.views.onEach('adaptHeight');
			if(!this._autoHeight){
				var numScroll = 0, numNoScroll = 0;
				var noScrolls = dojo.filter(this.views.views, function(v){
					var has = v.hasHScrollbar();
					if(has){ numScroll++; }else{ numNoScroll++; }
					return (!has);
				});
				if(numScroll > 0 && numNoScroll > 0){
					dojo.forEach(noScrolls, function(v){
						v.adaptHeight(true);
					});
				}
			}
			if(this.autoHeight === true || h != -1 || (typeof this.autoHeight == "number" && this.autoHeight >= this.get('rowCount'))){
				this.scroller.windowHeight = h;
			}else{
				this.scroller.windowHeight = Math.max(this.domNode.clientHeight - t, 0);
			}
		},

		// startup
		startup: function(){
			if(this._started){return;}
			this.inherited(arguments);
			if(this.autoRender){
				this.render();
			}
		},

		// render
		render: function(){
			// summary:
			//	Render the grid, headers, and views. Edit and scrolling states are reset. To retain edit and
			// scrolling states, see Update.

			if(!this.domNode){return;}
			if(!this._started){return;}

			if(!this.hasLayout()) {
				this.scroller.init(0, this.keepRows, this.rowsPerPage);
				return;
			}
			//
			this.update = this.defaultUpdate;
			this._render();
		},

		_render: function(){
			this.scroller.init(this.get('rowCount'), this.keepRows, this.rowsPerPage);
			this.prerender();
			this.setScrollTop(0);
			this.postrender();
		},

		prerender: function(){
			// if autoHeight, make sure scroller knows not to virtualize; everything must be rendered.
			this.keepRows = this._autoHeight ? 0 : this.keepRows;
			this.scroller.setKeepInfo(this.keepRows);
			this.views.render();
			this._resize();
		},

		postrender: function(){
			this.postresize();
			this.focus.initFocusView();
			// make rows unselectable
			dojo.setSelectable(this.domNode, this.selectable);
		},

		postresize: function(){
			// views are position absolute, so they do not inflate the parent
			if(this._autoHeight){
				var size = Math.max(this.views.measureContent()) + 'px';
				
				this.viewsNode.style.height = size;
			}
		},

		renderRow: function(inRowIndex, inNodes){
			// summary: private, used internally to render rows
			this.views.renderRow(inRowIndex, inNodes, this._skipRowRenormalize);
		},

		rowRemoved: function(inRowIndex){
			// summary: private, used internally to remove rows
			this.views.rowRemoved(inRowIndex);
		},

		invalidated: null,

		updating: false,

		beginUpdate: function(){
			// summary:
			//		Use to make multiple changes to rows while queueing row updating.
			// NOTE: not currently supporting nested begin/endUpdate calls
			this.invalidated = [];
			this.updating = true;
		},

		endUpdate: function(){
			// summary:
			//		Use after calling beginUpdate to render any changes made to rows.
			this.updating = false;
			var i = this.invalidated, r;
			if(i.all){
				this.update();
			}else if(i.rowCount != undefined){
				this.updateRowCount(i.rowCount);
			}else{
				for(r in i){
					this.updateRow(Number(r));
				}
			}
			this.invalidated = [];
		},

		// update
		defaultUpdate: function(){
			// note: initial update calls render and subsequently this function.
			if(!this.domNode){return;}
			if(this.updating){
				this.invalidated.all = true;
				return;
			}
			//this.edit.saveState(inRowIndex);
			this.lastScrollTop = this.scrollTop;
			this.prerender();
			this.scroller.invalidateNodes();
			this.setScrollTop(this.lastScrollTop);
			this.postrender();
			//this.edit.restoreState(inRowIndex);
		},

		update: function(){
			// summary:
			//		Update the grid, retaining edit and scrolling states.
			this.render();
		},

		updateRow: function(inRowIndex){
			// summary:
			//		Render a single row.
			// inRowIndex: Integer
			//		Index of the row to render
			inRowIndex = Number(inRowIndex);
			if(this.updating){
				this.invalidated[inRowIndex]=true;
			}else{
				this.views.updateRow(inRowIndex);
				this.scroller.rowHeightChanged(inRowIndex);
			}
		},

		updateRows: function(startIndex, howMany){
			// summary:
			//		Render consecutive rows at once.
			// startIndex: Integer
			//		Index of the starting row to render
			// howMany: Integer
			//		How many rows to update.
			startIndex = Number(startIndex);
			howMany = Number(howMany);
			var i;
			if(this.updating){
				for(i=0; i<howMany; i++){
					this.invalidated[i+startIndex]=true;
				}
			}else{
				for(i=0; i<howMany; i++){
					this.views.updateRow(i+startIndex, this._skipRowRenormalize);
				}
				this.scroller.rowHeightChanged(startIndex);
			}
		},

		updateRowCount: function(inRowCount){
			//summary:
			//	Change the number of rows.
			// inRowCount: int
			//	Number of rows in the grid.
			if(this.updating){
				this.invalidated.rowCount = inRowCount;
			}else{
				this.rowCount = inRowCount;
				this._setAutoHeightAttr(this.autoHeight, true);
				if(this.layout.cells.length){
					this.scroller.updateRowCount(inRowCount);
				}
				this._resize();
				if(this.layout.cells.length){
					this.setScrollTop(this.scrollTop);
				}
			}
		},

		updateRowStyles: function(inRowIndex){
			// summary:
			//		Update the styles for a row after it's state has changed.
			this.views.updateRowStyles(inRowIndex);
		},
		getRowNode: function(inRowIndex){
			// summary:
			//		find the rowNode that is not a rowSelector
			if (this.focus.focusView && !(this.focus.focusView instanceof dojox.grid._RowSelector)){
					return this.focus.focusView.rowNodes[inRowIndex];
			}else{ // search through views
				for (var i = 0, cView; (cView = this.views.views[i]); i++) {
					if (!(cView instanceof dojox.grid._RowSelector)) {
						return cView.rowNodes[inRowIndex];
					}
				}
			}
			return null;
		},
		rowHeightChanged: function(inRowIndex){
			// summary:
			//		Update grid when the height of a row has changed. Row height is handled automatically as rows
			//		are rendered. Use this function only to update a row's height outside the normal rendering process.
			// inRowIndex: Integer
			// 		index of the row that has changed height

			this.views.renormalizeRow(inRowIndex);
			this.scroller.rowHeightChanged(inRowIndex);
		},

		// fastScroll: Boolean
		//		flag modifies vertical scrolling behavior. Defaults to true but set to false for slower
		//		scroll performance but more immediate scrolling feedback
		fastScroll: true,

		delayScroll: false,

		// scrollRedrawThreshold: int
		//	pixel distance a user must scroll vertically to trigger grid scrolling.
		scrollRedrawThreshold: (dojo.isIE ? 100 : 50),

		// scroll methods
		scrollTo: function(inTop){
			// summary:
			//		Vertically scroll the grid to a given pixel position
			// inTop: Integer
			//		vertical position of the grid in pixels
			if(!this.fastScroll){
				this.setScrollTop(inTop);
				return;
			}
			var delta = Math.abs(this.lastScrollTop - inTop);
			this.lastScrollTop = inTop;
			if(delta > this.scrollRedrawThreshold || this.delayScroll){
				this.delayScroll = true;
				this.scrollTop = inTop;
				this.views.setScrollTop(inTop);
				if(this._pendingScroll){
					window.clearTimeout(this._pendingScroll);
				}
				var _this = this;
				this._pendingScroll = window.setTimeout(function(){
					delete _this._pendingScroll;
					_this.finishScrollJob();
				}, 200);
			}else{
				this.setScrollTop(inTop);
			}
		},

		finishScrollJob: function(){
			this.delayScroll = false;
			this.setScrollTop(this.scrollTop);
		},

		setScrollTop: function(inTop){
			this.scroller.scroll(this.views.setScrollTop(inTop));
		},

		scrollToRow: function(inRowIndex){
			// summary:
			//		Scroll the grid to a specific row.
			// inRowIndex: Integer
			// 		grid row index
			this.setScrollTop(this.scroller.findScrollTop(inRowIndex) + 1);
		},

		// styling (private, used internally to style individual parts of a row)
		styleRowNode: function(inRowIndex, inRowNode){
			if(inRowNode){
				this.rows.styleRowNode(inRowIndex, inRowNode);
			}
		},
		
		// called when the mouse leaves the grid so we can deselect all hover rows
		_mouseOut: function(e){
			this.rows.setOverRow(-2);
		},
	
		// cells
		getCell: function(inIndex){
			// summary:
			//		Retrieves the cell object for a given grid column.
			// inIndex: Integer
			// 		Grid column index of cell to retrieve
			// returns:
			//		a grid cell
			return this.layout.cells[inIndex];
		},

		setCellWidth: function(inIndex, inUnitWidth){
			this.getCell(inIndex).unitWidth = inUnitWidth;
		},

		getCellName: function(inCell){
			// summary: Returns the cell name of a passed cell
			return "Cell " + inCell.index; // String
		},

		// sorting
		canSort: function(inSortInfo){
			// summary:
			//		Determines if the grid can be sorted
			// inSortInfo: Integer
			//		Sort information, 1-based index of column on which to sort, positive for an ascending sort
			// 		and negative for a descending sort
			// returns: Boolean
			//		True if grid can be sorted on the given column in the given direction
		},

		sort: function(){
		},

		getSortAsc: function(inSortInfo){
			// summary:
			//		Returns true if grid is sorted in an ascending direction.
			inSortInfo = inSortInfo == undefined ? this.sortInfo : inSortInfo;
			return Boolean(inSortInfo > 0); // Boolean
		},

		getSortIndex: function(inSortInfo){
			// summary:
			//		Returns the index of the column on which the grid is sorted
			inSortInfo = inSortInfo == undefined ? this.sortInfo : inSortInfo;
			return Math.abs(inSortInfo) - 1; // Integer
		},

		setSortIndex: function(inIndex, inAsc){
			// summary:
			// 		Sort the grid on a column in a specified direction
			// inIndex: Integer
			// 		Column index on which to sort.
			// inAsc: Boolean
			// 		If true, sort the grid in ascending order, otherwise in descending order
			var si = inIndex +1;
			if(inAsc != undefined){
				si *= (inAsc ? 1 : -1);
			} else if(this.getSortIndex() == inIndex){
				si = -this.sortInfo;
			}
			this.setSortInfo(si);
		},

		setSortInfo: function(inSortInfo){
			if(this.canSort(inSortInfo)){
				this.sortInfo = inSortInfo;
				this.sort();
				this.update();
			}
		},

		// DOM event handler
		doKeyEvent: function(e){
			e.dispatch = 'do' + e.type;
			this.onKeyEvent(e);
		},

		// event dispatch
		//: protected
		_dispatch: function(m, e){
			if(m in this){
				return this[m](e);
			}
			return false;
		},

		dispatchKeyEvent: function(e){
			this._dispatch(e.dispatch, e);
		},

		dispatchContentEvent: function(e){
			this.edit.dispatchEvent(e) || e.sourceView.dispatchContentEvent(e) || this._dispatch(e.dispatch, e);
		},

		dispatchHeaderEvent: function(e){
			e.sourceView.dispatchHeaderEvent(e) || this._dispatch('doheader' + e.type, e);
		},

		dokeydown: function(e){
			this.onKeyDown(e);
		},

		doclick: function(e){
			if(e.cellNode){
				this.onCellClick(e);
			}else{
				this.onRowClick(e);
			}
		},

		dodblclick: function(e){
			if(e.cellNode){
				this.onCellDblClick(e);
			}else{
				this.onRowDblClick(e);
			}
		},

		docontextmenu: function(e){
			if(e.cellNode){
				this.onCellContextMenu(e);
			}else{
				this.onRowContextMenu(e);
			}
		},

		doheaderclick: function(e){
			if(e.cellNode){
				this.onHeaderCellClick(e);
			}else{
				this.onHeaderClick(e);
			}
		},

		doheaderdblclick: function(e){
			if(e.cellNode){
				this.onHeaderCellDblClick(e);
			}else{
				this.onHeaderDblClick(e);
			}
		},

		doheadercontextmenu: function(e){
			if(e.cellNode){
				this.onHeaderCellContextMenu(e);
			}else{
				this.onHeaderContextMenu(e);
			}
		},

		// override to modify editing process
		doStartEdit: function(inCell, inRowIndex){
			this.onStartEdit(inCell, inRowIndex);
		},

		doApplyCellEdit: function(inValue, inRowIndex, inFieldIndex){
			this.onApplyCellEdit(inValue, inRowIndex, inFieldIndex);
		},

		doCancelEdit: function(inRowIndex){
			this.onCancelEdit(inRowIndex);
		},

		doApplyEdit: function(inRowIndex){
			this.onApplyEdit(inRowIndex);
		},

		// row editing
		addRow: function(){
			// summary:
			//		Add a row to the grid.
			this.updateRowCount(this.get('rowCount')+1);
		},

		removeSelectedRows: function(){
			// summary:
			//		Remove the selected rows from the grid.
			if(this.allItemsSelected){
				this.updateRowCount(0);
			}else{
				this.updateRowCount(Math.max(0, this.get('rowCount') - this.selection.getSelected().length));
			}
			this.selection.clear();
		}

	});

	dojox.grid._Grid.markupFactory = function(props, node, ctor, cellFunc){
		var d = dojo;
		var widthFromAttr = function(n){
			var w = d.attr(n, "width")||"auto";
			if((w != "auto")&&(w.slice(-2) != "em")&&(w.slice(-1) != "%")){
				w = parseInt(w, 10)+"px";
			}
			return w;
		};
		// if(!props.store){ console.debug("no store!"); }
		// if a structure isn't referenced, do we have enough
		// data to try to build one automatically?
		if(	!props.structure &&
			node.nodeName.toLowerCase() == "table"){

			// try to discover a structure
			props.structure = d.query("> colgroup", node).map(function(cg){
				var sv = d.attr(cg, "span");
				var v = {
					noscroll: (d.attr(cg, "noscroll") == "true") ? true : false,
					__span: (!!sv ? parseInt(sv, 10) : 1),
					cells: []
				};
				if(d.hasAttr(cg, "width")){
					v.width = widthFromAttr(cg);
				}
				return v; // for vendetta
			});
			if(!props.structure.length){
				props.structure.push({
					__span: Infinity,
					cells: [] // catch-all view
				});
			}
			// check to see if we're gonna have more than one view

			// for each tr in our th, create a row of cells
			d.query("thead > tr", node).forEach(function(tr, tr_idx){
				var cellCount = 0;
				var viewIdx = 0;
				var lastViewIdx;
				var cView = null;
				d.query("> th", tr).map(function(th){
					// what view will this cell go into?

					// NOTE:
					//		to prevent extraneous iteration, we start counters over
					//		for each row, incrementing over the surface area of the
					//		structure that colgroup processing generates and
					//		creating cell objects for each <th> to place into those
					//		cell groups.  There's a lot of state-keepking logic
					//		here, but it is what it has to be.
					if(!cView){ // current view book keeping
						lastViewIdx = 0;
						cView = props.structure[0];
					}else if(cellCount >= (lastViewIdx+cView.__span)){
						viewIdx++;
						// move to allocating things into the next view
						lastViewIdx += cView.__span;
						var lastView = cView;
						cView = props.structure[viewIdx];
					}

					// actually define the cell from what markup hands us
					var cell = {
						name: d.trim(d.attr(th, "name")||th.innerHTML),
						colSpan: parseInt(d.attr(th, "colspan")||1, 10),
						type: d.trim(d.attr(th, "cellType")||""),
						id: d.trim(d.attr(th,"id")||"")
					};
					cellCount += cell.colSpan;
					var rowSpan = d.attr(th, "rowspan");
					if(rowSpan){
						cell.rowSpan = rowSpan;
					}
					if(d.hasAttr(th, "width")){
						cell.width = widthFromAttr(th);
					}
					if(d.hasAttr(th, "relWidth")){
						cell.relWidth = window.parseInt(dojo.attr(th, "relWidth"), 10);
					}
					if(d.hasAttr(th, "hidden")){
						cell.hidden = (d.attr(th, "hidden") == "true" || d.attr(th, "hidden") === true/*always boolean true in Chrome*/);
					}

					if(cellFunc){
						cellFunc(th, cell);
					}

					cell.type = cell.type ? dojo.getObject(cell.type) : dojox.grid.cells.Cell;

					if(cell.type && cell.type.markupFactory){
						cell.type.markupFactory(th, cell);
					}

					if(!cView.cells[tr_idx]){
						cView.cells[tr_idx] = [];
					}
					cView.cells[tr_idx].push(cell);
				});
			});
		}

		return new ctor(props, node);
	};
})();

}

if(!dojo._hasResource["dojox.grid.DataSelection"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.DataSelection"] = true;
dojo.provide("dojox.grid.DataSelection");


dojo.declare("dojox.grid.DataSelection", dojox.grid.Selection, {
	getFirstSelected: function(){
		var idx = dojox.grid.Selection.prototype.getFirstSelected.call(this);

		if(idx == -1){ return null; }
		return this.grid.getItem(idx);
	},

	getNextSelected: function(inPrev){
		var old_idx = this.grid.getItemIndex(inPrev);
		var idx = dojox.grid.Selection.prototype.getNextSelected.call(this, old_idx);

		if(idx == -1){ return null; }
		return this.grid.getItem(idx);
	},

	getSelected: function(){
		var result = [];
		for(var i=0, l=this.selected.length; i<l; i++){
			if(this.selected[i]){
				result.push(this.grid.getItem(i));
			}
		}
		return result;
	},

	addToSelection: function(inItemOrIndex){
		if(this.mode == 'none'){ return; }
		var idx = null;
		if(typeof inItemOrIndex == "number" || typeof inItemOrIndex == "string"){
			idx = inItemOrIndex;
		}else{
			idx = this.grid.getItemIndex(inItemOrIndex);
		}
		dojox.grid.Selection.prototype.addToSelection.call(this, idx);
	},

	deselect: function(inItemOrIndex){
		if(this.mode == 'none'){ return; }
		var idx = null;
		if(typeof inItemOrIndex == "number" || typeof inItemOrIndex == "string"){
			idx = inItemOrIndex;
		}else{
			idx = this.grid.getItemIndex(inItemOrIndex);
		}
		dojox.grid.Selection.prototype.deselect.call(this, idx);
	},

	deselectAll: function(inItemOrIndex){
		var idx = null;
		if(inItemOrIndex || typeof inItemOrIndex == "number"){
			if(typeof inItemOrIndex == "number" || typeof inItemOrIndex == "string"){
				idx = inItemOrIndex;
			}else{
				idx = this.grid.getItemIndex(inItemOrIndex);
			}
			dojox.grid.Selection.prototype.deselectAll.call(this, idx);
		}else{
			this.inherited(arguments);
		}
	}
});

}

if(!dojo._hasResource["dojox.grid.DataGrid"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.DataGrid"] = true;
dojo.provide("dojox.grid.DataGrid");




/*=====
dojo.declare("dojox.grid.__DataCellDef", dojox.grid.__CellDef, {
	constructor: function(){
		//	field: String?
		//		The attribute to read from the dojo.data item for the row.
		//  fields: String[]?
		//		An array of fields to grab the values of and pass as an array to the grid
		//	get: Function?
		//		function(rowIndex, item?){} rowIndex is of type Integer, item is of type
		//		Object.  This function will be called when a cell requests data.  Returns
		//		the unformatted data for the cell.
	}
});
=====*/

/*=====
dojo.declare("dojox.grid.__DataViewDef", dojox.grid.__ViewDef, {
	constructor: function(){
		//	cells: dojox.grid.__DataCellDef[]|Array[dojox.grid.__DataCellDef[]]?
		//		The structure of the cells within this grid.
		//	defaultCell: dojox.grid.__DataCellDef?
		//		A cell definition with default values for all cells in this view.  If
		//		a property is defined in a cell definition in the "cells" array and
		//		this property, the cell definition's property will override this
		//		property's property.
	}
});
=====*/

dojo.declare("dojox.grid.DataGrid", dojox.grid._Grid, {
	store: null,
	query: null,
	queryOptions: null,
	fetchText: '...',
	sortFields: null,
	
	// updateDelay: int
	//		Time, in milliseconds, to delay updates automatically so that multiple
	//		calls to onSet/onNew/onDelete don't keep rerendering the grid.  Set
	//		to 0 to immediately cause updates.  A higher value will result in
	//		better performance at the expense of responsiveness of the grid.
	updateDelay: 1,

/*=====
	// structure: dojox.grid.__DataViewDef|dojox.grid.__DataViewDef[]|dojox.grid.__DataCellDef[]|Array[dojox.grid.__DataCellDef[]]
	//		View layout defintion.
	structure: '',
=====*/

	// You can specify items instead of a query, if you like.  They do not need
	// to be loaded - but the must be items in the store
	items: null,
	
	_store_connects: null,
	_by_idty: null,
	_by_idx: null,
	_cache: null,
	_pages: null,
	_pending_requests: null,
	_bop: -1,
	_eop: -1,
	_requests: 0,
	rowCount: 0,

	_isLoaded: false,
	_isLoading: false,
	
	postCreate: function(){
		this._pages = [];
		this._store_connects = [];
		this._by_idty = {};
		this._by_idx = [];
		this._cache = [];
		this._pending_requests = {};

		this._setStore(this.store);
		this.inherited(arguments);
	},

	createSelection: function(){
		this.selection = new dojox.grid.DataSelection(this);
	},

	get: function(inRowIndex, inItem){
		// summary: Default data getter.
		// description:
		//		Provides data to display in a grid cell. Called in grid cell context.
		//		So this.cell.index is the column index.
		// inRowIndex: Integer
		//		Row for which to provide data
		// returns:
		//		Data to display for a given grid cell.
		
		if(inItem && this.field == "_item" && !this.fields){
			return inItem;
		}else if(inItem && this.fields){
			var ret = [];
			var s = this.grid.store;
			dojo.forEach(this.fields, function(f){
				ret = ret.concat(s.getValues(inItem, f));
			});
			return ret;
		}else if(!inItem && typeof inRowIndex === "string"){
			return this.inherited(arguments);
		}
		return (!inItem ? this.defaultValue : (!this.field ? this.value : (this.field == "_item" ? inItem : this.grid.store.getValue(inItem, this.field))));
	},

	_checkUpdateStatus: function(){
		if(this.updateDelay > 0){
			var iStarted = false;
			if(this._endUpdateDelay){
				clearTimeout(this._endUpdateDelay);
				delete this._endUpdateDelay;
				iStarted = true;
			}
			if(!this.updating){
				this.beginUpdate();
				iStarted = true;
			}
			if(iStarted){
				var _this = this;
				this._endUpdateDelay = setTimeout(function(){
					delete _this._endUpdateDelay;
					_this.endUpdate();
				}, this.updateDelay);
			}
		}
	},
	
	_onSet: function(item, attribute, oldValue, newValue){
		this._checkUpdateStatus();
		var idx = this.getItemIndex(item);
		if(idx>-1){
			this.updateRow(idx);
		}
	},
	
	_createItem: function(item, index){
		var idty = this._hasIdentity ? this.store.getIdentity(item) : dojo.toJson(this.query) + ":idx:" + index + ":sort:" + dojo.toJson(this.getSortProps());
		var o = this._by_idty[idty] = { idty: idty, item: item };
		return o;
	},

	_addItem: function(item, index, noUpdate){
		this._by_idx[index] = this._createItem(item, index);
		if(!noUpdate){
			this.updateRow(index);
		}
	},

	_onNew: function(item, parentInfo){
		this._checkUpdateStatus();
		var rowCount = this.get('rowCount');
		this._addingItem = true;
		this.updateRowCount(rowCount+1);
		this._addingItem = false;
		this._addItem(item, rowCount);
		this.showMessage();
	},

	_onDelete: function(item){
		this._checkUpdateStatus();
		var idx = this._getItemIndex(item, true);

		if(idx >= 0){
			// When a row is deleted, all rest rows are shifted down,
			// and migrate from page to page. If some page is not
			// loaded yet empty rows can migrate to initialized pages
			// without refreshing. It causes empty rows in some pages, see:
			// http://bugs.dojotoolkit.org/ticket/6818
			// this code fix this problem by reseting loaded page info
			this._pages = [];
			this._bop = -1;
			this._eop = -1;

			var o = this._by_idx[idx];
			this._by_idx.splice(idx, 1);
			delete this._by_idty[o.idty];
			this.updateRowCount(this.get('rowCount')-1);
			if(this.get('rowCount') === 0){
				this.showMessage(this.noDataMessage);
			}
		}
	},

	_onRevert: function(){
		this._refresh();
	},

	setStore: function(store, query, queryOptions){
		this._setQuery(query, queryOptions);
		this._setStore(store);
		this._refresh(true);
	},
	
	setQuery: function(query, queryOptions){
		this._setQuery(query, queryOptions);
		this._refresh(true);
	},
	
	setItems: function(items){
		this.items = items;
		this._setStore(this.store);
		this._refresh(true);
	},
	
	_setQuery: function(query, queryOptions){
		this.query = query;
		this.queryOptions = queryOptions || this.queryOptions;
	},

	_setStore: function(store){
		if(this.store && this._store_connects){
			dojo.forEach(this._store_connects, this.disconnect, this);
		}
		this.store = store;

		if(this.store){
			var f = this.store.getFeatures();
			var h = [];

			this._canEdit = !!f["dojo.data.api.Write"] && !!f["dojo.data.api.Identity"];
			this._hasIdentity = !!f["dojo.data.api.Identity"];

			if(!!f["dojo.data.api.Notification"] && !this.items){
				h.push(this.connect(this.store, "onSet", "_onSet"));
				h.push(this.connect(this.store, "onNew", "_onNew"));
				h.push(this.connect(this.store, "onDelete", "_onDelete"));
			}
			if(this._canEdit){
				h.push(this.connect(this.store, "revert", "_onRevert"));
			}

			this._store_connects = h;
		}
	},

	_onFetchBegin: function(size, req){
		if(!this.scroller){ return; }
		if(this.rowCount != size){
			if(req.isRender){
				this.scroller.init(size, this.keepRows, this.rowsPerPage);
				this.rowCount = size;
				this._setAutoHeightAttr(this.autoHeight, true);
				this._skipRowRenormalize = true;
				this.prerender();
				this._skipRowRenormalize = false;
			}else{
				this.updateRowCount(size);
			}
		}
		if(!size){
			this.views.render();
			this._resize();
			this.showMessage(this.noDataMessage);
			this.focus.initFocusView();
		}else{
			this.showMessage();
		}
	},

	_onFetchComplete: function(items, req){
		if(!this.scroller){ return; }
		if(items && items.length > 0){
			//console.log(items);
			dojo.forEach(items, function(item, idx){
				this._addItem(item, req.start+idx, true);
			}, this);
			this.updateRows(req.start, items.length);
			if(req.isRender){
				this.setScrollTop(0);
				this.postrender();
			}else if(this._lastScrollTop){
				this.setScrollTop(this._lastScrollTop);
			}
		}
		delete this._lastScrollTop;
		if(!this._isLoaded){
			this._isLoading = false;
			this._isLoaded = true;
		}
		this._pending_requests[req.start] = false;
	},

	_onFetchError: function(err, req){
		console.log(err);
		delete this._lastScrollTop;
		if(!this._isLoaded){
			this._isLoading = false;
			this._isLoaded = true;
			this.showMessage(this.errorMessage);
		}
		this._pending_requests[req.start] = false;
		this.onFetchError(err, req);
	},

	onFetchError: function(err, req){
	},

	_fetch: function(start, isRender){
		start = start || 0;
		if(this.store && !this._pending_requests[start]){
			if(!this._isLoaded && !this._isLoading){
				this._isLoading = true;
				this.showMessage(this.loadingMessage);
			}
			this._pending_requests[start] = true;
			//console.log("fetch: ", start);
			try{
				if(this.items){
					var items = this.items;
					var store = this.store;
					this.rowsPerPage = items.length;
					var req = {
						start: start,
						count: this.rowsPerPage,
						isRender: isRender
					};
					this._onFetchBegin(items.length, req);
					
					// Load them if we need to
					var waitCount = 0;
					dojo.forEach(items, function(i){
						if(!store.isItemLoaded(i)){ waitCount++; }
					});
					if(waitCount === 0){
						this._onFetchComplete(items, req);
					}else{
						var onItem = function(item){
							waitCount--;
							if(waitCount === 0){
								this._onFetchComplete(items, req);
							}
						};
						dojo.forEach(items, function(i){
							if(!store.isItemLoaded(i)){
								store.loadItem({item: i, onItem: onItem, scope: this});
							}
						}, this);
					}
				}else{
					this.store.fetch({
						start: start,
						count: this.rowsPerPage,
						query: this.query,
						sort: this.getSortProps(),
						queryOptions: this.queryOptions,
						isRender: isRender,
						onBegin: dojo.hitch(this, "_onFetchBegin"),
						onComplete: dojo.hitch(this, "_onFetchComplete"),
						onError: dojo.hitch(this, "_onFetchError")
					});
				}
			}catch(e){
				this._onFetchError(e, {start: start, count: this.rowsPerPage});
			}
		}
	},

	_clearData: function(){
		this.updateRowCount(0);
		this._by_idty = {};
		this._by_idx = [];
		this._pages = [];
		this._bop = this._eop = -1;
		this._isLoaded = false;
		this._isLoading = false;
	},

	getItem: function(idx){
		var data = this._by_idx[idx];
		if(!data||(data&&!data.item)){
			this._preparePage(idx);
			return null;
		}
		return data.item;
	},

	getItemIndex: function(item){
		return this._getItemIndex(item, false);
	},
	
	_getItemIndex: function(item, isDeleted){
		if(!isDeleted && !this.store.isItem(item)){
			return -1;
		}

		var idty = this._hasIdentity ? this.store.getIdentity(item) : null;

		for(var i=0, l=this._by_idx.length; i<l; i++){
			var d = this._by_idx[i];
			if(d && ((idty && d.idty == idty) || (d.item === item))){
				return i;
			}
		}
		return -1;
	},

	filter: function(query, reRender){
		this.query = query;
		if(reRender){
			this._clearData();
		}
		this._fetch();
	},

	_getItemAttr: function(idx, attr){
		var item = this.getItem(idx);
		return (!item ? this.fetchText : this.store.getValue(item, attr));
	},

	// rendering
	_render: function(){
		if(this.domNode.parentNode){
			this.scroller.init(this.get('rowCount'), this.keepRows, this.rowsPerPage);
			this.prerender();
			this._fetch(0, true);
		}
	},

	// paging
	_requestsPending: function(inRowIndex){
		return this._pending_requests[inRowIndex];
	},

	_rowToPage: function(inRowIndex){
		return (this.rowsPerPage ? Math.floor(inRowIndex / this.rowsPerPage) : inRowIndex);
	},

	_pageToRow: function(inPageIndex){
		return (this.rowsPerPage ? this.rowsPerPage * inPageIndex : inPageIndex);
	},

	_preparePage: function(inRowIndex){
		if((inRowIndex < this._bop || inRowIndex >= this._eop) && !this._addingItem){
			var pageIndex = this._rowToPage(inRowIndex);
			this._needPage(pageIndex);
			this._bop = pageIndex * this.rowsPerPage;
			this._eop = this._bop + (this.rowsPerPage || this.get('rowCount'));
		}
	},

	_needPage: function(inPageIndex){
		if(!this._pages[inPageIndex]){
			this._pages[inPageIndex] = true;
			this._requestPage(inPageIndex);
		}
	},

	_requestPage: function(inPageIndex){
		var row = this._pageToRow(inPageIndex);
		var count = Math.min(this.rowsPerPage, this.get('rowCount') - row);
		if(count > 0){
			this._requests++;
			if(!this._requestsPending(row)){
				setTimeout(dojo.hitch(this, "_fetch", row, false), 1);
				//this.requestRows(row, count);
			}
		}
	},

	getCellName: function(inCell){
		return inCell.field;
		//console.log(inCell);
	},

	_refresh: function(isRender){
		this._clearData();
		this._fetch(0, isRender);
	},

	sort: function(){
		this.edit.apply();
		this._lastScrollTop = this.scrollTop;
		this._refresh();
	},

	canSort: function(){
		return (!this._isLoading);
	},

	getSortProps: function(){
		var c = this.getCell(this.getSortIndex());
		if(!c){
			if(this.sortFields){
				return this.sortFields;
			}
			return null;
		}else{
			var desc = c["sortDesc"];
			var si = !(this.sortInfo>0);
			if(typeof desc == "undefined"){
				desc = si;
			}else{
				desc = si ? !desc : desc;
			}
			return [{ attribute: c.field, descending: desc }];
		}
	},

	styleRowState: function(inRow){
		// summary: Perform row styling
		if(this.store && this.store.getState){
			var states=this.store.getState(inRow.index), c='';
			for(var i=0, ss=["inflight", "error", "inserting"], s; s=ss[i]; i++){
				if(states[s]){
					c = ' dojoxGridRow-' + s;
					break;
				}
			}
			inRow.customClasses += c;
		}
	},

	onStyleRow: function(inRow){
		this.styleRowState(inRow);
		this.inherited(arguments);
	},

	// editing
	canEdit: function(inCell, inRowIndex){
		return this._canEdit;
	},

	_copyAttr: function(idx, attr){
		var row = {};
		var backstop = {};
		var src = this.getItem(idx);
		return this.store.getValue(src, attr);
	},

	doStartEdit: function(inCell, inRowIndex){
		if(!this._cache[inRowIndex]){
			this._cache[inRowIndex] = this._copyAttr(inRowIndex, inCell.field);
		}
		this.onStartEdit(inCell, inRowIndex);
	},

	doApplyCellEdit: function(inValue, inRowIndex, inAttrName){
		this.store.fetchItemByIdentity({
			identity: this._by_idx[inRowIndex].idty,
			onItem: dojo.hitch(this, function(item){
				var oldValue = this.store.getValue(item, inAttrName);
				if(typeof oldValue == 'number'){
					inValue = isNaN(inValue) ? inValue : parseFloat(inValue);
				}else if(typeof oldValue == 'boolean'){
					inValue = inValue == 'true' ? true : inValue == 'false' ? false : inValue;
				}else if(oldValue instanceof Date){
					var asDate = new Date(inValue);
					inValue = isNaN(asDate.getTime()) ? inValue : asDate;
				}
				this.store.setValue(item, inAttrName, inValue);
				this.onApplyCellEdit(inValue, inRowIndex, inAttrName);
			})
		});
	},

	doCancelEdit: function(inRowIndex){
		var cache = this._cache[inRowIndex];
		if(cache){
			this.updateRow(inRowIndex);
			delete this._cache[inRowIndex];
		}
		this.onCancelEdit.apply(this, arguments);
	},

	doApplyEdit: function(inRowIndex, inDataAttr){
		var cache = this._cache[inRowIndex];
		/*if(cache){
			var data = this.getItem(inRowIndex);
			if(this.store.getValue(data, inDataAttr) != cache){
				this.update(cache, data, inRowIndex);
			}
			delete this._cache[inRowIndex];
		}*/
		this.onApplyEdit(inRowIndex);
	},

	removeSelectedRows: function(){
		// summary:
		//		Remove the selected rows from the grid.
		if(this._canEdit){
			this.edit.apply();
			var fx = dojo.hitch(this, function(items){
				if(items.length){
					dojo.forEach(items, this.store.deleteItem, this.store);
					this.selection.clear();
				}
			});
			if(this.allItemsSelected){
				this.store.fetch({
							query: this.query,
							queryOptions: this.queryOptions,
							onComplete: fx});
			}else{
				fx(this.selection.getSelected());
			}
		}
	}
});

dojox.grid.DataGrid.cell_markupFactory = function(cellFunc, node, cellDef){
	var field = dojo.trim(dojo.attr(node, "field")||"");
	if(field){
		cellDef.field = field;
	}
	cellDef.field = cellDef.field||cellDef.name;
	var fields = dojo.trim(dojo.attr(node, "fields")||"");
	if(fields){
		cellDef.fields = fields.split(",");
	}
	if(cellFunc){
		cellFunc(node, cellDef);
	}
};

dojox.grid.DataGrid.markupFactory = function(props, node, ctor, cellFunc){
	return dojox.grid._Grid.markupFactory(props, node, ctor,
					dojo.partial(dojox.grid.DataGrid.cell_markupFactory, cellFunc));
};

}

if(!dojo._hasResource["dojox.data.QueryReadStore"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.data.QueryReadStore"] = true;
dojo.provide("dojox.data.QueryReadStore");





dojo.declare("dojox.data.QueryReadStore",
	null,
	{
		//	summary:
		//		This class provides a store that is mainly intended to be used
		//		for loading data dynamically from the server, used i.e. for
		//		retreiving chunks of data from huge data stores on the server (by server-side filtering!).
		//		Upon calling the fetch() method of this store the data are requested from
		//		the server if they are not yet loaded for paging (or cached).
		//
		//		For example used for a combobox which works on lots of data. It
		//		can be used to retreive the data partially upon entering the
		//		letters "ac" it returns only items like "action", "acting", etc.
		//
		// note:
		//		The field name "id" in a query is reserved for looking up data
		//		by id. This is necessary as before the first fetch, the store
		//		has no way of knowing which field the server will declare as
		//		identifier.
		//
		//	example:
		// |	// The parameter "query" contains the data that are sent to the server.
		// |	var store = new dojox.data.QueryReadStore({url:'/search.php'});
		// |	store.fetch({query:{name:'a'}, queryOptions:{ignoreCase:false}});
		//
		// |	// Since "serverQuery" is given, it overrules and those data are
		// |	// sent to the server.
		// |	var store = new dojox.data.QueryReadStore({url:'/search.php'});
		// |	store.fetch({serverQuery:{name:'a'}, queryOptions:{ignoreCase:false}});
		//
		// |	<div dojoType="dojox.data.QueryReadStore"
		// |		jsId="store2"
		// |		url="../tests/stores/QueryReadStore.php"
		// |		requestMethod="post"></div>
		// |	<div dojoType="dojox.grid.data.DojoData"
		// |		jsId="model2"
		// |		store="store2"
		// |		sortFields="[{attribute: 'name', descending: true}]"
		// |		rowsPerPage="30"></div>
		// |	<div dojoType="dojox.Grid" id="grid2"
		// |		model="model2"
		// |		structure="gridLayout"
		// |		style="height:300px; width:800px;"></div>

		//
		//	todo:
		//		- there is a bug in the paging, when i set start:2, count:5 after an initial fetch() and doClientPaging:true
		//		  it returns 6 elemetns, though count=5, try it in QueryReadStore.html
		//		- add optional caching
		//		- when the first query searched for "a" and the next for a subset of
		//		  the first, i.e. "ab" then we actually dont need a server request, if
		//		  we have client paging, we just need to filter the items we already have
		//		  that might also be tooo much logic

		url:"",
		requestMethod:"get",
		//useCache:false,

		// We use the name in the errors, once the name is fixed hardcode it, may be.
		_className:"dojox.data.QueryReadStore",

		// This will contain the items we have loaded from the server.
		// The contents of this array is optimized to satisfy all read-api requirements
		// and for using lesser storage, so the keys and their content need some explaination:
		// 		this._items[0].i - the item itself
		//		this._items[0].r - a reference to the store, so we can identify the item
		//			securly. We set this reference right after receiving the item from the
		//			server.
		_items:[],

		// Store the last query that triggered xhr request to the server.
		// So we can compare if the request changed and if we shall reload
		// (this also depends on other factors, such as is caching used, etc).
		_lastServerQuery:null,

		// Store how many rows we have so that we can pass it to a clientPaging handler
		_numRows:-1,

		// Store a hash of the last server request. Actually I introduced this
		// for testing, so I can check if no unnecessary requests were issued for
		// client-side-paging.
		lastRequestHash:null,

		// summary:
		//		By default every request for paging is sent to the server.
		doClientPaging:false,

		// summary:
		//		By default all the sorting is done serverside before the data is returned
		//		which is the proper place to be doing it for really large datasets.
		doClientSorting:false,

		// Items by identify for Identify API
		_itemsByIdentity:null,

		// Identifier used
		_identifier:null,

		_features: {'dojo.data.api.Read':true, 'dojo.data.api.Identity':true},

		_labelAttr: "label",

		constructor: function(/* Object */ params){
			dojo.mixin(this,params);
		},

		getValue: function(/* item */ item, /* attribute-name-string */ attribute, /* value? */ defaultValue){
			//	According to the Read API comments in getValue() and exception is
			//	thrown when an item is not an item or the attribute not a string!
			this._assertIsItem(item);
			if(!dojo.isString(attribute)){
				throw new Error(this._className+".getValue(): Invalid attribute, string expected!");
			}
			if(!this.hasAttribute(item, attribute)){
				// read api says: return defaultValue "only if *item* does not have a value for *attribute*."
				// Is this the case here? The attribute doesn't exist, but a defaultValue, sounds reasonable.
				if(defaultValue){
					return defaultValue;
				}
			}
			return item.i[attribute];
		},

		getValues: function(/* item */ item, /* attribute-name-string */ attribute){
			this._assertIsItem(item);
			var ret = [];
			if(this.hasAttribute(item, attribute)){
				ret.push(item.i[attribute]);
			}
			return ret;
		},

		getAttributes: function(/* item */ item){
			this._assertIsItem(item);
			var ret = [];
			for(var i in item.i){
				ret.push(i);
			}
			return ret;
		},

		hasAttribute: function(/* item */ item,	/* attribute-name-string */ attribute){
			//	summary:
			//		See dojo.data.api.Read.hasAttribute()
			return this.isItem(item) && typeof item.i[attribute]!="undefined";
		},

		containsValue: function(/* item */ item, /* attribute-name-string */ attribute, /* anything */ value){
			var values = this.getValues(item, attribute);
			var len = values.length;
			for(var i=0; i<len; i++){
				if(values[i] == value){
					return true;
				}
			}
			return false;
		},

		isItem: function(/* anything */ something){
			// Some basic tests, that are quick and easy to do here.
			// >>> var store = new dojox.data.QueryReadStore({});
			// >>> store.isItem("");
			// false
			//
			// >>> var store = new dojox.data.QueryReadStore({});
			// >>> store.isItem({});
			// false
			//
			// >>> var store = new dojox.data.QueryReadStore({});
			// >>> store.isItem(0);
			// false
			//
			// >>> var store = new dojox.data.QueryReadStore({});
			// >>> store.isItem({name:"me", label:"me too"});
			// false
			//
			if(something){
				return typeof something.r != "undefined" && something.r == this;
			}
			return false;
		},

		isItemLoaded: function(/* anything */ something){
			// Currently we dont have any state that tells if an item is loaded or not
			// if the item exists its also loaded.
			// This might change when we start working with refs inside items ...
			return this.isItem(something);
		},

		loadItem: function(/* object */ args){
			if(this.isItemLoaded(args.item)){
				return;
			}
			// Actually we have nothing to do here, or at least I dont know what to do here ...
		},

		fetch:function(/* Object? */ request){
			//	summary:
			//		See dojo.data.util.simpleFetch.fetch() this is just a copy and I adjusted
			//		only the paging, since it happens on the server if doClientPaging is
			//		false, thx to http://trac.dojotoolkit.org/ticket/4761 reporting this.
			//		Would be nice to be able to use simpleFetch() to reduce copied code,
			//		but i dont know how yet. Ideas please!
			request = request || {};
			if(!request.store){
				request.store = this;
			}
			var self = this;

			var _errorHandler = function(errorData, requestObject){
				if(requestObject.onError){
					var scope = requestObject.scope || dojo.global;
					requestObject.onError.call(scope, errorData, requestObject);
				}
			};

			var _fetchHandler = function(items, requestObject, numRows){
				var oldAbortFunction = requestObject.abort || null;
				var aborted = false;

				var startIndex = requestObject.start?requestObject.start:0;
				if(self.doClientPaging == false){
					// For client paging we dont need no slicing of the result.
					startIndex = 0;
				}
				var endIndex = requestObject.count?(startIndex + requestObject.count):items.length;

				requestObject.abort = function(){
					aborted = true;
					if(oldAbortFunction){
						oldAbortFunction.call(requestObject);
					}
				};

				var scope = requestObject.scope || dojo.global;
				if(!requestObject.store){
					requestObject.store = self;
				}
				if(requestObject.onBegin){
					requestObject.onBegin.call(scope, numRows, requestObject);
				}
				if(requestObject.sort && self.doClientSorting){
					items.sort(dojo.data.util.sorter.createSortFunction(requestObject.sort, self));
				}
				if(requestObject.onItem){
					for(var i = startIndex; (i < items.length) && (i < endIndex); ++i){
						var item = items[i];
						if(!aborted){
							requestObject.onItem.call(scope, item, requestObject);
						}
					}
				}
				if(requestObject.onComplete && !aborted){
					var subset = null;
					if(!requestObject.onItem){
						subset = items.slice(startIndex, endIndex);
					}
					requestObject.onComplete.call(scope, subset, requestObject);
				}
			};
			this._fetchItems(request, _fetchHandler, _errorHandler);
			return request;	// Object
		},

		getFeatures: function(){
			return this._features;
		},

		close: function(/*dojo.data.api.Request || keywordArgs || null */ request){
			// I have no idea if this is really needed ...
		},

		getLabel: function(/* item */ item){
			//	summary:
			//		See dojo.data.api.Read.getLabel()
			if(this._labelAttr && this.isItem(item)){
				return this.getValue(item, this._labelAttr); //String
			}
			return undefined; //undefined
		},

		getLabelAttributes: function(/* item */ item){
			//	summary:
			//		See dojo.data.api.Read.getLabelAttributes()
			if(this._labelAttr){
				return [this._labelAttr]; //array
			}
			return null; //null
		},

		_xhrFetchHandler: function(data, request, fetchHandler, errorHandler){
			data = this._filterResponse(data);
			if(data.label){
				this._labelAttr = data.label;
			}
			var numRows = data.numRows || -1;

			this._items = [];
			// Store a ref to "this" in each item, so we can simply check if an item
			// really origins form here (idea is from ItemFileReadStore, I just don't know
			// how efficient the real storage use, garbage collection effort, etc. is).
			dojo.forEach(data.items,function(e){
				this._items.push({i:e, r:this});
			},this);

			var identifier = data.identifier;
			this._itemsByIdentity = {};
			if(identifier){
				this._identifier = identifier;
				var i;
				for(i = 0; i < this._items.length; ++i){
					var item = this._items[i].i;
					var identity = item[identifier];
					if(!this._itemsByIdentity[identity]){
						this._itemsByIdentity[identity] = item;
					}else{
						throw new Error(this._className+":  The json data as specified by: [" + this.url + "] is malformed.  Items within the list have identifier: [" + identifier + "].  Value collided: [" + identity + "]");
					}
				}
			}else{
				this._identifier = Number;
				for(i = 0; i < this._items.length; ++i){
					this._items[i].n = i;
				}
			}

			// TODO actually we should do the same as dojo.data.ItemFileReadStore._getItemsFromLoadedData() to sanitize
			// (does it really sanititze them) and store the data optimal. should we? for security reasons???
			numRows = this._numRows = (numRows === -1) ? this._items.length : numRows;
			fetchHandler(this._items, request, numRows);
			this._numRows = numRows;
		},

		_fetchItems: function(request, fetchHandler, errorHandler){
			//	summary:
			// 		The request contains the data as defined in the Read-API.
			// 		Additionally there is following keyword "serverQuery".
			//
			//	The *serverQuery* parameter, optional.
			//		This parameter contains the data that will be sent to the server.
			//		If this parameter is not given the parameter "query"'s
			//		data are sent to the server. This is done for some reasons:
			//		- to specify explicitly which data are sent to the server, they
			//		  might also be a mix of what is contained in "query", "queryOptions"
			//		  and the paging parameters "start" and "count" or may be even
			//		  completely different things.
			//		- don't modify the request.query data, so the interface using this
			//		  store can rely on unmodified data, as the combobox dijit currently
			//		  does it, it compares if the query has changed
			//		- request.query is required by the Read-API
			//
			// 		I.e. the following examples might be sent via GET:
			//		  fetch({query:{name:"abc"}, queryOptions:{ignoreCase:true}})
			//		  the URL will become:   /url.php?name=abc
			//
			//		  fetch({serverQuery:{q:"abc", c:true}, query:{name:"abc"}, queryOptions:{ignoreCase:true}})
			//		  the URL will become:   /url.php?q=abc&c=true
			//		  // The serverQuery-parameter has overruled the query-parameter
			//		  // but the query parameter stays untouched, but is not sent to the server!
			//		  // The serverQuery contains more data than the query, so they might differ!
			//

			var serverQuery = request.serverQuery || request.query || {};
			//Need to add start and count
			if(!this.doClientPaging){
				serverQuery.start = request.start || 0;
				// Count might not be sent if not given.
				if(request.count){
					serverQuery.count = request.count;
				}
			}
			if(!this.doClientSorting && request.sort){
				var sortInfo = [];
				dojo.forEach(request.sort, function(sort){
					if(sort && sort.attribute){
						sortInfo.push((sort.descending ? "-" : "") + sort.attribute);
					}
				});
				serverQuery.sort = sortInfo.join(',');
			}
			// Compare the last query and the current query by simply json-encoding them,
			// so we dont have to do any deep object compare ... is there some dojo.areObjectsEqual()???
			if(this.doClientPaging && this._lastServerQuery !== null &&
				dojo.toJson(serverQuery) == dojo.toJson(this._lastServerQuery)
				){
				this._numRows = (this._numRows === -1) ? this._items.length : this._numRows;
				fetchHandler(this._items, request, this._numRows);
			}else{
				var xhrFunc = this.requestMethod.toLowerCase() == "post" ? dojo.xhrPost : dojo.xhrGet;
				var xhrHandler = xhrFunc({url:this.url, handleAs:"json-comment-optional", content:serverQuery, failOk: true,preventCache:true});
				request.abort = function(){
					xhrHandler.cancel();
				};
				xhrHandler.addCallback(dojo.hitch(this, function(data){
					this._xhrFetchHandler(data, request, fetchHandler, errorHandler);
				}));
				xhrHandler.addErrback(function(error){
					errorHandler(error, request);
				});
				// Generate the hash using the time in milliseconds and a randon number.
				// Since Math.randon() returns something like: 0.23453463, we just remove the "0."
				// probably just for esthetic reasons :-).
				this.lastRequestHash = new Date().getTime()+"-"+String(Math.random()).substring(2);
				this._lastServerQuery = dojo.mixin({}, serverQuery);
			}
		},

		_filterResponse: function(data){
			//	summary:
			//		If the data from servers needs to be processed before it can be processed by this
			//		store, then this function should be re-implemented in subclass. This default
			//		implementation just return the data unchanged.
			//	data:
			//		The data received from server
			return data;
		},

		_assertIsItem: function(/* item */ item){
			//	summary:
			//		It throws an error if item is not valid, so you can call it in every method that needs to
			//		throw an error when item is invalid.
			//	item:
			//		The item to test for being contained by the store.
			if(!this.isItem(item)){
				throw new Error(this._className+": Invalid item argument.");
			}
		},

		_assertIsAttribute: function(/* attribute-name-string */ attribute){
			//	summary:
			//		This function tests whether the item passed in is indeed a valid 'attribute' like type for the store.
			//	attribute:
			//		The attribute to test for being contained by the store.
			if(typeof attribute !== "string"){
				throw new Error(this._className+": Invalid attribute argument ('"+attribute+"').");
			}
		},

		fetchItemByIdentity: function(/* Object */ keywordArgs){
			//	summary:
			//		See dojo.data.api.Identity.fetchItemByIdentity()

			// See if we have already loaded the item with that id
			// In case there hasn't been a fetch yet, _itemsByIdentity is null
			// and thus a fetch will be triggered below.
			if(this._itemsByIdentity){
				var item = this._itemsByIdentity[keywordArgs.identity];
				if(!(item === undefined)){
					if(keywordArgs.onItem){
						var scope = keywordArgs.scope ? keywordArgs.scope : dojo.global;
						keywordArgs.onItem.call(scope, {i:item, r:this});
					}
					return;
				}
			}

			// Otherwise we need to go remote
			// Set up error handler
			var _errorHandler = function(errorData, requestObject){
				var scope = keywordArgs.scope ? keywordArgs.scope : dojo.global;
				if(keywordArgs.onError){
					keywordArgs.onError.call(scope, errorData);
				}
			};

			// Set up fetch handler
			var _fetchHandler = function(items, requestObject){
				var scope = keywordArgs.scope ? keywordArgs.scope : dojo.global;
				try{
					// There is supposed to be only one result
					var item = null;
					if(items && items.length == 1){
						item = items[0];
					}

					// If no item was found, item is still null and we'll
					// fire the onItem event with the null here
					if(keywordArgs.onItem){
						keywordArgs.onItem.call(scope, item);
					}
				}catch(error){
					if(keywordArgs.onError){
						keywordArgs.onError.call(scope, error);
					}
				}
			};

			// Construct query
			var request = {serverQuery:{id:keywordArgs.identity}};

			// Dispatch query
			this._fetchItems(request, _fetchHandler, _errorHandler);
		},

		getIdentity: function(/* item */ item){
			//	summary:
			//		See dojo.data.api.Identity.getIdentity()
			var identifier = null;
			if(this._identifier === Number){
				identifier = item.n; // Number
			}else{
				identifier = item.i[this._identifier];
			}
			return identifier;
		},

		getIdentityAttributes: function(/* item */ item){
			//	summary:
			//		See dojo.data.api.Identity.getIdentityAttributes()
			return [this._identifier];
		}
	}
);

}

if(!dojo._hasResource["dojox.form.BusyButton"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.form.BusyButton"] = true;
dojo.provide("dojox.form.BusyButton");





dojo.declare("dojox.form._BusyButtonMixin",
	null,
	{
		
	isBusy: false,
	busyLabel: "", // text while button is busy
	timeout: null, // timeout, should be controlled by xhr call
	useIcon: true, // use a busy icon
 
	postMixInProperties: function(){
		this.inherited(arguments);
		if(!this.busyLabel){
			this.busyLabel = dojo.i18n.getLocalization("dijit", "loading", this.lang).loadingState;
		}
	},
	
	postCreate: function(){
		// summary:
		//	stores initial label and timeout for reference
		this.inherited(arguments);
		this._label = this.containerNode.innerHTML;
		this._initTimeout = this.timeout;
		
		// for initial busy buttons
		if(this.isBusy){
			this.makeBusy();
		}
	},
	
	makeBusy: function(){
		// summary:
		//	sets state from idle to busy
		this.isBusy = true;
		this.set("disabled", true);
			
		this.setLabel(this.busyLabel, this.timeout);
	},
	
	cancel: function(){
		// summary:
		//	if no timeout is set or for other reason the user can put the button back
		//  to being idle
		this.set("disabled", false);
		this.isBusy = false;
		this.setLabel(this._label);
		if(this._timeout){	clearTimeout(this._timeout); }
		this.timeout = this._initTimeout;
	},
	
	resetTimeout: function(/*Int*/ timeout){
		// summary:
		//	to reset existing timeout and setting a new timeout
		if(this._timeout){
			clearTimeout(this._timeout);
		}
		
		// new timeout
		if(timeout){
			this._timeout = setTimeout(dojo.hitch(this, function(){
				this.cancel();
			}), timeout);
		}else if(timeout == undefined || timeout === 0){
			this.cancel();
		}
	},
	
	setLabel: function(/*String*/ content, /*Int*/ timeout){
		// summary:
		//	setting a label and optional timeout of the labels state
		
		// this.inherited(arguments); FIXME: throws an Unknown runtime error
		
		// Begin IE hack
		// summary: reset the label (text) of the button; takes an HTML string
		this.label = content;
		// remove children
		while (this.containerNode.firstChild){
			this.containerNode.removeChild(this.containerNode.firstChild);
		}
		this.containerNode.innerHTML = this.label;
		
		if(this.showLabel == false && !(dojo.attr(this.domNode, "title"))){
			this.titleNode.title=dojo.trim(this.containerNode.innerText || this.containerNode.textContent || '');
		}
		// End IE hack
		
		// setting timeout
		if(timeout){
			this.resetTimeout(timeout);
		}else{
			this.timeout = null;
		}
		
		// create optional busy image
		if(this.useIcon && this.isBusy){
			var node = new Image();
			node.src = this._blankGif;
			dojo.attr(node, "id", this.id+"_icon");
			dojo.addClass(node, "dojoxBusyButtonIcon");
			this.containerNode.appendChild(node);
		}
	},
	
	_clicked: function(e){
		// summary:
		//	on button click the button state gets changed
		
		// only do something if button is not busy
		if(!this.isBusy){
			this.makeBusy();
		}
	}
});

dojo.declare("dojox.form.BusyButton", [dijit.form.Button, dojox.form._BusyButtonMixin], {});
dojo.declare("dojox.form.BusyComboButton", [dijit.form.ComboButton, dojox.form._BusyButtonMixin], {});
dojo.declare("dojox.form.BusyDropDownButton", [dijit.form.DropDownButton, dojox.form._BusyButtonMixin], {});

}

if(!dojo._hasResource["dojox.validate.regexp"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.validate.regexp"] = true;
dojo.provide("dojox.validate.regexp");



dojo.mixin(dojox.validate.regexp, {
	
	ipAddress: function(/*Object?*/flags){
		// summary: Builds a RE that matches an IP Address
		//
		// description:
		//  Supports 5 formats for IPv4: dotted decimal, dotted hex, dotted octal, decimal and hexadecimal.
		//  Supports 2 formats for Ipv6.
		//
		// flags  An object.  All flags are boolean with default = true.
		//    flags.allowDottedDecimal  Example, 207.142.131.235.  No zero padding.
		//    flags.allowDottedHex  Example, 0x18.0x11.0x9b.0x28.  Case insensitive.  Zero padding allowed.
		//    flags.allowDottedOctal  Example, 0030.0021.0233.0050.  Zero padding allowed.
		//    flags.allowDecimal  Example, 3482223595.  A decimal number between 0-4294967295.
		//    flags.allowHex  Example, 0xCF8E83EB.  Hexadecimal number between 0x0-0xFFFFFFFF.
		//      Case insensitive.  Zero padding allowed.
		//    flags.allowIPv6   IPv6 address written as eight groups of four hexadecimal digits.
		//	FIXME: ipv6 can be written multiple ways IIRC
		//    flags.allowHybrid   IPv6 address written as six groups of four hexadecimal digits
		//      followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d

		// assign default values to missing paramters
		flags = (typeof flags == "object") ? flags : {};
		if(typeof flags.allowDottedDecimal != "boolean"){ flags.allowDottedDecimal = true; }
		if(typeof flags.allowDottedHex != "boolean"){ flags.allowDottedHex = true; }
		if(typeof flags.allowDottedOctal != "boolean"){ flags.allowDottedOctal = true; }
		if(typeof flags.allowDecimal != "boolean"){ flags.allowDecimal = true; }
		if(typeof flags.allowHex != "boolean"){ flags.allowHex = true; }
		if(typeof flags.allowIPv6 != "boolean"){ flags.allowIPv6 = true; }
		if(typeof flags.allowHybrid != "boolean"){ flags.allowHybrid = true; }

		// decimal-dotted IP address RE.
		var dottedDecimalRE =
			// Each number is between 0-255.  Zero padding is not allowed.
			"((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";

		// dotted hex IP address RE.  Each number is between 0x0-0xff.  Zero padding is allowed, e.g. 0x00.
		var dottedHexRE = "(0[xX]0*[\\da-fA-F]?[\\da-fA-F]\\.){3}0[xX]0*[\\da-fA-F]?[\\da-fA-F]";

		// dotted octal IP address RE.  Each number is between 0000-0377.
		// Zero padding is allowed, but each number must have at least 4 characters.
		var dottedOctalRE = "(0+[0-3][0-7][0-7]\\.){3}0+[0-3][0-7][0-7]";

		// decimal IP address RE.  A decimal number between 0-4294967295.
		var decimalRE =  "(0|[1-9]\\d{0,8}|[1-3]\\d{9}|4[01]\\d{8}|42[0-8]\\d{7}|429[0-3]\\d{6}|" +
			"4294[0-8]\\d{5}|42949[0-5]\\d{4}|429496[0-6]\\d{3}|4294967[01]\\d{2}|42949672[0-8]\\d|429496729[0-5])";

		// hexadecimal IP address RE.
		// A hexadecimal number between 0x0-0xFFFFFFFF. Case insensitive.  Zero padding is allowed.
		var hexRE = "0[xX]0*[\\da-fA-F]{1,8}";

		// IPv6 address RE.
		// The format is written as eight groups of four hexadecimal digits, x:x:x:x:x:x:x:x,
		// where x is between 0000-ffff. Zero padding is optional. Case insensitive.
		var ipv6RE = "([\\da-fA-F]{1,4}\\:){7}[\\da-fA-F]{1,4}";

		// IPv6/IPv4 Hybrid address RE.
		// The format is written as six groups of four hexadecimal digits,
		// followed by the 4 dotted decimal IPv4 format. x:x:x:x:x:x:d.d.d.d
		var hybridRE = "([\\da-fA-F]{1,4}\\:){6}" +
			"((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";

		// Build IP Address RE
		var a = [];
		if(flags.allowDottedDecimal){ a.push(dottedDecimalRE); }
		if(flags.allowDottedHex){ a.push(dottedHexRE); }
		if(flags.allowDottedOctal){ a.push(dottedOctalRE); }
		if(flags.allowDecimal){ a.push(decimalRE); }
		if(flags.allowHex){ a.push(hexRE); }
		if(flags.allowIPv6){ a.push(ipv6RE); }
		if(flags.allowHybrid){ a.push(hybridRE); }

		var ipAddressRE = "";
		if(a.length > 0){
			ipAddressRE = "(" + a.join("|") + ")";
		}
		return ipAddressRE; // String
	},

	host: function(/*Object?*/flags){
		// summary: Builds a RE that matches a host
		// description: A host is a named host (A-z0-9_- but not starting with -), a domain name or an IP address, possibly followed by a port number.
		// flags: An object.
		//	  flags.allowNamed Allow a named host for local networks. Default is false.
		//    flags.allowIP  Allow an IP address for hostname.  Default is true.
		//    flags.allowLocal  Allow the host to be "localhost".  Default is false.
		//    flags.allowPort  Allow a port number to be present.  Default is true.
		//    flags in regexp.ipAddress can be applied.

		// assign default values to missing paramters
		flags = (typeof flags == "object") ? flags : {};

		if(typeof flags.allowIP != "boolean"){ flags.allowIP = true; }
		if(typeof flags.allowLocal != "boolean"){ flags.allowLocal = false; }
		if(typeof flags.allowPort != "boolean"){ flags.allowPort = true; }
		if(typeof flags.allowNamed != "boolean"){ flags.allowNamed = false; }

		//TODO: support unicode hostnames?
		// Domain name labels can not end with a dash.
		var domainLabelRE = "(?:[\\da-zA-Z](?:[-\\da-zA-Z]{0,61}[\\da-zA-Z])?)";
		var domainNameRE = "(?:[a-zA-Z](?:[-\\da-zA-Z]{0,6}[\\da-zA-Z])?)"; // restricted version to allow backwards compatibility with allowLocal, allowIP

		// port number RE
		var portRE = flags.allowPort ? "(\\:\\d+)?" : "";

		// build host RE
		var hostNameRE = "((?:" + domainLabelRE + "\\.)+" + domainNameRE + "\\.?)";
		if(flags.allowIP){ hostNameRE += "|" +  dojox.validate.regexp.ipAddress(flags); }
		if(flags.allowLocal){ hostNameRE += "|localhost"; }
		if(flags.allowNamed){ hostNameRE += "|^[^-][a-zA-Z0-9_-]*"; }
		return "(" + hostNameRE + ")" + portRE; // String

	},

	url: function(/*Object?*/flags){
		// summary: Builds a regular expression that matches a URL
		//
		// flags: An object
		//    flags.scheme  Can be true, false, or [true, false].
		//      This means: required, not allowed, or match either one.
		//    flags in regexp.host can be applied.
		//    flags in regexp.ipAddress can be applied.

		// assign default values to missing paramters
		flags = (typeof flags == "object") ? flags : {};
		if(!("scheme" in flags)){ flags.scheme = [true, false]; }

		// Scheme RE
		var protocolRE = dojo.regexp.buildGroupRE(flags.scheme,
			function(q){ if(q){ return "(https?|ftps?)\\://"; } return ""; }
		);

		// Path and query and anchor RE
		var pathRE = "(/(?:[^?#\\s/]+/)*(?:[^?#\\s/]+(?:\\?[^?#\\s/]*)?(?:#[A-Za-z][\\w.:-]*)?)?)?";

		return protocolRE + dojox.validate.regexp.host(flags) + pathRE;
	},

	emailAddress: function(/*Object?*/flags){

		// summary: Builds a regular expression that matches an email address
		//
		//flags: An object
		//    flags.allowCruft  Allow address like <mailto:foo@yahoo.com>.  Default is false.
		//    flags in regexp.host can be applied.
		//    flags in regexp.ipAddress can be applied.

		// assign default values to missing paramters
		flags = (typeof flags == "object") ? flags : {};
		if (typeof flags.allowCruft != "boolean") { flags.allowCruft = false; }
		flags.allowPort = false; // invalid in email addresses

		// user name RE per rfc5322
		var usernameRE = "([!#-'*+\\-\\/-9=?A-Z^-~]+[.])*[!#-'*+\\-\\/-9=?A-Z^-~]+";

		// build emailAddress RE
		var emailAddressRE = usernameRE + "@" + dojox.validate.regexp.host(flags);

		// Allow email addresses with cruft
		if ( flags.allowCruft ) {
			emailAddressRE = "<?(mailto\\:)?" + emailAddressRE + ">?";
		}

		return emailAddressRE; // String
	},

	emailAddressList: function(/*Object?*/flags){
		// summary: Builds a regular expression that matches a list of email addresses.
		//
		// flags: An object.
		//    flags.listSeparator  The character used to separate email addresses.  Default is ";", ",", "\n" or " ".
		//    flags in regexp.emailAddress can be applied.
		//    flags in regexp.host can be applied.
		//    flags in regexp.ipAddress can be applied.

		// assign default values to missing paramters
		flags = (typeof flags == "object") ? flags : {};
		if(typeof flags.listSeparator != "string"){ flags.listSeparator = "\\s;,"; }

		// build a RE for an Email Address List
		var emailAddressRE = dojox.validate.regexp.emailAddress(flags);
		var emailAddressListRE = "(" + emailAddressRE + "\\s*[" + flags.listSeparator + "]\\s*)*" +
			emailAddressRE + "\\s*[" + flags.listSeparator + "]?\\s*";

		return emailAddressListRE; // String
	},
	
	numberFormat: function(/*Object?*/flags){
		// summary: Builds a regular expression to match any sort of number based format
		// description:
		//  Use this method for phone numbers, social security numbers, zip-codes, etc.
		//  The RE can match one format or one of multiple formats.
		//
		//  Format
		//    #        Stands for a digit, 0-9.
		//    ?        Stands for an optional digit, 0-9 or nothing.
		//    All other characters must appear literally in the expression.
		//
		//  Example
		//    "(###) ###-####"       ->   (510) 542-9742
		//    "(###) ###-#### x#???" ->   (510) 542-9742 x153
		//    "###-##-####"          ->   506-82-1089       i.e. social security number
		//    "#####-####"           ->   98225-1649        i.e. zip code
		//
		// flags:  An object
		//    flags.format  A string or an Array of strings for multiple formats.

		// assign default values to missing paramters
		flags = (typeof flags == "object") ? flags : {};
		if(typeof flags.format == "undefined"){ flags.format = "###-###-####"; }

		// Converts a number format to RE.
		var digitRE = function(format){
			// escape all special characters, except '?'
			return dojo.regexp.escapeString(format, "?")
				// Now replace '?' with Regular Expression
				.replace(/\?/g, "\\d?")
				// replace # with Regular Expression
				.replace(/#/g, "\\d")
			;
		};

		// build RE for multiple number formats
		return dojo.regexp.buildGroupRE(flags.format, digitRE); //String
	}
	
});

dojox.validate.regexp.ca = {
	
	postalCode: function(){
		// summary: String regular Express to match Canadain Postal Codes
		return "([A-Z][0-9][A-Z] [0-9][A-Z][0-9])";
	},

	province: function(){
		// summary: a regular expression to match Canadian Province Abbreviations
		return "(AB|BC|MB|NB|NL|NS|NT|NU|ON|PE|QC|SK|YT)";
	}
	
};

dojox.validate.regexp.us = {
	
	state: function(/*Object?*/flags){
		// summary: A regular expression to match US state and territory abbreviations
		//
		// flags  An object.
		//    flags.allowTerritories  Allow Guam, Puerto Rico, etc.  Default is true.
		//    flags.allowMilitary  Allow military 'states', e.g. Armed Forces Europe (AE).  Default is true.

		// assign default values to missing paramters
		flags = (typeof flags == "object") ? flags : {};
		if(typeof flags.allowTerritories != "boolean"){ flags.allowTerritories = true; }
		if(typeof flags.allowMilitary != "boolean"){ flags.allowMilitary = true; }

		// state RE
		var statesRE =
			"AL|AK|AZ|AR|CA|CO|CT|DE|DC|FL|GA|HI|ID|IL|IN|IA|KS|KY|LA|ME|MD|MA|MI|MN|MS|MO|MT|" +
			"NE|NV|NH|NJ|NM|NY|NC|ND|OH|OK|OR|PA|RI|SC|SD|TN|TX|UT|VT|VA|WA|WV|WI|WY";

		// territories RE
		var territoriesRE = "AS|FM|GU|MH|MP|PW|PR|VI";

		// military states RE
		var militaryRE = "AA|AE|AP";

		// Build states and territories RE
		if(flags.allowTerritories){ statesRE += "|" + territoriesRE; }
		if(flags.allowMilitary){ statesRE += "|" + militaryRE; }

		return "(" + statesRE + ")"; // String
	}
	
};


}

if(!dojo._hasResource["ttl.utilities"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["ttl.utilities"] = true;
//-----------------------------------------------------------------------------
// Name:    utilities.js
// Author:  Chris Hoy
// Purpose: Common function what would be used by any dojo based web site
// Created: 04/01/2008
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("ttl.utilities");



//open a new popup window used for reports
ttl.utilities.gotoDialogPageStatic = function ( url )
{
	ttl.utilities.openPage(url , "_newtab");
}

//open a popup window used for reports this is the commom one work ok with
// most broswers exeption being IE
ttl.utilities.openCommonPage = function ( url )
{
	ttl.utilities.openPage(url , "_newtab");
}

ttl.utilities.openPage = function (url,name)
{
	// fix top make sure that report always appear fix fot IE
	var lname = name;
	if (dojo.isIE) lname = "_blank";
	var win = window.open(url,lname,"alwaysRaised status=0,menubar=0,resizable=1,width=640,height=480,scrollbars=1,addressbar=0,location=1");
	// This make sure that the iconized/background windows is brought to the front
	win.resizeTo(640,480);
	win.focus();
}

ttl.utilities.testPopUpBlocker = function()
{
	var popUpsBlocked = false;


	var mine = window.open('http://localhost/start','','directories=no,height=100,width=100,menubar=no,resizable=no,scrollbars=no,status=no,titlebar=no,top=0,location=no');
	 if(mine)
	    mine.close();
	 else
	    popUpsBlocked = true;

	return popUpsBlocked;
}

ttl.utilities.openStdWindow = function (url,name)
{
	// fix top make sure that report always appear fix fot IE
	var lname = name;
	if (dojo.isIE) lname = "_blank";
	var win = window.open(url,lname);
	win.focus();
}

ttl.utilities.defaultParams = {
	preventCache:true,
	timeout:30000,
	handleAs: 'json',
	url: "/error"
}
// Add standard parameters into a the xhrPost/xhrGet Functions if the incoming params
// have thery values they are used and not the default
ttl.utilities.makeParams = function(inParams)
{
	var res = dojo.mixin(
		ttl.utilities.defaultParams,
		inParams || {}
		);
	if (res["error"]==null)
		res["error"] = ttl.utilities.xhrPostError;

	return res;
}

ttl.utilities.makeParamsIgnore = function(inParams)
{
	var res = dojo.mixin(
		ttl.utilities.defaultParams,
		inParams || {}
		);
	res["error"] = ttl.utilities.globalerrorchecker;
	return res;
}

ttl.utilities.unescapeHtml=function(str)
{
	// returns: HTML String converted back to the normal text (unescaped) characters (<,>,&, ", etc,).
	str = str.replace(/&amp;/gm, "&").replace(/&lt;/gm, "<").replace(/&gt;/gm, ">").replace(/&quot;/gm, "\"");
	str = str.replace(/&#39;/gm, "'");
	return str;
}

//
// This takes the node name and work out type if the node exists and then set it to
// the default value
ttl.utilities.stdFormClearFunction=function(e)
{
	if (typeof(this[e]) != 'undefined')
	{
		// this if for a text node
		if (this[e].type=="text")
			this[e].setValue("");
		// this is for a checkbox
		if (this[e].type=="checkbox")
			this[e].setValue(false);
	}
}
// stand error message hanlder
ttl.utilities.xhrPostError=function(response, ioArgs)
{
	ttl.utilities.errorchecker(response);

	// no message
	if (TTL.isDebug==false) return;

	try
	{
		alert("Problem with call to server :\nstatus: "+response.status + "\nmessage :" + response.message+ "\nresponseText :" + response.responseText);
	}
	catch (e)
	{
		alert("Problem with call to server\n"+response);
	}
}

// stand error message hanlder
ttl.utilities.errorchecker=function(response)
{
	var security_failed = false;
	try
	{
		if ( response.status==403)
			security_failed =true;
	}
	catch(a) { }

	if (security_failed)
	{
		window.location.href = "/login";
		throw "Security Failure";
	}
}

ttl.utilities.globalerrorchecker=function()
{
	console.log("globalerrorchecker");
	console.log(arguments);
	console.log(arguments.length);
	if ( arguments.length==3)
	{
		ttl.utilities.errorchecker ( arguments[1]);
	}
	else if ( arguments.length==2)
	{
		ttl.utilities.errorchecker ( arguments[0]);
	}
}

ttl.utilities.onDownloadError=function(response)
{
	console.log(arguments);
	ttl.utilities.errorchecker(response);
	return this.errorMessage;
}

ttl.utilities.callFailedError=function(response)
{
	// no message
	if (TTL.isDebug==false) return;

	try
	{
		alert("Problem :\nError: "+response.data.error);
	}
	catch (e)
	{
		alert("Problem with call to server\n"+response);
	}
}


//  standard message system
ttl.utilities.showMessageStd=function(message,duration)
{
	var widget = dijit.byId('toast');
	if (widget)
	{
		widget.contentNode.innerHTML="";
		widget.setContent(message,'message',duration||1000);
		widget.show();
	}
}

ttl.utilities.showMessageError=function(message)
{
	var widget = dijit.byId('toast');
	if (widget)
	{
		widget.contentNode.innerHTML="";
		widget.setContent(message,'error',0);
		widget.show();
	}
}

ttl.utilities.hideMessage=function()
{
	var widget = dijit.byId('toast');
	if (widget)
	{
		widget.hide();
		widget.contentNode.innerHTML="";
	}
}

ttl.utilities.isNumber= function (number)
{
	var ok = true;
	var str = number;
    var re = /^[-]?\d*\.?\d*$/;
    str = str.toString();
    if (!str.match(re))
		ok = false;
	try
	{
		parseFloat(number);
	}
	catch(e) { ok = false ; }

	return ok;
}

ttl.utilities.getOuterSize=function(domNode)
{
	var c = dojo.coords(domNode);
	c.x=c.y=c.l=c.t = 0;
	console.log(c);
	return c ;
}

ttl.utilities.resize=function(obj)
{
	var c = this.getOuterSize(obj.parentNode||obj.parent);
	obj.domNode.style.height=c.h+"px";
	console.log(obj.domNode);
}

ttl.utilities.formValidator=function(form)
{
	var actForm = null;
	return dojo.every(form.getDescendants(),
		function(widget)
		{
			// ignore disabled ones
			if (widget.get("disabled")==true )
				return true;

			var rest = !widget.isValid || widget.isValid();
			if ( rest == false )
			{
				if (widget.isFocusable())
				{
					try{
						// if hidden this will throw an error
						widget.focus();
					} catch(e) {}
				}
				else
					rest = true ;
			}
			return rest;
	 	});
}

ttl.utilities.getPreventCache=function(inParams)
{
	return dojo.mixin(
			{"dojo.preventCache": new Date().valueOf()},
			inParams || {});
}

ttl.utilities.getTabButton = function(tabControl,bNumber)
{
	//var button = tabControl.tablist.pane2button[tabControl.getChildren()[bNumber]];
	var button = null;
	for ( var x = 0 ; x < tabControl.tablist._buttons.length; x++ )
	{
		if ( x == bNumber  )
		{
			button = tabControl.tablist._buttons[x];
			break;
		}
	}
	return button ;
}

ttl.utilities.round_decimals = function (original_number, decimals) {
    var result1 = original_number * Math.pow(10, decimals);
    var result2 = Math.round(result1);
    var result3 = result2 / Math.pow(10, decimals);
    return ttl.utilities.pad_with_zeros(result3, decimals);
}

ttl.utilities.pad_with_zeros = function (rounded_value, decimal_places) {

    // Convert the number to a string
    var value_string = rounded_value.toString()

    // Locate the decimal point
    var decimal_location = value_string.indexOf(".")

    // Is there a decimal point?
    if (decimal_location == -1) {

        // If no, then all decimal places will be padded with 0s
        decimal_part_length = 0

        // If decimal_places is greater than zero, tack on a decimal point
        value_string += decimal_places > 0 ? "." : ""
    }
    else {

        // If yes, then only the extra decimal places will be padded with 0s
        decimal_part_length = value_string.length - decimal_location - 1
    }

    // Calculate the number of decimal places that need to be padded with 0s
    var pad_total = decimal_places - decimal_part_length

    if (pad_total > 0) {

        // Pad the string with 0s
        for (var counter = 1; counter <= pad_total; counter++)
            value_string += "0"
        }
    return value_string
}

ttl.utilities.formatButtonCell = function(inDatum) {
	if (inDatum==true)
	{
		return '<i class="fa fa-check" style="color:blue"></i>';
	}
	else
	{
		return '<i class="fa fa-check" style="color:#f6f6f6"></i>';
		//return '<i class="far fa-square"></i>';
	}
//	var status = inDatum==true? 'checked.gif':'unchecked.gif';
//	return '<img  height="10px" width="10px" style="padding:0x;margin:0px" src="/static/images/'+status+'" ></img>';
	}


ttl.utilities.outletType = function(inDatum) {
	if (inDatum == null ) return "...";

	var color = "";

	switch ( inDatum )
	{
		case 'national':
			color="blue";
			break;
		case 'regional':
			color="green";
			break;
		case 'business':
			color="yellow";
			break;
		case 'consumer':
			color="orange";
			break;
		case 'television':
			color="purple";
			break;
		case 'radio':
			color="black";
			break;
		case 'internet':
			color="pink";
			break;
		case 'news':
			color="indigo";
			break;
		case 'others':
			color="white";
			break;
		case 'freelance':
			color="white";
			break;
		case 'parliamentary':
			color="gray";
			break;
	}
	return "<div style='background-color:"+color + ";width:6px;height:100%'>&nbsp;</div>";
}

ttl.utilities.formatRowCtrl = function(inDatum) {
	return '<i class="fa fa-chevron-right"></i>'
//	return '<img height="10px" width="10px" style="padding:0x;margin:0px" src="/prcommon/images/rowctrl.gif"></img>';
	}

ttl.utilities.formatRowCtrlExists = function(inDatum)
{
	if ( inDatum == true )
	{
		return '<i class="fa fa-chevron-right"></i>'
		//return '<img height="10px" width="10px" style="padding:0x;margin:0px" src="/prcommon/images/rowctrl.gif"></img>';
	}
	else
	{
	return "&nbsp;";
	}
}

ttl.utilities.format_row_ctrl = function(inDatum) {
	return '<i class="fa fa-bars" ></i>';
	}

ttl.utilities.formatRowCtrlLarge = function(inDatum) {
	return '<i class="fa fa-chevron-right fa-lg"></i>'
//	return '<img height="20px" width="20px" style="padding:0x;margin:0px" src="/prcommon/images/rowctrllarge.gif"></img>';
	}

ttl.utilities.formatDeletedCtrl = function(inDatum) {
	if ( inDatum == 2 )
		return '<i class="fa fa-times" style="color:red"></i>'

//		return '<img height="10px" width="10px" style="padding:0x;margin:0px" src="/prcommon/images/delete.gif"></img>';
	else
		return "&nbsp;";
	}

ttl.utilities.deleteRowCtrl = function(inDatum) {
	return '<i class="fa fa-times" style="color:red"></i>'

//	return '<img height="10px" width="10px" style="padding:0x;margin:0px" src="/prcommon/images/delete.gif"></img>';
	}

ttl.utilities.editRowCtrl = function(inDatum) {
	return '<img height="10px" width="10px" style="padding:0x;margin:0px" src="/prcommon/images/edit.gif"></img>';
	}

ttl.utilities.formatCopyCtrl= function(inDatum) {
	return '<img height="10px" width="10px" style="padding:0x;margin:0px" src="/prcommon/images/copy.gif"></img>';
	}

ttl.utilities.add_new_line = function(inDatum)
{
	return inDatum ? inDatum.replace('====', '<br />'): '';
};

ttl.utilities.toJsonDate = function( inDate)
{
	if ( inDate == null )
		return "";
	else
		return inDate.getFullYear() + "-" + (inDate.getMonth() + 1 )  + "-" + inDate.getDate();
}

ttl.utilities.toJsonDate2 = function( inDate)
{
	if ( inDate == null )
		return "";
	else
		var y = inDate.getFullYear();
		var m = inDate.getMonth() + 1;
		var d = inDate.getDate();
		return y + '-' + (m<=9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);
}

ttl.utilities.toJsonTime = function( inDate)
{
	if ( inDate == null )
		return "";
	else
		return inDate.getHours() + ":" + inDate.getMinutes() + ":" + inDate.getSeconds();
}

ttl.utilities.fromJsonDate = function( inDate )
{
	if ( inDate == null || inDate === "")
		return new Date();
	else
	{
		var f = inDate.split("-");
		return new Date ( parseInt(f[0]),parseInt(f[1])-1,parseInt(f[2]));
	}
}

ttl.utilities.fromObjectDate = function( inDate )
{
	if ( inDate == null || inDate === "")
		return new Date();
	else
	{
		return new Date ( new Date(inDate.year, inDate.month-1, inDate.day));
	}
}

ttl.utilities.parseDate = function( inDate )
{
	var tdate = null;

	var tmp = inDate.split("/");
	if ( tmp.length < 3 )
		tmp = inDate.split("-");

	if ( tmp.length == 3 )
		tdate = new Date ( parseInt(tmp[2]),
									parseInt(tmp[1])-1,
									parseInt(tmp[0]));

	return tdate;

}


ttl.utilities.getModelItem = function()
{
	if ( arguments[0].i.i !=null )
		this.tmp_row = arguments[0].i;
	else
		this.tmp_row = arguments[0];
}

ttl.utilities.sleepStupidly = function (usec)
{
	var endtime= new Date().getTime() + usec;
	while (new Date().getTime() < endtime);
}


ttl.utilities.open_close_panel = function ( button, pid )
{
	var ctrl = dojo.byId(pid);
	var newmode = dojo.style(ctrl,"display")=="block"? "none":"block";

	dojo.style(ctrl,"display",newmode);
	button.src = newmode == 'block'? '<i class="fa-minus-circle"></i>':'<i class="fa-plus-circle"></i>' 
//	button.src =  newmode=="block"?"/static/images/toclosed.gif":"/static/images/toopen.gif";
}


// formatter for contact type column
ttl.utilities.formatContactInfo = function(inDatum) {
		// need to check flag for private  is primary
		if (isNaN(inDatum) )
		{
			return "...";
		}
		else
		{
			if ( inDatum != -1 )
			{
				return "<img src='/static/images/private.gif' width='10' height='10' style='padding:0px;margin:0px'/>";
			}
			else
			{
				return "";
			}
		}
};

ttl.utilities.Display_Money = function(inDatum)
{
	if (isNaN(inDatum))	{	return '...'	}
	else
	{
		try	{
			return dojo.number.format (parseFloat ( inDatum ), {places:2});
		}
		catch ( e )		{
			return "0.00"
		}
	}
};

ttl.utilities.documentExists = function(inDatum) {
	if ( inDatum == null )
		return "...";

	if ( inDatum == true )
				return "<img src='/static/images/pdf.gif' width='16' height='16' style='padding:0px;margin:0px'/>";

	return "";
}

ttl.utilities.genericView = function(inDatum) {
	if ( inDatum == null )
		return "...";

	if ( inDatum == true )
				return "<img src='/static/images/view.png' width='16' height='16' style='padding:0px;margin:0px'/>";

	return "";
}

ttl.utilities.pdfView = function(inDatum) {
	return "<img src='/static/images/view.png' width='16' height='16' style='padding:0px;margin:0px'/>";
}

ttl.utilities.formatMb = function(inDatum)
{
	if ( inDatum == null )
		return "...";

	return dojo.number.format (parseFloat ( inDatum )/1000000, {places:2}) + "MB";
}

ttl.utilities.jscDate = function ( inDate )
{
	return new Date ( inDate.getFullYear(), inDate.getMonth() , inDate.getDate(),0,0,0,0);
}

ttl.utilities.Display_Int_Money = function(inDatum)
{
	try
	{
		return dojo.number.format (parseFloat ( inDatum )/100.00, {places:2});
	}
	catch ( e )
	{
		return "0.00";
	}
};

ttl.utilities.fonticon = function(inDatum) {
	if (inDatum == null ) return "...";

	var font_icon = "";

	switch ( inDatum )
	{
		case 'News':
			font_icon="fa fa-newspaper-o";
			break;
		case 'Twitter':
			font_icon="fa fa-twitter-square";
			break;
		case 'Facebook':
			font_icon="fa fa-facebook-square";
			break;
		case 'Forums':
			font_icon="fa fa-forumbee";
			break;
		case 'Blogs':
			font_icon="fa fa-bold";
			break;
		case 'Instagram':
			font_icon="fa fa-instagram";
			break;
		case 'YouTube':
			font_icon="fa fa-youtube-square";
			break;
		case 'GooglePlus':
			font_icon="fa fa-google-plus-official";
			break;
		case 'Tumblr':
			font_icon="fa fa-tumblr-square";
			break;
		case 'VKontakte':
			font_icon="fa fa-check-square";
			break;
		case 'Chat':
			font_icon="fa fa-weixin";
			break;
	}
	return "<div class='"+ font_icon + " fa-lg';width:6px;height:100%'>&nbsp;</div>";
};

}

if(!dojo._hasResource["ttl.uuid"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["ttl.uuid"] = true;
dojo.provide("ttl.uuid");

/*
uuid.js - Version 0.3
JavaScript Class to create a UUID like identifier

Copyright (C) 2006-2008, Erik Giberti (AF-Design), All rights reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

The latest version of this file can be downloaded from
http://www.af-design.com/resources/javascript_uuid.php

HISTORY:
6/5/06 	- Initial Release
5/22/08 - Updated code to run faster, removed randrange(min,max) in favor of
          a simpler rand(max) function. Reduced overhead by using getTime()
          method of date class (suggestion by James Hall).
9/5/08	- Fixed a bug with rand(max) and additional efficiencies pointed out
	  by Robert Kieffer http://broofa.com/

KNOWN ISSUES:
- Still no way to get MAC address in JavaScript
- Research into other versions of UUID show promising possibilities
  (more research needed)
- Documentation needs improvement

*/

// On creation of a UUID object, set it's initial value
function UUID(){
	this.id = this.createUUID();
}

// When asked what this Object is, lie and return it's value
UUID.prototype.valueOf = function(){ return this.id; }
UUID.prototype.toString = function(){ return this.id; }

//
// INSTANCE SPECIFIC METHODS
//

UUID.prototype.createUUID = function(){
	//
	// Loose interpretation of the specification DCE 1.1: Remote Procedure Call
	// described at http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagtcjh_37
	// since JavaScript doesn't allow access to internal systems, the last 48 bits
	// of the node section is made up using a series of random numbers (6 octets long).
	//
	var dg = new Date(1582, 10, 15, 0, 0, 0, 0);
	var dc = new Date();
	var t = dc.getTime() - dg.getTime();
	var h = '-';
	var tl = this.getIntegerBits(t,0,31);
	var tm = this.getIntegerBits(t,32,47);
	var thv = this.getIntegerBits(t,48,59) + '1'; // version 1, security version is 2
	var csar = this.getIntegerBits(this.rand(4095),0,7);
	var csl = this.getIntegerBits(this.rand(4095),0,7);

	// since detection of anything about the machine/browser is far to buggy,
	// include some more random numbers here
	// if NIC or an IP can be obtained reliably, that should be put in
	// here instead.
	var n = this.getIntegerBits(this.rand(8191),0,7) +
			this.getIntegerBits(this.rand(8191),8,15) +
			this.getIntegerBits(this.rand(8191),0,7) +
			this.getIntegerBits(this.rand(8191),8,15) +
			this.getIntegerBits(this.rand(8191),0,15); // this last number is two octets long
	return tl + h + tm + h + thv + h + csar + csl + h + n;
}


//
// GENERAL METHODS (Not instance specific)
//


// Pull out only certain bits from a very large integer, used to get the time
// code information for the first part of a UUID. Will return zero's if there
// aren't enough bits to shift where it needs to.
UUID.prototype.getIntegerBits = function(val,start,end){
	var base16 = this.returnBase(val,16);
	var quadArray = new Array();
	var quadString = '';
	var i = 0;
	for(i=0;i<base16.length;i++){
		quadArray.push(base16.substring(i,i+1));
	}
	for(i=Math.floor(start/4);i<=Math.floor(end/4);i++){
		if(!quadArray[i] || quadArray[i] == '') quadString += '0';
		else quadString += quadArray[i];
	}
	return quadString;
}

// Replaced from the original function to leverage the built in methods in
// JavaScript. Thanks to Robert Kieffer for pointing this one out
UUID.prototype.returnBase = function(number, base){
	return (number).toString(base).toUpperCase();
}

// pick a random number within a range of numbers
// int b rand(int a); where 0 <= b <= a
UUID.prototype.rand = function(max){
	return Math.floor(Math.random() * (max + 1));
}

// end of UUID class file
TTL.UUID = UUID;

}

if(!dojo._hasResource["ttl.GridHelpers"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["ttl.GridHelpers"] = true;
//-----------------------------------------------------------------------------
// Name:    GridHelper.js
// Author:  Chris Hoy
// Purpose: function to help grid
// Created: 04/01/2008
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("ttl.GridHelpers");

dojo.declare("ttl.GridHelpers",null,{
	// make sure that the grid is re-sized where the parent container is re-sized
	initGridInLayout : function(container, grid) {
		var container = dijit.byId(container), grid = dijit.byId(grid);
		// resize grid when its containing widget resizes
		dojo.connect(container, "resize", grid, function() {
			grid.resize();
		});
		// render grid when it's parent is shown
		container.onShow = function() {
			setTimeout(function(){grid.render()}, 0);
			};
		// render initially since containers don't do this for some reason.
		grid.update();
	},
	// check to see if virtual grid has been loaded
	isGridRendered: function(grid)
	{
		return (grid.model.data.length>0)? true:false;
	}
	,
	// Add Row to a grid
	AddRowToQueryWriteGrid:function(grid,item)
	{
			grid._addItem(item, item.n);
			//grid.addRow ( );
	}
});

ttl.GridHelpers.onStyleRow=function(inRow,grid,comp) {
		//this.styleRowState(inRow);
		if (inRow.selected) inRow.customClasses += " prmaxSelectedRow";
		if (inRow.odd)  inRow.customClasses += " dojoxGridRowOdd";
		if (inRow.over)  inRow.customClasses += " dojoxGridRowOver";

		if (grid != null && grid != undefined )
		{
			var rowData = grid.getItem(inRow.index);
			if (rowData && comp ( rowData ))
				inRow.customClasses += " selectedRow";

		}

	}


}

if(!dojo._hasResource["dojo.io.iframe"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.io.iframe"] = true;
dojo.provide("dojo.io.iframe");


dojo.getObject("io", true, dojo);

/*=====
dojo.declare("dojo.io.iframe.__ioArgs", dojo.__IoArgs, {
	constructor: function(){
		//	summary:
		//		All the properties described in the dojo.__ioArgs type, apply
		//		to this type. The following additional properties are allowed
		//		for dojo.io.iframe.send():
		//	method: String?
		//		The HTTP method to use. "GET" or "POST" are the only supported
		//		values.  It will try to read the value from the form node's
		//		method, then try this argument. If neither one exists, then it
		//		defaults to POST.
		//	handleAs: String?
		//		Specifies what format the result data should be given to the
		//		load/handle callback. Valid values are: text, html, xml, json,
		//		javascript. IMPORTANT: For all values EXCEPT html and xml, The
		//		server response should be an HTML file with a textarea element.
		//		The response data should be inside the textarea element. Using an
		//		HTML document the only reliable, cross-browser way this
		//		transport can know when the response has loaded. For the html
		//		handleAs value, just return a normal HTML document.  NOTE: xml
		//		is now supported with this transport (as of 1.1+); a known issue
		//		is if the XML document in question is malformed, Internet Explorer
		//		will throw an uncatchable error.
		//	content: Object?
		//		If "form" is one of the other args properties, then the content
		//		object properties become hidden form form elements. For
		//		instance, a content object of {name1 : "value1"} is converted
		//		to a hidden form element with a name of "name1" and a value of
		//		"value1". If there is not a "form" property, then the content
		//		object is converted into a name=value&name=value string, by
		//		using dojo.objectToQuery().
		this.method = method;
		this.handleAs = handleAs;
		this.content = content;
	}
});
=====*/

dojo.io.iframe = {
	// summary:
	//		Sends an Ajax I/O call using and Iframe (for instance, to upload files)
	
	create: function(/*String*/fname, /*String*/onloadstr, /*String?*/uri){
		//	summary:
		//		Creates a hidden iframe in the page. Used mostly for IO
		//		transports.  You do not need to call this to start a
		//		dojo.io.iframe request. Just call send().
		//	fname: String
		//		The name of the iframe. Used for the name attribute on the
		//		iframe.
		//	onloadstr: String
		//		A string of JavaScript that will be executed when the content
		//		in the iframe loads.
		//	uri: String
		//		The value of the src attribute on the iframe element. If a
		//		value is not given, then dojo/resources/blank.html will be
		//		used.
		if(window[fname]){ return window[fname]; }
		if(window.frames[fname]){ return window.frames[fname]; }
		var cframe = null;
		var turi = uri;
		if(!turi){
			if(dojo.config["useXDomain"] && !dojo.config["dojoBlankHtmlUrl"]){
				console.warn("dojo.io.iframe.create: When using cross-domain Dojo builds,"
					+ " please save dojo/resources/blank.html to your domain and set djConfig.dojoBlankHtmlUrl"
					+ " to the path on your domain to blank.html");
			}
			turi = (dojo.config["dojoBlankHtmlUrl"]||dojo.moduleUrl("dojo", "resources/blank.html"));
		}
		var cframe = dojo.place(
			'<iframe id="'+fname+'" name="'+fname+'" src="'+turi+'" onload="'+onloadstr+
			'" style="position: absolute; left: 1px; top: 1px; height: 1px; width: 1px; visibility: hidden">',
		dojo.body());

		window[fname] = cframe;

		return cframe;
	},

	setSrc: function(/*DOMNode*/iframe, /*String*/src, /*Boolean*/replace){
		//summary:
		//		Sets the URL that is loaded in an IFrame. The replace parameter
		//		indicates whether location.replace() should be used when
		//		changing the location of the iframe.
		try{
			if(!replace){
				if(dojo.isWebKit){
					iframe.location = src;
				}else{
					frames[iframe.name].location = src;
				}
			}else{
				// Fun with DOM 0 incompatibilities!
				var idoc;
				if(dojo.isIE || dojo.isWebKit){
					idoc = iframe.contentWindow.document;
				}else{ //  if(d.isMozilla){
					idoc = iframe.contentWindow;
				}
	
				//For Safari (at least 2.0.3) and Opera, if the iframe
				//has just been created but it doesn't have content
				//yet, then iframe.document may be null. In that case,
				//use iframe.location and return.
				if(!idoc){
					iframe.location = src;
					return;
				}else{
					idoc.location.replace(src);
				}
			}
		}catch(e){
			console.log("dojo.io.iframe.setSrc: ", e);
		}
	},

	doc: function(/*DOMNode*/iframeNode){
		//summary: Returns the document object associated with the iframe DOM Node argument.
		var doc = iframeNode.contentDocument || // W3
			(
				(
					(iframeNode.name) && (iframeNode.document) &&
					(dojo.doc.getElementsByTagName("iframe")[iframeNode.name].contentWindow) &&
					(dojo.doc.getElementsByTagName("iframe")[iframeNode.name].contentWindow.document)
				)
			) ||  // IE
			(
				(iframeNode.name)&&(dojo.doc.frames[iframeNode.name])&&
				(dojo.doc.frames[iframeNode.name].document)
			) || null;
		return doc;
	},

	send: function(/*dojo.io.iframe.__ioArgs*/args){
		//summary:
		//		Function that sends the request to the server.
		//		This transport can only process one send() request at a time, so if send() is called
		//multiple times, it will queue up the calls and only process one at a time.
		if(!this["_frame"]){
			this._frame = this.create(this._iframeName, dojo._scopeName + ".io.iframe._iframeOnload();");
		}

		//Set up the deferred.
		var dfd = dojo._ioSetArgs(
			args,
			function(/*Deferred*/dfd){
				//summary: canceller function for dojo._ioSetArgs call.
				dfd.canceled = true;
				dfd.ioArgs._callNext();
			},
			function(/*Deferred*/dfd){
				//summary: okHandler function for dojo._ioSetArgs call.
				var value = null;
				try{
					var ioArgs = dfd.ioArgs;
					var dii = dojo.io.iframe;
					var ifd = dii.doc(dii._frame);
					var handleAs = ioArgs.handleAs;

					//Assign correct value based on handleAs value.
					value = ifd; //html
					if(handleAs != "html"){
						if(handleAs == "xml"){
							//	FF, Saf 3+ and Opera all seem to be fine with ifd being xml.  We have to
							//	do it manually for IE6-8.  Refs #6334.
							if(dojo.isIE < 9 || (dojo.isIE && dojo.isQuirks)){
								dojo.query("a", dii._frame.contentWindow.document.documentElement).orphan();
								var xmlText=(dii._frame.contentWindow.document).documentElement.innerText;
								xmlText=xmlText.replace(/>\s+</g, "><");
								xmlText=dojo.trim(xmlText);
								//Reusing some code in base dojo for handling XML content.  Simpler and keeps
								//Core from duplicating the effort needed to locate the XML Parser on IE.
								var fauxXhr = { responseText: xmlText };
								value = dojo._contentHandlers["xml"](fauxXhr); // DOMDocument
							}
						}else{
							value = ifd.getElementsByTagName("textarea")[0].value; //text
							if(handleAs == "json"){
								value = dojo.fromJson(value); //json
							}else if(handleAs == "javascript"){
								value = dojo.eval(value); //javascript
							}
						}
					}
				}catch(e){
					value = e;
				}finally{
					ioArgs._callNext();
				}
				return value;
			},
			function(/*Error*/error, /*Deferred*/dfd){
				//summary: errHandler function for dojo._ioSetArgs call.
				dfd.ioArgs._hasError = true;
				dfd.ioArgs._callNext();
				return error;
			}
		);

		//Set up a function that will fire the next iframe request. Make sure it only
		//happens once per deferred.
		dfd.ioArgs._callNext = function(){
			if(!this["_calledNext"]){
				this._calledNext = true;
				dojo.io.iframe._currentDfd = null;
				dojo.io.iframe._fireNextRequest();
			}
		};

		this._dfdQueue.push(dfd);
		this._fireNextRequest();
		
		//Add it the IO watch queue, to get things like timeout support.
		dojo._ioWatch(
			dfd,
			function(/*Deferred*/dfd){
				//validCheck
				return !dfd.ioArgs["_hasError"];
			},
			function(dfd){
				//ioCheck
				return (!!dfd.ioArgs["_finished"]);
			},
			function(dfd){
				//resHandle
				if(dfd.ioArgs._finished){
					dfd.callback(dfd);
				}else{
					dfd.errback(new Error("Invalid dojo.io.iframe request state"));
				}
			}
		);

		return dfd;
	},

	_currentDfd: null,
	_dfdQueue: [],
	_iframeName: dojo._scopeName + "IoIframe",

	_fireNextRequest: function(){
		//summary: Internal method used to fire the next request in the bind queue.
		try{
			if((this._currentDfd)||(this._dfdQueue.length == 0)){ return; }
			//Find next deferred, skip the canceled ones.
			do{
				var dfd = this._currentDfd = this._dfdQueue.shift();
			} while(dfd && dfd.canceled && this._dfdQueue.length);

			//If no more dfds, cancel.
			if(!dfd || dfd.canceled){
				this._currentDfd =  null;
				return;
			}

			var ioArgs = dfd.ioArgs;
			var args = ioArgs.args;

			ioArgs._contentToClean = [];
			var fn = dojo.byId(args["form"]);
			var content = args["content"] || {};
			if(fn){
				if(content){
					// if we have things in content, we need to add them to the form
					// before submission
					var pHandler = function(name, value) {
						dojo.create("input", {type: "hidden", name: name, value: value}, fn);
						ioArgs._contentToClean.push(name);
					};
					for(var x in content){
						var val = content[x];
						if(dojo.isArray(val) && val.length > 1){
							var i;
							for (i = 0; i < val.length; i++) {
								pHandler(x,val[i]);
							}
						}else{
							if(!fn[x]){
								pHandler(x,val);
							}else{
								fn[x].value = val;
							}
						}
					}
				}
				//IE requires going through getAttributeNode instead of just getAttribute in some form cases,
				//so use it for all.  See #2844
				var actnNode = fn.getAttributeNode("action");
				var mthdNode = fn.getAttributeNode("method");
				var trgtNode = fn.getAttributeNode("target");
				if(args["url"]){
					ioArgs._originalAction = actnNode ? actnNode.value : null;
					if(actnNode){
						actnNode.value = args.url;
					}else{
						fn.setAttribute("action",args.url);
					}
				}
				if(!mthdNode || !mthdNode.value){
					if(mthdNode){
						mthdNode.value= (args["method"]) ? args["method"] : "post";
					}else{
						fn.setAttribute("method", (args["method"]) ? args["method"] : "post");
					}
				}
				ioArgs._originalTarget = trgtNode ? trgtNode.value: null;
				if(trgtNode){
					trgtNode.value = this._iframeName;
				}else{
					fn.setAttribute("target", this._iframeName);
				}
				fn.target = this._iframeName;
				dojo._ioNotifyStart(dfd);
				fn.submit();
			}else{
				// otherwise we post a GET string by changing URL location for the
				// iframe
				var tmpUrl = args.url + (args.url.indexOf("?") > -1 ? "&" : "?") + ioArgs.query;
				dojo._ioNotifyStart(dfd);
				this.setSrc(this._frame, tmpUrl, true);
			}
		}catch(e){
			dfd.errback(e);
		}
	},

	_iframeOnload: function(){
		var dfd = this._currentDfd;
		if(!dfd){
			this._fireNextRequest();
			return;
		}

		var ioArgs = dfd.ioArgs;
		var args = ioArgs.args;
		var fNode = dojo.byId(args.form);
	
		if(fNode){
			// remove all the hidden content inputs
			var toClean = ioArgs._contentToClean;
			for(var i = 0; i < toClean.length; i++) {
				var key = toClean[i];
				//Need to cycle over all nodes since we may have added
				//an array value which means that more than one node could
				//have the same .name value.
				for(var j = 0; j < fNode.childNodes.length; j++){
					var chNode = fNode.childNodes[j];
					if(chNode.name == key){
						dojo.destroy(chNode);
						break;
					}
				}
			}

			// restore original action + target
			if(ioArgs["_originalAction"]){
				fNode.setAttribute("action", ioArgs._originalAction);
			}
			if(ioArgs["_originalTarget"]){
				fNode.setAttribute("target", ioArgs._originalTarget);
				fNode.target = ioArgs._originalTarget;
			}
		}

		ioArgs._finished = true;
	}
};

}

if(!dojo._hasResource["dojox.form.FileInput"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.form.FileInput"] = true;
dojo.provide("dojox.form.FileInput");
dojo.experimental("dojox.form.FileInput");




dojo.declare("dojox.form.FileInput",
	dijit.form._FormWidget,
	{
	// summary: A styled input type="file"
	//
	// description: A input type="file" form widget, with a button for uploading to be styled via css,
	//	a cancel button to clear selection, and FormWidget mixin to provide standard dijit.form.Form
	//	support (FIXME: maybe not fully implemented)

	// label: String
	//	the title text of the "Browse" button
	label: "Browse ...",

	// cancelText: String
	//	the title of the "Cancel" button
	cancelText: "Cancel",

	// name: String
	//	ugh, this should be pulled from this.domNode
	name: "uploadFile",

	templateString: dojo.cache("dojox.form", "resources/FileInput.html", "<div class=\"dijitFileInput\">\r\n\t<input id=\"${id}\" class=\"dijitFileInputReal\" type=\"file\" dojoAttachPoint=\"fileInput\" name=\"${name}\" />\r\n\t<div class=\"dijitFakeInput\">\r\n\t\t<input class=\"dijitFileInputVisible\" type=\"text\" dojoAttachPoint=\"focusNode, inputNode\" />\r\n\t\t<div class=\"dijitInline dijitFileInputText\" dojoAttachPoint=\"titleNode\">${label}</div>\r\n\t\t<div class=\"dijitInline dijitFileInputButton\" dojoAttachPoint=\"cancelNode\" \r\n\t\t\tdojoAttachEvent=\"onclick:reset\">${cancelText}</div>\r\n\t</div>\r\n</div>\r\n"),
	
	startup: function(){
		// summary: listen for changes on our real file input
		this._listener = this.connect(this.fileInput,"onchange","_matchValue");
		this._keyListener = this.connect(this.fileInput,"onkeyup","_matchValue");
	},

	//get rid of the this.connect in _FormWidget.postCreate to allow IE to show
	//the file picker dialog properly
	postCreate: function(){},
	
	_matchValue: function(){
		// summary: set the content of the upper input based on the semi-hidden file input
		this.inputNode.value = this.fileInput.value;
		if(this.inputNode.value){
			this.cancelNode.style.visibility = "visible";
			dojo.fadeIn({ node: this.cancelNode, duration:275 }).play();
		}
	},

	setLabel: function(/* String */label,/* String? */cssClass){
		// summary: method to allow use to change button label
		this.titleNode.innerHTML = label;
	},

	reset: function(/* Event */e){
		// summary: on click of cancel button, since we can't clear the input because of
		// 	security reasons, we destroy it, and add a new one in it's place.
		this.disconnect(this._listener);
		this.disconnect(this._keyListener);
		if(this.fileInput){
			this.domNode.removeChild(this.fileInput);
		}
		dojo.fadeOut({ node: this.cancelNode, duration:275 }).play();

		// should we use cloneNode()? can we?
		this.fileInput = document.createElement('input');
		// dojo.attr(this.fileInput,{
		//	"type":"file", "id":this.id, "name": this.name
		//});
		this.fileInput.setAttribute("type","file");
		this.fileInput.setAttribute("id", this.id);
		this.fileInput.setAttribute("name", this.name);
		dojo.addClass(this.fileInput,"dijitFileInputReal");
		this.domNode.appendChild(this.fileInput);

		this._keyListener = this.connect(this.fileInput, "onkeyup", "_matchValue");
		this._listener = this.connect(this.fileInput, "onchange", "_matchValue");
		this.inputNode.value = "";
	}

});

}

if(!dojo._hasResource["dojox.form.PasswordValidator"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.form.PasswordValidator"] = true;
dojo.provide("dojox.form.PasswordValidator");






dojo.declare("dojox.form._ChildTextBox", dijit.form.ValidationTextBox, {
	// summary:
	//		A class that is shared between all our children - extends
	//		ValidationTextBox and provides some shared functionality
	//
	// containerWidget: widget
	//		Our parent (the PasswordValidator)
	containerWidget: null,
	
	// type: string
	//		Don't override this - we are all "password" types
	type: "password",
	
	reset: function(){
		// summary:
		//		Force-set to empty string (we don't save passwords EVER)...and
		//		since _OldPWBox overrides _setValueAttr to check for empty string,
		//		call our parent class directly (not this.inherited())
		dijit.form.ValidationTextBox.prototype._setValueAttr.call(this, "", true);
		this._hasBeenBlurred = false;
	},
	
	postCreate: function(){
		// summary:
		//		We want to remove the "name" attribute from our focus node if
		//		we don't have one set - this prevents all our extra values
		//		from being posted on submit
		this.inherited(arguments);
		if(!this.name){
			dojo.removeAttr(this.focusNode, "name");
		}
		this.connect(this.focusNode, "onkeypress", "_onChildKeyPress");
	},
	
	_onChildKeyPress: function(e){
		// Check if we pressed <enter> - if so, set our blur value so that
		// the parent widget will be updated correctly.
		if(e && e.keyCode == dojo.keys.ENTER){
			this._setBlurValue();
		}
	}
});



dojo.declare("dojox.form._OldPWBox", dojox.form._ChildTextBox, {
	// summary:
	//		A class representing our "old password" box.
	//
	// _isPWValid: boolean
	//		Whether or not the password is valid
	_isPWValid: false,
	
	_setValueAttr: function(/* anything */ newVal, /* boolean? */ priority){
		// summary:
		//		Updates _isPWValid if this isn't our initial update by calling
		//		our PasswordValidator's pwCheck function
		if(newVal === ""){
			newVal = dojox.form._OldPWBox.superclass.attr.call(this, "value");
		}
		if(priority !== null){
			//  Priority is passed in as null, explicitly when this is an
			//	update (not initially set).  We want to check our password now.
			this._isPWValid = this.containerWidget.pwCheck(newVal);
		}
		this.inherited(arguments);
		// Trigger the containerWidget to recheck its value, if needed
		this.containerWidget._childValueAttr(this.containerWidget._inputWidgets[1].get("value"));
	},

	isValid: function(/* boolean */ isFocused){
		// Take into account the isPWValid setting
		return this.inherited("isValid", arguments) && this._isPWValid;
	},

	_update: function(/* event */ e){
		// Only call validate() if we've been blurred or else we get popups
		// too early.
		if(this._hasBeenBlurred){ this.validate(true); }
		this._onMouse(e);
	},

	_getValueAttr: function(){
		if(this.containerWidget._started && this.containerWidget.isValid()){
			return this.inherited(arguments);
		}
		return "";
	},

	_setBlurValue: function(){
		// TextBox._setBlurValue calls this._setValueAttr(this.get('value'), ...)
		// Because we are overridding _getValueAttr to return "" when the containerWidget
		// is not valid, TextBox._setBlurValue will cause OldPWBox's value to be set to ""
		//
		// So, we directly call ValidationTextBox._getValueAttr to bypass our _getValueAttr
		var value = dijit.form.ValidationTextBox.prototype._getValueAttr.call(this);
		this._setValueAttr(value, (this.isValid ? this.isValid() : true));
	}
});


dojo.declare("dojox.form._NewPWBox", dojox.form._ChildTextBox, {
	// summary:
	//		A class representing our new password textbox

	// required: boolean
	//		Whether or not this widget is required (default: true)
	required: true,
	
	onChange: function(){
		// summary:
		//		Validates our verify box - to make sure that a change to me is
		//		reflected there
		this.containerWidget._inputWidgets[2].validate(false);
		this.inherited(arguments);
	}
});

dojo.declare("dojox.form._VerifyPWBox", dojox.form._ChildTextBox, {
	// summary:
	//		A class representing our verify textbox

	isValid: function(isFocused){
		// summary:
		//		Validates that we match the "real" password
		return this.inherited("isValid", arguments) &&
			(this.get("value") == this.containerWidget._inputWidgets[1].get("value"));
	}
});

dojo.declare("dojox.form.PasswordValidator", dijit.form._FormValueWidget, {
	// summary:
	//		A password validation widget that simplifies the "old/new/verify"
	//		style of requesting passwords.  You will probably want to override
	//		this class and implement your own pwCheck function.
	//
	// required: boolean
	//		Whether or not it is required for form submission
	required: true,
	
	// inputWidgets: TextBox[]
	//		An array of text boxes that are our components
	_inputWidgets: null,

	// oldName: string?
	//		The name to send our old password as (when form is posted)
	oldName: "",
	
	templateString: dojo.cache("dojox.form", "resources/PasswordValidator.html", "<div dojoAttachPoint=\"containerNode\">\r\n\t<input type=\"hidden\" name=\"${name}\" value=\"\" dojoAttachPoint=\"focusNode\" />\r\n</div>\r\n"),
	
	_hasBeenBlurred: false,

	isValid: function(/* boolean */ isFocused){
		// summary: we are valid if ALL our children are valid
		return dojo.every(this._inputWidgets, function(i){
			if(i && i._setStateClass){ i._setStateClass(); }
			return (!i || i.isValid());
		});
	},

	validate: function(/* boolean */ isFocused){
		// summary: Validating this widget validates all our children
		return dojo.every(dojo.map(this._inputWidgets, function(i){
			if(i && i.validate){
				i._hasBeenBlurred = (i._hasBeenBlurred || this._hasBeenBlurred);
				return i.validate();
			}
			return true;
		}, this), "return item;");
	},

	reset: function(){
		// summary: Resetting this widget resets all our children
		this._hasBeenBlurred = false;
		dojo.forEach(this._inputWidgets, function(i){
			if(i && i.reset){ i.reset(); }
		}, this);
	},

	_createSubWidgets: function(){
		// summary:
		//		Turns the inputs inside this widget into "real" validation
		//		widgets - and sets up the needed connections.
		var widgets = this._inputWidgets,
			msg = dojo.i18n.getLocalization("dojox.form", "PasswordValidator", this.lang);
		dojo.forEach(widgets, function(i, idx){
			if(i){
				var p = {containerWidget: this}, c;
				if(idx === 0){
					p.name = this.oldName;
					p.invalidMessage = msg.badPasswordMessage;
					c = dojox.form._OldPWBox;
				}else if(idx === 1){
					p.required = this.required;
					c = dojox.form._NewPWBox;
				}else if(idx === 2){
					p.invalidMessage = msg.nomatchMessage;
					c = dojox.form._VerifyPWBox;
				}
				widgets[idx] = new c(p, i);
			}
		}, this);
	},

	pwCheck: function(/* string */ password){
		// summary:
		//		Overridable function for validation of the old password box.
		//
		//		This function is called and passed the old password.  Return
		//		true if it's OK to continue, and false if it is not.
		//
		//		IMPORTANT SECURITY NOTE:  Do NOT EVER EVER EVER check this in
		//									HTML or JavaScript!!!
		//
		//		You will probably want to override this function to callback
		//		to a server to verify the password (the callback will need to
		//		be syncronous) - and it's probably a good idea to validate
		//		it again on form submission before actually doing
		//		anything destructive - that's why the "oldName" value
		//		is available.
		//
		//		And don't just fetch the password from the server
		//		either :)  Send the test password (probably hashed, for
		//		security) and return from the server a status instead.
		//
		//		Again - DON'T BE INSECURE!!!  Security is left as an exercise
		//		for the reader :)
		return false;
	},

	postCreate: function(){
		//	summary:
		//		Sets up the correct widgets.  You *MUST* specify one child
		//		text box (a simple HTML <input> element) with pwType="new"
		//		*and* one child text box with pwType="verify".  You *MAY*
		//		specify a third child text box with pwType="old" in order to
		//		prompt the user to enter in their old password before the
		//		widget returns that it is valid.
		
		this.inherited(arguments);
		
		// Turn my inputs into the correct stuff....
		var widgets = this._inputWidgets = [];
		dojo.forEach(["old","new","verify"], function(i){
			widgets.push(dojo.query("input[pwType=" + i + "]", this.containerNode)[0]);
		}, this);
		if (!widgets[1] || !widgets[2]){
			throw new Error("Need at least pwType=\"new\" and pwType=\"verify\"");
		}
		if (this.oldName && !widgets[0]){
			throw new Error("Need to specify pwType=\"old\" if using oldName");
		}
		this.containerNode = this.domNode;
		this._createSubWidgets();
		this.connect(this._inputWidgets[1], "_setValueAttr", "_childValueAttr");
		this.connect(this._inputWidgets[2], "_setValueAttr", "_childValueAttr");
	},
	
	_childValueAttr: function(v){
		this.set("value", this.isValid() ? v : "");
	},
	
	_setDisabledAttr: function(value){
		this.inherited(arguments);
		dojo.forEach(this._inputWidgets, function(i){
			if(i && i.set){ i.set("disabled", value);}
		});
	},
	
	_setRequiredAttribute: function(value){
		this.required = value;
		dojo.attr(this.focusNode, "required", value);
		dijit.setWaiState(this.focusNode, "required", value);
		this._refreshState();
		dojo.forEach(this._inputWidgets, function(i){
			if(i && i.set){ i.set("required", value);}
		});
	},

	_setValueAttr: function(v){
		this.inherited(arguments);
		dojo.attr(this.focusNode, "value", v);
	},
	
	_getValueAttr: function(){
		// Make sure we don't return undefined....
		return this.inherited(arguments)||"";
	},
	
	focus: function(){
		// summary:
		//		places focus on the first invalid input widget - if all
		//		input widgets are valid, the first widget is focused.
		var f = false;
		dojo.forEach(this._inputWidgets, function(i){
			if(i && !i.isValid() && !f){
				i.focus();
				f = true;
			}
		});
		if(!f){ this._inputWidgets[1].focus(); }
	}
});

}

if(!dojo._hasResource["dojox.collections._base"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.collections._base"] = true;
dojo.provide("dojox.collections._base");

dojox.collections.DictionaryEntry=function(/* string */k, /* object */v){
	//	summary
	//	return an object of type dojox.collections.DictionaryEntry
	this.key=k;
	this.value=v;
	this.valueOf=function(){
		return this.value; 	//	object
	};
	this.toString=function(){
		return String(this.value);	//	string
	};
}

/*	Iterators
 *	The collections.Iterators (Iterator and DictionaryIterator) are built to
 *	work with the Collections included in this module.  However, they *can*
 *	be used with arrays and objects, respectively, should one choose to do so.
 */
dojox.collections.Iterator=function(/* array */arr){
	//	summary
	//	return an object of type dojox.collections.Iterator
	var a=arr;
	var position=0;
	this.element=a[position]||null;
	this.atEnd=function(){
		//	summary
		//	Test to see if the internal cursor has reached the end of the internal collection.
		return (position>=a.length);	//	bool
	};
	this.get=function(){
		//	summary
		//	Get the next member in the collection.
		if(this.atEnd()){
			return null;		//	object
		}
		this.element=a[position++];
		return this.element;	//	object
	};
	this.map=function(/* function */fn, /* object? */scope){
		//	summary
		//	Functional iteration with optional scope.
		return dojo.map(a, fn, scope);
	};
	this.reset=function(){
		//	summary
		//	reset the internal cursor.
		position=0;
		this.element=a[position];
	};
}

/*	Notes:
 *	The DictionaryIterator no longer supports a key and value property;
 *	the reality is that you can use this to iterate over a JS object
 *	being used as a hashtable.
 */
dojox.collections.DictionaryIterator=function(/* object */obj){
	//	summary
	//	return an object of type dojox.collections.DictionaryIterator
	var a=[];	//	Create an indexing array
	var testObject={};
	for(var p in obj){
		if(!testObject[p]){
			a.push(obj[p]);	//	fill it up
		}
	}
	var position=0;
	this.element=a[position]||null;
	this.atEnd=function(){
		//	summary
		//	Test to see if the internal cursor has reached the end of the internal collection.
		return (position>=a.length);	//	bool
	};
	this.get=function(){
		//	summary
		//	Get the next member in the collection.
		if(this.atEnd()){
			return null;		//	object
		}
		this.element=a[position++];
		return this.element;	//	object
	};
	this.map=function(/* function */fn, /* object? */scope){
		//	summary
		//	Functional iteration with optional scope.
		return dojo.map(a, fn, scope);
	};
	this.reset=function() {
		//	summary
		//	reset the internal cursor.
		position=0;
		this.element=a[position];
	};
};

}

if(!dojo._hasResource["dojox.collections.Dictionary"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.collections.Dictionary"] = true;
dojo.provide("dojox.collections.Dictionary");


dojox.collections.Dictionary=function(/* dojox.collections.Dictionary? */dictionary){
	//	summary
	//	Returns an object of type dojox.collections.Dictionary
	var items={};
	this.count=0;

	//	comparator for property addition and access.
	var testObject={};

	this.add=function(/* string */k, /* object */v){
		//	summary
		//	Add a new item to the Dictionary.
		var b=(k in items);
		items[k]=new dojox.collections.DictionaryEntry(k,v);
		if(!b){
			this.count++;
		}
	};
	this.clear=function(){
		//	summary
		//	Clears the internal dictionary.
		items={};
		this.count=0;
	};
	this.clone=function(){
		//	summary
		//	Returns a new instance of dojox.collections.Dictionary; note the the dictionary is a clone but items might not be.
		return new dojox.collections.Dictionary(this);	//	dojox.collections.Dictionary
	};
	this.contains=this.containsKey=function(/* string */k){
		//	summary
		//	Check to see if the dictionary has an entry at key "k".
		if(testObject[k]){
			return false;			// bool
		}
		return (items[k]!=null);	//	bool
	};
	this.containsValue=function(/* object */v){
		//	summary
		//	Check to see if the dictionary has an entry with value "v".
		var e=this.getIterator();
		while(e.get()){
			if(e.element.value==v){
				return true;	//	bool
			}
		}
		return false;	//	bool
	};
	this.entry=function(/* string */k){
		//	summary
		//	Accessor method; similar to dojox.collections.Dictionary.item but returns the actual Entry object.
		return items[k];	//	dojox.collections.DictionaryEntry
	};
	this.forEach=function(/* function */ fn, /* object? */ scope){
		//	summary
		//	functional iterator, following the mozilla spec.
		var a=[];	//	Create an indexing array
		for(var p in items) {
			if(!testObject[p]){
				a.push(items[p]);	//	fill it up
			}
		}
		dojo.forEach(a, fn, scope);
	};
	this.getKeyList=function(){
		//	summary
		//	Returns an array of the keys in the dictionary.
		return (this.getIterator()).map(function(entry){
			return entry.key;
		});	//	array
	};
	this.getValueList=function(){
		//	summary
		//	Returns an array of the values in the dictionary.
		return (this.getIterator()).map(function(entry){
			return entry.value;
		});	//	array
	};
	this.item=function(/* string */k){
		//	summary
		//	Accessor method.
		if(k in items){
			return items[k].valueOf();	//	object
		}
		return undefined;	//	object
	};
	this.getIterator=function(){
		//	summary
		//	Gets a dojox.collections.DictionaryIterator for iteration purposes.
		return new dojox.collections.DictionaryIterator(items);	//	dojox.collections.DictionaryIterator
	};
	this.remove=function(/* string */k){
		//	summary
		//	Removes the item at k from the internal collection.
		if(k in items && !testObject[k]){
			delete items[k];
			this.count--;
			return true;	//	bool
		}
		return false;	//	bool
	};

	if (dictionary){
		var e=dictionary.getIterator();
		while(e.get()) {
			 this.add(e.element.key, e.element.value);
		}
	}
};

}

if(!dojo._hasResource["prcommon.data.QueryWriteStore"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.data.QueryWriteStore"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.data.QueryWriteStore
// Author:  Chris Hoy
// Purpose: allows data to be chnaged from a query
// Created: 23/05/2008
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prcommon.data.QueryWriteStore");



dojo.declare("prcommon.data.QueryWriteStore", dojox.data.QueryReadStore,
{
	tableid:"",
	constructor: function(/* Object */ params)
	{
		console.log("QueryWriteStore constructor");
		params['clearOnClose'] = true;
		// THIS DOESN@T WORK NEED to CHNAGED
	  // var xhrHandler = xhrFunc({url:this.url, handleAs:"json-comment-optional", content:serverQuery, preventCache:true });
		// !!! IN QueryReadStore !!!!!!!

		params['urlPreventCache'] = true;
		dojo.mixin(this,params);
		this._features["dojo.data.api.Write"] = true;
		this._features['dojo.data.api.Notification'] = true;

		this._nocallback = ( params.nocallback == null )  ? false : params['nocallback'];
		if (params.oncallback != undefined)
			this.onCallBack  = params.oncallback;
		else
			this.onCallBack  = null;
	},
	_getIdentifierAttribute: function(){
		var identifierAttribute = this.getFeatures()['dojo.data.api.Identity'];
		// this._assert((identifierAttribute === Number) || (dojo.isString(identifierAttribute)));
		return identifierAttribute;
	},
	SetNoCallBackMode:function(mode)
	{
		this._nocallback = mode;
	},
    newItem: function(/* Object? */ keywordArgs, /*Object?*/ parentInfo){

		var newIdentity = keywordArgs[this._identifier];
		var newItem = {i:keywordArgs, r:this, n:this._items.length};
		this._items.push(newItem);
		console.log(newItem);
		var identity = newItem.i[this._identifier];
		this._itemsByIdentity[identity] = newItem.i;

		var pInfo = null;
		this.onNew(newItem, pInfo); // dojo.data.api.Notification call

		return newItem;

    },
    deleteItem: function(/* item */ item)
    {
		console.log("deleteItem");
		var identifierAttribute = this._identifier;
		console.log(item);
		console.log(item.i, identifierAttribute);
		var identity = item.i[identifierAttribute];
		delete this._itemsByIdentity[identity];

		for (var c = 0 ;  c < this._items.length; c++)
		{
			if ( this._items[c] == null ) continue;
			if ( this._items[c].i[identifierAttribute] == item.i[identifierAttribute] )
			{
				delete this._items[c];
				break;
			}
		}

		this.onDelete(item); // dojo.data.api.Notification call

        return true;
    },
	invertValue:function( attribute )
	{
		for (var c = 0 ;  c < this._items.length; c++)
		{
			var item = this._items[c];
			var oldValue = item.i[attribute];

			item.i[attribute] = !oldValue;
			this.onSet(item, attribute, !oldValue, !oldValue);
		}
	},
	clearValue:function( attribute, value )
	{
		for (var c = 0 ;  c < this._items.length; c++)
		{
			var item = this._items[c];
			var oldValue = item.i[attribute];

			item.i[attribute] = value;
			this.onSet(item, attribute,  value, value);
		}
	},
    setValue: function(    /* item */ item,
                        /* string */ attribute,
                        /* almost anything */ value,
						doupdate)
    {
		console.log("setting",attribute,item.i,item.i[attribute],value,this._nocallback);
		if (item.i[attribute] != value )
		{
			var oldValue = item.i[attribute];
			item.i[attribute] = value;
			if (this._nocallback==false)
			{
				var params = {
								attribute:attribute,
								value:value,
								key:item.i[this._identifier]	,
								tableid:this.tableid } ;

				// Now add context
				if ( this.oncallbackparams != null )
					params = dojo.mixin ( params, this.oncallbackparams() ) ;

				// make call
				dojo.xhrPost(
					ttl.utilities.makeParams({
						url:'/maintenance/updatefield',
						load:this.onCallBack,
						error: null,
						content: params }));
			}
		}
		if (doupdate==true )
			this.onSet(item, attribute, value,value);
        return true;
    },
    unsetAttribute: function(    /* item */ item,
                                /* string */ attribute)
    {
		console.log("unsetAttribute");
        return true;
    },
    save: function(/* object */ keywordArgs)
    {
		console.log("save", keywordArgs);
        return true;
    },
    revert: function()
    {
		console.log("revert", keywordArgs);
        return true;
    },
    isDirty: function(/* item? */ item)
    {
		console.log("isDirty", keywordArgs);
        return true;
    },
	onDelete: function(/* item */ deletedItem){
		// summary: See dojo.data.api.Notification.onDelete()

		// No need to do anything. This method is here just so that the
		// client code can connect observers to it.
	},
	onNew: function(/* item */ newItem, /*object?*/ parentInfo){
		// summary: See dojo.data.api.Notification.onNew()

		// No need to do anything. This method is here just so that the
		// client code can connect observers to it.
	},
	fetchItemByIdentity: function(/* Object */ keywordArgs){
		//	summary:
		//		See dojo.data.api.Identity.fetchItemByIdentity()

		// See if we have already loaded the item with that id
		// In case there hasn't been a fetch yet, _itemsByIdentity is null
		// and thus a fetch will be triggered below.
		if(this._itemsByIdentity){
			var item = this._itemsByIdentity[keywordArgs.identity];
			if(!(item === undefined)){
				if(keywordArgs.onItem){
					var scope =  keywordArgs.scope?keywordArgs.scope:dojo.global;
					keywordArgs.onItem.call(scope, {i:item, r:this});
				}
				return;
			}
			else
			{
				var identifierAttribute = this._identifier;
					for (var c = 0 ;  c < this._items.length; c++)
					{
						if ( this._items[c] == null ) continue;
						if ( this._items[c].i[identifierAttribute] == keywordArgs.identity )
						{
							if(keywordArgs.onItem)
							{
								var scope =  keywordArgs.scope?keywordArgs.scope:dojo.global;
								keywordArgs.onItem.call(scope, {i:this._items[c].i, r:this});
							}
							break;
						}
					}
				// at this point in not in the model so return null
			}
		}

		// Otherwise we need to go remote
		// Set up error handler
		var _errorHandler = function(errorData, requestObject){
			var scope =  keywordArgs.scope?keywordArgs.scope:dojo.global;
			if(keywordArgs.onError){
				keywordArgs.onError.call(scope, errorData);
			}
		};

		// Set up fetch handler
		var _fetchHandler = function(items, requestObject){
			var scope =  keywordArgs.scope?keywordArgs.scope:dojo.global;
			try{
				// There is supposed to be only one result
				var item = null;
				if(items && items.length == 1){
					item = items[0];
				}

				// If no item was found, item is still null and we'll
				// fire the onItem event with the null here
				if(keywordArgs.onItem){
					keywordArgs.onItem.call(scope, item,true);
				}
			}catch(error){
				if(keywordArgs.onError){
					keywordArgs.onError.call(scope, error);
				}
			}
		};

		// Construct query
		var request = {serverQuery:{id:keywordArgs.identity}};

		// Dispatch query
		this._fetchItems(request, _fetchHandler, _errorHandler);
	},
	hasRows:function()
	{
		var lcount = false ;
		for(var key in this._itemsByIdentity)
		{
			lcount = true ;
			break;
		}

		return lcount;
	}
});

}

if(!dojo._hasResource["prmax.user.AddUser"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.user.AddUser"] = true;
//-----------------------------------------------------------------------------
// Name:    prmax.freelance.FreelanceEdit
// Author:  Chris Hoy
// Purpose: Global Control for the Groups interface
// Created: 23/05/2008
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.user.AddUser");





dojo.declare("prmax.user.AddUser",
	[dijit._Widget, dijit._Templated, dijit._Container],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n    <form class=\"prmaxdefault\" dojoAttachPoint=\"addform\" dojoType=\"dijit.form.Form\" onSubmit=\"return false\">\r\n\t<input dojoAttachPoint=\"icustomerid\" name=\"icustomerid\" type=\"hidden\" size=\"40\" dojoType=\"dijit.form.TextBox\" value=\"\" />\r\n\t<input dojoAttachPoint=\"extended_security\" name=\"extended_security\" type=\"hidden\" size=\"40\" dojoType=\"dijit.form.TextBox\" value=\"\" />\r\n        <table style=\"width:350px\" class=\"prmaxtable\" >\r\n             <tr>\r\n\t\t\t\t<td width=\"30%\" class=\"prmaxrowtag\">Email Address</td>\r\n\t\t\t\t<td><input dojoAttachPoint=\"email\" name=\"email\" type=\"text\" size=\"40\" maxlength=\"80\" trim=\"true\" dojoType=\"dijit.form.ValidationTextBox\" regExpGen=\"dojox.validate.regexp.emailAddress\" required=\"true\" trim=\"true\" invalidMessage=\"invalid email address\" size=\"40\" maxlength=\"70\"/></td>\r\n\t\t\t</tr>\r\n             <tr>\r\n\t\t\t\t<td width=\"30%\" class=\"prmaxrowtag\">Display Name</td>\r\n\t\t\t\t<td><input dojoAttachPoint=\"displayname\" name=\"displayname\" type=\"text\" size=\"40\" maxlength=\"80\" trim=\"true\" dojoType=\"dijit.form.ValidationTextBox\" required=\"true\" trim=\"true\" invalidMessage=\"Must be entered\" size=\"40\" maxlength=\"40\"/></td>\r\n\t\t\t</tr>\r\n             <tr>\r\n\t\t\t\t<td width=\"30%\" class=\"prmaxrowtag\">Password</td>\r\n\t\t\t\t<td><input dojoAttachPoint=\"password\" name=\"password\" type=\"password\" size=\"20\" maxlength=\"20\" trim=\"true\" dojoType=\"dijit.form.ValidationTextBox\" required=\"true\" trim=\"true\" invalidMessage=\"Must be entered\" size=\"20\" maxlength=\"20\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr dojoAttachPoint=\"external_id_view\" class=\"prmaxhidden\"><td class=\"prmaxrowtag\" style=\"width:30%\">External Id</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"external_key\" name=\"external_key\" type=\"text\" trim=\"true\" required=\"false\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t<tr><td colspan=\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td colspan=\"2\" align=\"right\"><button class=\"prmaxbutton\" dojoAttachPoint=\"saveAddNode\" dojoAttachEvent=\"onClick:_AddUser\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Adding...\" label=\"Add\"></button></td></tr>\r\n\t\t\t<tr><td colspan=\"2\">&nbsp;</td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function() {
	},
	postCreate:function()
	{
		// Load the data
		dojo.connect(this.addform,"onSubmit",dojo.hitch(this,this._Add));

		this._SavedCall = dojo.hitch(this , this._Saved ) ;
	},
	_AddUser:function()
	{
		if ( ttl.utilities.formValidator(this.addform)==false)
		{
			alert("Not all required field filled in");
			this.saveAddNode.cancel();
			return;
		}
		var userpassword = this.password.value;
		if (this.extended_security.value == true)
		{
			if (userpassword.length < 8 || this._has_lower_case(userpassword) == false || this._has_upper_case(userpassword) == false || this._has_number(userpassword) == false)
			{
				alert("Please enter a valid password: minimum length 8 characters, at least one character upper case, one character lower case and one digit");
				this.saveAddNode.cancel();
				return;
			}
		}
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._SavedCall,
			url:'/user/add',
			content: this.addform.get("value")}));
	},
	_Saved:function( response )
	{
		if ( response.success == "OK" )
		{
			this.saveAddNode.cancel();
			// send out message
			dojo.publish(PRCOMMON.Events.User_Added, [response.data] ) ;
		}
		else
		{
			alert ( response.message ) ;
			this.saveAddNode.cancel();
		}
	},
	_Add:function()
	{
		this.addform.submit();
	},
	Clear:function()
	{
		this.email.set("value", "");
		this.displayname.set("value", "");
		this.password.set("value", "");
		this.external_key.set("value", "");
	},
	_has_lower_case:function(str)
	{
		var i = 0;
		while (i <= str.length )
		{
			c = str.charAt(i);
			if (c == c.toLowerCase())
			{
				return true;
			}
			i++;
		}
		return false;
	},
	_has_upper_case:function(str)
	{
		var i = 0;
		while (i <= str.length )
		{
			c = str.charAt(i);
			if (c == c.toUpperCase())
			{
				return true;
			}
			i++;
		}
		return false;
	},
	_has_number:function(str)
	{
		var i = 0;
		while (i <= str.length )
		{
			c = str.charAt(i);
			if (parseInt(c))
			{
				return true;
			}
			i++;
		}
		return false;
	},
	set_has_external_level:function(customertypeid)
	{
		// check external user id
		if (customertypeid == 23 | customertypeid == 24)
		{
			dojo.removeClass(this.external_id_view,"prmaxhidden");
			this.external_key.set("required", true);
		}
		else
		{
			dojo.addClass(this.external_id_view,"prmaxhidden");
			this.external_key.set("required", false);
		}
	}
});

}

if(!dojo._hasResource["prmax.prmaxobjects"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.prmaxobjects"] = true;
dojo.provide("prmax.prmaxobjects");

// This contains all the data object that the system uses

// Display control object for display pane
function DisplayObject()
{
	//DisplayObject.prototype.Clear();
	this.outletid = -1;
	this.employeeid = -1;
	this.grid_employeeid = -1;
	this.customerid = -1;
	this.grid_employeeid = -1;
	this.sessionsearchid = -1 ;
	this.outlettypeid = - 1;
	this.outletname = "";
	this.contactname = "";
	this.isoutlet = true;
	this.advancefeatureid = -1;
	this.listid = -1;
	this.listname = "";
	this.displaylink = null;
	this.email = "";
}

DisplayObject.prototype.Clear=function()
{
	this.outletid = -1;
	this.employeeid = -1;
	this.grid_employeeid = -1;
	this.customerid = -1;
	this.grid_employeeid = -1;
	this.sessionsearchid = -1 ;
	this.outlettypeid = - 1;
	this.outletname = "";
	this.contactname = "";
	this.isoutlet = true;
	this.advancefeatureid = -1;
	this.listid = -1;
	this.listname = "";
	this.displaylink = null;
	this.email = "";

};

DisplayObject.prototype.Set=function(obj)
{
	this.outletid = obj.outletid||-1;
	this.employeeid = obj.employeeid||-1;
	this.grid_employeeid = obj.grid_employeeid||-1;
	this.customerid=obj.customerid||-1;
	this.grid_employeeid = obj.grid_employeeid||-1;
	this.sessionsearchid = obj.sessionsearchid||-1 ;
	this.outlettypeid = obj.outlettypeid||-1;
	this.outletname = obj.outletname||"";
	this.contactname = obj.contactname||"";
	this.advancefeatureid = obj.advancefeatureid||-1;
	this.isoutlet = (this.outletid != -1 ) ?true : false ;
	this.listid = obj.listid||-1;
	this.listname = obj.listname||"";
	this.displaylink = obj.displaylink||null;
	this.email = obj.email||"";

};

function SearchGridCount()
{
	this.Clear();
}

SearchGridCount.prototype.Set=function(obj)
{
	this.total  = obj.total ;
	this.selected = obj.selected ;
	this.appended = obj.appended ;
};

SearchGridCount.prototype.Clear=function()
{
	this.total  = 0;
	this.selected = 0;
	this.appended = 0;
};


function DisplayContext( context, env)
{
	this._context = context;
	this._env = env;
	this.std_menu = null;
	this.std_menu_emp = null;
	this.std_menu_cont = null;
	this.private_menu = null;
	this.private_menu_emp = null;
}

DisplayContext.prototype._private_record_context_menu = function()
{
	if (this.private_menu===null)
	{
		this.private_menu = new dijit.Menu();
		if ( this._env.private_data )
		{
			this.private_menu.addChild(new dijit.MenuItem({label:"Edit Contact", onClick:dojo.hitch(this._env,this._env._EditEmployee),iconClass:"dijitPrmaxIcon dijitPrmaxEmployee"}));
			this.private_menu.addChild(new dijit.MenuItem({label:"Delete Contact", onClick:dojo.hitch(this._env,this._env._DeleteEmployee),iconClass:"dijitPrmaxIcon dijitPrmaxEmployee"}));
		}
		this._add_std_menu( this.private_menu );
		this.private_menu.startup();
	}
	return this.private_menu;
}
DisplayContext.prototype._add_std_menu = function ( menu )
{
	if ( this._env.private_data )
	{
		menu.addChild(new dijit.MenuItem({label:"Add Contact", onClick:dojo.hitch(this._env,this._env._AddEmployee)}));
	}
	if ( this._context == "search")
	{
		menu.addChild(new dijit.MenuItem({label:"Add Contact To Results", onClick:dojo.hitch(this._env,this._env._AddToResults)}));
		menu.addChild(new dijit.MenuItem({label:"Delete Contact from Results", onClick:dojo.hitch(this._env,this._env._DeleteToResults)}));
		menu.addChild(new dijit.MenuItem({label:"Change Contact on Selected Row", onClick:dojo.hitch(this._env,this._env._ChangeSelectedRow)}));
	}
}

DisplayContext.prototype._std_record_context_menu = function()
{
	if (this.std_menu===null)
	{
		this.std_menu = new dijit.Menu();
		if ( this._env.private_data )
		{
			this.std_menu.addChild(new dijit.MenuItem({label:"Edit Contact", onClick:dojo.hitch(this._env,this._env._EditEmployee),iconClass:"dijitPrmaxIcon dijitPrmaxEmployee"}));
		}
		this._add_std_menu( this.std_menu );
		this.std_menu.startup();
	}

	return this.std_menu;
}

DisplayContext.prototype._private_record_context_menu2 = function()
{
	if (this.private_menu_emp===null)
	{
		this.private_menu_emp = new dijit.Menu();
		if ( this._env.private_data )
		{
			this.private_menu_emp.addChild(new dijit.MenuItem({label:"Edit Contact", onClick:dojo.hitch(this._env,this._env._EditEmployee),iconClass:"dijitPrmaxIcon dijitPrmaxEmployee"}));
			this.private_menu_emp.addChild(new dijit.MenuItem({label:"Delete Contact", onClick:dojo.hitch(this._env,this._env._DeleteEmployee),iconClass:"dijitPrmaxIcon dijitPrmaxEmployee"}));
		}
		this._add_std_menu( this.private_menu_emp );
		this.private_menu_emp.startup();
	}
	return this.private_menu_emp;
}

// this has to be done for IE7 to work ?
// it's context i suspect
PRMAX.DisplayObject = DisplayObject;
PRMAX.SearchGridCount = SearchGridCount;
PRMAX.DisplayContext = DisplayContext;

}

if(!dojo._hasResource["dojo.cldr.monetary"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.cldr.monetary"] = true;
dojo.provide("dojo.cldr.monetary");


dojo.getObject("cldr.monetary", true, dojo);

dojo.cldr.monetary.getData = function(/*String*/code){
// summary: A mapping of currency code to currency-specific formatting information. Returns a unique object with properties: places, round.
// code: an [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code

// from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/currencyData/fractions

	var placesData = {
		ADP:0,AFN:0,ALL:0,AMD:0,BHD:3,BIF:0,BYR:0,CLF:0,CLP:0,
		COP:0,CRC:0,DJF:0,ESP:0,GNF:0,GYD:0,HUF:0,IDR:0,IQD:0,
		IRR:3,ISK:0,ITL:0,JOD:3,JPY:0,KMF:0,KPW:0,KRW:0,KWD:3,
		LAK:0,LBP:0,LUF:0,LYD:3,MGA:0,MGF:0,MMK:0,MNT:0,MRO:0,
		MUR:0,OMR:3,PKR:0,PYG:0,RSD:0,RWF:0,SLL:0,SOS:0,STD:0,
		SYP:0,TMM:0,TND:3,TRL:0,TZS:0,UGX:0,UZS:0,VND:0,VUV:0,
		XAF:0,XOF:0,XPF:0,YER:0,ZMK:0,ZWD:0
	};

	var roundingData = {CHF:5};

	var places = placesData[code], round = roundingData[code];
	if(typeof places == "undefined"){ places = 2; }
	if(typeof round == "undefined"){ round = 0; }

	return {places: places, round: round}; // Object
};

}

if(!dojo._hasResource["dojo.currency"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.currency"] = true;
dojo.provide("dojo.currency");






dojo.getObject("currency", true, dojo);

/*=====
dojo.currency = {
	// summary: localized formatting and parsing routines for currencies
	//
	// description: extends dojo.number to provide culturally-appropriate formatting of values
	//	in various world currencies, including use of a currency symbol.  The currencies are specified
	//	by a three-letter international symbol in all uppercase, and support for the currencies is
	//	provided by the data in `dojo.cldr`.  The scripts generating dojo.cldr specify which
	//	currency support is included.  A fixed number of decimal places is determined based
	//	on the currency type and is not determined by the 'pattern' argument.  The fractional
	//	portion is optional, by default, and variable length decimals are not supported.
}
=====*/

dojo.currency._mixInDefaults = function(options){
	options = options || {};
	options.type = "currency";

	// Get locale-dependent currency data, like the symbol
	var bundle = dojo.i18n.getLocalization("dojo.cldr", "currency", options.locale) || {};

	// Mixin locale-independent currency data, like # of places
	var iso = options.currency;
	var data = dojo.cldr.monetary.getData(iso);

	dojo.forEach(["displayName","symbol","group","decimal"], function(prop){
		data[prop] = bundle[iso+"_"+prop];
	});

	data.fractional = [true, false];

	// Mixin with provided options
	return dojo.mixin(data, options);
};

/*=====
dojo.declare("dojo.currency.__FormatOptions", [dojo.number.__FormatOptions], {
	//	type: String?
	//		Should not be set.  Value is assumed to be "currency".
	//	symbol: String?
	//		localized currency symbol. The default will be looked up in table of supported currencies in `dojo.cldr`
	//		A [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code will be used if not found.
	//	currency: String?
	//		an [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like "USD".
	//		For use with dojo.currency only.
	//	places: Number?
	//		number of decimal places to show.  Default is defined based on which currency is used.
	type: "",
	symbol: "",
	currency: "",
	places: ""
});
=====*/

dojo.currency.format = function(/*Number*/value, /*dojo.currency.__FormatOptions?*/options){
// summary:
//		Format a Number as a currency, using locale-specific settings
//
// description:
//		Create a string from a Number using a known, localized pattern.
//		[Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements)
//		appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr)
//		as well as the appropriate symbols and delimiters and number of decimal places.
//
// value:
//		the number to be formatted.

	return dojo.number.format(value, dojo.currency._mixInDefaults(options));
};

dojo.currency.regexp = function(/*dojo.number.__RegexpOptions?*/options){
//
// summary:
//		Builds the regular needed to parse a currency value
//
// description:
//		Returns regular expression with positive and negative match, group and decimal separators
//		Note: the options.places default, the number of decimal places to accept, is defined by the currency type.
	return dojo.number.regexp(dojo.currency._mixInDefaults(options)); // String
};

/*=====
dojo.declare("dojo.currency.__ParseOptions", [dojo.number.__ParseOptions], {
	//	type: String?
	//		Should not be set.  Value is assumed to be currency.
	//	currency: String?
	//		an [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like "USD".
	//		For use with dojo.currency only.
	//	symbol: String?
	//		localized currency symbol. The default will be looked up in table of supported currencies in `dojo.cldr`
	//		A [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code will be used if not found.
	//	places: Number?
	//		fixed number of decimal places to accept.  The default is determined based on which currency is used.
	//	fractional: Boolean?|Array?
	//		Whether to include the fractional portion, where the number of decimal places are implied by the currency
	//		or explicit 'places' parameter.  The value [true,false] makes the fractional portion optional.
	//		By default for currencies, it the fractional portion is optional.
	type: "",
	currency: "",
	symbol: "",
	places: "",
	fractional: ""
});
=====*/

dojo.currency.parse = function(/*String*/expression, /*dojo.currency.__ParseOptions?*/options){
	//
	// summary:
	//		Convert a properly formatted currency string to a primitive Number,
	//		using locale-specific settings.
	//
	// description:
	//		Create a Number from a string using a known, localized pattern.
	//		[Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	//		are chosen appropriate to the locale, as well as the appropriate symbols and delimiters
	//		and number of decimal places.
	//
	// expression: A string representation of a currency value

	return dojo.number.parse(expression, dojo.currency._mixInDefaults(options));
};

}

if(!dojo._hasResource["dijit.form.CurrencyTextBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.CurrencyTextBox"] = true;
dojo.provide("dijit.form.CurrencyTextBox");





/*=====
dojo.declare(
	"dijit.form.CurrencyTextBox.__Constraints",
	[dijit.form.NumberTextBox.__Constraints, dojo.currency.__FormatOptions, dojo.currency.__ParseOptions], {
	// summary:
	//		Specifies both the rules on valid/invalid values (minimum, maximum,
	//		number of required decimal places), and also formatting options for
	//		displaying the value when the field is not focused (currency symbol,
	//		etc.)
	// description:
	//		Follows the pattern of `dijit.form.NumberTextBox.constraints`.
	//		In general developers won't need to set this parameter
	// example:
	//		To ensure that the user types in the cents (for example, 1.00 instead of just 1):
	//	|		{fractional:true}
});
=====*/

dojo.declare(
	"dijit.form.CurrencyTextBox",
	dijit.form.NumberTextBox,
	{
		// summary:
		//		A validating currency textbox
		// description:
		//		CurrencyTextBox is similar to `dijit.form.NumberTextBox` but has a few
		//		extra features related to currency:
		//
		//		1. After specifying the currency type (american dollars, euros, etc.) it automatically
		//			sets parse/format options such as how many decimal places to show.
		//		2. The currency mark (dollar sign, euro mark, etc.) is displayed when the field is blurred
		//			but erased during editing, so that the user can just enter a plain number.

		// currency: [const] String
		//		the [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like "USD"
		currency: "",

		/*=====
		// constraints: dijit.form.CurrencyTextBox.__Constraints
		//		Despite the name, this parameter specifies both constraints on the input
		//		(including minimum/maximum allowed values) as well as
		//		formatting options.  See `dijit.form.CurrencyTextBox.__Constraints` for details.
		constraints: {},
		======*/
		
		baseClass: "dijitTextBox dijitCurrencyTextBox",

		// Override regExpGen ValidationTextBox.regExpGen().... we use a reg-ex generating function rather
		// than a straight regexp to deal with locale  (plus formatting options too?)
		regExpGen: function(constraints){
			// if focused, accept either currency data or NumberTextBox format
			return '(' + (this._focused? this.inherited(arguments, [ dojo.mixin({}, constraints, this.editOptions) ]) + '|' : '')
				+ dojo.currency.regexp(constraints) + ')';
		},

		// Override NumberTextBox._formatter to deal with currencies, ex: converts "123.45" to "$123.45"
		_formatter: dojo.currency.format,

		_parser: dojo.currency.parse,

		parse: function(/*String*/ value, /*Object*/ constraints){
			// summary:
			// 		Parses string value as a Currency, according to the constraints object
			// tags:
			// 		protected extension
			var v = this.inherited(arguments);
			if(isNaN(v) && /\d+/.test(value)){ // currency parse failed, but it could be because they are using NumberTextBox format so try its parse
				v = dojo.hitch(dojo.mixin({}, this, { _parser: dijit.form.NumberTextBox.prototype._parser }), "inherited")(arguments);
			}
			return v;
		},

		_setConstraintsAttr: function(/*Object*/ constraints){
			if(!constraints.currency && this.currency){
				constraints.currency = this.currency;
			}
			this.inherited(arguments, [ dojo.currency._mixInDefaults(dojo.mixin(constraints, { exponent: false })) ]); // get places
		}
	}
);

}

if(!dojo._hasResource["ttl.BaseWidget"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["ttl.BaseWidget"] = true;
dojo.provide("ttl.BaseWidget");





dojo.declare("ttl.BaseWidget",
	[dijit._Widget, dijit._Templated, dijit._Container],{
	widgetsInTemplate: true,
	_lock:false,

	Lock_Code:function()
	{
		this._lock = true ;
	},
	isLocked:function()
	{
		return this._lock;
	},
	UnLock_Code:function()
	{
		this._lock = false;
	},
	Lock_Code_Wait:function()
	{
		while ( this._lock == true )
		{
			console.log("Waiting for Lock");
			ttl.utilities.sleepStupidly(1);
		}

	this._lock = true ;
	},
	_ReturnFalse:function()
	{
		return false;
	}
});

}

if(!dojo._hasResource["prmax.iadmin.Support"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.Support"] = true;
dojo.provide("prmax.iadmin.Support");



dojo.declare("prmax.iadmin.Support",
	[ttl.BaseWidget],{
		templateString:"<div>\r\n\t<br/>\r\n\t<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t<table width=\"400px\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" >\r\n\t\t\t<tr><td width=\"40%\" class=\"prmaxrowtag\">Support User</td><td><select name=\"iuserid\" dojoAttachPoint=\"users\" autoComplete=\"true\" searchAttr=\"name\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" required=\"true\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\">Customers</td><td><select name=\"icustomerid\" dojoAttachPoint=\"customers\" autoComplete=\"true\" searchAttr=\"customername\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" required=\"true\"></select></td></tr>\r\n\t\t\t<tr><td colspan=\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td colspan=\"2\" align=\"center\"><button  style=\"padding:0px;margin:0px\" type=\"button\" dojoAttachEvent=\"onClick:_SetCustomer\" dojoType=\"dijit.form.Button\" label=\"Set Customer\"></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this.inherited(arguments);

		this.customer_model= new prcommon.data.QueryWriteStore (
			{url:'/iadmin/customers?licence_expired=1',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true,
			nocallback:true
			});

		this.user_model= new prcommon.data.QueryWriteStore (
			{url:'/iadmin/users_support',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});

		this._SetCustomerCallBack = dojo.hitch ( this , this._SetCustomerCall );
	},
	postCreate:function()
	{
		this.inherited(arguments);

		this.customers.store = this.customer_model ;
		this.users.store =  this.user_model ;
	},
	_SetCustomerCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			alert("Support Customer updated");
		}
		else
		{
			alert("Problem Updating Support Customer");
		}
	},
	_SetCustomer:function()
	{

		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			return false;
		}

		if ( confirm ( "Set Support Customer" ) )
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._SetCustomerCallBack,
					url:'/iadmin/support_customer_set',
					content: this.form.get("value")
			}));
		}
	}
});

}

if(!dojo._hasResource["prmax.iadmin.Research"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.Research"] = true;
dojo.provide("prmax.iadmin.Research");

dojo.declare("prmax.iadmin.Research",
	[  ttl.BaseWidget ],{
		widgetsInTemplate: true,
		templateString:"<div >\r\n\t<div style=\"width:500px\">\r\n\t\t<p style=\"text-align:center\"><em>Daily Activity Details</em></p>\r\n\t\t<form dojoAttachPoint=\"form\" target=\"_newtab\" action=\"/iadmin/research_active\">\r\n\t\t\t<table width=\"70%\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t<tr><td width=\"20%\" align=\"right\" class=\"prmaxrowlabel\">Date</td><td><input type=\"text\"  dojoAttachPoint=\"active_report_date\" name = \"active_report_date\" dojoType=\"dijit.form.DateTextBox\" ></td></tr>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowlabel\">Detailed</td><td><input type=\"checkbox\" name = \"active_report_detailed\" dojoType=\"dijit.form.CheckBox\" ></td></tr>\r\n\t\t\t\t<tr><td  colspan = \"2\" align =\"right\"><button type=\"button\" dojoType=\"dijit.form.Button\" label=\"Create  Activity Report\" dojoAttachEvent=\"onClick:_Active_Report\"></button></td></tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n",
	postCreate:function()
	{
		this.active_report_date.set("value", new Date());
		this.inherited(arguments);
	},
	_Active_Report:function()
	{
		this.form.submit();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.TaskTags"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.TaskTags"] = true;
//-----------------------------------------------------------------------------
// Name:    TaskTags.js
// Author:  Chris Hoy
// Purpose:
// Created: 27/05/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.TaskTags");




dojo.declare("prmax.iadmin.TaskTags",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div dojoAttachPoint=\"borderControl\" dojotype=\"dijit.layout.BorderContainer\" style=\"width:100%;height:100%\" gutters=\"false\">\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"top\" style=\"height:42px;width:100%;overflow:hidden;border:1px solid black\">\r\n\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left:height:100%;width:100%\" >\r\n\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" dojoAttachEvent=\"onClick:_New\" showLabel=\"true\">New</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div dojotype=\"dijit.layout.ContentPane\" region=\"center\"  splitter=\"true\">\r\n\t\t\t<div dojoAttachPoint=\"view_grid\" dojoType=\"dojox.grid.DataGrid\" query=\"{ }\" rowsPerPage=\"30\" ></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div dojoType=\"dijit.Dialog\" title=\"New Diary Type\" dojoAttachPoint=\"tasktagdialog\">\r\n\t\t<form dojoAttachPoint=\"form\" onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t<input type=\"hidden\" dojoAttachPoint=\"group2\" name = \"group\" dojoType=\"dijit.form.TextBox\" />\r\n\t\t\t<table style=\"width:400px;border-collapse:collapse;\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" width=\"90px\">Diary Type</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"tasktagdescription\" name = \"tasktagdescription\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:300px\" ></td></tr>\r\n\t\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t\t<tr><td><button type=\"button\" dojoAttachEvent=\"onClick:_Close\" dojoType=\"dijit.form.Button\" label=\"Close\" ></button></td><td align=\"right\"><button type=\"button\" dojoAttachPoint=\"addbtn\" dojoAttachEvent=\"onClick:_Add\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Adding ...\" label=\"Add Diary Type\" ></button></td></tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n\t<div dojoType=\"dijit.Dialog\" title=\"Update Diary Type\" dojoAttachPoint=\"tasktagupddialog\">\r\n\t\t<form dojoAttachPoint=\"formupd\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t<input type=\"hidden\" dojoAttachPoint=\"tasktagid\" name = \"tasktagid\" dojoType=\"dijit.form.TextBox\" />\r\n\t\t\t<input type=\"hidden\" dojoAttachPoint=\"group1\" name = \"group\" dojoType=\"dijit.form.TextBox\" />\r\n\t\t\t<table style=\"width:400px;border-collapse:collapse;\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" width=\"90px\">New Diary Type</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"tasktagdescription2\" name = \"tasktagdescription\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:300px\" ></td></tr>\r\n\t\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t\t<tr><td><button type=\"button\" dojoAttachEvent=\"onClick:_Close2\" dojoType=\"dijit.form.Button\" label=\"Close\" ></button></td><td align=\"right\"><button type=\"button\" dojoAttachPoint=\"updbtn\" dojoAttachEvent=\"onClick:_Update\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Updating ...\" label=\"Update Diary Type\" ></button></td></tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n",
	group:"accounts",
	constructor: function()
	{
		this._AddTaskCallBack = dojo.hitch(this, this._AddTaskCall);
		this._DeleteTaskCallBack = dojo.hitch ( this, this._DeleteTaskCall);
		this._UpdateTaskCallBack = dojo.hitch ( this, this._UpdateTaskCall);

		this._tasktags = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/tasktags?group=' + this.group,
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true,
			nocallback:true
			});
	},
	postCreate:function()
	{
		this.inherited(arguments);

		this.view_grid.set("structure",this.view);
		this.view_grid._setStore(this._tasktags);
		this.view_grid['onRowClick'] = dojo.hitch(this,this._OnSelectRow);
		this.group1.set("value", this.group);
		this.group2.set("value", this.group);
	},
	_OnSelectRow : function(e)
	{
		this._row = this.view_grid.getItem(e.rowIndex);
		if ( e.cellIndex  == 1)
		{
			if ( confirm("Delete Diary Type " + this._row.i.tasktagdescription + "?"))
			{
				dojo.xhrPost(
					ttl.utilities.makeParams({
					load: this._DeleteTaskCallBack,
					url:'/iadmin/tasktags_delete',
					content: { tasktagid: this._row.i.tasktagid}}));
			}
		}
		else if ( e.cellIndex == 2 )
		{
			this.tasktagdescription2.set("value", this._row.i.tasktagdescription);
			this.tasktagid.set("value", this._row.i.tasktagid);

			this.tasktagupddialog.show();
		}
		this.view_grid.selection.clickSelectEvent(e);
	},
	view:{noscroll: false,
			cells: [[
			{name: 'Diary Type',width: "400px",field:'tasktagdescription'},
			{name: ' ',width: "2em",field:'tasktagid',formatter:ttl.utilities.deleteRowCtrl},
			{name: ' ',width: "2em",field:'tasktagid',formatter:ttl.utilities.formatRowCtrl}
		]]
	},
	resize:function()
	{
		this.borderControl.resize ( arguments[0] ) ;
		this.inherited(arguments);

	},
	_New:function()
	{
		this.tasktagdescription.set("value","");
		this.tasktagdialog.show();
		this.tasktagdescription.focus();
	},
	_Close:function()
	{
		this.tasktagdialog.hide();
	},
	_Add:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._AddTaskCallBack,
			url:'/iadmin/tasktags_add',
			content:this.form.get("value")}));
	},
	_AddTaskCall:function( response )
	{
		if ( response.success == "OK")
		{
			this._tasktags.newItem( response.data );
			this._Close();
			this.tasktagdescription.set("value","");
		}
		else if ( response.success == "DU")
		{
			alert("Already exists");
		}
		else
		{
			alert("Problem Adding");
		}

		this.addbtn.cancel();
	},
	_DeleteTaskCall:function( response )
	{
		if ( response.success == "OK")
		{
			this._tasktags.deleteItem( this._row )
		}
		else
		{
			alert("Problem Deleting (Probably in use)");
		}
	},
	_UpdateTaskCall:function( response )
	{
		if ( response.success == "OK")
		{
			this._tasktags.setValue(this._row, "tasktagdescription" , response.data.tasktagdescription, true ) ;
			this._Close2();
		}
		else if ( response.success == "DU")
		{
			alert("Already Exists");
			this.tasktagdescription2.focus();
		}
		else
		{
			alert("Problem Adding");
		}

		this.updbtn.cancel();
	},
	_Update:function()
	{
		if (ttl.utilities.formValidator( this.formupd ) == false )
		{
			this.updbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._UpdateTaskCallBack,
			url:'/iadmin/tasktags_update',
			content:this.formupd.get("value")}));
	},
	_Close2:function()
	{
		this.tasktagupddialog.hide();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.TaskAdd"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.TaskAdd"] = true;
//-----------------------------------------------------------------------------
// Name:    TaskAdd.js
// Author:  Chris Hoy
// Purpose:
// Created: 27/05/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.TaskAdd");




dojo.declare("prmax.iadmin.TaskAdd",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t<input type=\"hidden\" dojoAttachPoint=\"group\" name=\"group\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t<table width=\"99%\" class=\"prmaxtable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"padding-top:5px\">\r\n\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\" width=\"120px\" >Subject</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"subject\" name=\"subject\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:30em\"></td>\r\n\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\" >Customer</td><td><select name=\"icustomerid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" searchAttr=\"customername\" dojoAttachPoint=\"icustomerid\" required=\"true\"></select></td></tr>\r\n\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Type</td><td><select name=\"tasktypeid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"tasktypeid\" ></select></td></tr>\r\n\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Status</td><td><select name=\"taskstatusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"taskstatusid\" ></select></td></tr>\r\n\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Due Date</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"due_date\" name=\"due_date\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Owner</td><td><select class=\"prmaxrequired\" required=\"true\" dojoAttachPoint=\"assigntoid\" name=\"assigntoid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></td></tr>\r\n\t\t\t<tr dojoAttachPoint=\"tasktag\" class=\"prmaxhidden\"><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Diary Type</td><td><select dojoAttachPoint=\"tasktagid\" required=\"false\"  name=\"tasktagid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></td></tr>\r\n\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t<tr><td><button dojoType=\"dijit.form.Button\" dojoAttachPoint=\"clsbtn\" dojoAttachEvent=\"onClick:_Close\" label=\"Close\"></td><td align=\"right\">\r\n\t\t\t\t\t\t\t<button dojoType=\"dojox.form.BusyButton\" dojoAttachPoint=\"addbtn\" busyLabel=\"Adding ...\" dojoAttachEvent=\"onClick:_Add\" label=\"Add\"><td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._users = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=users&group=sales,accounts"});
		this._taskstatus =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=taskstatus"});
		this.icustomerid_data = new dojox.data.QueryReadStore ( {url:'/iadmin/customers_combo', onError:ttl.utilities.globalerrorchecker, clearOnClose:true, urlPreventCache:true});
		this._tasktype = null;
		this._tasktags = null;

		this._AddCallBack = dojo.hitch(this, this._AddCall);
	},
	postCreate:function()
	{
		this.inherited(arguments);

		this.taskstatusid.store = this._taskstatus;
		this.assigntoid.store = this._users;
		this.icustomerid.store = this.icustomerid_data;

	},
	Load:function ( group , dialog, model , customerid )
	{
		var command = "";

		if ( group != null )
			command = "&group=" + group;

		if ( this._tasktype == null )
		{
			this._tasktype = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=tasktype"+command});
			this._tasktags = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=tasktags"+command});
		}

		this.tasktypeid.store = this._tasktype;
		this.tasktagid.store = this._tasktags;


		this._dialog = dialog;
		this._model = model;
		this.group.set("value", group ) ;
		this._Clear();
		dojo.removeClass(this.tasktag,"prmaxhidden");
		if ( customerid )
			this.icustomerid.set("value", customerid ) ;
	},
	_Close:function()
	{
		this._dialog.hide();
	},
	_AddCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			if ( this._model )
				this._model.newItem( response.task ) ;
			this._dialog.hide();
			this._Clear();
		}
		else
		{
			alert("Problem Adding Task");
		}
		this.addbtn.cancel();
	},
	_Clear:function()
	{
		this.addbtn.cancel();

	},
	_Add:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		var content = this.form.get("value");
		content["due_date"] = ttl.utilities.toJsonDate ( this.due_date.get("value") ) ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._AddCallBack),
			url:'/iadmin/task_add',
			content: content}));
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.ManualAllocateAmount"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.ManualAllocateAmount"] = true;
//-----------------------------------------------------------------------------
// Name:    ManualAllocateAmount.js
// Author:  Chris Hoy
// Purpose:
// Created: 18/04/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.ManualAllocateAmount");



dojo.declare("prmax.iadmin.accounts.ManualAllocateAmount",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div dojoAttachPoint=\"popup_view\" dojoType=\"dijit.Dialog\" title=\"Enter Amount Remaining\">\r\n\t\t<br/>\r\n\t\t<table width=\"300px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan>Amount</td><td><input type=\"text\" name=\"value\" dojoType=\"dijit.form.CurrencyTextBox\" trim=\"true\" dojoAttachPoint=\"toallocate_value\" style=\"width:8em\" constraints=\"{min:0.01,max:99999.00,fractional:true,places:'0,2'}\" ></input></td></tr>\r\n\t\t\t<tr><td align=\"left\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_Close\">Close</button></td><td align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_Allocate\">Allocate</button></td></tr>\r\n\t\t</table>\r\n\t</div>\r\n</div>\r\n",
	setValues:function( pctrl , maxvalue )
	{
		this.pctrl = pctrl ;
		this.Clear();
		this.toallocate_value.constraints.max = maxvalue;
		this.popup_view.show();
	},
	Clear:function()
	{
		this.toallocate_value.set("value",0.01);
	},
	_Close:function()
	{
		this.popup_view.hide();
		this.Clear();
	},
	_Allocate:function()
	{
		// verify amount
		if ( this.toallocate_value.isValid() == false )
			return;

		// check
		if ( this.pctrl._allocted_row.i.unpaidamount/100 < this.toallocate_value.get("value") )
		{
			alert("Over Allocation");
			return false ;
		}

		this.pctrl.alloc_store.setValue ( this.pctrl._allocted_row , "allocated" , this.toallocate_value.get("value"),true );
		this.pctrl._onBlurAmount();
		this._Close();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.Allocation"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.Allocation"] = true;
//-----------------------------------------------------------------------------
// Name:    Allocation.js
// Author:  Chris Hoy
// Purpose:
// Created: 04/04/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.Allocation");




dojo.declare("prmax.iadmin.accounts.Allocation",
	null,{
	alloc_cols:{
		cells: [[
			{name: 'Type',width: "160px", field:"typedescription"},
			{name: 'Nbr',width: "50px", field:"invoicenbr",styles:"text-align: right;padding-right:2px;"},
			{name: 'Ref',width: "60px", field:"invoiceref"},
			{name: 'Date',width: "70px", field:"invoicedate"},
			{name: 'Value',width: "60px", field:"invoiceamount_display", styles:"text-align: right;padding-right:2px;",formatter:ttl.utilities.Display_Money},
			{name: 'Unpaid',width: "60px", field:"unpaidamount_display", styles:"text-align: right;padding-right:2px;",formatter:ttl.utilities.Display_Money},
			{name: 'Allocate',width: "60px",field:"allocated",styles:"text-align: right;padding-right:2px;", formatter:ttl.utilities.Display_Money},
			{name: ' ',width: "1em",formatter:ttl.utilities.formatRowCtrl}
			]]
	},
	_AllocateInvoice:function()
	{
		this.alloc_store.setValue ( this._allocted_row , "allocated" , this._allocted_row.i.unallocated/100.0,true );
		this._onBlurAmount();
	},
	_AllocateAmount:function()
	{
		this.alloc_manual.setValues ( this, this._allocted_row.i.unallocated/100.0 );
	},
	onCellClick : function(e)
	{
		if ( e.cellIndex == 7 )
		{
			this._allocted_row = this.alloc_grid.getItem(e.rowIndex);

			if (this.private_menu ==null)
			{
				this.private_menu = new dijit.Menu();
				this.private_menu.addChild(new dijit.MenuItem({label:"Allocate Invoice", onClick:dojo.hitch(this,this._AllocateInvoice)}));
				this.private_menu.addChild(new dijit.MenuItem({label:"Allocate Amount", onClick:dojo.hitch(this,this._AllocateAmount)}));
			}

			this.private_menu._openMyself(e);
		}
	},
	_doallocation:function()
	{
		var amount = Math.abs(this.payment.get("value"));
		var amount_allocated = 0.0;

		for (var c = 0 ;  c < this.alloc_store._items.length; c++)
		{
			if ( this.alloc_store._items[c] == null ) continue;

			amount_allocated += dojo.number.round(parseFloat(this.alloc_store._items[c].i.allocated),2)
		}

		this.toallocate.set("value",dojo.number.round(amount - amount_allocated,2));
	},
	_postCreate:function()
	{
		this.alloc_grid.set("structure",this.alloc_cols );
		this.alloc_store = new prcommon.data.QueryWriteStore ( {url:'/iadmin/customer_to_allocate', clearOnClose:true, urlPreventCache:true, nocallback:true});
		this.alloc_grid._setStore( this.alloc_store );
		this.alloc_grid['onCellClick'] = dojo.hitch(this,this.onCellClick);
	},
	getAllocations:function()
	{
		var allocation = []
		count = 0

		for (var c = 0 ;  c < this.alloc_store._items.length; c++)
		{
			if ( this.alloc_store._items[c] == null ) continue;

			allocation[count]  = {
					keyid : this.alloc_store._items[c].i.key,
					amount : this.alloc_store._items[c].i.allocated
			};
			count += 1 ;
		}

		return dojo.toJson(allocation);

	}

});

}

if(!dojo._hasResource["prmax.iadmin.accounts.Payment"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.Payment"] = true;
//-----------------------------------------------------------------------------
// Name:    Payment.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.Payment");





dojo.declare("prmax.iadmin.accounts.Payment",
	[ ttl.BaseWidget,prmax.iadmin.accounts.Allocation ],{
	widgetsInTemplate: true,
	manualmode:false,
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\"  data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Take Payment for </div><div class=\"prmaxrowdisplaylarge\" style=\"display:inline\" data-dojo-attach-point=\"customername\"></div></td>\r\n\t\t\t<tr><td width=\"150px\"  align=\"right\" class=\"prmaxrowtag\">Payment Type</td><td><select data-dojo-props='name:\"paymenttypeid\",autoComplete:true,labelType:\"html\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"paymenttypeid\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Value</td><td>\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" ><tr>\r\n\t\t\t\t\t<td><input\r\n\t\t\t\t\tdata-dojo-type=\"dijit.form.CurrencyTextBox\"\r\n\t\t\t\t\tdata-dojo-props ='\"class\":\"prmaxinput\",type:\"text\",name:\"value\",required:true, trim:true,style:\"width:8em\",constraints:{min:0.01,max:99999.00,fractional:true,places:\"0,2\"}'data-dojo-attach-point=\"payment\" data-dojo-attach-event=\"onBlur:_onBlurAmount\"></input></td>\r\n\t\t\t\t\t<td data-dojo-attach-point=\"alloc_view_3\" class=\"prmaxhidden prmaxrowtag\">Amount to Allocted</td>\r\n\t\t\t\t\t<td data-dojo-attach-point=\"alloc_view_4\" class=\"prmaxhidden prmaxrowtag\">\r\n\t\t\t\t\t<input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"toallocate\" data-dojo-props='type:\"text\",style:\"width:8em\",readonly:\"readonly\"' ></input></td>\r\n\t\t\t\t</tr></table>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Send Email Confirmation</td><td><input data-dojo-attach-point=\"emailtocustomer\" data-dojo-props='\"class\":\"prmaxinput\",name:\"emailtocustomer\",type:\"checkbox\"' data-dojo-type=\"dijit.form.CheckBox\" checked /></td></tr>\r\n\t\t\t<tr data-dojo-attach-point=\"alloc_view_1\"><td class=\"prmaxrowtag\" align=\"right\">Expire Date</td><td><input data-dojo-props='type:\"text\",name:\"licence_expire\"' data-dojo-attach-point=\"licence_expire\" data-dojo-type=\"dijit.form.DateTextBox\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" valign=\"top\">Message</td><td><div class=\"dialogprofileframe\" ><textarea data-dojo-attach-point=\"message\" data-dojo-props='name:\"message\",\"class\":\"dijitTextarea\",style:\"width:99%;height:99%\"' data-dojo-type=\"dijit.form.Textarea\" ></textarea></div></td></tr>\r\n\t\t\t<tr data-dojo-attach-point=\"alloc_view_2\"><td class=\"prmaxrowtag\" align=\"right\" >Email Address</td><td><input data-dojo-props='\"class\":\"prmaxinput\",name:\"email\",type:\"text\",style:\"width:100%\",trim:true,required:true,regExpGen:dojox.validate.regexp.emailAddress,invalidMessage:\"invalid email address\",size:40,maxlength:70'data-dojo-attach-point=\"email\" data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Payment Date</td><td><input data-dojo-props='type:\"text\",name:\"payment_date\",required:true' data-dojo-attach-point=\"payment_date\" data-dojo-type=\"dijit.form.DateTextBox\" ></td>\r\n\t\t\t<tr data-dojo-attach-point=\"alloc_view\"><td colspan=\"2\"><div data-dojo-attach-point=\"alloc_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='query:{ name:\"*\"},rowsPerPage:500,style:\"width:590px;height:300px\"'></div></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan=\"2\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='busylabel:\"Taking Payment ...\",type:\"button\"' data-dojo-attach-point=\"btn\" data-dojo-attach-event=\"onClick:_TakePayment\">Take Payment</button></td>\r\n\t\t</table>\r\n\t</form>\r\n\t<div data-dojo-attach-point=\"alloc_manual\" data-dojo-type=\"prmax.iadmin.accounts.ManualAllocateAmount\"></div>\r\n</div>\r\n",
	constructor: function()
	{
		this._PaymentTakenCallBack = dojo.hitch(this,this._PaymentTakenCall);

		this.paymenttypes = new dojo.data.ItemFileReadStore (
			{url:'/common/lookups?searchtype=paymenttypes',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true
			});
	},
	setCustomer:function( customer, dialog)
	{
		this.btn.cancel();
		this._customerid = customer.customerid;
		this._customername = customer.customername;

		dojo.attr ( this.customername , "innerHTML" , customer.customername ) ;
		if (customer.invoiceemail != null && customer.invoiceemail != "")
			this.email.set("value", customer.invoiceemail);
		else
			this.email.set("value", customer.email);

		this._dialog = dialog;
		if ( this.manualmode)
		{
			this.alloc_grid.resize( {w:590, h:300});
			this.alloc_grid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),
					{ icustomerid:customer.customerid,
						source:"payment"
					}));
		}
	},
	_PaymentTakenCall:function( response )
	{
		if ( response.success == "OK" )
		{
			if ( this.manualmode )
				alert("Payment Taked");
			else
				alert("Payment Taken and invoice sent");
			this.Clear();
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
			this._dialog.hide();
		}
		else
		{
			alert("Problem taking payment");
		}

		this.btn.cancel();
	},
	_TakePayment:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.btn.cancel();
			return false;
		}

		if ( this.manualmode )
		{
			if ( this.toallocate.get("value") > this.payment.get("value"))
			{
				alert("Over Allocation");
				this.btn.cancel();
				return ;
			}
		}

		var content = this.form.get("value");

		content["icustomerid"] = this._customerid;
		d = this.payment_date.get("value");
		if ( d != null )
			content["payment_date"] = d.getFullYear() + "-" + (d.getMonth() + 1 )  + "-" + d.getDate();

		if ( this.manualmode )
		{
			content["unpaidamount"] = this.toallocate.get("value");
			content['allocations'] = this.getAllocations();

		}
		else
		{
			var d = this.licence_expire.get("value");
			if (d != null)
				content["licence_expire"] = d.getFullYear() + "-" + (d.getMonth() + 1 )  + "-" + d.getDate();
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._PaymentTakenCallBack,
			url:'/iadmin/payment_take',
			content:content}));
	},
	_onBlurAmount:function()
	{
		if ( this.manualmode)
		{
			var amount = this.payment.get("value");
			var amount_allocated = 0.0;

			for (var c = 0 ;  c < this.alloc_store._items.length; c++)
			{
				if ( this.alloc_store._items[c] == null ) continue;

				amount_allocated += dojo.number.round(parseFloat(this.alloc_store._items[c].i.allocated),2);
			}

			this.toallocate.set("value",dojo.number.format(dojo.number.round(amount - amount_allocated,2),{places:2}));

		}
	},
	Clear:function()
	{
		this.payment.set("value","");
		this.email.set("value","");
		this.emailtocustomer.set("checked",false);
	},
	postCreate:function()
	{
		this.inherited(arguments);

		this.paymenttypeid.store = this.paymenttypes;
		this.paymenttypeid.set("value","1");
		if (this.manualmode )
		{
			dojo.addClass(this.alloc_view_1, "prmaxhidden");
			dojo.removeClass(this.alloc_view_3, "prmaxhidden");
			dojo.removeClass(this.alloc_view_4, "prmaxhidden");
			this._postCreate();
		}
		else
		{
			dojo.addClass ( this.alloc_view , "prmaxhidden");
		}
	},
	_Allocate:function()
	{
		// verify amount
		if ( this.toallocate_value.isValid() == false )
			return;

		// check
		if ( this._allocted_row.i.unpaidamount/100 <= this.toallocate_value.get("value") )
		{
			alert("Over Allocation");
			return false ;
		}

		this.alloc_store.setValue ( this._allocted_row , "allocated" , this.toallocate_value.get("value"),true );
		this._onBlurAmount();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.MonthlyPayment"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.MonthlyPayment"] = true;
//-----------------------------------------------------------------------------
// Name:    MonthlyPayment.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------


dojo.provide("prmax.iadmin.accounts.MonthlyPayment");



dojo.declare("prmax.iadmin.accounts.MonthlyPayment",
	[ ttl.BaseWidget ],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n<table width=\"500px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t<tr><td colspan=\"4\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Monthly Payment (Inc Vat.)</div><div class=\"prmaxrowdisplaylarge\" style=\"display:inline\" dojoAttachPoint=\"customername\"></div></td>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\">Amount (Inc Vat.)</td>\r\n\t\t<td><input type=\"text\" name=\"value\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"payment\"></input></td>\r\n\t</tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\">Paid Month</td>\r\n\t<td><select class=\"prmaxinput\" name=\"monthid\" dojoAttachPoint=\"monthid\" style=\"width:10em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td>\r\n\t<td class=\"prmaxrowlabel\" align=\"right\">Paid Year</td><td><select class=\"prmaxinput\" name=\"yearid\" dojoAttachPoint=\"yearid\" style=\"width:5em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\" valign=\"top\">Message</td><td><div class=\"dialogprofileframe\" ><textarea dojoAttachPoint=\"message\" name=\"message\" class=\"dijitTextarea\" dojoType=\"dijit.form.Textarea\"  style=\"width:99%;height:99%\" ></textarea></div></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\"align=\"right\" >Email Address</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"email\" name=\"email\" type=\"text\" style=\"width:100%\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.ValidationTextBox\" regExpGen=\"dojox.validate.regexp.emailAddress\" trim=\"true\" invalidMessage=\"invalid email address\" size=\"40\" maxlength=\"70\"/></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\">Payment Date</td><td><input type=\"text\"  dojoAttachPoint=\"payment_date\" name = \"payment_date\" dojoType=\"dijit.form.DateTextBox\" ></td>\r\n\t</tr>\r\n\t<tr><td class=\"prmaxrowlabel\" colspan=\"4\" align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_TakePayment\">Take Payment</button></td>\r\n</table></form>\r\n</div>\r\n",
	constructor: function()
	{
		this._PaymentTakenCallBack = dojo.hitch(this,this._PaymentTakenCall);
		this._months = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=months"});
		this._years = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=years"});
	},
	setCustomer:function( customerid , customername , email , dialog, defaultvalue )
	{
		this._customerid = customerid;
		this._customername = customername;

		dojo.attr ( this.customername , "innerHTML" , this._customername ) ;
		this.email.set("value",email);
		this._dialog = dialog;
		this.payment.set("value", defaultvalue ) ;
	},
	_PaymentTakenCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Payment Taken and invoice sent");
			this.Clear();
			dojo.publish(PRCOMMON.Events.Monthly_Payments, [ response.data] ) ;
			this._dialog.hide();
		}
		else
		{
			alert("Problem taking payment");
		}
	},
	_TakePayment:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			return false;
		}

		var content = this.form.get("value");

		// fix up the date
		var d = this.payment_date.get("value");
		if ( d != null )
			content["payment_date"] = d.getFullYear() + "-" + (d.getMonth() + 1 )  + "-" + d.getDate();

		content["icustomerid"] = this._customerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._PaymentTakenCallBack),
			url:'/iadmin/payment_monthly_take',
			content:content}));

	},
	Clear:function()
	{
		this.payment.set("value","");
		this.email.set("value","");
	},
	postCreate:function()
	{
		this.monthid.store = this._months;
		this.yearid.store = this._years;
		var date = new Date();
		var year = date.getFullYear() ;
		var month  = date.getMonth() + 1;

		this.monthid.set("value", month) ;
		this.yearid.set("value", year) ;

		this.inherited(arguments);
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.Proforma"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.Proforma"] = true;
//-----------------------------------------------------------------------------
// Name:    Proforma.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.Proforma");



dojo.declare("prmax.iadmin.accounts.Proforma",
	[ ttl.BaseWidget ],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n<table width=\"500px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t<tr><td colspan=\"2\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Take Payment for <div style=\"display:inline\" class=\"prmaxrowdisplaylarge\" dojoAttachPoint=\"customername\">Name</div></td>\r\n\t<tr><td width=\"200px\" ><label class=\"prmaxrowlabel\">Text</label></td>\r\n\t<td><input type=\"text\" name=\"proformatext\" dojoType=\"dijit.form.ValidationTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"proformatext\"></td></tr>\r\n\t<tr><td><label class=\"prmaxrowlabel\">Value (Excluding Vat)</label></td>\r\n\t\t<td><input type=\"text\" name=\"value\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"payment\"></input></td>\r\n\t</tr>\r\n\t<tr><td class=\"prmaxrowlabel\">Email Address</td>\r\n\t\t<td><input class=\"prmaxinput\" dojoAttachPoint=\"email\" name=\"email\" type=\"text\" style=\"width:100%\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.ValidationTextBox\" regExpGen=\"dojox.validate.regexp.emailAddress\" trim=\"true\" invalidMessage=\"invalid email address\" size=\"40\" maxlength=\"70\"/></td>\r\n\t</tr>\r\n\t<tr><td class=\"prmaxrowlabel\" colspan=\"2\" align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_SendProforma\">Send Proforma</button></td>\r\n</table></form>\r\n</div>\r\n",

	constructor: function()
	{
		this._SendProformaCallBack = dojo.hitch ( this , this._SendProformaCall );
	},
	_SendProformaCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Proforma Sent ");
			this._dialog.hide();
		}
		else
		{
			alert("Problem Sending Proforma");
		}
	},
	_SendProforma:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			return false;
		}

		var content = this.form.get("value");

		content["icustomerid"] = this._customerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._SendProformaCallBack),
			url:'/iadmin/profoma_send',
			content:content}));

	},
	setCustomer:function( customerid , customername , email , dialog)
	{
		this._customerid = customerid;
		this._customername = customername;

		dojo.attr ( this.customername , "innerHTML" , this._customername ) ;
		this.email.set("value",email);
		this._dialog = dialog;
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.DDPayment"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.DDPayment"] = true;
//-----------------------------------------------------------------------------
// Name:    DDPayment.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.DDPayment");



dojo.declare("prmax.iadmin.accounts.DDPayment",
	[ttl.BaseWidget],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t<tr><td colspan=\"4\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Monthly Payment (Inc Vat.)</div><div class=\"prmaxrowdisplaylarge\" style=\"display:inline\" dojoAttachPoint=\"customername\"></div></td>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\">DD Reference</td><td><input type=\"text\" name=\"dd_ref\" dojoType=\"dijit.form.ValidationTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"dd_ref\"></input></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\">First Month Amount(Inc Vat.)</td><td><input type=\"text\" name=\"first_month_value\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"first_month_value\"></input></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\">Standard Amount (Inc Vat.)</td><td><input type=\"text\" name=\"value\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"payment\"></input></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Monthly Day</td><td width=\"70%\"><select style=\"width:50px\" class=\"prmaxinput\" dojoAttachPoint=\"pay_montly_day\" name=\"pay_montly_day\" type=\"text\" dojoType=\"dijit.form.ComboBox\"></select></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Sub Day of Month</td><td width=\"70%\"><select style=\"width:50px\" class=\"prmaxinput\" dojoAttachPoint=\"sub_start_day\" name=\"sub_start_day\" type=\"text\" dojoType=\"dijit.form.ComboBox\"></select></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\" valign=\"top\">Message</td><td><div class=\"dialogprofileframe\" ><textarea dojoAttachPoint=\"message\" name=\"message\" class=\"dijitTextarea\" dojoType=\"dijit.form.Textarea\"  style=\"width:99%;height:99%\" ></textarea></div></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Email Address</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"email\" name=\"email\" type=\"text\" style=\"width:100%\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.ValidationTextBox\" regExpGen=\"dojox.validate.regexp.emailAddress\" trim=\"true\" invalidMessage=\"invalid email address\" size=\"40\" maxlength=\"70\"/></td></tr>\r\n\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Collection Date</td><td><input type=\"text\" dojoAttachPoint=\"dd_collectiondate\" name = \"dd_collectiondate\" dojoType=\"dijit.form.DateTextBox\" required=\"true\" ></td>\r\n\t</tr>\r\n\t<tr><td class=\"prmaxrowlabel\" colspan=\"4\" align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_TakePayment\">Take Payment</button></td>\r\n</table></form>\r\n</div>\r\n",
	constructor: function()
	{
		this._PaymentTakenCallBack = dojo.hitch(this,this._PaymentTakenCall);
		this._daysofmonth =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=daysofmonth"});

	},
	postCreate:function()
	{
		this.pay_montly_day.store = this._daysofmonth;
		this.sub_start_day.store = this._daysofmonth;
		this.inherited(arguments);
	},
	setCustomer:function( customerid , customername , email , dialog, defaultvalue )
	{
		this._customerid = customerid;
		this._customername = customername;

		dojo.attr ( this.customername , "innerHTML" , this._customername ) ;
		this.email.set("value",email);
		this._dialog = dialog;
		this.payment.set("value", defaultvalue ) ;
		this.first_month_value.set("value",defaultvalue );
	},
	_PaymentTakenCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Payment Taken and invoice sent");
			this.Clear();
			dojo.publish(PRCOMMON.Events.Monthly_Payments, [ response.data] ) ;
			this._dialog.hide();
		}
		else
		{
			alert("Problem taking payment");
		}
	},
	_TakePayment:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			return false;
		}

		var content = this.form.get("value");

		// fix up the date
		var d = this.dd_collectiondate.get("value");
		if ( d != null )
			content["dd_collectiondate"] = d.getFullYear() + "-" + (d.getMonth() + 1 )  + "-" + d.getDate();

		content["icustomerid"] = this._customerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._PaymentTakenCallBack),
			url:'/iadmin/payment_dd_first',
			content:content}));

	},
	Clear:function()
	{
		this.payment.set("value","");
		this.first_month_value.set("value","");
		this.email.set("value","");
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.DDInvoices"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.DDInvoices"] = true;
//-----------------------------------------------------------------------------
// Name:    DDInvoices.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.accounts.DDInvoices");


dojo.declare("prmax.iadmin.accounts.DDInvoices",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<table width=\"500px\" cellpadding=\"0\" cellpadding=\"0\">\r\n\t\t<tr><td colspan=\"2\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Create DD Invoices for next 10 Working days (Ignores Bank Holidays)</div></td>\r\n\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >DD Day</td><td><select data-dojo-props='\"class\":\"prmaxrequired\",required:\"true\",name:\"pay_montly_day\",autoComplete:\"true\",style:\"width:3em\"' data-dojo-attach-point=\"pay_montly_day\" data-dojo-type=\"dijit.form.FilteringSelect\" ><option value=\"1\">1</option><option value=\"8\">8</option><option value=\"15\">15</option><option value=\"22\">22</option></select></td></tr>\r\n\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >DD Date</td><td><input type=\"text\"  dojoAttachPoint=\"take_date\" name = \"take_date\" required=\"true\" dojoType=\"dijit.form.DateTextBox\" ></td></tr>\r\n\t\t<tr><td colspan=\"2\"><br/><br/><br/></td></tr>\r\n\t\t<tr><td class=\"prmaxrowlabel\" colspan=\"2\" align=\"center\"><button dojoType=\"dojox.form.BusyButton\" type=\"button\" dojoAttachEvent=\"onClick:_CreateInvoices\" busylabel=\"Please Wait\" dojoAttachPoint=\"invbtn\">Create Invoices And Setup Payment</button></td></tr>\r\n\t\t<tr><td colspan=\"2\" ><br/><br/><br/></td></tr>\r\n\t\t<tr><td>\r\n\t\t\t<form target=\"_newtab\" action=\"/iadmin/payment_dd_invoices_draft\" method=\"post\" dojoAttachEvent=\"onsubmit:_DraftInvoices\" >\r\n\t\t\t\t<input type=\"hidden\"  dojoAttachPoint=\"tmp_cache\" name = \"tmp_cache\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t<input type=\"hidden\"  dojoAttachPoint=\"pay_montly_day2\" name = \"pay_montly_day\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t<input type=\"hidden\"  dojoAttachPoint=\"take_date2\" name = \"take_date\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t<button type=\"submit\" dojoType=\"dijit.form.Button\" label=\"See Draft List\" ></button>\r\n\t\t\t</form>\r\n\t\t</td></tr>\r\n\t</table>\r\n</div>\r\n",
	constructor: function()
	{
		this._InvoiceCallBack = dojo.hitch(this,this._InvoiceCall);

	},
	_CreateInvoices:function()
	{
		if ( confirm("Create Payment Run"))
		{
			var content = { pay_montly_day: this.pay_montly_day.get("value"),
											take_date: ttl.utilities.toJsonDate ( this.take_date.get("value"))};

			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._InvoiceCallBack),
				url:'/iadmin/payment_dd_invoices',
				content: content }));
		}
		else
		{
			this.invbtn.cancel();
		}
	},
	_InvoiceCall:function(response)
	{

		if ( response.success == "OK" )
		{
			alert("Invoice Run Created");
		}
		else
		{
			alert("Problem creating Invoice Run");
		}

		this.invbtn.cancel();
	},
	_DraftInvoices:function()
	{
		this.tmp_cache.set("value", new Date());
		this.pay_montly_day2.set("value", this.pay_montly_day.get("value"));
		if ( this.take_date.get("value"))
		{
			var d = this.take_date.get("value");
			this.take_date2.set("value", d.getFullYear() + "-" + (d.getMonth() + 1 )  + "-" + d.getDate() );
		}
		else
		{
			this.take_date2.set("value", null );
		}
		return true;
	}

});

}

if(!dojo._hasResource["prmax.iadmin.accounts.DDCsv"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.DDCsv"] = true;
//-----------------------------------------------------------------------------
// Name:    DDCsv.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.accounts.DDCsv");


dojo.declare("prmax.iadmin.accounts.DDCsv",
	[ttl.BaseWidget],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<form target=\"_newtab\" action=\"/iadmin/payment_dd_csv\" dojoAttachEvent=\"onsubmit:_CreateCsv\" >\r\n\t\t<table width=\"700px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Create DD Csv </div></td>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >DD Day</td><td><select data-dojo-props='\"class\":\"prmaxrequired\",required:\"true\",name:\"pay_montly_day\",autoComplete:\"true\",style:\"width:3em\"' data-dojo-attach-point=\"pay_montly_day\" data-dojo-type=\"dijit.form.FilteringSelect\" ><option value=\"1\">1</option><option value=\"8\">8</option><option value=\"15\">15</option><option value=\"22\">22</option></select></td></tr>\r\n\t\t\t<tr><td colspan=\"2\"><br/><br/><br/></td></tr>\r\n\t\t\t<tr><td><button data-dojo-props='type:\"button\",label:\"Reset Monthly Figures\"' data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_ClearDown\" ></button></td>\r\n\t\t\t<td class=\"prmaxrowlabel\" align=\"left\"><button type=\"submit\" dojoType=\"dijit.form.Button\" label=\"Create DD Csv\" ></button></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</form>\r\n\t<br/><br/><br/>\r\n\t<table width=\"700px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t<tr><td><form target=\"_newtab\" action=\"/iadmin/payment_dd_csv_draft\" method=\"post\" dojoAttachEvent=\"onsubmit:_DraftInvoices\" >\r\n\t\t\t<input type=\"hidden\"  dojoAttachPoint=\"tmp_cache\" name = \"tmp_cache\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t<input type=\"hidden\"  dojoAttachPoint=\"pay_montly_day2\" name = \"pay_montly_day\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t<button type=\"submit\" dojoType=\"dijit.form.Button\" label=\"See Draft List\" ></button></td></tr>\r\n\t</table>\r\n</div>\r\n",
	_CreateCsv:function()
	{

		if ( confirm("Create DD Csv"))
			return true ;

		return false;
	},
	_DraftInvoices:function()
	{
		this.tmp_cache.set("value", new Date());
		this.pay_montly_day2.set("value", this.pay_montly_day.get("value"));

		return true;
	},
	_ClearDown:function()
	{
		if ( confirm("Reset the Montly Payment Values to the Default Values"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._LoadCustomerCall,
				url:'/iadmin/payment_dd_reset',
				content:{'pay_montly_day':this.pay_montly_day.get("value")}
			}));
		}
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.DDReturnPayment"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.DDReturnPayment"] = true;
//-----------------------------------------------------------------------------
// Name:    DDReturnPayment.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.accounts.DDReturnPayment");



dojo.declare("prmax.iadmin.accounts.DDReturnPayment",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t<input type=\"hidden\" name=\"icustomerid\" dojoAttachPoint=\"icustomerid\" dojoType=\"dijit.form.TextBox\">\r\n\t\t<table width=\"700px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Reject Last DD for </div><div class=\"prmaxrowdisplaylarge\" style=\"display:inline\" dojoAttachPoint=\"customername\"></div></td>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\">Reason Code</td><td><select class=\"prmaxinput\" name=\"paymentreturnreasonid\" dojoAttachPoint=\"paymentreturnreasonid\" style=\"width:10em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" valign=\"top\">Reason</td><td><div class=\"dialogprofileframe\" ><textarea dojoAttachPoint=\"reason\" name=\"reason\" class=\"dijitTextarea\" dojoType=\"dijit.form.Textarea\"  style=\"width:99%;height:99%\" ></textarea></div></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" colspan=\"4\" align=\"right\"><button dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait\" type=\"button\" dojoAttachEvent=\"onClick:_CancelPayment\" dojoAttachPoint=\"okbtn\">Cancel DD Payment</button></td>\r\n\t\t</table>\r\n\t</form>\r\n\r\n</div>\r\n",
	constructor: function()
	{
		this._FailedCallBack = dojo.hitch(this, this._FailedCall);
		this.paymentreturnreasons = new dojo.data.ItemFileReadStore (
				{url:'/common/lookups?searchtype=paymentreturnreasons',
				onError:ttl.utilities.globalerrorchecker,
				clearOnClose:true,
				urlPreventCache:true
				});

	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.paymentreturnreasonid.store = this.paymentreturnreasons;
		this.paymentreturnreasonid.set("value",1);

		this.inherited(arguments);
	},
	_Clear:function()
	{
		this.icustomerid.set("value",null);
		this.reason.set("value","");
		this.okbtn.cancel();

	},
	_FailedCall:function( response )
	{
		if ( response.success == "OK")
		{
			alert("DD cancelled");
			this._Clear();
			this._dialog.hide();
		}
		else
		{
			alert("Problem Failing Last DD");
		}
		this.okbtn.cancel();
	},
	_CancelPayment:function()
	{
		if ( confirm("Fail Last DD Payment"))
		{
			var content = this.form.get("value");
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._FailedCallBack),
				url:'/iadmin/payment_dd_failed',
				content:content}));
		}
		else
		{
			this.okbtn.cancel();
		}
	},
	setCustomer:function( customerid , customername , email , dialog)
	{
		this.okbtn.cancel();
		this.icustomerid.set("value", customerid ) ;
		this._email = email;

		dojo.attr ( this.customername , "innerHTML" , customername ) ;
		this._dialog = dialog;
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.UpgradeOrderConfirmation"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.UpgradeOrderConfirmation"] = true;
//-----------------------------------------------------------------------------
// Name:    UpgradeOrderConfirmation.js
// Author:  Chris Hoy
// Purpose:
// Created: 04/04/2012
//
// To do:
//
//-----------------------------------------------------------------------------


dojo.provide("prmax.iadmin.accounts.UpgradeOrderConfirmation");



dojo.declare("prmax.iadmin.accounts.UpgradeOrderConfirmation",
	[ ttl.BaseWidget ],
	{
	templateString:"<div style=\"width:800px;height:500px;padding:0px;margin:0px\">\r\n\t<div data-dojo-attach-point=\"frame\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='style:\"width:100%;height:100%\"' >\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"width:150px;height:100%\"'>\r\n\t\t<input class=\"prmaxinput\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"media_upgrade\",type:\"checkbox\"' data-dojo-attach-point=\"media_upgrade\" data-dojo-attach-event=\"onClick:_change_media_view\"/><label class=\"prmaxrowtag\">Media Core</label><br/>\r\n\t\t<input class=\"prmaxinput\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"advance_upgrade\",type:\"checkbox\"' data-dojo-attach-point=\"advance_upgrade\" data-dojo-attach-event=\"onClick:_change_advance_view\"/><label class=\"prmaxrowtag\">Advance Features</label><br/>\r\n\t\t<input class=\"prmaxinput\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"monitoring_upgrade\",type:\"checkbox\"' data-dojo-attach-point=\"monitoring_upgrade\" data-dojo-attach-event=\"onClick:_change_monitoring_view\"/><label class=\"prmaxrowtag\">Monitoring</label><br/>\r\n\t\t<input class=\"prmaxinput\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"international_upgrade\",type:\"checkbox\"' data-dojo-attach-point=\"international_upgrade\" data-dojo-attach-event=\"onClick:_change_international_view\"/><label class=\"prmaxrowtag\">International</label><br/>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\",\"class\":\"scrollpanel\"'>\r\n\t\t\t<form data-dojo-attach-point=\"form\"  data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse\" >\r\n\t\t\t\t<input data-dojo-attach-point=\"orderpaymentfreqid\" data-dojo-props='type:\"hidden\",name:\"orderpaymentfreqid\"' data-dojo-type=\"dijit.form.TextBox\" >\r\n\t\t\t\t\t<tr><td colspan=\"2\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\"><div style=\"display:inline;text-align:center\" class=\"prmaxrowdisplaylarge\" data-dojo-attach-point=\"customername\">Name</div></label></td>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Payment Method</td><td><select data-dojo-props='\"class\":\"prmaxinput\",name:\"paymentmethodid\",style:\"width:15em\",autoComplete:true,readonly:\"readonly\"' data-dojo-attach-point=\"paymentmethodid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td></tr>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Purchase Order</td><td><input data-dojo-attach-point=\"purchase_order\" data-dojo-props='\"class\":\"prmaxinput\",name:\"purchase_order\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Email Confirmation</td><td><input data-dojo-attach-point=\"emailtocustomer\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"emailtocustomer\", type:\"checkbox\",\"class\":\"prmaxinput\", checked:\"checked\"' /><input data-dojo-attach-point=\"email\" data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-props='\"class\":\"prmaxinput\",name:\"email\",type:\"text\",style:\"width:20em\",trim:true,regExpGen:dojox.validate.regexp.emailAddress,invalidMessage:\"invalid email address\"' /></td></tr>\r\n\t\t\t\t\t<tr data-dojo-attach-point=\"sendinvoice_view\"><td class=\"prmaxrowtag\" align=\"right\">Send Invoice</td><td><input data-dojo-attach-point=\"sendinvoice\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"sendinvoice\", type:\"checkbox\",\"class\":\"prmaxinput\"' /></td></tr>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Confirmation On Login</td><td><input data-dojo-attach-point=\"upgrade_confirmation_accepted\" data-dojo-props='\"class\":\"prmaxinput\",name:\"upgrade_confirmation_accepted\",type:\"checkbox\"' data-dojo-type=\"dijit.form.CheckBox\" checked /></td></tr>\r\n\t\t\t\t\t<tr><td valign=\"top\" align=\"right\" ><label class=\"prmaxrowtag\">Message</label></td><td><div class=\"stdframe\" ><textarea data-dojo-attach-point=\"order_confirmation_message\" data-dojo-props='name:\"order_confirmation_message\", \"class\":\"dijitTextarea\",style:\"width:99%;height:99%\"' data-dojo-type=\"dijit.form.Textarea\"></textarea></div></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">Ordered By</td><td><input data-dojo-props='\"class\":\"prmaxrequired\",type:\"text\",name:\"orderedby\",trim:true,required:true' data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"orderedby\"></input></td></tr>\r\n\r\n\t\t\t\t</table>\r\n\t\t\t<div data-dojo-attach-point=\"media_core_view\" class=\"prmaxhidden\" style=\"padding-top:10px\">\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse\" >\r\n\t\t\t\t\t<tr><td colspan=\"2\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Core Media Settings</label></td></tr>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" width=\"150px\" align=\"right\" >Concurrent Licence</td><td ><input data-dojo-attach-point=\"logins\" data-dojo-type=\"dijit.form.NumberTextBox\"data-dojo-props='\"class\":\"prmaxrequired\",type:\"text\",name:\"logins\",value:\"1\",style:\"width:4em\",required:true,constraints:{min:1,max:50}'></td></tr>\r\n\t\t\t\t\t<tr><td width=\"12%\">Price Code</td><td width=\"12%\">Price ex VAT</td><td width=\"12%\">Rnwl Code</td></tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td><select data-dojo-props='\"class\":\"prmaxinput\",name:\"pricecodeid\",autoComplete:true,style:\"width:8em\"' data-dojo-attach-point=\"pricecodeid\"  data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-event=\"onChange:_PriceChange\" ></select></td>\r\n\t\t\t\t\t\t<td><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-attach-point=\"cost\" data-dojo-props='type:\"text\",name:\"cost\",required:true,trim:true,constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:6em\"'></input></td>\r\n\t\t\t\t\t\t<td><select data-dojo-props='\"class\":\"prmaxinput\",name:\"pricecoderenewalid\",autoComplete:true,style:\"width:8em\"' data-dojo-attach-point=\"pricecoderenewalid\"  data-dojo-type=\"dijit.form.FilteringSelect\" ></select></td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"advance_view\" class=\"prmaxhidden\">\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse\" >\r\n\t\t\t\t\t<tr><td colspan=\"4\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Advance Features Settings</label></td></tr>\r\n\t\t\t\t\t<tr><td width=\"12%\">Price Code</td><td width=\"12%\">Price ex VAT</td><td width=\"12%\">Rnwl Code</td></tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"features_view_4\"><select data-dojo-attach-point=\"advpricecodeid\" data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-event=\"onChange:_PriceChange\" data-dojo-props='\"class\":\"prmaxinput\",name:\"advpricecodeid\",autoComplete:true, required:false,style:\"width:8em\"'  ></select></td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"features_view_5\"><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-attach-point=\"advcost\" data-dojo-props='type:\"text\",name:\"advcost\",trim:true,constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:6em\"'></input></td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"features_view_6\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"advpricecoderenewalid\",autoComplete:true,required:false,style:\"width:8em\"' data-dojo-attach-point=\"advpricecoderenewalid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"international_view\" class=\"prmaxhidden\">\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse\" >\r\n\t\t\t\t\t<tr><td colspan=\"4\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">International Settings</label></td></tr>\r\n\t\t\t\t\t<tr><td width=\"12%\">Price Code</td><td width=\"12%\">Price ex VAT</td><td width=\"12%\">Rnwl Code</td></tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"international_view_4\">&nbsp;</td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"international_view_5\"><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-attach-point=\"internationalcost\" data-dojo-props='type:\"text\",name:\"internationalcost\",trim:true,constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:6em\"'></input></td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"international_view_6\">&nbsp;</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"monitoring_view\" class=\"prmaxhidden\">\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse\" >\r\n\t\t\t\t\t<tr><td colspan=\"2\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Monitoring Settings</label></td></tr>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Monitoring Count</td><td><input data-dojo-attach-point=\"maxmonitoringusers\" data-dojo-props='\"class\":\"prmaxrequired\",type:\"text\",name:\"maxmonitoringusers\",value:\"1\",style:\"width:4em\",constraints:{min:0,max:50}' data-dojo-type=\"dijit.form.NumberTextBox\"></td></tr>\r\n\t\t\t\t\t<tr><td width=\"12%\">Start Date</td><td width=\"12%\" data-dojo-attach-point=\"view_dd_1\">Free Mths</td><td width=\"12%\" data-dojo-attach-point=\"view_dd_2\">Paid Mths</td><td width=\"12%\">Price Code</td><td width=\"12%\">Price ex VAT</td><td width=\"12%\">Rnwl Code</td></tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"updatum_view_1\"><input data-dojo-attach-point=\"updatum_start_date\" data-dojo-type=\"dijit.form.DateTextBox\" data-dojo-props='name:\"updatum_start_date\",type:\"text\",style:\"width:8em\"'></td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"updatum_view_2\"><input data-dojo-attach-point=\"updatum_months_free\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='type:\"text\",name:\"updatum_months_free\",value:0,constraints:{min:0,max:36},required:true,style:\"width:6em\"'></td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"updatum_view_3\"><input data-dojo-attach-point=\"updatum_months_paid\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='name:\"updatum_months_paid\",type:\"text\",value:12,constraints:{min:3,max:36},required:true,style:\"width:6em\"'></td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"updatum_view_4\"><select data-dojo-attach-event=\"onChange:_PriceChange\" data-dojo-attach-point=\"updatumpricecodeid\"  data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-props='\"class\":\"prmaxinput\",name:\"updatumpricecodeid\",autoComplete:true,required:false,style:\"width:8em\"' ></select></td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"updatum_view_5\"><input data-dojo-attach-point=\"updatumcost\" data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-props='type:\"text\",name:\"updatumcost\",trim:true,constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:6em\"'></input></td>\r\n\t\t\t\t\t\t<td  data-dojo-attach-point=\"updatum_view_6\"><select data-dojo-attach-point=\"updatumpricecoderenewalid\" data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-props='\"class\":\"prmaxinput\",name:\"updatumpricecoderenewalid\",autoComplete:true,required:false,style:\"width:8em\"'></select></td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"bottom\",style:\"width:100%;height:2.5em\"'>\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_Close\">Close</button>\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_Preview\">Preview</button>\r\n\t\t\t<button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"sendbtn\" data-dojo-props='busyLabel:\"Sending upgrade confirmation ...\",type:\"button\",style:\"float:right;padding-right:10px\"' data-dojo-attach-event=\"onClick:_Send\">Send Upgrade Confirmation</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",

	constructor: function()
	{
		this._SendConfirmationCallBack = dojo.hitch ( this , this._SendConfirmationCall );
		this._pricecodes_core =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=core"});
		this._pricecodes_adv =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=adv"});
		this._pricecodes_updatum =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=updatum"});
		this._paymentmethods =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=paymentmethods"});
		this._send_conifirmation_call_back = dojo.hitch ( this, this._send_conifirmation_call );
		this._preview_call_back = dojo.hitch(this, this._preview_call);
		this._get_prices_call_back = dojo.hitch ( this, this._get_prices_call ) ;

	},
	postCreate:function()
	{
		this.paymentmethodid.store = this._paymentmethods;
		this.pricecodeid.set("store",this._pricecodes_core);
		this.pricecoderenewalid.set("store",this._pricecodes_core);
		this.advpricecodeid.set("store",this._pricecodes_adv);
		this.advpricecoderenewalid.set("store",this._pricecodes_adv);
		this.updatumpricecoderenewalid.set("store", this._pricecodes_updatum);
		this.updatumpricecodeid.set("store", this._pricecodes_updatum);

		this.pricecodeid.set("value",1);
		this.pricecoderenewalid.set("value",1);
		this.advpricecodeid.set("value",2);
		this.advpricecoderenewalid.set("value",2);
		this.updatumpricecoderenewalid.set("value",3);
		this.updatumpricecodeid.set("value",3);


		this.inherited(arguments);
	},
	resize:function()
	{
	this.frame.resize(arguments[0]);
	},
	_change_media_view:function()
	{
		if (this.media_upgrade.get("checked"))
			dojo.removeClass(this.media_core_view,"prmaxhidden");
		else
			dojo.addClass(this.media_core_view,"prmaxhidden");
	},
	_change_advance_view:function()
	{
		if (this.advance_upgrade.get("checked"))
			dojo.removeClass(this.advance_view,"prmaxhidden");
		else
			dojo.addClass(this.advance_view,"prmaxhidden");
	},
	_change_monitoring_view:function()
	{
		if (this.monitoring_upgrade.get("checked"))
			dojo.removeClass(this.monitoring_view,"prmaxhidden");
		else
			dojo.addClass(this.monitoring_view,"prmaxhidden");
	},
	_send_conifirmation_call:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Upgrade Confirmation Sent");
			this.sendbtn.cancel();
			this._dialog.hide();
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
		}
		else
		{
			alert("Problem Sending Upgrade Confirmation");
		}
	},
	_Validate:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.sendbtn.cancel();
			return null;
		}
		if (this.media_upgrade.get("value") == false &&
				this.advance_upgrade.get("value") == false &&
				this.monitoring_upgrade.get("value") == false &&
				this.international_upgrade.get("value") == false )
		{
			alert("No Upgrades Selected ");
			return null;
		}

		var content = this.form.get("value");
		content["updatum_start_date"] = ttl.utilities.toJsonDate(this.updatum_start_date.get("value"));
		content["icustomerid"] = this._customerid;
		content["media_upgrade"] = this.media_upgrade.get("value");
		content["advance_upgrade"] = this.advance_upgrade.get("value");
		content["monitoring_upgrade"] = this.monitoring_upgrade.get("value");

		return content;
	},

	_Send:function()
	{
		var content = this._Validate();

		if ( content == null ) return ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._send_conifirmation_call_back,
			url:'/iadmin/upgrade_confirmation',
			content:content}));
	},
	set_customer:function( customerid , dialog , cust )
	{
		this._clear();
		this._customerid = customerid;
		this._dialog = dialog;

		this.paymentmethodid.set("value",cust.paymentmethodid);
		this.orderpaymentfreqid.set("value",cust.orderpaymentfreqid);
		this.email.set("value",cust.email);

		// show/hide fields
		this._show_hide_dd(cust.paymentmethodid);

		// load the start dates if possible into the system
		var tdate = new Date();
		this.updatum_start_date.set("value", (cust.updatum_start_date_d)?ttl.utilities.fromObjectDate(cust.updatum_start_date_d):tdate);

		this.cost.set("value",ttl.utilities.Display_Int_Money(cust.order_confirmation_media_cost));
		this.advcost.set("value",ttl.utilities.Display_Int_Money(cust.order_confirmation_adv_cost));
		this.updatumcost.set("value",ttl.utilities.Display_Int_Money(cust.order_confirmation_updatum_cost));
		this.internationalcost.set("value",ttl.utilities.Display_Int_Money(cust.order_confirmation_international_cost));

	},
	_clear:function()
	{
		this.media_upgrade.set("checked", false);
		this.advance_upgrade.set("checked", false);
		this.monitoring_upgrade.set("checked", false);
		this.purchase_order.set("value", "");
		this.emailtocustomer.set("checked",true);
		this.email.set("value","");
		this.upgrade_confirmation_accepted.set("checked",false);
		this.order_confirmation_message.set("value","");
		dojo.addClass(this.media_core_view,"prmaxhidden");
		dojo.addClass(this.advance_view,"prmaxhidden");
		dojo.addClass(this.monitoring_view,"prmaxhidden");
		dojo.addClass(this.international_view,"prmaxhidden");
		this.sendbtn.cancel();
	},
	_Preview:function()
	{
		var content = this._Validate();

		if ( content == null ) return ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._preview_call_back,
			url:'/iadmin/upgrade_confirmation_preview',
			content:content}));

	},
	_preview_call:function( response)
	{
		if (response.success == "OK")
		{
			var head = "\t\t<meta http-equiv='Content-Type' content='text/html; charset='UTF-8'>\n";
			var content = "<html>\n\t<head>\n" + head + "\t</head>\n\t<body><div style='width:640px;height:100%;overflow:auto;overflow-x:hidden;padding-right:15px'>\n" + response.html_preview + "\n\t</div></body>\n</html>";
			var win = window.open("javascript: ''", "_blank", "status=0,menubar=0,location=0,toolbar=0,",true);
			win.document.open();
			win.document.write(content);
			win.document.close();
		}
		else
		{
			alert("problem doing preview")
		}
	},
	_show_hide_dd:function( paymentmethodid )
	{
		switch ( paymentmethodid )
		{
			case 2:
			case 3:
				for (x = 1 ; x<3 ; x++)
					dojo.addClass(this["view_dd_"+x],"prmaxhidden");
				dojo.addClass(this.updatum_view_2,"prmaxhidden");
				dojo.addClass(this.updatum_view_3,"prmaxhidden");
				this.sendinvoice.set("checked",false);
				dojo.addClass(this.sendinvoice_view,"prmaxhidden");
				break;
			default:
				for (x = 1 ; x<3 ; x++)
					dojo.removeClass(this["view_dd_"+x],"prmaxhidden");
				dojo.removeClass(this.updatum_view_2,"prmaxhidden");
				dojo.removeClass(this.updatum_view_3,"prmaxhidden");
				this.sendinvoice.set("checked",true);
				dojo.removeClass(this.sendinvoice_view,"prmaxhidden");
				break;
		}
	},
	_Close:function()
	{
		this._dialog.hide();
		this._clear();
	},
	_PriceChange:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._get_prices_call_back,
			url:'/iadmin/prices_get',
			content:this.form.get("value")}));
	},
	_get_prices_call:function ( response )
	{
		if ( response.success == "OK" )
		{
			if (this.media_upgrade.get("checked"))
				this.cost.set("value" , dojo.number.format (response.cost.media/100.00, {places:2}));
			if (this.advance_upgrade.get("checked"))
				this.advcost.set("value" , dojo.number.format (response.cost.advance/100.00, {places:2}));
			if (this.monitoring_upgrade.get("checked"))
				this.updatumcost.set("value" , dojo.number.format (response.cost.updatum/100.00, {places:2}));
		}
	},
	_change_international_view:function()
	{
		if (this.international_upgrade.get("checked"))
			dojo.removeClass(this.international_view,"prmaxhidden");
		else
			dojo.addClass(this.international_view,"prmaxhidden");

	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.OrderConfirmation"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.OrderConfirmation"] = true;
//-----------------------------------------------------------------------------
// Name:    OrderConfirmation.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------


dojo.provide("prmax.iadmin.accounts.OrderConfirmation");






dojo.declare("prmax.iadmin.accounts.OrderConfirmation",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t<input type=\"hidden\" dojoAttachPoint=\"taskid\" name=\"taskid\" dojoType=\"dijit.form.TextBox\" value=\"-1\">\r\n\t\t<table width=\"750px\" cellpadding=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse\" >\r\n\t\t\t<tr><td colspan=\"2\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\"><div style=\"display:inline\"class=\"prmaxrowdisplaylarge\" dojoAttachPoint=\"customername\">Name</div></label></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" width=\"150px\" align=\"right\" >Concurrent Licence</td><td ><input class=\"prmaxrequired\" type=\"text\"  dojoAttachPoint=\"logins\" name=\"logins\" dojoType=\"dijit.form.NumberTextBox\" value=\"1\" style=\"width:4em\" required=\"true\" constraints=\"{min:1,max:50}\" dojoAttachEvent=\"onChange:_PriceChange\"></td></tr>\r\n\t\t\t<tr dojoAttachPoint=\"view_monitoring\" class=\"prmaxhidden\"><td class=\"prmaxrowtag\" align=\"right\" >Monitoring Count</td><td ><input class=\"prmaxrequired\" type=\"text\"  dojoAttachPoint=\"maxmonitoringusers\" name=\"maxmonitoringusers\" dojoType=\"dijit.form.NumberTextBox\" value=\"1\" style=\"width:4em\" constraints=\"{min:0,max:50}\" dojoAttachEvent=\"onChange:_PriceChange\"></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Payment Freq</td><td><select class=\"prmaxinput\" name=\"orderpaymentfreqid\" dojoAttachPoint=\"orderpaymentfreqid\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" dojoAttachEvent=\"onChange:_PriceChange\"><options><option value=\"1\">Fixed Term</option><option value=\"2\">Monthly</option></options></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Payment Method</td><td><select class=\"prmaxinput\" name=\"orderpaymentmethodid\" dojoAttachPoint=\"orderpaymentmethodid\" style=\"width:25em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" dojoAttachEvent=\"onChange:_ChangePayment\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Purchase Order</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"purchase_order\" name=\"purchase_order\" type=\"text\" trim=\"true\" dojoType=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Email Confirmation</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"emailtocustomer\" name=\"emailtocustomer\" type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" checked /><input class=\"prmaxinput\" dojoAttachPoint=\"email\" name=\"email\" type=\"text\" style=\"width:20em\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.ValidationTextBox\" regExpGen=\"dojox.validate.regexp.emailAddress\" trim=\"true\" invalidMessage=\"invalid email address\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\"  align=\"right\">Bundled Invoice</td><td><input data-dojo-attach-point=\"has_bundled_invoice\" data-dojo-props='\"class\":\"prmaxinput\",name:\"has_bundled_invoice\",type:\"checkbox\"' data-dojo-type=\"dijit.form.CheckBox\"/></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Confirmation On Login</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"confirmation_accepted\" name=\"confirmation_accepted\" type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" checked /></td></tr>\r\n\t\t\t<tr><td colspan=\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td colspan=\"2\"><table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" border=\"0\">\r\n\t\t\t<tr>\r\n\t\t\t\t<td width=\"28%\">&nbsp;</td>\r\n\t\t\t\t<td width=\"12%\">Start Date</td>\r\n\t\t\t\t<td width=\"12%\" dojoAttachPoint=\"view_dd_2\">Free Mths</td>\r\n\t\t\t\t<td width=\"12%\" dojoAttachPoint=\"view_dd_1\">Paid Mths</td>\r\n\t\t\t\t<td width=\"12%\">Price Code</td>\r\n\t\t\t\t<td width=\"12%\">Price ex VAT</td>\r\n\t\t\t\t<td width=\"12%\">Rnwl Code</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\">Media DB</td>\r\n\t\t\t\t<td><input type=\"text\" dojoAttachPoint=\"licence_start_date\" name = \"licence_start_date\" dojoType=\"dijit.form.DateTextBox\" required=\"true\" style=\"width:8em\"></td>\r\n\t\t\t\t<td dojoAttachPoint=\"view_dd_3\"><input type=\"text\" dojoAttachPoint=\"months_free\" name=\"months_free\" dojoType=\"dijit.form.NumberTextBox\" value=\"0\" required=\"true\" constraints=\"{min:0,max:6}\" style=\"width:6em\"></td>\r\n\t\t\t\t<td dojoAttachPoint=\"view_dd_4\"><input type=\"text\" dojoAttachPoint=\"months_paid\" name=\"months_paid\" dojoType=\"dijit.form.NumberTextBox\" value=\"12\" required=\"true\" constraints=\"{min:1,max:36}\" style=\"width:6em\"></td>\r\n\t\t\t\t<td><select class=\"prmaxinput\" name=\"pricecodeid\" dojoAttachPoint=\"pricecodeid\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" style=\"width:8em\" dojoAttachEvent=\"onChange:_PriceChange1\"></select></td>\r\n\t\t\t\t<td><input type=\"text\" name=\"cost\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" constraints=\"{min:0.01,max:99999.00,fractional:true,places:'0,2'}\" dojoAttachPoint=\"cost\" style=\"width:6em\"></input></td>\r\n\t\t\t\t<td><select class=\"prmaxinput\" name=\"pricecoderenewalid\" dojoAttachPoint=\"pricecoderenewalid\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" style=\"width:8em\" ></select></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr ><td class=\"prmaxrowtag\">Features&nbsp;<input class=\"prmaxinput\" dojoAttachPoint=\"advancefeatures\" name=\"advancefeatures\" type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" dojoAttachEvent=\"onClick:_Advance\"/></td>\r\n\t\t\t\t<td dojoAttachPoint=\"features_view_1\" class=\"prmaxhidden\"><input type=\"text\"  dojoAttachPoint=\"advance_licence_start\" name = \"advance_licence_start\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\"></td>\r\n\t\t\t\t<td dojoAttachPoint=\"features_view_2\" class=\"prmaxhidden\"><input type=\"text\"  dojoAttachPoint=\"adv_months_free\" name=\"adv_months_free\" dojoType=\"dijit.form.NumberTextBox\" value=\"0\" constraints=\"{min:0,max:36}\" required=\"true\" style=\"width:6em\"></td>\r\n\t\t\t\t<td dojoAttachPoint=\"features_view_3\" class=\"prmaxhidden\"><input type=\"text\"  dojoAttachPoint=\"adv_months_paid\" name=\"adv_months_paid\" dojoType=\"dijit.form.NumberTextBox\" value=\"12\" constraints=\"{min:0,max:36}\" required=\"true\" style=\"width:6em\"></td>\r\n\t\t\t\t<td dojoAttachPoint=\"features_view_4\" class=\"prmaxhidden\"><select class=\"prmaxinput\" name=\"advpricecodeid\" dojoAttachPoint=\"advpricecodeid\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"false\" style=\"width:8em\" dojoAttachEvent=\"onChange:_PriceChange2\" ></select></td>\r\n\t\t\t\t<td dojoAttachPoint=\"features_view_5\" class=\"prmaxhidden\"><input type=\"text\" name=\"advcost\" dojoType=\"dijit.form.CurrencyTextBox\" trim=\"true\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\" dojoAttachPoint=\"advcost\" style=\"width:6em\"></input></td>\r\n\t\t\t\t<td dojoAttachPoint=\"features_view_6\" class=\"prmaxhidden\"><select class=\"prmaxinput\" name=\"advpricecoderenewalid\" dojoAttachPoint=\"advpricecoderenewalid\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"false\" style=\"width:8em\"></select></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr ><td class=\"prmaxrowtag\">Monitoring&nbsp;<input class=\"prmaxinput\" dojoAttachPoint=\"updatum\" name=\"updatum\" type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" dojoAttachEvent=\"onClick:_Updatum\"/></td>\r\n\t\t\t\t<td dojoAttachPoint=\"updatum_view_1\" class=\"prmaxhidden\"><input type=\"text\"  dojoAttachPoint=\"updatum_start_date\" name = \"updatum_start_date\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\"></td>\r\n\t\t\t\t<td dojoAttachPoint=\"updatum_view_2\" class=\"prmaxhidden\"><input type=\"text\"  dojoAttachPoint=\"updatum_months_free\" name=\"updatum_months_free\" dojoType=\"dijit.form.NumberTextBox\" value=\"0\" constraints=\"{min:0,max:36}\" required=\"true\" style=\"width:6em\"></td>\r\n\t\t\t\t<td dojoAttachPoint=\"updatum_view_3\" class=\"prmaxhidden\"><input type=\"text\"  dojoAttachPoint=\"updatum_months_paid\" name=\"updatum_months_paid\" dojoType=\"dijit.form.NumberTextBox\" value=\"12\" constraints=\"{min:0,max:36}\" required=\"true\" style=\"width:6em\"></td>\r\n\t\t\t\t<td dojoAttachPoint=\"updatum_view_4\" class=\"prmaxhidden\"><select class=\"prmaxinput\" name=\"updatumpricecodeid\" dojoAttachPoint=\"updatumpricecodeid\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"false\" style=\"width:8em\" dojoAttachEvent=\"onChange:_PriceChange3\" ></select></td>\r\n\t\t\t\t<td dojoAttachPoint=\"updatum_view_5\" class=\"prmaxhidden\"><input type=\"text\" name=\"updatumcost\" dojoType=\"dijit.form.CurrencyTextBox\" trim=\"true\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\" dojoAttachPoint=\"updatumcost\" style=\"width:6em\"></input></td>\r\n\t\t\t\t<td dojoAttachPoint=\"updatum_view_6\" class=\"prmaxhidden\"><select class=\"prmaxinput\" name=\"updatumpricecoderenewalid\" dojoAttachPoint=\"updatumpricecoderenewalid\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"false\" style=\"width:8em\"></select></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr ><td class=\"prmaxrowtag\">International&nbsp;<input class=\"prmaxinput\" dojoAttachPoint=\"has_international_data\" name=\"has_international_data\" type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" dojoAttachEvent=\"onClick:_international\"/></td>\r\n\t\t\t\t<td dojoAttachPoint=\"int_view_1\" class=\"prmaxhidden\">&nbsp;</td>\r\n\t\t\t\t<td dojoAttachPoint=\"int_view_2\" class=\"prmaxhidden\">&nbsp;</td>\r\n\t\t\t\t<td dojoAttachPoint=\"int_view_3\" class=\"prmaxhidden\">&nbsp;</td>\r\n\t\t\t\t<td dojoAttachPoint=\"int_view_4\" class=\"prmaxhidden\"><select class=\"prmaxinput\" name=\"intpricecodeid\" dojoAttachPoint=\"intpricecodeid\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"false\" style=\"width:8em\" ></select></td>\r\n\t\t\t\t<td dojoAttachPoint=\"int_view_5\" class=\"prmaxhidden\"><input type=\"text\" name=\"internationalcost\" dojoType=\"dijit.form.CurrencyTextBox\" trim=\"true\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\" dojoAttachPoint=\"internationalcost\" style=\"width:6em\"></input></td>\r\n\t\t\t\t<td dojoAttachPoint=\"int_view_6\" class=\"prmaxhidden\"><select class=\"prmaxinput\" name=\"intpricecoderenewalid\" dojoAttachPoint=\"intpricecoderenewalid\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"false\" style=\"width:8em\"></select></td>\r\n\t\t\t</tr>\r\n\t\t\t</table></td></tr>\r\n\t\t\t<tr><td colspan=\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td valign=\"top\" align=\"right\" ><label class=\"prmaxrowtag\">Message</label></td><td><div class=\"stdframe\" ><textarea dojoAttachPoint=\"order_confirmation_message\" name=\"order_confirmation_message\" class=\"dijitTextarea\" dojoType=\"dijit.form.Textarea\"  style=\"width:99%;height:99%\" ></textarea></div></td></tr>\r\n\t\t\t<tr><td valign=\"top\" align=\"right\" ><label class=\"prmaxrowtag\">Internal Note</label></td><td><div class=\"stdframe\" ><textarea dojoAttachPoint=\"internalnote\" name=\"internalnote\" class=\"dijitTextarea\" dojoType=\"dijit.form.Textarea\"  style=\"width:99%;height:99%\" ></textarea></div></td></tr>\r\n\t\t\t<tr dojoAttachPoint=\"owner_view\" class=\"prmaxhidden\"><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Assigned To</td><td><select class=\"prmaxrequired\" required=\"true\" dojoAttachPoint=\"assigntoid\" name=\"assigntoid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">Ordered By</td><td><input class=\"prmaxrequired\" type=\"text\" name=\"orderedby\" dojoType=\"dijit.form.ValidationTextBox\" trim=\"true\" required=\"true\" dojoAttachPoint=\"orderedby\"></input></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" colspan=\"2\" align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_Send\">Send Order Confirmation</button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n\r\n\t<button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_Save\">Save</button>\r\n\t<button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_Preview\">Preview</button>\r\n\t\t<form dojoAttachPoint=\"previewform\" target=\"_newtab\" action=\"/iadmin/order_confirmation_send_preview\" method=\"post\">\r\n\t\t<input type=\"hidden\" name=\"icustomerid\" dojoAttachPoint=\"icustomerid\">\r\n\t</form>\r\n\r\n</div>\r\n",

	constructor: function()
	{
		this._SendConfirmationCallBack = dojo.hitch ( this , this._SendConfirmationCall );
		this._pricecodes_core =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=core"});
		this._pricecodes_adv =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=adv"});
		this._pricecodes_updatum =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=updatum"});
		this._pricecodes_int =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=int"});
		this._userfilter = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=users&group=accounts,sales"});
		this._TaskCallBack = dojo.hitch(this,this._TaskCall);
		this._SendConifirmationCallBack = dojo.hitch ( this, this._SendConifirmationCall );
		this._SaveCallBack = dojo.hitch ( this, this._SaveCall);

		this._pmnodd =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=orderpaymentmethods"});

	},
	postCreate:function()
	{
		this._get_prices_call_back_1 = dojo.hitch ( this, this._get_prices_call,this.months_paid) ;
		this._get_prices_call_back_2 = dojo.hitch ( this, this._get_prices_call,this.adv_months_paid) ;
		this._get_prices_call_back_3 = dojo.hitch ( this, this._get_prices_call,this.updatum_months_paid) ;

		this.pricecodeid.set("store",this._pricecodes_core);
		this.pricecoderenewalid.set("store",this._pricecodes_core);
		this.advpricecodeid.set("store",this._pricecodes_adv);
		this.advpricecoderenewalid.set("store",this._pricecodes_adv);
		this.updatumpricecoderenewalid.set("store", this._pricecodes_updatum);
		this.updatumpricecodeid.set("store", this._pricecodes_updatum);
		this.intpricecodeid.set("store", this._pricecodes_int);
		this.intpricecoderenewalid.set("store", this._pricecodes_int);

		this.assigntoid.set("store", this._userfilter ) ;
		this.orderpaymentmethodid.set("store", this._pmnodd );
		this.orderpaymentmethodid.set("value", 1 );

		this.pricecodeid.set("value",1);
		this.pricecoderenewalid.set("value",1);
		this.advpricecodeid.set("value",2);
		this.advpricecoderenewalid.set("value",2);
		this.updatumpricecoderenewalid.set("value",3);
		this.updatumpricecodeid.set("value",3);
		this.intpricecoderenewalid.set("value",19);
		this.intpricecodeid.set("value",19);

		this.inherited(arguments);
	},
	_SendConifirmationCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Order Confirmation");
			this._dialog.hide();
			dojo.publish(PRCOMMON.Events.Task_Refresh, null);

		}
		else
		{
			alert("Problem Sending Order Confirmation");
		}
	},
	_Validate:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			return null;
		}

		//
		if (this.updatum.get("checked"))
		{
			if (this.updatum_start_date.get("value")==null)
			{
				alert("Monitoring Need Start Date");
			}
		}

		var content = this.form.get("value");

		content["licence_start_date"] = ttl.utilities.toJsonDate(this.licence_start_date.get("value"));
		content["advance_licence_start"] = ttl.utilities.toJsonDate(this.advance_licence_start.get("value"));
		content["updatum_start_date"] = ttl.utilities.toJsonDate(this.updatum_start_date.get("value"));
		content["icustomerid"] = this._customerid;

		return content;
	},

	_Send:function()
	{
		var content = this._Validate();

		if ( content == null ) return ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._SendConifirmationCallBack,
			url:'/iadmin/order_confirmation_send',
			content:content}));
	},
	_SaveCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			alert("Order Confirmation");
		}
		else
		{
			alert("Problem Sending Order Confirmation");
		}
	},
	_Save:function()
	{
		var content = this._Validate();

		if ( content == null ) return ;

		content["saveonly"] = "on";

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._SaveCallBack,
			url:'/iadmin/order_confirmation_send_save',
			content:content}));
	},
	_TaskCall:function( response )
	{
		if ( response.success == "OK")
		{
			this.assigntoid.set("disabled", false );
			this.assigntoid.set("value", response.task.userid);
			dojo.removeClass(this.owner_view,"prmaxhidden");
		}
		else
		{
			alert("Problem");
		}
	},
	setCustomer:function( customerid , dialog , cust, taskid )
	{
		this._customerid = customerid;

		dojo.attr ( this.customername , "innerHTML" , cust.customername ) ;
		this.taskid.set("value", taskid);
		if ( taskid != null )
		{
			this.assigntoid.set("disabled", false);
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._TaskCallBack,
				url:'/iadmin/task_get',
				content:{taskid:taskid}}));
		}
		else
		{
			this.assigntoid.set("disabled", true);
			dojo.addClass(this.owner_view,"prmaxhidden");
			this.taskid.set("value",-1);
		}
		this.email.set("value",cust.email);
		this._dialog = dialog;
		this._Clear();
		this._PriceChange();
		this.advancefeatures.set("checked", cust.advancefeatures)
		this._ShowHideAdvance ( cust.advancefeatures );
		this.updatum.set("checked", cust.updatum);
		this.has_international_data.set("value",cust.has_international_data);
		this._ShowHideUpdatum ( cust.updatum );
		this._Show_Hide_DD(cust.advancefeatures, cust.updatum, cust.has_international_data, cust.orderpaymentmethodid);

		var tdate = new Date();
		this.licence_start_date.set("value" , tdate );
		this.advance_licence_start.set("value", tdate );
		this.updatum_start_date.set("value", tdate );

		this.orderedby.set("value", cust.orderedby );
		this.order_confirmation_message.set("value", cust.order_confirmation_message);
		this.orderpaymentmethodid.set("value", cust.orderpaymentmethodid);
		this.orderpaymentfreqid.set("value", cust.orderpaymentfreqid);
		this._ProductTypeSetting (cust.customertypeid ) ;

		this.months_free.set("value", cust.months_free);
		this.months_paid.set("value", cust.months_paid);

		this.adv_months_free.set("value", cust.adv_months_free);
		this.adv_months_paid.set("value", cust.adv_months_paid);

		this.updatum_months_free.set("value", cust.updatum_months_free);
		this.updatum_months_paid.set("value", cust.updatum_months_paid);

		this.has_bundled_invoice.set("checked", cust.has_bundled_invoice);

	},
	_Clear:function()
	{
		this.order_confirmation_message.set("value","");
		this.months_free.set("value", 0 ) ;
		this.months_paid.set("value", 12 ) ;
		this.adv_months_free.set("value", 0 ) ;
		this.adv_months_paid.set("value", 12 ) ;
		this.updatum_months_free.set("value", 0 ) ;
		this.updatum_months_paid.set("value", 12 ) ;
		this.orderpaymentfreqid.set("value", 1 ) ;
		this.logins.set("value",1);
	},
	_Preview:function()
	{
		dojo.attr(this.icustomerid,"value", this._customerid );
		this.previewform.submit();
	},
	_Advance:function()
	{
		this._ShowHideAdvance ( this.advancefeatures.get("checked"));
	},
	_international:function()
	{
		this._show_hide_international ( this.has_international_data.get("checked"));

	},
	_show_hide_international:function ( status )
	{
		if ( status )
		{
			var orderpaymentmethodid = this.orderpaymentmethodid.get("value");

			dojo.removeClass(this.int_view_1,"prmaxhidden");
			dojo.removeClass(this.int_view_2,"prmaxhidden");
			dojo.removeClass(this.int_view_3,"prmaxhidden");

			dojo.removeClass(this.int_view_4,"prmaxhidden");
			dojo.removeClass(this.int_view_5,"prmaxhidden");
			dojo.removeClass(this.int_view_6,"prmaxhidden");
		}
		else
		{
			dojo.addClass(this.int_view_1,"prmaxhidden");
			dojo.addClass(this.int_view_2,"prmaxhidden");
			dojo.addClass(this.int_view_3,"prmaxhidden");
			dojo.addClass(this.int_view_4,"prmaxhidden");
			dojo.addClass(this.int_view_5,"prmaxhidden");
			dojo.addClass(this.int_view_6,"prmaxhidden");
		}
	},
	_ShowHideAdvance:function ( status )
	{
		if ( status )
		{
			var orderpaymentmethodid = this.orderpaymentmethodid.get("value");

			dojo.removeClass(this.features_view_1,"prmaxhidden");
			dojo.removeClass(this.features_view_2,"prmaxhidden");
			dojo.removeClass(this.features_view_3,"prmaxhidden");

			dojo.removeClass(this.features_view_4,"prmaxhidden");
			dojo.removeClass(this.features_view_5,"prmaxhidden");
			dojo.removeClass(this.features_view_6,"prmaxhidden");
			this.advpricecoderenewalid.set("required",true);
			this.advpricecodeid.set("required",true);
		}
		else
		{
			dojo.addClass(this.features_view_1,"prmaxhidden");
			dojo.addClass(this.features_view_2,"prmaxhidden");
			dojo.addClass(this.features_view_3,"prmaxhidden");
			dojo.addClass(this.features_view_4,"prmaxhidden");
			dojo.addClass(this.features_view_5,"prmaxhidden");
			dojo.addClass(this.features_view_6,"prmaxhidden");
			this.advpricecoderenewalid.set("required",false);
			this.advpricecodeid.set("required",false);
		}
	},
	_Updatum:function()
	{
		this._ShowHideUpdatum ( this.updatum.get("checked"));
	},
	_ShowHideUpdatum:function ( status )
	{
		if ( status )
		{
			var orderpaymentmethodid = this.orderpaymentmethodid.get("value");

			dojo.removeClass(this.updatum_view_1,"prmaxhidden");
			dojo.removeClass(this.updatum_view_2,"prmaxhidden");
			dojo.removeClass(this.view_monitoring,"prmaxhidden");
			dojo.removeClass(this.updatum_view_4,"prmaxhidden");
			dojo.removeClass(this.updatum_view_5,"prmaxhidden");
			dojo.removeClass(this.updatum_view_6,"prmaxhidden");
			this.updatumpricecoderenewalid.set("required",true);
			this.updatumpricecodeid.set("required",true);
		}
		else
		{
			dojo.addClass(this.updatum_view_1,"prmaxhidden");
			dojo.addClass(this.updatum_view_2,"prmaxhidden");
			dojo.addClass(this.updatum_view_3,"prmaxhidden");
			dojo.addClass(this.updatum_view_4,"prmaxhidden");
			dojo.addClass(this.updatum_view_5,"prmaxhidden");
			dojo.addClass(this.updatum_view_6,"prmaxhidden");
			dojo.addClass(this.view_monitoring,"prmaxhidden");
			this.updatumpricecoderenewalid.set("required",false);
			this.updatumpricecodeid.set("required",false);
		}
	},

	_ChangePayment:function()
	{
		this._Show_Hide_DD ( this.advancefeatures.get("checked"),
				this.updatum.get("checked"),
				this.orderpaymentmethodid.get("value"),
				this.has_international_data.get("value"));

	},
_Show_Hide_DD:function( advancefeatures, updatum, has_international_data, orderpaymentmethodid)
	{
		switch ( parseInt(orderpaymentmethodid )) {
			case 4:
			case 5:
			case 6:
				dojo.addClass(this.view_dd_1,"prmaxhidden");
				dojo.addClass(this.view_dd_4,"prmaxhidden");
				if (!advancefeatures)
					dojo.addClass(this.features_view_2,"prmaxhidden");
				dojo.addClass(this.features_view_3,"prmaxhidden");
				if (!updatum)
					dojo.addClass(this.updatum_view_2,"prmaxhidden");
				if(!has_international_data)
					dojo.addClass(this.int_view_2,"prmaxhidden");
				dojo.addClass(this.updatum_view_3,"prmaxhidden");
				break;
			default:
				dojo.removeClass(this.view_dd_1,"prmaxhidden");
				dojo.removeClass(this.view_dd_2,"prmaxhidden");
				dojo.removeClass(this.view_dd_3,"prmaxhidden");
				dojo.removeClass(this.view_dd_4,"prmaxhidden");

				if ( advancefeatures)
				{
					dojo.removeClass(this.features_view_2,"prmaxhidden");
					dojo.removeClass(this.features_view_3,"prmaxhidden");
				}
				else
				{
					dojo.addClass(this.features_view_2,"prmaxhidden");
					dojo.addClass(this.features_view_3,"prmaxhidden");
				}
				if (updatum)
				{
					dojo.removeClass(this.updatum_view_2,"prmaxhidden");
					dojo.removeClass(this.updatum_view_3,"prmaxhidden");
				}
				else
				{
					dojo.addClass(this.updatum_view_2,"prmaxhidden");
					dojo.addClass(this.updatum_view_3,"prmaxhidden");
				}
				if (has_international_data)
				{
					dojo.removeClass(this.int_view_2,"prmaxhidden");
					dojo.removeClass(this.int_view_3,"prmaxhidden");
				}
				else
				{
					dojo.addClass(this.int_view_2,"prmaxhidden");
					dojo.addClass(this.int_view_3,"prmaxhidden");
				}
				break;
		}
	},
	_get_prices_call:function ( paid_months_field, response )
	{
		if ( response.success == "OK" )
		{
			this.cost.set("value" , dojo.number.format (response.cost.media/100.00, {places:2}));
			this.advcost.set("value" , dojo.number.format (response.cost.advance/100.00, {places:2}));
			this.updatumcost.set("value" , dojo.number.format (response.cost.updatum/100.00, {places:2}));
			this.internationalcost.set("value","0.00");
		}
	},
	_PriceChange1:function()
	{
		this._PriceChange ( this._get_prices_call_back_1 );
	},
	_PriceChange2:function()
	{
		this._PriceChange ( this._get_prices_call_back_2 );
	},
	_PriceChange3:function()
	{
		this._PriceChange ( this._get_prices_call_back_3 );
	},
	_PriceChange:function( call_back )
	{
		console.log ("_PriceChange", arguments);
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: call_back,
			url:'/iadmin/prices_get',
			content:this.form.get("value")}));
	},
	_ProductTypeSetting:function( customertypeid )
	{
		// this is one oof ours
		if ( customertypeid == 1 || customertypeid == 20)
		{
			this.emailtocustomer.set("checked", true ) ;
			this.emailtocustomer.set("disabled" , false ) ;
			this.confirmation_accepted.set("checked", true ) ;
			this.confirmation_accepted.set("disabled" , false ) ;
		}
		else
		{
			this.emailtocustomer.set("checked", false ) ;
			this.emailtocustomer.set("disabled" , true ) ;
			this.confirmation_accepted.set("checked", false ) ;
			this.confirmation_accepted.set("disabled" , true ) ;
		}
	}
});

}

if(!dojo._hasResource["ttl.DateTextBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["ttl.DateTextBox"] = true;
dojo.provide("ttl.DateTextBox");




dojo.declare(
	"ttl.DateTextBox",
	dijit.form.DateTextBox,
	{
		_getValueISOAttr:function()
		{
			var pData = this.textbox.value;
			if ( pData.length > 0 )
			{
				var tmp = pData.split("/");
				if ( tmp.length >=3 )
					return tmp[2] + "/" + tmp[1]  + "/" + tmp[0] ;
			}
			return "";
		}
	}
);

}

if(!dojo._hasResource["prmax.iadmin.accounts.ManualInvoice"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.ManualInvoice"] = true;
//-----------------------------------------------------------------------------
// Name:    ManualInvoice.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.ManualInvoice");







dojo.declare("prmax.iadmin.accounts.ManualInvoice",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form dojoAttachPoint=\"form\" method=\"post\" name=\"form\" enctype=\"multipart/form-data\" onSubmit=\"return false;\">\r\n\t\t<input type=\"hidden\"  dojoAttachPoint=\"icustomerid\" name=\"icustomerid\" dojoType=\"dijit.form.TextBox\" ></input>\r\n\t\t<input type=\"hidden\"  dojoAttachPoint=\"invoice_date2\" name=\"invoice_date\" dojoType=\"dijit.form.TextBox\" ></input>\r\n\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Manual Invoice</label><div style=\"display:inline\" class=\"prmaxrowdisplaylarge\" dojoAttachPoint=\"customername\">Name</div></td></tr>\r\n\t\t\t<tr><td style=\"width:150px\" class=\"prmaxrowlabel\" align=\"right\">Invoice Ref</td><td><input type=\"text\"  dojoAttachPoint=\"invoice_ref\" name = \"invoice_ref\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:8em\" required=\"true\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\">Invoice Date</td><td><input type=\"text\" dojoAttachPoint=\"invoice_date\" dojoType=\"ttl.DateTextBox\" style=\"width:8em\" required=\"true\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\"><label class=\"prmaxrowlabel\">Gross Amount</label></td><td><input type=\"text\" name=\"amount\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" constraints=\"{min:0.01,max:99999.00,fractional:true,places:'0,2'}\" dojoAttachPoint=\"amount\" style=\"width:8em\" dojoAttachEvent=\"onBlur:_Amounts\"></input></td></tr>\r\n\t\t\t<tr><td align=\"right\"><label class=\"prmaxrowlabel\">Vat</label></td><td><input type=\"text\" name=\"vat\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\" dojoAttachPoint=\"vat\" style=\"width:8em\"></input></td></tr>\r\n\t\t\t<tr><td align=\"right\"><label class=\"prmaxrowlabel\" >Unpaid Amount</label></td><td><input type=\"text\" name=\"unpaidamount\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" dojoAttachPoint=\"unpaidamount\" style=\"width:8em\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\"></input></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowlabel\">Invoice File (pdf)</td><td><input class=\"prmaxinput\" type=\"file\" dojoAttachPoint=\"invoice_file\" name=\"invoice_file\" size=\"50\"></input></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" colspan=\"2\" align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_Send\">Enter Manual Invoice</button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._AddCallBack = dojo.hitch ( this , this._AddCall );
	},
	_AddCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Invoice Added");
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
			this._dialog.hide();
		}
		else
		{
			alert("Problem Adding Invoice");
		}
	},
	_Send:function()
	{
		if ( this.invoice_ref.isValid() == false ||
				this.invoice_date.isValid() == false ||
			this.amount.isValid() == false ||
			this.vat.isValid() == false ||
			this.unpaidamount.isValid() == false)
		{
			return false ;
		}

		var filename = dojo.attr(this.invoice_file,"value").toLowerCase ();
		if ( filename.indexOf(".pdf") == -1)
		{
			alert("This must be a pdf file");
			return false ;
		}

		this.invoice_date2.set("value", this.invoice_date.get("ValueISO"));

		dojo.io.iframe.send(
		{
			url: "/iadmin/add_manual_invoice",
			handleAs:"json",
				load: this._AddCallBack,
				form : this.form
		});
	},
	setCustomer:function( customerid , customername , dialog )
	{
		this.icustomerid.set("value",customerid);
		this.invoice_date.set("value",new Date());
		this.invoice_ref.set("value","");
		this.amount.set("value",0.0);
		this.unpaidamount.set("value",0.0);
		this.vat.set("value",0.0);
		dojo.attr(this.invoice_file, "value","");

		dojo.attr ( this.customername , "innerHTML" , customername ) ;
		this._dialog = dialog;
	},
	_Amounts:function()
	{
		var amount = this.amount.get("value");

		var vat = amount - (amount / ( 1.00 + (20.00/ 100.00 )));

		this.unpaidamount.set("value",amount);
		this.vat.set("value",dojo.number.format (vat, {places:2}))
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.ReAllocation"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.ReAllocation"] = true;
//-----------------------------------------------------------------------------
// Name:    Credit.js
// Author:  Chris Hoy
// Purpose:
// Created: 04/04/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.ReAllocation");





dojo.declare("prmax.iadmin.accounts.ReAllocation",
	[ ttl.BaseWidget, prmax.iadmin.accounts.Allocation ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"dialog\" data-dojo-props='title:\"Allocate\"'>\r\n\t\t<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t<input type=\"hidden\" dojoType=\"dijit.form.TextBox\" dojoAttachPoint=\"keyid\" name=\"keyid\" >\r\n\t\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t\t<tr><td colspan=\"2\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\"></div><div class=\"prmaxrowdisplaylarge\" style=\"display:inline\" dojoAttachPoint=\"customername\"></div></td></tr>\r\n\t\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Value</td><td>\r\n\t\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" ><tr>\r\n\t\t\t\t\t\t<td><input class=\"prmaxinput\" type=\"text\" readonly=\"readonly\" dojoType=\"dijit.form.CurrencyTextBox\" dojoAttachPoint=\"payment\" style=\"width:8em\"></input></td>\r\n\t\t\t\t\t\t<td class=\"prmaxrowlabel\">Amount to Allocte</td>\r\n\t\t\t\t\t\t<td class=\"prmaxrowlabel\"><input type=\"text\" dojoType=\"dijit.form.TextBox\" dojoAttachPoint=\"toallocate\" style=\"width:8em\" readonly=\"readonly\" ></input></td>\r\n\t\t\t\t\t</tr></table>\r\n\t\t\t\t</td></tr>\r\n\t\t\t\t<tr><td colspan=\"2\">\r\n\t\t\t\t\t<div dojoAttachPoint=\"alloc_grid\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"500\" style=\"width:590px;height:300px\"></div>\r\n\t\t\t\t</td></tr>\r\n\t\t\t\t<tr><td class=\"prmaxrowlabel\" colspan=\"2\" align=\"right\"><button dojoType=\"dojox.form.BusyButton\" labelBusy=\"Re-Allocation\" dojoAttachPoint=\"allocate\" type=\"button\" dojoAttachEvent=\"onClick:_ReAllocate\">Allocate</button></td></tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"alloc_manual\" dojoType=\"prmax.iadmin.accounts.ManualAllocateAmount\"></div>\r\n</div>\r\n",
	constructor: function()
	{
		this._LoadCallBack = dojo.hitch ( this, this._LoadCall );
		this._ReAllocateCallBack = dojo.hitch ( this, this._ReAllocateCall );
		this._source = "";
	},
	Load:function( customerid, keyid )
	{
		this._customerid = customerid;
		this.alloc_grid.resize( {w:590, h:300});

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._LoadCallBack),
			url:'/iadmin/allocation_get_details',
			content:{keyid:keyid}}));
		this.keyid.set("value",keyid);
	},
	_LoadCall:function ( response )
	{
		if ( response.success == "OK")
		{
			this._source = response.data.source;
			this.alloc_grid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(), {
				icustomerid:this._customerid,
				source:response.data.source	}));

			this.payment.set("value",response.data.unallocated);
			this.toallocate.set("value",response.data.unallocated);
			this.allocate.cancel();

			this.dialog.show();
		}
	},
	_onBlurAmount:function()
	{
		this._doallocation();
	},
	postCreate:function()
	{
		this._postCreate();
		this.inherited(arguments);
	},
	_ReAllocateCall:function ( response )
	{
		if ( response.success == "OK")
		{
			alert("Re Allocated Done");
			this.dialog.hide();
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
		}
		else
		{
			alert("Problem with allocations");
		}
		this.allocate.cancel();
	},
	_ReAllocate:function()
	{
		if ( this.toallocate.get("value") > this.payment.get("value"))
		{
			alert("Over Allocation");
			this.allocate.cancel();
			return ;
		}
		var content = this.form.get("value");

		content["icustomerid"] = this._customerid;
		content["unpaidamount"] = this.toallocate.get("value");
		content['allocations'] = this.getAllocations();

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._ReAllocateCallBack),
			url:'/iadmin/allocation_reallocate',
			content:content}));
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.FinancialView"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.FinancialView"] = true;
//-----------------------------------------------------------------------------
// Name:    FinancialView.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.accounts.FinancialView");




dojo.declare("prmax.iadmin.accounts.FinancialView",
	[ttl.BaseWidget],{
		templateString:"<div>\r\n\t<div  dojoAttachPoint=\"borderControl\" dojotype=\"dijit.layout.BorderContainer\" gutters=\"false\"  style=\"width:100%;height:100%;overflow: hidden; border: 0; padding: 0; margin: 0\" >\r\n\t\t<div dojotype=\"dijit.layout.ContentPane\" region=\"top\" style=\"width:100%;height:45px;\">\r\n\t\t\t<div style=\"height:44px;width:100%;overflow:hidden;padding:0px;margin:0px\">\r\n\t\t\t\t<div style=\"float:left\" >\r\n\t\t\t\t<p class=\"prmaxrowdisplaylarge\" >Balance £&nbsp;<span dojoAttachPoint=\"balance_figure\">0.00</span></p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"float:right;padding-top:0px;padding-right:10px;margin:5px\" >\r\n\t\t\t\t\t<input class=\"prmaxbutton\" type=\"text\"  dojoAttachPoint=\"filterdate\" name = \"filterdate\" dojoType=\"dijit.form.DateTextBox\" >\r\n\t\t\t\t\t<label class=\"prmaxrowdisplay\">Unallocated</label><input class=\"prmaxbutton\" type=\"checkbox\" dojoAttachPoint=\"unallocated\" name = \"unallocated\" dojoType=\"dijit.form.CheckBox\" >\r\n\t\t\t\t\t<label class=\"prmaxrowdisplay\">Money Only</label><input class=\"prmaxbutton\" type=\"checkbox\" dojoAttachPoint=\"moneyonly\" name = \"moneyonly\" checked=\"checked\" dojoType=\"dijit.form.CheckBox\" >\r\n\t\t\t\t\t<button type=\"button\" dojoAttachEvent=\"onClick:_FilterBy\" dojoType=\"dijit.form.Button\" label=\"Filter By\" ></button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div  dojoType=\"dijit.layout.ContentPane\" region=\"center\"  splitter=\"true\" >\r\n\t\t\t<div dojoAttachPoint=\"financialgrid\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"50\" style=\"width:100%;height:100%\" ></div>\r\n\t\t</div>\r\n\t\t<div  dojoType=\"dijit.layout.ContentPane\" region=\"bottom\"  splitter=\"true\" style=\"width:100%;height:20%\">\r\n\t\t\t<div dojoType=\"dijit.layout.StackContainer\" dojoAttachPoint=\"zone\" region=\"center\"  doLayout=\"true\" style=\"border:1px solid black\">\r\n\t\t\t\t<div dojotype=\"dijit.layout.ContentPane\" title=\"blank\" dojoAttachPoint=\"blank_view\" selected></div>\r\n\t\t\t\t<div dojotype=\"dijit.layout.BorderContainer\" style=\"width:100%;height:100%\" title=\"allocations\" gutters=\"false\" dojoAttachPoint=\"allocations_view\">\r\n\t\t\t\t\t<div dojoAttachPoint=\"allocations_grid\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"50\" region=\"center\"></div>\r\n\t\t\t\t\t<div dojotype=\"dijit.layout.ContentPane\" region=\"right\" style=\"width:50%;height:100%\">\r\n\t\t\t\t\t\t<button class=\"prmaxbutton\"  type=\"button\" dojoType=\"dijit.form.Button\" label=\"Re-Allocate\" dojoAttachEvent=\"onClick:_ReAllocate\" dojoAttachPoint=\"reallocate\" ></button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n<form dojoAttachPoint=\"documentform\" target=\"_blank\" method=\"post\" action=\"/iadmin/viewpdf\">\r\n\t<input type=\"hidden\" name=\"audittrailid\" dojoAttachPoint=\"documentform_audittrailid\">\r\n</form>\r\n<form data-dojo-attach-point=\"htmlform\" target=\"_blank\" method=\"post\" action=\"/iadmin/viewhtml\">\r\n\t<input type=\"hidden\" name=\"audittrailid\" data-dojo-attach-point=\"htmlform_audittrailid\">\r\n</form>\r\n\r\n<div data-dojo-type=\"prmax.iadmin.accounts.ReAllocation\" data-dojo-attach-point=\"reallocation\"></div>\r\n</div>\r\n",
	constructor: function()
	{
		this.financial_data = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/customer_financial',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});

		this.allocation_data  = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/allocation_details',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});

		this._DeleteAlocationCallBack = dojo.hitch( this, this._DeleteAlocationCall);
		this._LoadBalanceCallBack = dojo.hitch(this, this._LoadBalanceCall);
		dojo.subscribe(PRCOMMON.Events.Financial_ReLoad, dojo.hitch(this,this._RefreshView));

	},
	postCreate:function()
	{
		this.inherited(arguments);


		var td = new Date();
		var t = new Date(td.getTime() - 370*24*60*60*1000);
		this.filterdate.set("value", t );

		this.financialgrid.set("structure",this.view);
		this.allocations_grid.set("structure", this.view2);

		this.financialgrid._setStore(this.financial_data );
		this.allocations_grid._setStore ( this.allocation_data );

		this.financialgrid['onRowClick'] = dojo.hitch(this,this._OnSelectFinancial);
		this.allocations_grid['onRowClick'] = dojo.hitch(this,this._OnSelectAllocation);
	},
	Load:function(customerid)
	{
		this._customerid = customerid;

		var command = {icustomerid:this._customerid,
				 unallocated: this.unallocated.get("checked"),
				 moneyonly: this.moneyonly.get("checked")};

		this.financialgrid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(), command));
		this._GetBalance();
	},
	resize:function()
	{
		this.inherited(arguments);
		this.borderControl.resize(arguments[0]);
	},
	view :{noscroll: false,
			cells: [[
			{name: 'Logged',width: "5em",field:'auditdate'},
			{name: 'Date',width: "5em",field:'invoice_date' },
			{name: 'Text',width: "20em",field:'audittext'},
			{name: 'Charge',width: "4em",field:'charge', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money },
			{name: 'Paid',width: "4em",field:'paid', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money },
			{name: 'Un All.',width: "4em",field:'unallocated', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money },
			{name: 'Inv/Cd Nbr',width: "4em",field:'invoicenbr',styles: 'text-align: right;padding-right:2px;' },
			{name: 'Month',width: "5em",field:'payment_month_display',styles: 'text-align: right;padding-right:2px;' },
			{name: ' ',width: "2em",field:'documentpresent',formatter:ttl.utilities.documentExists},
			{name: 'Reason',width: "auto",field:'reason' }
		]]
	},
	view2 :{noscroll: false,
			cells: [[
			{name: 'Type',width: "12em",field:'type'},
			{name: 'Allocated',width: "5em",field:'amount', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money },
			{name: 'Value',width: "5em",field:'amount', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money },
			{name: 'Inv Id',width: "4em",field:'invoicenbr',styles: 'text-align: right;padding-right:2px;' },
			{name: 'Date',width: "5em",field:'invoicedate' },
			{name: ' ',width: "2em",formatter: ttl.utilities.deleteRowCtrl }
		]]
	},
	_OnSelectFinancial:function ( e )
	{
		this._row = this.financialgrid.getItem(e.rowIndex);

		// open invoice
		if ( e.cellIndex  == 8 && this._row.i.documentpresent == true )
		{
			if ( this._row.i.audittypeid == 17 )
			{
				dojo.attr(this.htmlform_audittrailid,"value", this._row.i.audittrailid);
				dojo.attr(this.htmlform, "action", "/iadmin/viewhtml/" + this._row.i.audittrailid);
				this.htmlform.submit();
			}
			else
			{
				dojo.attr(this.documentform_audittrailid,"value", this._row.i.audittrailid);
				dojo.attr(this.documentform, "action", "/iadmin/viewpdf/" + this._row.i.audittrailid);
				this.documentform.submit();
			}
		}
		else
		{
			this.allocations_grid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),{keyid:this._row.i.keyid}));
			this.zone.selectChild ( ( this._row.i.keyid == null) ? this.blank_view : this.allocations_view ) ;
			if (this._row.i.keyid == null )
				dojo.addClass(this.reallocate,"prmaxhidden");
			else
				dojo.removeClass(this.reallocate,"prmaxhidden");
		}
		this.financialgrid.selection.clickSelectEvent(e);
	},
	_DeleteAlocationCall:function( response )
	{
		if ( response.success == "OK" )
		{
			this.allocation_data.deleteItem ( this._alloc_row ) ;
			this.financialgrid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),{icustomerid:this._customerid}));
			alert("Allocation Deleted");
		}
		else
		{
			alert("Problem Deleting Allocation");
		}
	},
	_OnSelectAllocation:function ( e )
	{
		this._alloc_row = this.allocations_grid.getItem(e.rowIndex);
		if ( e.cellIndex  == 5 )
		{
			if ( confirm ("Delete Allocation"))
			{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._DeleteAlocationCallBack),
				url:'/iadmin/allocation_delete',
				content:{customerpaymentallocationid:this._alloc_row.i.customerpaymentallocationid}}));
			}
		}
	},
	_ReAllocate:function()
	{
		this.reallocation.Load ( this._customerid , this._row.i.keyid ) ;
	},
	_RefreshView:function()
	{
		var command = {icustomerid:this._customerid,
				 filter_date: ttl.utilities.toJsonDate( this.filterdate.get("value")),
				 unallocated: this.unallocated.get("value"),
				 moneyonly: this.moneyonly.get("value")
				};
		this.financialgrid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),command));

		if ( this._row != null && this._row.i.keyid != null )
			this.allocations_grid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),{keyid:this._row.i.keyid}));
		this._GetBalance();
	},
	_FilterBy:function()
	{
		var command = {icustomerid:this._customerid,
				 filter_date: ttl.utilities.toJsonDate( this.filterdate.get("value")),
				 unallocated: this.unallocated.get("value"),
				 moneyonly: this.moneyonly.get("value")
				};
		this.financialgrid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),command));
		dojo.addClass(this.reallocate,"prmaxhidden");
		this._GetBalance();
	},
	_GetBalance:function()
	{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._LoadBalanceCallBack,
				url:'/iadmin/customer_balance',
				content:{'icustomerid':this._customerid}
				}));
	},
	_LoadBalanceCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			dojo.attr(this.balance_figure, "innerHTML", dojo.number.format ( response.balances.balance/100.00,{places:2}));
		}
		else
		{
			dojo.attr(this.balance_figure, "innerHTML", "ERROR");
		}
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.Adjustments"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.Adjustments"] = true;
//-----------------------------------------------------------------------------
// Name:    Adjustments.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.Adjustments");




dojo.declare("prmax.iadmin.accounts.Adjustments",
	[  ttl.BaseWidget,prmax.iadmin.accounts.Allocation ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Adjustment for </div><div class=\"prmaxrowdisplaylarge\" style=\"display:inline\" data-dojo-attach-point=\"customername\"></div></td>\r\n\t\t\t<tr><td width=\"150px\"  align=\"right\" class=\"prmaxrowlabel\">Adjustment Type</td><td><select\r\n\t\t\t\t\tdata-dojo-props='name:\"adjustmenttypeid\",autoComplete:\"true\",labelType:\"html\"'\r\n\t\t\t\t\tdata-dojo-type=\"dijit.form.FilteringSelect\"\r\n\t\t\t\t\tdata-dojo-attach-point=\"adjustmenttypeid\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Value</td><td>\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" ><tr>\r\n\t\t\t\t\t<td><input\r\n\t\t\t\t\t\t\t\tdata-dojo-props='\"class\":\"prmaxinput\",type:\"text\",name:\"value\",required:\"true\",trim:\"true\",style:\"width:8em\",constraints:{fractional:true,places:\"0,2\",min:0.01,max:99999.00}'\r\n\t\t\t\t\t\t\t\tdata-dojo-type=\"dijit.form.CurrencyTextBox\"\r\n\t\t\t\t\t\t\t\tdata-dojo-attach-point=\"payment\"\r\n\t\t\t\t\t\t\t\tdata-dojo-attach-event=\"onBlur:_onBlurAmount\"></input></td>\r\n\t\t\t\t\t<td class=\"prmaxrowlabel\">Amount Remaining</td>\r\n\t\t\t\t\t<td class=\"prmaxrowlabel\"><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"toallocate\" data-dojo-props='type:\"text\",style:\"width:8em\",readonly:\"readonly\"' ></input></td>\r\n\t\t\t\t</tr></table>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Adjustment Date</td><td><input data-dojo-props='type:\"text\",name:\"adjustmentdate\",required:\"true\"' data-dojo-attach-point=\"adjustmentdate\" data-dojo-type=\"dijit.form.DateTextBox\" ></td>\r\n\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" valign=\"top\">Message</td><td><div class=\"dialogprofileframe\" ><textarea data-dojo-attach-point=\"message\" data-dojo-props='name:\"message\",\"class\":\"dijitTextarea\",style:\"width:99%;height:99%\"' data-dojo-type=\"dijit.form.Textarea\" ></textarea></div></td></tr>\r\n\t\t\t<tr data-dojo-attach-point=\"alloc_view\"><td colspan=\"2\">\r\n\t\t\t\t<div data-dojo-attach-point=\"alloc_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='rowsPerPage:\"500\",style:\"width:590px;height:200px\"'></div>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" colspan=\"2\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='busyLabel:\"Adding Adjustments ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_Adjustment\">Adjust Account</button></td>\r\n\t\t</table>\r\n\t</form>\r\n\t<div data-dojo-attach-point=\"alloc_manual\" data-dojo-type=\"prmax.iadmin.accounts.ManualAllocateAmount\"></div>\r\n</div>\r\n",
	constructor: function()
	{
		this._AdjustmentCallBack = dojo.hitch(this,this._AdjustmentCall);
		this.adjustmenttypes = new dojo.data.ItemFileReadStore ( {url:'/common/lookups?searchtype=adjustmenttypes',onError:ttl.utilities.globalerrorchecker, clearOnClose:true, urlPreventCache:true });
	},
	setCustomer:function( customerid , customername , dialog)
	{
		this._customerid = customerid;
		this._customername = customername;

		dojo.attr ( this.customername , "innerHTML" , this._customername ) ;
		this._dialog = dialog;
		this.alloc_grid.resize( {w:590, h:300});
		this.alloc_grid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),
				{ icustomerid:customerid,
					source: "adjustments"
				}));

		this.addbtn.cancel();
	},
	_AdjustmentCall:function( response )
	{
		if ( response.success == "OK" )
		{
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
			alert("Adjustment Added");
			this._dialog.hide();
			this.Clear();
		}
		else
		{
			alert("Problem making Adjustment");
		}

		this.addbtn.cancel();

	},
	_Adjustment:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		if ( this.toallocate.get("value") > Math.abs(this.payment.get("value")))
		{
			alert("Over Allocation");
			this.addbtn.cancel();
			return ;
		}

		var content = this.form.get("value");

		content["icustomerid"] = this._customerid;
		content['allocations'] = this.getAllocations();
		content["adjustmentdate"] = ttl.utilities.toJsonDate ( this.adjustmentdate.get("value") ) ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._AdjustmentCallBack,
			url:'/iadmin/adjust_account',
			content:content}));
	},
	Clear:function()
	{
		this.payment.set("value","");
		this.message.set("value","");
	},
	postCreate:function()
	{
		this.adjustmentdate.set("value",new Date());
		this.adjustmenttypeid.store = this.adjustmenttypes;
		this.adjustmenttypeid.set("value",1);
		this._postCreate();

		this.inherited(arguments);
	},
	_onBlurAmount:function()
	{
		this._doallocation();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.Credit"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.Credit"] = true;
//-----------------------------------------------------------------------------
// Name:    Credit.js
// Author:  Chris Hoy
// Purpose:
// Created: 04/04/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.Credit");






dojo.declare("prmax.iadmin.accounts.Credit",
	[ ttl.BaseWidget, prmax.iadmin.accounts.Allocation ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\"  data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<table width=\"580px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"4\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Credit for </div><div class=\"prmaxrowdisplaylarge\" style=\"display:inline\" data-dojo-attach-point=\"customername\"></div></td></tr>\r\n\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\">Cost</td>\r\n\t\t\t\t\t<td class=\"prmaxrowlabel\"><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-attach-point=\"cost\" data-dojo-props='\"class\":\"prmaxinput\",type:\"text\",name:\"cost\",required:true,trim:true,style:\"width:8em\",constraints:{min:0.01,max:99999.00,fractional:true,places:\"0,2\"}' data-dojo-attach-event=\"onBlur:_on_amount\" ></input></td>\r\n\t\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\">Amount Remaining</td>\r\n\t\t\t\t\t<td class=\"prmaxrowlabel\"><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"toallocate\" data-dojo-props='type:\"text\",style:\"width:8em\",readOnly:true' ></input></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td align=\"right\" class=\"prmaxrowlabel\">Vat</td>\r\n\t\t\t\t<td><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-props='type:\"text\",name:\"vat\",required:true,constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:8em\"' data-dojo-attach-point=\"vat\" data-dojo-attach-event=\"onBlur:_on_vat_amount\"></input></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\" >Gross</td>\r\n\t\t\t\t\t<td><input data-dojo-attach-point=\"payment\" data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-props='\"class\":\"prmaxinput\",type:\"text\",name:\"gross\",style:\"width:8em\",constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},readOnly:true'></input></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" valign=\"top\">Message</td><td colspan=\"3\"><div class=\"dialogprofileframe\" ><textarea data-dojo-attach-point=\"message\" data-dojo-props='name:\"message\",\"class\":\"dijitTextarea\",style:\"width:99%;height:99%\"' data-dojo-type=\"dijit.form.Textarea\" ></textarea></div></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Credit Date</td><td><input data-dojo-props='type:\"text\",name:\"payment_date\",required:\"true\"' data-dojo-attach-point=\"payment_date\" data-dojo-type=\"dijit.form.DateTextBox\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\">Send Email</td><td><input data-dojo-attach-point=\"emailtocustomer\" data-dojo-props='\"class\":\"prmaxinput\",name:\"emailtocustomer\",type:\"checkbox\",checked:\"checked\"' data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-event=\"onClick:_email_required\"/><input data-dojo-attach-point=\"email\" data-dojo-props='required:true,\"class\":\"prmaxinput\",name:\"email\",type:\"text\",style:\"width:20em\",trim:\"true\",regExpGen:dojox.validate.regexp.emailAddress,invalidMessage:\"invalid email address\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t<tr><td colspan=\"4\">\r\n\t\t\t\t<div data-dojo-attach-point=\"alloc_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='rowsPerPage:\"500\",style:\"width:690px;height:300px\"'></div>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" colspan=\"4\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='labelBusy:\"Crediting Account\",type:\"button\"' data-dojo-attach-event=\"onClick:_create\">Credit Account</button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n\t<div data-dojo-attach-point=\"alloc_manual\" data-dojo-type=\"prmax.iadmin.accounts.ManualAllocateAmount\"></div>\r\n</div>\r\n",
	constructor: function()
	{
		this._credit_call_back = dojo.hitch(this,this._credit_call);
	},
	setCustomer:function( cust , dialog)
	{
		this._customerid = cust.customerid;
		this._customername = cust.customername;

		this.email.set("value",cust.invoiceemail? cust.invoiceemail:cust.email);
		dojo.attr ( this.customername , "innerHTML" , this._customername ) ;
		this._dialog = dialog;

		this.alloc_grid.resize( {w:590, h:300} );
		this.alloc_grid.setQuery(dojo.mixin(ttl.utilities.getPreventCache({ icustomerid:cust.customerid,
			source:"payment"})));
		this.addbtn.cancel();
	},
	_credit_call:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Credit Added");
			this.Clear();
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
			this._dialog.hide();
		}
		else
		{
			alert("Problem adding credit");
		}
		this.addbtn.cancel();
	},
	_create:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		if ( this.toallocate.get("value") > this.payment.get("value"))
		{
			alert("Over Allocation");
			this.addbtn.cancel();
			return ;
		}

		var content = this.form.get("value");

		content["icustomerid"] = this._customerid;
		content["payment_date"] = ttl.utilities.toJsonDate ( this.payment_date.get("value") ) ;
		content["unpaidamount"] = this.toallocate.get("value");
		content['allocations'] = this.getAllocations();

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._credit_call_back,
			url:'/iadmin/credit_take',
			content:content}));
	},
	_on_amount:function()
	{

		var cost = this.cost.get("value");
		var vat = cost *.2;

		this.vat.set("value",dojo.number.format (vat, {places:2}));
		this.payment.set("value",dojo.number.format (cost + vat, {places:2}));

		this._doallocation();
	},
	Clear:function()
	{
		this.payment.set("value","0");
		this.vat.set("value",0);
		this.cost.set("value","0");

		this.message.set("value","");

		this.addbtn.cancel();
	},
	postCreate:function()
	{
		this._postCreate();
		this.inherited(arguments);
	},
	_email_required:function()
	{
		this.email.set("required",this.emailtocustomer.get("checked"));
	},
	_on_vat_amount:function()
	{
		var cost = this.cost.get("value");
		var vat = this.vat.get("value");

		this.payment.set("value",dojo.number.format (cost + vat, {places:2}));

		this._doallocation();

	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.PrePayInvoice"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.PrePayInvoice"] = true;
//-----------------------------------------------------------------------------
// Name:    PrePayInvoice.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------


dojo.provide("prmax.iadmin.accounts.PrePayInvoice");


dojo.declare("prmax.iadmin.accounts.PrePayInvoice",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\"  data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-attach-point=\"icustomerid\" data-dojo-props='type:\"hidden\",name:\"icustomerid\"' data-dojo-type=\"dijit.form.TextBox\" ></input>\r\n\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\">\r\n\t\t\t\t<label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Enter Invoice</label>\r\n\t\t\t\t<div style=\"display:inline\" class=\"prmaxrowdisplaylarge\" data-dojo-attach-point=\"customername\">Name</div>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td width=\"28%\" class=\"prmaxrowtag\" align=\"right\" width=\"120px\">Invoice Date</td><td><input data-dojo-attach-point=\"invoice_date\" data-dojo-type=\"ttl.DateTextBox\" data-dojo-props='type:\"text\",style:\"width:8em\",required:true'></td></tr>\r\n\t\t\t<tr><td valign=\"top\" align=\"right\" ><label class=\"prmaxrowtag\">Message</label></td><td><div class=\"stdframe\" ><textarea data-dojo-attach-point=\"message\" data-dojo-type=\"dijit.form.Textarea\" data-dojo-props='name:\"message\",\"class\":\"dijitTextarea\",style:\"width:99%;height:99%\"' ></textarea></div></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" width=\"150px\" align=\"right\" >Concurrent Licence</td><td ><input data-dojo-attach-point=\"logins\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='type:\"text\",name:\"logins\",value:\"1\",style:\"width:8em\",required:true,constraints:{min:1,max:50}' ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Payment Freq</td><td><select data-dojo-props='\"class\":\"prmaxinput\",autoComplete:true,name:\"paymentfreqid\",style:\"width:15em\"' data-dojo-attach-point=\"paymentfreqid\" data-dojo-type=\"dijit.form.FilteringSelect\"><options><option value=\"1\">Fixed Term</option><option value=\"2\">Monthly</option></options></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Is Direct Debit</td><td><input data-dojo-attach-point=\"isdd\" data-dojo-props='\"class\":\"prmaxinput\",name:\"isdd\",type:\"checkbox\"' data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-event=\"onClick:_ChangePayment\"/></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Purchase Order</td><td><input data-dojo-attach-point=\"purchase_order\" data-dojo-props='\"class\":\"prmaxinput\",name:\"purchase_order\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t</td></tr>\r\n\t\t<tr><td colspan=\"2\"><table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\" border=\"0\">\r\n\t\t<tr><td width=\"28%\">&nbsp;</td><td width=\"12%\">Start Date</td><td width=\"12%\" data-dojo-attach-point=\"view_dd_1\">Free Mths</td><td width=\"12%\" data-dojo-attach-point=\"view_dd_2\">Paid Mths</td><td width=\"12%\">Price ex VAT</td></tr>\r\n\t\t<tr><td class=\"prmaxrowtag\"  align=\"right\" >Media DB</td>\r\n\t\t\t<td><input data-dojo-type=\"dijit.form.DateTextBox\" data-dojo-attach-point=\"licence_start_date\" data-dojo-props='type:\"text\",name:\"licence_start_date\",required:true,style:\"width:8em\"'></td>\r\n\t\t\t<td data-dojo-attach-point=\"view_dd_3\"><input data-dojo-attach-point=\"months_free\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='type:\"text\",name:\"months_free\",value:\"0\",required:true,constraints:{min:0,max:6},style:\"width:6em\"'></td>\r\n\t\t\t<td data-dojo-attach-point=\"view_dd_4\"><input data-dojo-attach-point=\"months_paid\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='name:\"months_paid\",type:\"text\",value:\"12\",required:true,constraints:{min:1,max:36},style:\"width:6em\"'></td>\r\n\t\t\t<td><input data-dojo-props='type:\"text\",name:\"cost\",required:true,trim:true,constraints:{min:0.01,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:6em\"' data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-attach-point=\"cost\"></input></td>\r\n\t\t</tr>\r\n\t\t<tr data-dojo-attach-point=\"features_view\" class=\"prmaxhidden\" ><td class=\"prmaxrowtag\"  align=\"right\" >Features</td>\r\n\t\t\t<td data-dojo-attach-point=\"features_view_1\" class=\"prmaxhidden\"><input data-dojo-attach-point=\"advance_licence_start\" data-dojo-type=\"dijit.form.DateTextBox\" data-dojo-props='type:\"text\",name:\"advance_licence_start\",style:\"width:8em\"'></td>\r\n\t\t\t<td data-dojo-attach-point=\"features_view_2\" class=\"prmaxhidden\"><input data-dojo-attach-point=\"adv_months_free\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='name:\"adv_months_free\",type:\"text\",value:\"0\",constraints:{min:0,max:36},style:\"width:6em\"'></td>\r\n\t\t\t<td data-dojo-attach-point=\"features_view_3\" class=\"prmaxhidden\"><input data-dojo-attach-point=\"adv_months_paid\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='type:\"text\",name:\"adv_months_paid\",value:\"12\",constraints:{min:0,max:36},style:\"width:6em\"'></td>\r\n\t\t\t<td data-dojo-attach-point=\"features_view_5\" class=\"prmaxhidden\"><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-attach-point=\"advcost\" data-dojo-props='trim:true,type:\"text\",name:\"advcost\",constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:6em\",required:true'></input></td>\r\n\t\t</tr>\r\n\t\t<tr data-dojo-attach-point=\"updatum_view\" class=\"prmaxhidden\" ><td class=\"prmaxrowtag\"  align=\"right\" >Monitoring</td>\r\n\t\t\t<td data-dojo-attach-point=\"updatum_view_1\" class=\"prmaxhidden\"><input data-dojo-attach-point=\"updatum_start_date\" data-dojo-type=\"dijit.form.DateTextBox\" data-dojo-props='type:\"text\",name:\"updatum_start_date\",style:\"width:8em\"'></td>\r\n\t\t\t<td data-dojo-attach-point=\"updatum_view_2\" class=\"prmaxhidden\"><input data-dojo-attach-point=\"updatum_months_free\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='type:\"text\",name:\"updatum_months_free\",value:\"0\",constraints:{min:0,max:36},style:\"width:6em\"'></td>\r\n\t\t\t<td data-dojo-attach-point=\"updatum_view_3\" class=\"prmaxhidden\"><input data-dojo-attach-point=\"updatum_months_paid\" data-dojo-type=\"dijit.form.NumberTextBox\" data-dojo-props='type:\"text\",name:\"updatum_months_paid\",value:\"12\",constraints:{min:1,max:36},style:\"width:6em\"'></td>\r\n\t\t\t<td data-dojo-attach-point=\"updatum_view_5\" class=\"prmaxhidden\"><input data-dojo-attach-point=\"updatumcost\" data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-props='name:\"updatumcost\",type:\"text\",trim:true,constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:6em\",required:true'></input></td>\r\n\t\t</tr>\r\n\t\t</table></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Email Address</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"email\" data-dojo-props='\"class\":\"prmaxinput\",name:\"email\",type:\"text\",style:\"width:100%\",trim:true,required:true,regExpGen:dojox.validate.regexp.emailAddress,trim:true,invalidMessage:\"invalid email address\",size:\"40\",maxlength:\"70\"'/></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" colspan=\"2\" align=\"right\">\r\n\t\t\t<button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"btn\" data-dojo-props='busyLabel:\"Sending ... \",type:\"button\"' data-dojo-attach-event=\"onClick:_Send\">Send Invoice</button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._SendInvoiceCallBack = dojo.hitch ( this , this._SendInvoiceCall );
		this._advancefeatures = false;
		this._updatum = false;
	},
	_SendInvoiceCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Invoice Sent");
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
			this._dialog.hide();
		}
		else
		{
			alert("Problem Sending Invoice");
		}
		this.btn.cancel();
	},
	_Send:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.btn.cancel();
			return false;
		}

		var content = this.form.get("value");

		content["licence_start_date"] = ttl.utilities.toJsonDate ( this.licence_start_date.get("value"));
		content["advance_licence_start"] = ttl.utilities.toJsonDate ( this.advance_licence_start.get("value"));
		content["invoice_date"] = ttl.utilities.toJsonDate ( this.invoice_date.get("value"));
		content["updatum_start_date"] = ttl.utilities.toJsonDate ( this.updatum_start_date.get("value"));

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._SendInvoiceCallBack),
			url:'/iadmin/invoice_send',
			content:content}));

	},
	setCustomer:function( cust , dialog )
	{
		this._advancefeatures = cust.advancefeatures;
		this._updatum = cust.updatum;

		this.paymentfreqid.set("value", 1);
		this.isdd.set("value", false);

		dojo.attr ( this.customername , "innerHTML" , cust.customername ) ;

		this.email.set("value",cust.invoiceemail? cust.invoiceemail:cust.email)
		this.licence_start_date.set("value", ttl.utilities.fromObjectDate ( cust.licence_start_date_d));
		this.purchase_order.set("value",cust.purchase_order);
		this._ShowHideAdvance ( this._advancefeatures );
		this._ShowHideUpdatum ( this._updatum);
		this.logins.set("value", cust.logins);

		this.licence_start_date.set("value" , ttl.utilities.fromObjectDate ( cust.licence_start_date_d ));
		this.advance_licence_start.set("value", ttl.utilities.fromObjectDate ( cust.advance_licence_start_d ));
		this.updatum_start_date.set("value", ttl.utilities.fromObjectDate ( cust.updatum_start_date_d ));

		this.months_free.set("value", cust.months_free);
		this.months_paid.set("value", cust.months_paid);
		this.adv_months_free.set("value", cust.adv_months_free);
		this.adv_months_paid.set("value", cust.adv_months_paid);
		this.updatum_months_free.set("value", cust.updatum_months_free);
		this.updatum_months_paid.set("value", cust.updatum_months_paid);

		this._dialog = dialog;
		this.message.set("value","");
		this.icustomerid.set("value",cust.customerid);
		this.invoice_date.set("value", new Date());
		this._ChangePayment();
		this.btn.cancel();
		this.advcost.set("value","0.00");
		this.cost.set("value","0.00");
		this.updatumcost.set("value", "0.00");
	},
	_ChangePayment:function()
	{
		this._Show_Hide_DD ( this._advancefeatures, this._updatum, this.isdd.get("checked"));
	},
	_Show_Hide_DD:function( advancefeatures, updatum, isdd)
	{
		if (isdd)
		{
			dojo.addClass(this.view_dd_1,"prmaxhidden");
			dojo.addClass(this.view_dd_2,"prmaxhidden");
			dojo.addClass(this.view_dd_3,"prmaxhidden");
			dojo.addClass(this.view_dd_4,"prmaxhidden");
			dojo.addClass(this.features_view_2,"prmaxhidden");
			dojo.addClass(this.features_view_3,"prmaxhidden");
			dojo.addClass(this.updatum_view_2,"prmaxhidden");
			dojo.addClass(this.updatum_view_3,"prmaxhidden");
		}
		else
		{
			dojo.removeClass(this.view_dd_1,"prmaxhidden");
			dojo.removeClass(this.view_dd_2,"prmaxhidden");
			dojo.removeClass(this.view_dd_3,"prmaxhidden");
			dojo.removeClass(this.view_dd_4,"prmaxhidden");
			if ( advancefeatures)
			{
				dojo.removeClass(this.features_view_2,"prmaxhidden");
				dojo.removeClass(this.features_view_3,"prmaxhidden");
			}
			else
			{
				dojo.addClass(this.features_view_2,"prmaxhidden");
				dojo.addClass(this.features_view_3,"prmaxhidden");
			}
			if ( updatum )
			{
				dojo.removeClass(this.updatum_view_2,"prmaxhidden");
				dojo.removeClass(this.updatum_view_3,"prmaxhidden");
			}
			else
			{
				dojo.addClass(this.updatum_view_2,"prmaxhidden");
				dojo.addClass(this.updatum_view_3,"prmaxhidden");
			}
		}
	},
	_ShowHideAdvance:function ( status )
	{
		if ( status )
		{
			dojo.removeClass(this.features_view,"prmaxhidden");
			dojo.removeClass(this.features_view_1,"prmaxhidden");
			dojo.removeClass(this.features_view_5,"prmaxhidden");
			if ( this.isdd.get("checked") == false )
			{
				dojo.removeClass(this.features_view_2,"prmaxhidden");
				dojo.removeClass(this.features_view_3,"prmaxhidden");
			}
		}
		else
		{
			dojo.addClass(this.features_view,"prmaxhidden");
			dojo.addClass(this.features_view_1,"prmaxhidden");
			dojo.addClass(this.features_view_2,"prmaxhidden");
			dojo.addClass(this.features_view_3,"prmaxhidden");
			dojo.addClass(this.features_view_5,"prmaxhidden");
		}
	},
	_ShowHideUpdatum:function ( status )
	{
		if ( status )
		{
			dojo.removeClass(this.updatum_view,"prmaxhidden");
			dojo.removeClass(this.updatum_view_1,"prmaxhidden");
			dojo.removeClass(this.updatum_view_5,"prmaxhidden");
			if ( this.isdd.get("checked") == false )
			{
				dojo.removeClass(this.updatum_view_2,"prmaxhidden");
				dojo.removeClass(this.updatum_view_3,"prmaxhidden");
			}
		}
		else
		{
			dojo.addClass(this.updatum_view,"prmaxhidden");
			dojo.addClass(this.updatum_view_1,"prmaxhidden");
			dojo.addClass(this.updatum_view_2,"prmaxhidden");
			dojo.addClass(this.updatum_view_3,"prmaxhidden");
			dojo.addClass(this.updatum_view_5,"prmaxhidden");
		}
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.OneOffInvoice"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.OneOffInvoice"] = true;
//-----------------------------------------------------------------------------
// Name:    ManualInvoice.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//--------------------------------------------------------------g---------------
dojo.provide("prmax.iadmin.accounts.OneOffInvoice");







dojo.declare("prmax.iadmin.accounts.OneOffInvoice",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\"  data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"icustomerid\"' data-dojo-attach-point=\"icustomerid\" data-dojo-type=\"dijit.form.TextBox\" ></input>\r\n\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Enter Invoice</label><div style=\"display:inline\" class=\"prmaxrowdisplaylarge\" data-dojo-attach-point=\"customername\">Name</div></td></tr>\r\n\t\t\t<tr><td width=\"28%\" class=\"prmaxrowtag\" align=\"right\" width=\"120px\">Invoice Date</td><td><input data-dojo-attach-point=\"invoice_date\" data-dojo-type=\"ttl.DateTextBox\" data-dojo-props='type:\"text\",style:\"width:8em\",required:true' ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" valign=\"top\" align=\"right\" >Message</td><td><div class=\"stdframe\" ><textarea data-dojo-attach-point=\"message\" data-dojo-type=\"dijit.form.Textarea\" data-dojo-props='name:\"message\",\"class\":\"dijitTextarea\",style:\"width:99%;height:99%\"'></textarea></div></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Purchase Order</td><td><input data-dojo-attach-point=\"purchase_order\" data-dojo-props='\"class\":\"prmaxinput\",name:\"purchase_order\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Gross Amount</td><td><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-props='type:\"text\",name:\"amount\",required:true,trim:true,constraints:{min:0.01,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:8em\" ' data-dojo-attach-point=\"amount\" data-dojo-attach-event=\"onBlur:_Amounts\"></input></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Vat</td><td><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-props='type:\"text\",name:\"vat\",required:true,trim:true,constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:8em\"' data-dojo-attach-point=\"vat\" ></input></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Email Address</td><td><input data-dojo-attach-point=\"email\" data-dojo-props='\"class\":\"prmaxinput\",name:\"email\",type:\"text\",style:\"width:100%\",trim:true,required:true,regExpGen:dojox.validate.regexp.emailAddress,invalidMessage:\"invalid email address\",size:\"40\",maxlength:\"70\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" colspan=\"2\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"btn\" data-dojo-props='busyLabel:\"Sending ... \",type:\"button\"' data-dojo-attach-event=\"onClick:_Send\">Send Invoice</button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._SendInvoiceCallBack = dojo.hitch ( this , this._SendInvoiceCall );
	},
	_SendInvoiceCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Invoice Added");
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
			this._dialog.hide();
		}
		else
		{
			alert("Problem Adding Invoice");
		}
			this.btn.cancel();
	},
	_Send:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.btn.cancel();
			return false;
		}

		var content = this.form.get("value");
		content["invoice_date"] = ttl.utilities.toJsonDate ( this.invoice_date.get("value"));

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._SendInvoiceCallBack,
			url:'/iadmin/invoice_one_off_send',
			content:content}));
	},
	setCustomer:function( cust , dialog )
	{
		this.icustomerid.set("value",cust.customerid);
		this.invoice_date.set("value",new Date());
		this.amount.set("value",0.01);
		this.vat.set("value",0.0);

		dojo.attr ( this.customername , "innerHTML" , cust.customername ) ;
		this._dialog = dialog;
		this.btn.cancel();
	},
	_Amounts:function()
	{
		var amount = this.amount.get("value");

		var vat = amount - (amount / ( 1.00 + (20.00/ 100.00 )));

		this.vat.set("value",dojo.number.format (vat, {places:2}))
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.ManualCredit"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.ManualCredit"] = true;
//-----------------------------------------------------------------------------
// Name:    ManualInvoice.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.ManualCredit");







dojo.declare("prmax.iadmin.accounts.ManualCredit",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\" method=\"post\" name=\"form\" enctype=\"multipart/form-data\" onSubmit=\"return false;\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"icustomerid\"'  data-dojo-attach-point=\"icustomerid\" data-dojo-type=\"dijit.form.TextBox\" ></input>\r\n\t\t<input data-dojo-attach-point=\"invoice_date2\" data-dojo-props='name:\"credit_date\",type:\"hidden\"' data-dojo-type=\"dijit.form.TextBox\" ></input>\r\n\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\"><label class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Manual Credit</label><div style=\"display:inline\" class=\"prmaxrowdisplaylarge\" data-dojo-attach-point=\"customername\">Name</div></td></tr>\r\n\t\t\t<tr><td style=\"width:150px\" class=\"prmaxrowlabel\" align=\"right\">Reference</td><td><input data-dojo-attach-point=\"ref\" data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-props='type:\"text\",name:\"ref\",style:\"width:8em\",required:true' ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\">Date</td><td><input data-dojo-attach-point=\"credit_date\" data-dojo-type=\"ttl.DateTextBox\" data-dojo-props='type:\"text\",style:\"width:8em\",required:true' ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" valign=\"top\" align=\"right\" >Message</td><td><div class=\"stdframe\" ><textarea data-dojo-attach-point=\"message\" data-dojo-type=\"dijit.form.Textarea\" data-dojo-props='name:\"message\",\"class\":\"dijitTextarea\",style:\"width:99%;height:99%\"'></textarea></div></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowlabel\">Amount</td><td><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-props='type:\"text\",name:\"amount\",style:\"width:8em\",required:true,trim:true,constraints:{min:0.01,max:99999.00,fractional:true,places:\"0,2\"}' data-dojo-attach-point=\"amount\" data-dojo-attach-event=\"onBlur:_Amounts\"></input></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowlabel\">Vat</td><td><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-props='type:\"text\",name:\"vat\",required:true,constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"},style:\"width:8em\"' data-dojo-attach-point=\"vat\"></input></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowlabel\" >Unpaid Amount</td><td><input data-dojo-type=\"dijit.form.CurrencyTextBox\" data-dojo-attach-point=\"unpaidamount\" data-dojo-props='type:\"text\",name:\"unpaidamount\",required:true,style:\"width:8em\",constraints:{min:0.00,max:99999.00,fractional:true,places:\"0,2\"}'></input></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowlabel\">Credit File (pdf)</td><td><input class=\"prmaxinput\" type=\"file\" data-dojo-attach-point=\"credit_file\" name=\"credit_file\" size=\"50\"></input></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" colspan=\"2\" align=\"right\"><button data-dojo-attach-point=\"okbtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='busyLabel:\"Please Wait Saving...\",type:\"button\"' data-dojo-attach-event=\"onClick:_Send\">Enter Manual Credit Note</button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._AddCallBack = dojo.hitch ( this , this._AddCall );
	},
	_AddCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Credit Added");
			dojo.publish(PRCOMMON.Events.Financial_ReLoad, []);
			this._dialog.hide();
		}
		else
		{
			alert("Problem Adding Credit");
		}
	},
	_Send:function()
	{
		if ( this.ref.isValid() == false ||
				this.credit_date.isValid() == false ||
			this.amount.isValid() == false ||
			this.unpaidamount.isValid() == false)
		{
			this.okbtn.cancel();
			return false ;
		}

		var filename = dojo.attr(this.credit_file,"value").toLowerCase ();
		if ( filename.indexOf(".pdf") == -1)
		{
			alert("This must be a pdf file");
			this.okbtn.cancel();
			return false ;
		}

		this.invoice_date2.set("value", this.credit_date.get("ValueISO"));

		if (confirm("Create Credit?") == true)
		{
			dojo.io.iframe.send(
			{
				url: "/iadmin/add_manual_credit",
				handleAs:"json",
				load: this._AddCallBack,
				form : this.form
			});
		}
	},
	setCustomer:function( cust , dialog )
	{
		this.icustomerid.set("value",cust.customerid);
		this.credit_date.set("value",new Date());
		this.ref.set("value","");
		this.amount.set("value",0.0);
		this.vat.set("value",0.0);
		this.unpaidamount.set("value",0.0);
		dojo.attr(this.credit_file, "value","");
		this.okbtn.cancel();

		dojo.attr ( this.customername , "innerHTML" , cust.customername ) ;
		this._dialog = dialog;
	},
	_Amounts:function()
	{
		var amount = this.amount.get("value");

		var vat = amount - (amount / ( 1.00 + (20.00/ 100.00 )));

		this.unpaidamount.set("value",amount);
		this.vat.set("value",dojo.number.format (vat, {places:2}))
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.SendDDConf"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.SendDDConf"] = true;
//-----------------------------------------------------------------------------
// Name:    SendDDConf.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.SendDDConf");



dojo.declare("prmax.iadmin.accounts.SendDDConf",
	[ ttl.BaseWidget],{
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\"><div class=\"prmaxrowdisplaylarge\" style=\"text-align:center;display:inline\">Send DD Conformation For</div><div class=\"prmaxrowdisplaylarge\" style=\"display:inline\" data-dojo-attach-point=\"customername\"></div></td>\r\n\t\t\t<tr><td colspan=\"2\"><td><br/></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Email Address</td><td><input class=\"prmaxinput\" data-dojo-attach-point=\"email\" data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-props='name:\"email\",type:\"text\",style:\"width:100%\",trim:\"true\",required:\"true\",regExpGen:dojox.validate.regexp.emailAddress,invalidMessage:\"invalid email address\",size:\"40\",maxlength:\"70\"'/></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" colspan=\"2\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"btn\" data-dojo-propa='busylabel:\"Sending ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_send_dd_conf\">Send DD Confirmation</button></td>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._send_dd_conf_call_back = dojo.hitch(this,this._send_dd_conf_call);
	},
	set_customer:function( customer, dialog)
	{
		this.btn.cancel();

		this._customerid = customer.customerid;
		this._customername = customer.customername;

		dojo.attr ( this.customername , "innerHTML" , customer.customername ) ;
		this.email.set("value", customer.email);
		this._dialog = dialog;

	},
	_send_dd_conf_call:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Confirmation DD Sent");
			this._dialog.hide();
		}
		else
		{
			alert("Problem Sending");
		}
		this.btn.cancel();
	},
	_send_dd_conf:function( )
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.btn.cancel();
			return false;
		}

		var content = this.form.get("value");
		content["icustomerid"] = this._customerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._send_dd_conf_call_back,
			url:'/iadmin/send_conf_dd',
			content:content}));
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.FinancialControl"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.FinancialControl"] = true;
//-----------------------------------------------------------------------------
// Name:    FinancialControl.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/03/2011
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.accounts.FinancialControl");




















dojo.declare("prmax.iadmin.accounts.FinancialControl",
	[ttl.BaseWidget],{
	templateString:"<div>\r\n\t<div data-dojo-attach-point=\"frame\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='gutters:true,style:\"width:100%;height:100%\"' >\r\n\t\t<div data-dojo-type=\"dijit.layout.TabContainer\" data-dojo-props='region:\"center\"' >\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='\"class\":\"scrollpanel\",style:\"width:100%;height:100%\",title:\"Details\"' >\r\n\t\t\t\t<form data-dojo-attach-point=\"financialForm\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t\t\t\t<table class=\"prmaxtable\" width=\"500px\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Order Status</td><td width=\"70%\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"customerorderstatusid\",style:\"width:19em\",autoComplete:true' data-dojo-attach-point=\"customerorderstatusid\" data-dojo-type=\"dijit.form.FilteringSelect\" ></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Financial Status</td><td width=\"70%\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"financialstatusid\",style:\"width:15em\",autoComplete:true' data-dojo-attach-point=\"financialstatusid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Payment Method</td><td width=\"70%\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"paymentmethodid\",style:\"width:15em\",autoComplete:true' data-dojo-attach-point=\"paymentmethodid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Core Renewal Date</td><td><input data-dojo-attach-point=\"renewal_date\" data-dojo-props='\"class\":\"prmaxinput\",type:\"text\",required:true,name:\"renewal_date\"' data-dojo-type=\"dijit.form.DateTextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Features Renewal Date</td><td><input data-dojo-attach-point=\"renewal_date_features\" data-dojo-props='\"class\":\"prmaxinput\",type:\"text\",name:\"renewal_date_features\"' data-dojo-type=\"dijit.form.DateTextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Invoice Email</td><td width=\"70%\"><input data-dojo-props='\"class\":\"prmaxinput\",regExpGen:dojox.validate.regexp.emailAddress,trim:true,name:\"invoiceemail\",type:\"text\"' data-dojo-attach-point=\"invoiceemail\" data-dojo-type=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Bank Name</td><td width=\"70%\"><input data-dojo-props='\"class\":\"prmaxinput\",name:\"bank_name\",type:\"text\",trim:true' data-dojo-attach-point=\"bank_name\" data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Account Name</td><td width=\"70%\"><input data-dojo-attach-point=\"bank_account_name\" data-dojo-props='name:\"bank_account_name\",type:\"text\",trim:true,\"class\":\"prmaxinput\"' data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Sort Code</td><td width=\"70%\"><input data-dojo-props='\"class\":\"prmaxinput\",name:\"bank_sort_code\",type:\"text\",trim:true' data-dojo-attach-point=\"bank_sort_code\" data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Account Number</td><td width=\"70%\"><input data-dojo-attach-point=\"bank_account_nbr\" data-dojo-props='\"class\":\"prmaxinput\",name:\"bank_account_nbr\",type:\"text\",trim:\"true\"' data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Purchase Order</td><td width=\"70%\"><input data-dojo-attach-point=\"purchase_order\" data-dojo-props='\"class\":\"prmaxinput\",name:\"purchase_order\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\" align=\"right\" >Bundled Invoice</td><td><input data-dojo-attach-point=\"has_bundled_invoice\" data-dojo-props='\"class\":\"prmaxinput\",name:\"has_bundled_invoice\",type:\"checkbox\"' data-dojo-type=\"dijit.form.CheckBox\"/></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">DD Reference</td><td width=\"70%\"><input data-dojo-attach-point=\"dd_ref\" data-dojo-props='type:\"text\",\"class\":\"prmaxinput\",name:\"dd_ref\"' data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">DD Start Day of Month</td><td width=\"70%\"><select data-dojo-props='style:\"width:50px\",\"class\":\"prmaxinput\",name:\"dd_start_day\",type:\"text\"' data-dojo-attach-point=\"dd_start_day\" data-dojo-type=\"dijit.form.ComboBox\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">DD Start Month</td><td width=\"70%\"><input data-dojo-props='\"class\":\"prmaxinput\",name:\"dd_start_month\",type:\"text\",trim:true, constraints:{min:0,max:3}, style:\"width:3em\"' data-dojo-attach-point=\"dd_start_month\" data-dojo-type=\"dijit.form.NumberTextBox\"></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">DD Media Mn.</td><td width=\"70%\"><input data-dojo-attach-point=\"pay_monthly_value\" data-dojo-props='\"class\":\"prmaxinput\",name:\"pay_monthly_value\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.CurrencyTextBox\" >&nbsp;<select data-dojo-props='\"class\":\"prmaxinput\",name:\"dd_media_pricecodeid\",style:\"width:5em\",autoComplete:true' data-dojo-attach-point=\"dd_media_pricecodeid\" data-dojo-type=\"dijit.form.ComboBox\"></select></td></tr>\r\n\t\t\t\t\t\t<tr data-dojo-attach-point=\"adv_1\"><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">DD Features Mn.</td><td width=\"70%\"><input data-dojo-attach-point=\"dd_advance_value\" data-dojo-props='\"class\":\"prmaxinput\",name:\"dd_advance_value\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.CurrencyTextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr data-dojo-attach-point=\"monitoring_1\"><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">DD Monitoring Mn.</td><td width=\"70%\"><input data-dojo-attach-point=\"dd_monitoring_value\" data-dojo-props='\"class\":\"prmaxinput\",name:\"dd_monitoring_value\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.CurrencyTextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr data-dojo-attach-point=\"int_1\"><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">DD International Mn.</td><td width=\"70%\"><input data-dojo-attach-point=\"dd_international_data_value\" data-dojo-props='\"class\":\"prmaxinput\",name:\"dd_international_data_value\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.CurrencyTextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Monthly Day</td><td width=\"70%\"><select data-dojo-props='style:\"width:50px\",\"class\":\"prmaxinput\",name:\"pay_montly_day\",type:\"text\"' data-dojo-attach-point=\"pay_montly_day\" data-dojo-type=\"dijit.form.ComboBox\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Next Monthly Value</td><td width=\"70%\"><input data-dojo-props='\"class\":\"prmaxinput\",name:\"next_month_value\",type:\"text\",trim:true' data-dojo-attach-point=\"next_month_value\" data-dojo-type=\"dijit.form.CurrencyTextBox\"></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" valign=\"top\">Next Monthly Invoice Message</td><td><div class=\"dialogprofileframe\" ><textarea data-dojo-attach-point=\"next_invoice_message\" data-dojo-props='name:\"next_invoice_message\",\"class\":\"dijitTextarea\",style:\"width:99%;height:99%\"' data-dojo-type=\"dijit.form.Textarea\" ></textarea></div></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Sub Day of Month</td><td width=\"70%\"><select data-dojo-props='style:\"width:50px\",\"class\":\"prmaxinput\",name:\"sub_start_day\",type:\"text\"' data-dojo-attach-point=\"sub_start_day\" data-dojo-type=\"dijit.form.ComboBox\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Last Paid Month</td><td width=\"70%\"><input data-dojo-attach-point=\"last_paid_date\" data-dojo-props='\"class\":\"prmaxinput\",readonly:\"readonly\",type:\"text\",trim:true' data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Collection Date</td><td width=\"70%\"><input data-dojo-props='\"class\":\"prmaxinput\",readonly:\"readonly\",type:\"text\",trim:true' data-dojo-attach-point=\"dd_collectiondate\" data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >SEO Payment Method</td><td ><select data-dojo-props='\"class\":\"prmaxinput\",name:\"seopaymenttypeid\",style:\"width:15em\",autoComplete:true' data-dojo-attach-point=\"seopaymenttypeid\" data-dojo-type=\"dijit.form.FilteringSelect\" ></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >SEO Free Qty</td><td><input data-dojo-props='\"class\":\"prmaxinput\",readonly:\"readonly\", type:\"text\", \"disabled\":\"disabled\"' data-dojo-attach-point=\"seonbrincredit\" data-dojo-type=\"dijit.form.TextBox\"></td></tr>\r\n\t\t\t\t\t\t<tr ><td class=\"prmaxrowtag\" colspan=\"2\"><button data-dojo-props='label:\"Save\",\"class\":\"prmaxbutton\",busyLabel:\"Please Wait Saving...\",type:\"button\"' data-dojo-attach-point=\"saveFinancialNode\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-event=\"onClick:_UpdateFinancial\" ></button></td></tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='\"class\":\"scrollpanel\",style:\"width:100%;height:100%\",title:\"Sales Analysis\"' >\r\n\t\t\t\t<form data-dojo-attach-point=\"salesform\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t\t\t\t<table class=\"prmaxtable\" width=\"500px\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Media</td><td width=\"70%\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"pricecodeid\",style:\"width:9em\",autoComplete:true' data-dojo-attach-point=\"pricecodeid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Features</td><td width=\"70%\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"advpricecodeid\",style:\"width:9em\",autoComplete:true' data-dojo-attach-point=\"advpricecodeid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Updateum</td><td width=\"70%\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"updatumpricecodeid\",style:\"width:9em\",autoComplete:true' data-dojo-attach-point=\"updatumpricecodeid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">International</td><td width=\"70%\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"intpricecodeid\",style:\"width:9em\",autoComplete:true' data-dojo-attach-point=\"intpricecodeid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Clippings</td><td width=\"70%\"><select data-dojo-props='\"class\":\"prmaxinput\",name:\"clippingspricecodeid\",style:\"width:9em\",autoComplete:true' data-dojo-attach-point=\"clippingspricecodeid\" data-dojo-type=\"dijit.form.FilteringSelect\"></select></td></tr>\r\n\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" colspan=\"2\"><button data-dojo-props='label:\"Save\",\"class\":\"prmaxbutton\",busyLabel:\"Please Wait Saving...\",type:\"button\"' data-dojo-attach-point=\"savesalesanalysis\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-event=\"onClick:_update_sales_analysis\" ></button></td></tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='\"class\":\"scrollpanel\",region:\"right\",style:\"height:100%;width:150px\"' >\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_TakePayment\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Enter Payment\",type:\"button\"'></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_ManualPayment\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Pay & Allocate\",type:\"button\"' ></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_OneOffInvoice\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"On Off Invoice\",type:\"button\"' ></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_SendProforma\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Send Proforma\",type:\"button\"' ></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_ManualInvoice\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Manual Invoice\",type:\"button\"' ></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_Invoice\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Invoice\",type:\"button\"' ></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_CreditNote\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Credit Note\",type:\"button\"' ></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_ManualCredit\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Manual Credit\",type:\"button\"' ></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_Adjustment\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Adjustment\",type:\"button\"' ></button>\r\n\t\t\t<hr/>\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_SendConfirmation\" data-dojo-props='label:\"Order Confirmation\"' ></button>\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_SendUpdateConfirmation\" data-dojo-props='label:\"Upgrade Confirmation\"' ></button>\r\n\t\t\t<hr/>\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_dd_received_confirm\" data-dojo-props='label:\"Letter DD Received\"' ></button>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Take Payment\"' data-dojo-attach-point=\"takepaymentdialog\">\r\n\t\t<div  data-dojo-attach-point=\"takepaymentctrl\" data-dojo-type=\"prmax.iadmin.accounts.Payment\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Credit Account\"' data-dojo-attach-point=\"creditdialog\">\r\n\t\t<div  data-dojo-attach-point=\"creditctrl\" data-dojo-type=\"prmax.iadmin.accounts.Credit\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Monthly Payment\"' data-dojo-attach-point=\"monthlypaymentdialog\">\r\n\t\t<div  data-dojo-attach-point=\"monthlypaymentctrl\" data-dojo-type=\"prmax.iadmin.accounts.MonthlyPayment\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Direct Debit Reject Payment\"' data-dojo-attach-point=\"ddrejectpaymentdialog\">\r\n\t\t<div  data-dojo-attach-point=\"ddrejectpaymentctrl\" data-dojo-type=\"prmax.iadmin.accounts.DDReturnPayment\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"First Month DD\"' data-dojo-attach-point=\"ddpaymentdialog\">\r\n\t\t<div data-dojo-attach-point=\"ddpaymentctrl\" data-dojo-type=\"prmax.iadmin.accounts.DDPayment\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Send Proforma\"' data-dojo-attach-point=\"sendproformadialog\">\r\n\t\t<div  data-dojo-attach-point=\"sendproformactrl\" data-dojo-type=\"prmax.iadmin.accounts.Proforma\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Enter Manual Invoice\"' data-dojo-attach-point=\"manualinvoicedialog\">\r\n\t\t<div data-dojo-attach-point=\"manualinvoicectrl\" data-dojo-type=\"prmax.iadmin.accounts.ManualInvoice\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Enter Payment & Allocated\"' data-dojo-attach-point=\"allocpaymentdialog\">\r\n\t\t<div  data-dojo-attach-point=\"allocpaymentctrl\" data-dojo-props='manualmode:\"true\"' data-dojo-type=\"prmax.iadmin.accounts.Payment\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Adjust Account\"' data-dojo-attach-point=\"adjustdialog\">\r\n\t\t<div  data-dojo-attach-point=\"adjustctrl\" data-dojo-type=\"prmax.iadmin.accounts.Adjustments\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Invoice Account\"' data-dojo-attach-point=\"invdialog\">\r\n\t\t<div  data-dojo-attach-point=\"invctrl\" data-dojo-type=\"prmax.iadmin.accounts.PrePayInvoice\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Enter Order Confirmation\"' data-dojo-attach-point=\"sendorderconfirmationdialog\">\r\n\t\t<div data-dojo-attach-point=\"sendorderconfirmationctrl\" data-dojo-type=\"prmax.iadmin.accounts.OrderConfirmation\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Upgrade Confirmation\"' data-dojo-attach-point=\"upgradeconfirmationdialog\">\r\n\t\t<div data-dojo-attach-point=\"upgradeconfirmationctrl\" data-dojo-type=\"prmax.iadmin.accounts.UpgradeOrderConfirmation\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"One Off Invoice\"' data-dojo-attach-point=\"onceoffinvoicedialog\">\r\n\t\t<div data-dojo-attach-point=\"onceoffinvoicectrl\" data-dojo-type=\"prmax.iadmin.accounts.OneOffInvoice\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Manual Credit\"' data-dojo-attach-point=\"manualcreditdialog\">\r\n\t\t<div data-dojo-attach-point=\"manualcreditctrl\" data-dojo-type=\"prmax.iadmin.accounts.ManualCredit\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Send DD Confirmation\"' data-dojo-attach-point=\"dd_conf_dialog\">\r\n\t\t<div data-dojo-attach-point=\"dd_conf_ctrl\" data-dojo-type=\"prmax.iadmin.accounts.SendDDConf\" ></div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._FinancialResponseCall = dojo.hitch(this,this._FinancialResponse);
		this._paymentmethods =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=paymentmethods"});
		this._financialstatus =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=financialstatus"});
		this._daysofmonth =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=daysofmonth"});
		this._customerorderstatus =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=customerorderstatus"});
		this._seopaymenttypes =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=seopaymenttypes"});

		this._pricecodes_core =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=core"});
		this._pricecodes_adv =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=adv"});
		this._pricecodes_updatum =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=updatum"});
		this._pricecodes_int =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=int"});
		this._pricecodes_clippings =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=clippings"});

		this._SendOrderCallBack = dojo.hitch ( this, this._SendOrderCall);
		this._LoadInvoiceCallBack = dojo.hitch(this, this._LoadInvoiceCall);
		this._LoadCreditCallBack = dojo.hitch(this, this._LoadCreditCall);
		this._LoadOneOffCallBack = dojo.hitch(this, this._LoadOneOffCall);
		this._LoadCustomerCallBack = dojo.hitch(this, this._LoadCustomerCall);
		this._ManualCreditCallBack = dojo.hitch(this, this._ManualCreditCall);
		this._upgrade_load_confirmation_call_back = dojo.hitch(this,this._upgrade_load_confirmation_call);
		this._send_dd_conf_call_back = dojo.hitch(this,this._send_dd_conf_call);
		this._take_payment_call_back = dojo.hitch(this, this._take_payment_call);
		this._manual_payment_call_back = dojo.hitch(this, this._manual_payment_call);
	},
	postCreate:function()
	{
		this.paymentmethodid.store = this._paymentmethods;
		this.financialstatusid.store = this._financialstatus;
		this.pay_montly_day.store = this._daysofmonth;
		this.sub_start_day.store = this._daysofmonth;
		this.customerorderstatusid.store = this._customerorderstatus;
		this.seopaymenttypeid.store = this._seopaymenttypes;
		this.dd_start_day.set("store", this._daysofmonth);

		this.pricecodeid.set("store",this._pricecodes_core);
		this.advpricecodeid.set("store",this._pricecodes_adv);
		this.updatumpricecodeid.set("store",this._pricecodes_updatum);
		this.intpricecodeid.set("store",this._pricecodes_int);
		this.clippingspricecodeid.set("store",this._pricecodes_clippings);

		//dojo.xhrPost(
		//ttl.utilities.makeParams({
	//	load: dojo.hitch(this, this._load_prices_call),
	//	url:'/iadmin/get_prices_list',
	//	content:{}
	//	}));

		this.inherited(arguments);

	},
	_load_prices_call:function( response )
	{
		// load lookups and assign to direct debit

	},
	Load:function( data )
	{
		this.paymentmethodid.set("value", data.cust.paymentmethodid);
		this.financialstatusid.set("value", data.cust.financialstatusid);
		this.customerorderstatusid.set("value", data.cust.customerorderstatusid);

		this.next_invoice_message.set("value", data.cust.next_invoice_message);
		this.bank_name.set("value", data.cust.bank_name);
		if ( data.cust.renewal_date_d != null )
			this.renewal_date.set("value", new Date(data.cust.renewal_date_d.year, data.cust.renewal_date_d.month-1, data.cust.renewal_date_d.day));
		else
			this.renewal_date.set("value",null);
		if ( data.cust.renewal_date_features_d != null )
			this.renewal_date_features.set("value", new Date(data.cust.renewal_date_features_d.year, data.cust.renewal_date_features_d.month-1, data.cust.renewal_date_features_d.day));
		else
			this.renewal_date_features.set("value",null);

		this.invoiceemail.set("value", data.cust.invoiceemail);
		this.bank_account_name.set("value", data.cust.bank_account_name);
		this.bank_sort_code.set("value", data.cust.bank_sort_code);
		this.bank_account_nbr.set("value", data.cust.bank_account_nbr);

		this.pay_monthly_value.set("value", dojo.number.round( data.cust.pay_monthly_value/100.0,2));
		this.dd_monitoring_value.set("value", dojo.number.round( data.cust.dd_monitoring_value/100.0,2));
		this.dd_advance_value.set("value", dojo.number.round( data.cust.dd_advance_value/100.0,2));
		this.dd_international_data_value.set("value", dojo.number.round( data.cust.dd_international_data_value/100.0,2));

		this.last_paid_date.set("value", data.cust.last_paid_date_display);
		this.dd_ref.set("value", data.cust.dd_ref);
		this.dd_collectiondate.set("value", data.cust.dd_collectiondate_display);
		this.pay_montly_day.set("value", data.cust.pay_montly_day);
		this.sub_start_day.set("value", data.cust.sub_start_day);
		this.purchase_order.set("value", data.cust.purchase_order);
		this.next_month_value.set("value", dojo.number.round( data.cust.next_month_value/100.0,2));
		this.seopaymenttypeid.set("value", data.cust.seopaymenttypeid);
		this.seonbrincredit.set("value", data.cust.seonbrincredit);
		this.dd_start_day.set("value", data.cust.dd_start_day);
		this.dd_start_month.set("value", data.cust.dd_start_month);
		this.has_bundled_invoice.set("checked", data.cust.has_bundled_invoice);

		this.pricecodeid.set("value",data.cust.pricecodeid);
		this.advpricecodeid.set("value",data.cust.advpricecodeid);
		this.updatumpricecodeid.set("value",data.cust.updatumpricecodeid);
		this.intpricecodeid.set("value",data.cust.intpricecodeid);
		this.clippingspricecodeid.set("value",data.cust.clippingspricecodeid);

		this._data = data;
		this.Show_Hide_Fields (data.cust );

	},
	_take_payment_call:function( response)
	{
		if ( response.success == "OK")
		{
			this.takepaymentctrl.setCustomer (
					response.data.cust,
					this.takepaymentdialog ) ;
			this.takepaymentdialog.show();
		}
		else
		{
			alert("Problem Loading");
		}
	},
	_TakePayment:function()
	{
		var tmp = this.paymentmethodid.get("value");

		if ( tmp == 1  || tmp == null)
		{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._take_payment_call_back,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._data.cust.customerid}
			}));
		}
		else
		{
			this.monthlypaymentctrl.setCustomer (
				this._data.cust.customerid,
				this._data.cust.customername,
				this._data.cust.email ,
				this.monthlypaymentdialog,
				this.pay_monthly_value.get("value")) ;

			this.monthlypaymentdialog.show();
		}
	},
	_SendProforma:function()
	{
		this.sendproformactrl.setCustomer (
			this._data.cust.customerid,
			this._data.cust.customername,
			this._data.cust.email ,
			this.sendproformadialog ) ;

		this.sendproformadialog.show();
	},

	_getEmailAddress:function()
	{
		var email = this.invoiceemail.get("value");
		if (email == "" )
			email = this._data.cust.email;

		return email;
	},
	_TakeFirstPayment:function()
	{
		this.ddpaymentctrl.setCustomer (
			this._data.cust.customerid,
			this._data.cust.customername,
			this._getEmailAddress() ,
			this.monthlypaymentdialog,
			0) ;
			this.ddpaymentdialog.show();
	},
	_ManualInvoice:function()
	{
		this.manualinvoicectrl.setCustomer (
			this._data.cust.customerid,
			this._data.cust.customername,
			this.manualinvoicedialog ) ;
		this.manualinvoicedialog.show();
	},
	_Invoice:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadInvoiceCallBack,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._data.cust.customerid}
			}));
	},
	_LoadInvoiceCall:function( response )
	{
		if (response.success == "OK")
		{
			this.invctrl.setCustomer ( response.data.cust, this.invdialog ) ;
			this.invdialog.show();
		}
		else
		{
			alert("Problem Loading Data");
		}
	},
	_manual_payment_call:function (response)
	{
		if (response.success== "OK")
		{
			this.allocpaymentctrl.setCustomer (
				response.data.cust,
				this.allocpaymentdialog);
			this.allocpaymentdialog.show();
		}
		else
		{
			alert("Problem Loading");
		}
	},
	_ManualPayment:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._manual_payment_call_back,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._data.cust.customerid}
			}));

	},
	_CreditNote:function()
	{
			dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadCreditCallBack,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._data.cust.customerid}
			}));
	},
	_LoadCreditCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			this.creditctrl.setCustomer ( response.data.cust, this.creditdialog ) ;
			this.creditdialog.show();
		}
	},
	_Adjustment:function()
	{
		this.adjustctrl.setCustomer (
			this._data.cust.customerid,
			this._data.cust.customername,
			this.adjustdialog ) ;

			this.adjustdialog.show();
	},
		_UpdateFinancial:function()
	{
		if ( ttl.utilities.formValidator ( this.financialForm ) == false )
		{
			this.saveFinancialNode.cancel();
			return;
		}

		var content = this.financialForm.get("value");
		content["icustomerid"] = this._data.cust.customerid ;
		content["renewal_date"] = ttl.utilities.toJsonDate ( this.renewal_date.get("value") );
		content["renewal_date_features"] = ttl.utilities.toJsonDate ( this.renewal_date_features.get("value") );

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._FinancialResponseCall,
			url:'/iadmin/update_customer_financial',
			content:content
		}));
	},
	_FinancialResponse:function( response )
	{
		if (response.success=="OK")
		{
			alert("Customer Financial Details Updated");
		}
		else
		{
			if ( response.message )
			{
				alert(response.message );
			}
			else
			{
				alert("Problem Updating Financial Details");
			}
		}

		this.saveFinancialNode.cancel();
	},
	resize:function()
	{
		this.frame.resize(arguments[0]);
		this.inherited(arguments);
	},
	_SendConfirmation:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadCustomerCallBack,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._data.cust.customerid}
			}));
	},
	_LoadCustomerCall:function( response )
	{
		if ( response.success == "OK" )
		{
			this.sendorderconfirmationctrl.setCustomer (
				response.data.cust.customerid,
				this.sendorderconfirmationdialog,
				response.data.cust) ;

			this.sendorderconfirmationdialog.show();
		}
		else
		{
			alert("Problem Loading Customer Details");
		}
	},
	_SendUpdateConfirmation:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._upgrade_load_confirmation_call_back,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._data.cust.customerid}
			}));
	},
	_upgrade_load_confirmation_call:function( response )
	{
		if ( response.success == "OK" )
		{
			this.upgradeconfirmationctrl.set_customer (
				response.data.cust.customerid,
				this.upgradeconfirmationdialog,
				response.data.cust) ;

			this.upgradeconfirmationdialog.show();
		}
		else
		{
			alert("Problem Loading Customer Details");
		}
	},
	_LoadOneOffCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			this.onceoffinvoicectrl.setCustomer ( response.data.cust, this.onceoffinvoicedialog ) ;
			this.onceoffinvoicedialog.show();
		}
	},
	_OneOffInvoice:function()
	{
			dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadOneOffCallBack,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._data.cust.customerid}
			}));
	},
	_ManualCreditCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			this.manualcreditctrl.setCustomer ( response.data.cust, this.manualcreditdialog ) ;
			this.manualcreditdialog.show();
		}
	},
	_ManualCredit:function()
	{
			dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._ManualCreditCallBack,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._data.cust.customerid}
			}));
	},
	Show_Hide_Fields:function( customer )
	{
		if (customer.updatum)
		{
			dojo.removeClass(this.monitoring_1, "prmaxhidden");
		}
		else
		{
			dojo.addClass(this.monitoring_1, "prmaxhidden");
		}
		if (customer.advancefeatures)
		{
			dojo.removeClass(this.adv_1, "prmaxhidden");
		}
		else
		{
			dojo.addClass(this.adv_1, "prmaxhidden");
		}
		if (customer.has_international_data)
		{
			dojo.removeClass(this.int_1, "prmaxhidden");
		}
		else
		{
			dojo.addClass(this.int_1, "prmaxhidden");
		}
	},
	_send_dd_conf_call:function( response )
	{
		if ( response.success == "OK")
		{
			this.dd_conf_ctrl.set_customer (
					response.data.cust,
					this.dd_conf_dialog ) ;
			this.dd_conf_dialog.show();
		}
		else
		{
			alert("Problem Loading");
		}
	},
	_dd_received_confirm:function()
	{
		if ( this.dd_ref.get("value").length>0)
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._send_dd_conf_call_back,
				url:'/iadmin/get_internal',
				content:{'icustomerid':this._data.cust.customerid}
				}));
		}
		else
		{
			alert("No DD Ref");
		}
	},
	_update_sales_analysis:function()
	{

	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.Reports"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.Reports"] = true;
dojo.provide("prmax.iadmin.accounts.Reports");



dojo.declare("prmax.iadmin.accounts.Reports",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"\t\t<div >\r\n\t\t\t<p class=\"prmaxrowlabel\">Reports</p>\r\n\t\t\t<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t<tr><td width=\"20%\" align=\"right\" class=\"prmaxrowlabel\">Active Accounts for Month</td><td>\r\n\t\t\t\t<form dojoAttachPoint=\"active_accounts_report_form\" target=\"_newtab\" action=\"/iadmin/customer_active\">\r\n\t\t\t\t\t<input type=\"text\"  dojoAttachPoint=\"active_report_date\" name = \"active_report_date\" dojoType=\"dijit.form.DateTextBox\" >\r\n\t\t\t\t\t<button type=\"button\" dojoType=\"dijit.form.Button\" label=\"Report Active Customers\" dojoAttachEvent=\"onClick:_Active_Account_Report\"></button>\r\n\t\t\t\t</form>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Payment for Month</td><td>\r\n\t\t\t\t<form dojoAttachPoint=\"account_payments_report_form\" target=\"_newtab\" action=\"/iadmin/customer_payments_report\">\r\n\t\t\t\t\t<input type=\"text\"  dojoAttachPoint=\"account_payments_report_date\" name = \"active_report_date\" dojoType=\"dijit.form.DateTextBox\" >\r\n\t\t\t\t\t<button type=\"button\" dojoType=\"dijit.form.Button\" label=\"Payment for Month\" dojoAttachEvent=\"onClick:_Account_Payment_Report\"></button>\r\n\t\t\t\t</form>\r\n\t\t\t</td></tr></table>\r\n\t\t</div>\r\n",
	postCreate:function()
	{
		this.inherited(arguments);

		this.active_report_date.set("value", new Date());
		this.account_payments_report_date.set("value", new Date());
	},
	_Active_Account_Report:function()
	{
		this.active_accounts_report_form.submit();
	},
	_Account_Payment_Report:function()
	{
		this.account_payments_report_form.submit();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.DDView"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.DDView"] = true;
dojo.provide("prmax.iadmin.accounts.DDView");



dojo.declare("prmax.iadmin.accounts.DDView",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div dojoAttachPoint=\"frame\" dojoType=\"dijit.layout.BorderContainer\" gutters=\"false\" >\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" preload=\"true\" region=\"top\" style=\"width:100%;height:40px\">\r\n\t\t\t<div style=\"height:40px;width:100%;overflow:hidden\" class=\"searchresults\">\r\n\t\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left:height:100%;width:99%\" >\r\n\t\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\" dojoAttachEvent=\"onClick:_DD_Refresh\">Refresh</div>\r\n\t\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\" dojoAttachEvent=\"onClick:_DD_Show_All\" dojoAttachPoint=\"dd_show_all\">Only Not Paid</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div dojoAttachPoint=\"ddgrid\" dojoType=\"dojox.grid.DataGrid\" region=\"center\" query=\"{ name:'*'}\" rowsPerPage=\"50\" structure=\"PRMAX.iadmin.gridlayout.dd_view\"></div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		dojo.subscribe(PRCOMMON.Events.Monthly_Payments, dojo.hitch(this,this._Monthly_Payment_Event));

		this.dd_data = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/customer_monthlies',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true,
			nocallback: true
			});


	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.ddgrid.set("structure", this._view );

		this.ddgrid._setStore(this.dd_data);
		this.ddgrid['onCellClick'] = dojo.hitch(this,this._OnDDClick);
	},
	resize:function()
	{
		this.frame.resize(arguments[0]);
		this.inherited(arguments);
	},

	_DD_Refresh:function()
	{
		this.ddgrid.setQuery( dojo.mixin(ttl.utilities.getPreventCache(),{showall:this._show_all}));
	},
	_DD_Show_All:function()
	{
		this._show_all = this._show_all == 0 ? 1 : 0 ;
		this.dd_show_all.set("label", this._show_all==1? "Show All Monthlies" : "Only Not Paid");

		this.ddgrid.setQuery( dojo.mixin(ttl.utilities.getPreventCache(),{showall:this._show_all}));
	},
	_OnDDClick:function ( e )
	{
		if ( e.cellIndex == 6 )
		{
			this._row = this.ddgrid.getItem(e.rowIndex);

			if ( this._row.i.paymentmethodid == 3 )
			{
				this.monthlypaymentctrl.setCustomer (
					this._row.i.customerid,
					this._row.i.customername,
					this._row.i.email ,
					this.monthlypaymentdialog,
					this._row.i.pay_monthly_value) ;

				this.monthlypaymentdialog.show();
			}
			else
			{
				this.ddpaymentctrl.setCustomer (
					this._row.i.customerid,
					this._row.i.customername,
					this._row.i.email ,
					this.ddpaymentdialog,
					this._row.i.pay_monthly_value) ;

				this.ddpaymentdialog.show();

			}
		}
	},
	_Monthly_Payment_Event:function( data )
	{
			this.dd_data.setValue(  this._row, "last_paid_display", data.last_paid_display, true );
	},
	_view : {noscroll: false,
			cells: [[
			{name: 'Name',width: "30em",field:'customername'},
			{name: 'Payment Method',width: "12em",field:'paymentmethodname'},
			{name: 'Financial Status',width: "12em",field:'financialstatusdescription'},
			{name: 'Expire Date',width: "7em",field:'licence_expire'},
			{name: 'Last Paid',width: "10em",field:'last_paid_display'},
			{name: 'Payment (Ex Vat)',width: "8em",field:'pay_monthly_value', styles: 'text-align: right;' },
			{name: ' ',width: "2em",formatter:ttl.utilities.formatRowCtrl}
		]]
		}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.PriceCodes"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.PriceCodes"] = true;
//-----------------------------------------------------------------------------
// Name:    PriceCodes.js
// Author:  Chris Hoy
// Purpose:
// Created: 18/05/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.accounts.PriceCodes");




dojo.declare("prmax.iadmin.accounts.PriceCodes",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div dojoAttachPoint=\"borderControl\" dojotype=\"dijit.layout.BorderContainer\" style=\"width:100%;height:100%\" gutters=\"false\">\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"top\" style=\"height:42px;width:100%;overflow:hidden;border:1px solid black\">\r\n\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left:height:100%;width:100%\" >\r\n\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" dojoAttachEvent=\"onClick:_New\" showLabel=\"true\">New</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div dojotype=\"dijit.layout.ContentPane\" region=\"center\"  splitter=\"true\">\r\n\t\t\t<div dojoAttachPoint=\"view_grid\" dojoType=\"dojox.grid.DataGrid\"   query=\"{ }\" rowsPerPage=\"30\" ></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div dojoType=\"dijit.Dialog\" title=\"New Price Code\" dojoAttachPoint=\"pricecodedialog\">\r\n\t\t<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t<table style=\"width:500px;border-collapse:collapse;\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" width=\"150px\">Price Code</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"pricecodedescription\" name = \"pricecodedescription\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:150px\" ></td></tr>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Price Description</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"pricecodelongdescription\" name = \"pricecodelongdescription\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:300px\" ></td></tr>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Module Type</td><td><select class=\"prmaxinput\" name=\"prmaxmoduleid\" dojoAttachPoint=\"prmaxmoduleid\" style=\"width:10em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"true\"></select>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Fixed Sales Price</td><td><input class=\"prmaxinput\" type=\"text\" name=\"fixed_salesprice\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"fixed_salesprice\" style=\"width:8em\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Fixed Renewal Price</td><td><input class=\"prmaxinput\" type=\"text\" name=\"fixed_renewalprice\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"fixed_renewalprice\" style=\"width:8em\" constraints=\"{min:0.01,max:99999.00,fractional:true,places:'0,2'}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Monthly Sales Price</td><td><input class=\"prmaxinput\" type=\"text\" name=\"monthly_salesprice\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"monthly_salesprice\" style=\"width:8em\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Monthly Renewal Price</td><td><input class=\"prmaxinput\" type=\"text\" name=\"monthly_renewalprice\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"monthly_renewalprice\" style=\"width:8em\" constraints=\"{min:0.01,max:99999.00,fractional:true,places:'0,2'}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Concurrent Users</td><td><input class=\"prmaxinput\" type=\"text\" name=\"concurrentusers\" dojoType=\"dijit.form.NumberTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"concurrentusers\" style=\"width:5em\" constraints=\"{min:1,max:200}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Paid Months</td><td><input class=\"prmaxinput\" type=\"text\" name=\"paid_months\" dojoType=\"dijit.form.NumberTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"paid_months\" style=\"width:5em\" constraints=\"{min:1,max:50}\" ></input>\r\n\t\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t\t<tr><td><button type=\"button\" dojoAttachEvent=\"onClick:_Close\" dojoType=\"dijit.form.Button\" label=\"Close\" ></button></td><td align=\"right\"><button type=\"button\" dojoAttachPoint=\"addbtn\" dojoAttachEvent=\"onClick:_Add\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Adding ...\" label=\"Add Price Code\" ></button></td></tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n\t<div dojoType=\"dijit.Dialog\" title=\"Update Price Code\" dojoAttachPoint=\"pricecodeupddialog\">\r\n\t\t<form dojoAttachPoint=\"formupd\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t<input type=\"hidden\" dojoAttachPoint=\"pricecodeid\" name = \"pricecodeid\" dojoType=\"dijit.form.TextBox\" />\r\n\t\t\t<table style=\"width:500px;border-collapse:collapse;\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" width=\"150px\">New Price Code</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"pricecodedescription2\" name = \"pricecodedescription\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:300px\" ></td></tr>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Price Description</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"pricecodelongdescription2\" name = \"pricecodelongdescription\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:300px\" ></td></tr>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Module Type</td><td><select class=\"prmaxinput\" name=\"prmaxmoduleid\" dojoAttachPoint=\"prmaxmoduleid2\" style=\"width:10em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"true\"></select>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Fixed Sales Price</td><td><input class=\"prmaxinput\" type=\"text\" name=\"fixed_salesprice\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"fixed_salesprice2\" style=\"width:8em\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Fixed Renewal Price</td><td><input class=\"prmaxinput\" type=\"text\" name=\"fixed_renewalprice\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"fixed_renewalprice2\" style=\"width:8em\" constraints=\"{min:0.01,max:99999.00,fractional:true,places:'0,2'}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Monthly Sales Price</td><td><input class=\"prmaxinput\" type=\"text\" name=\"monthly_salesprice\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"monthly_salesprice2\" style=\"width:8em\" constraints=\"{min:0.00,max:99999.00,fractional:true,places:'0,2'}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >MOnthly Renewal Price</td><td><input class=\"prmaxinput\" type=\"text\" name=\"monthly_renewalprice\" dojoType=\"dijit.form.CurrencyTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"monthly_renewalprice2\" style=\"width:8em\" constraints=\"{min:0.01,max:99999.00,fractional:true,places:'0,2'}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Concurrent Users</td><td><input class=\"prmaxinput\" type=\"text\" name=\"concurrentusers\" dojoType=\"dijit.form.NumberTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"concurrentusers2\" style=\"width:5em\" constraints=\"{min:1,max:200}\" ></input>\r\n\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Paid Months</td><td><input class=\"prmaxinput\" type=\"text\" name=\"paid_months\" dojoType=\"dijit.form.NumberTextBox\" required=\"true\" trim=\"true\" dojoAttachPoint=\"paid_months2\" style=\"width:5em\" constraints=\"{min:1,max:50}\" ></input>\r\n\t\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t\t<tr><td><button type=\"button\" dojoAttachEvent=\"onClick:_Close2\" dojoType=\"dijit.form.Button\" label=\"Close\" ></button></td><td align=\"right\"><button type=\"button\" dojoAttachPoint=\"updbtn\" dojoAttachEvent=\"onClick:_Update\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Updating ...\" label=\"Update Price Code\" ></button></td></tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._AddPriceCallBack = dojo.hitch(this, this._AddPriceCall);
		this._DeletePriceCallBack = dojo.hitch ( this, this._DeletePriceCall);
		this._UpdatePriceCallBack = dojo.hitch ( this, this._UpdatePriceCall);

		this._pricecodes = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/pricecodes',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true,
			nocallback:true
			});

		this._modules = new dojo.data.ItemFileReadStore ( {url:'/common/lookups?searchtype=prmaxmodules',onError:ttl.utilities.globalerrorchecker, clearOnClose:true, urlPreventCache:true });

	},
	postCreate:function()
	{
		this.inherited(arguments);

		this.view_grid.set("structure",this.view);
		this.view_grid._setStore(this._pricecodes);
		this.view_grid['onRowClick'] = dojo.hitch(this,this._OnSelectRow);
		this.prmaxmoduleid.store = this._modules;
		this.prmaxmoduleid2.store = this._modules;
	},
	_OnSelectRow : function(e)
	{
		this._row = this.view_grid.getItem(e.rowIndex);
		if ( e.cellIndex  == 9)
		{
			if ( confirm("Delete Price Code " + this._row.i.pricecodedescription + "?"))
			{
				dojo.xhrPost(
					ttl.utilities.makeParams({
					load: this._DeletePriceCallBack,
					url:'/iadmin/pricecode_delete',
					content: { pricecodeid: this._row.i.pricecodeid}}));
			}
		}
		else if ( e.cellIndex == 10 )
		{
			this.pricecodedescription2.set("value", this._row.i.pricecodedescription);
			this.pricecodelongdescription2.set("value", this._row.i.pricecodelongdescription);
			this.pricecodeid.set("value", this._row.i.pricecodeid);
			this.prmaxmoduleid2.set("value", this._row.i.prmaxmoduleid);
			this.fixed_salesprice2.set("value", this._row.i.fixed_salesprice);
			this.fixed_renewalprice2.set("value", this._row.i.fixed_renewalprice);
			this.monthly_salesprice2.set("value", this._row.i.monthly_salesprice);
			this.monthly_renewalprice2.set("value", this._row.i.monthly_renewalprice);
			this.concurrentusers2.set("value", this._row.i.concurrentusers);
			this.paid_months2.set("value", this._row.i.paid_months);

			this.pricecodeupddialog.show();
		}
		this.view_grid.selection.clickSelectEvent(e);
	},
	view:{noscroll: false,
			cells: [[
			{name: 'Price Code',width: "200px",field:'pricecodedescription'},
			{name: 'Description',width: "200px",field:'pricecodelongdescription'},
			{name: 'Module',width: "100px",field:'prmaxmoduledescription'},
			{name: 'Fixed Renewal Price',width: "5em",field:'fixed_renewalprice', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money},
			{name: 'Fixed Sales Price',width: "5em",field:'fixed_salesprice', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money},
			{name: 'Monthly Renewal Price',width: "5em",field:'monthly_renewalprice', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money},
			{name: 'Monthly Sales Price',width: "5em",field:'monthly_salesprice', styles: 'text-align: right;padding-right:2px;',formatter:ttl.utilities.Display_Money},
			{name: 'Con. Users',width: "5em",field:'concurrentusers', styles: 'text-align: right;padding-right:2px;'},
			{name: 'Paid Months',width: "5em",field:'paid_months', styles: 'text-align: right;padding-right:2px;'},
			{name: ' ',width: "2em",field:'pricecodeid',formatter:ttl.utilities.deleteRowCtrl},
			{name: ' ',width: "2em",field:'pricecodeid',formatter:ttl.utilities.formatRowCtrl}
		]]
	},
	resize:function()
	{
		this.borderControl.resize ( arguments[0] ) ;
		this.inherited(arguments);

	},
	_New:function()
	{
		this.pricecodedescription.set("value","");
		this.pricecodelongdescription.set("value","");
		this.prmaxmoduleid.set("value",1);
		this.fixed_salesprice.set("value",0.0);
		this.fixed_renewalprice.set("value",0.0);
		this.monthly_salesprice.set("value",0.0);
		this.monthly_renewalprice.set("value",0.0);
		this.concurrentusers.set("value",1);
		this.paid_months.set("value",12)
		this.pricecodedialog.show();
		this.pricecodedescription.focus();
	},
	_Close:function()
	{
		this.pricecodedialog.hide();
	},
	_Add:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._AddPriceCallBack,
			url:'/iadmin/pricecode_add',
			content:this.form.get("value")}));
	},
	_AddPriceCall:function( response )
	{
		if ( response.success == "OK")
		{
			this._pricecodes.newItem( response.data );
			this._Close();
			this.pricecodedescription.set("value","");
			this.pricecodelongdescription.set("value","");
		}
		else if ( response.success == "DU")
		{
			alert("Already exists");
		}
		else
		{
			alert("Problem Adding");
		}

		this.addbtn.cancel();
	},
	_DeletePriceCall:function( response )
	{
		if ( response.success == "OK")
		{
			this._pricecodes.deleteItem( this._row )
		}
		else
		{
			alert("Problem Deleting (Probably in use)");
		}
	},
	_UpdatePriceCall:function( response )
	{
		if ( response.success == "OK")
		{
			this._pricecodes.setValue(this._row, "pricecodedescription" , response.data.pricecodedescription, true ) ;
			this._pricecodes.setValue(this._row, "pricecodelongdescription" , response.data.pricecodelongdescription, true ) ;
			this._pricecodes.setValue(this._row, "prmaxmoduledescription" , response.data.prmaxmoduledescription, true ) ;
			this._pricecodes.setValue(this._row, "fixed_salesprice" , response.data.fixed_salesprice, true ) ;
			this._pricecodes.setValue(this._row, "fixed_renewalprice" , response.data.fixed_renewalprice, true ) ;
			this._pricecodes.setValue(this._row, "monthly_salesprice" , response.data.monthly_salesprice, true ) ;
			this._pricecodes.setValue(this._row, "monthly_renewalprice" , response.data.monthly_renewalprice, true ) ;
			this._pricecodes.setValue(this._row, "concurrentusers", response.data.concurrentusers,true);
			this._pricecodes.setValue(this._row, "paid_months", response.data.paid_months,true);

			this._Close2();
		}
		else if ( response.success == "DU")
		{
			alert("Already Exists");
			this.pricecodedescription2.focus();
		}
		else
		{
			alert("Problem Adding");
		}

		this.updbtn.cancel();
	},
	_Update:function()
	{
		if (ttl.utilities.formValidator( this.formupd ) == false )
		{
			this.updbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._UpdatePriceCallBack,
			url:'/iadmin/pricecode_update',
			content:this.formupd.get("value")}));
	},
	_Close2:function()
	{
		this.pricecodeupddialog.hide();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.accounts.Diary"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.Diary"] = true;
dojo.provide("prmax.iadmin.accounts.Diary");




dojo.declare("prmax.iadmin.accounts.Diary",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div dojoAttachPoint=\"borderControl\" dojotype=\"dijit.layout.BorderContainer\" style=\"width:100%;height:100%\" gutters=\"false\">\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"top\" style=\"height:42px;width:100%;overflow:hidden;border:1px solid black\">\r\n\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left:height:100%;width:100%\" >\r\n\t\t\t\t<div dojoType=\"dijit.form.DropDownButton\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\">\r\n\t\t\t\t\t<span>Filter By</span>\r\n\t\t\t\t\t<div dojoType=\"dijit.TooltipDialog\" title=\"Filter\" dojoAttachEvent=\"execute: _ExecuteFilter\">\r\n\t\t\t\t\t\t<table width=\"500px\">\r\n\t\t\t\t\t\t\t<tr><td><label >Owner</label></td><td><select dojoAttachPoint=\"userfilter\" name=\"iuserid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></tr>\r\n\t\t\t\t\t\t\t<tr><td><label >Task</label></td><td><select dojoAttachPoint=\"tasktypefilter\" name=\"tasktypeid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></tr>\r\n\t\t\t\t\t\t\t<tr><td><label >Status</label></td><td><select name=\"taskstatusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"taskstatusfilter\" ></select></td></tr>\r\n\t\t\t\t\t\t\t<tr><td><label >Dairy Types</label></td><td><select name=\"tasktagid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"tasktagfilter\" ></select></td></tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td align=\"left\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_ClearFilter\">Clear Filter by</button></td>\r\n\t\t\t\t\t\t\t\t<td align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"submit\" name=\"submit\">Filter by</button></td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\" dojoAttachEvent=\"onClick:_NewTask\">New</div>\r\n\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\" dojoAttachEvent=\"onClick:_Refresh\">Refresh</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div dojoAttachPoint=\"details_container\" dojoType=\"dijit.layout.StackContainer\" style=\"width:40%;height:100%\" region=\"right\"  splitter=\"true\" doLayout=\"true\" style=\"border:1px solid black\">\r\n\t\t\t<div dojoType=\"dijit.layout.ContentPane\" title=\"blank\" dojoAttachPoint=\"blank_view\" selected ></div>\r\n\t\t\t<div dojoType=\"dijit.layout.ContentPane\" title=\"details_view\" dojoAttachPoint=\"details_view\">\r\n\t\t\t\t<div dojoType=\"dijit.TitlePane\" title=\"Prospect Trial\" style=\"width: 100%\" >\r\n\t\t\t\t\t<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t<input type=\"hidden\" dojoAttachPoint=\"taskid\" name=\"taskid\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t\t\t<table width=\"99%\" class=\"prmaxtable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"padding-top:5px\">\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Status</td><td><select name=\"taskstatusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"taskstatusid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Due Date</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"due_date\" name=\"due_date\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\" ></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Owner</td><td><select class=\"prmaxrequired\" required=\"true\" dojoAttachPoint=\"assigntoid\" name=\"assigntoid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Diary Type</td><td><select class=\"prmaxrequired\" required=\"true\" dojoAttachPoint=\"tasktagid\" name=\"tasktagid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Reason</td><td ><div class=\"stdframe prmaxrequired\" style=\"height:150px;\" ><textarea class=\"prmaxrequired\" dojoAttachPoint=\"reason\" name=\"reason\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.Textarea\" style=\"width:99%;height:80%\" ></textarea></div></td></tr>\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\" align=\"right\"><button dojoType=\"dojox.form.BusyButton\" dojoAttachPoint=\"updbtn\" busyLabel=\"Updating...\" dojoAttachEvent=\"onClick:_Update\" label=\"Update\"><td></tr>\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div dojoType=\"dijit.TitlePane\" title=\"Notes\" style=\"width: 100%\" >\r\n\t\t\t\t\t<div  dojoType=\"prmax.crm.viewer\" dojoAttachPoint=\"crmviewer\" region=\"center\" contacthistorysourceid_default=\"2\" taskview=\"true\" style=\"width:100%;height:300px\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div dojotype=\"dijit.layout.ContentPane\" region=\"center\"  splitter=\"true\">\r\n\t\t\t<div dojoAttachPoint=\"view_grid\" dojoType=\"dojox.grid.DataGrid\"   query=\"{ }\" rowsPerPage=\"30\" ></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div dojoType=\"dijit.Dialog\" title=\"New Task\" dojoAttachPoint=\"newtaskdialog\">\r\n\t\t<div dojoAttachPoint=\"newtaskctrl\" dojoType=\"prmax.iadmin.TaskAdd\" ></div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._tasks = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/tasks?group=accounts',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});

		this._taskstatusfilter =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=taskstatus&nofilter"});
		this._userfilter = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=users&group=accounts&nofilter"});
		this._tasktypefilter =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=tasktype&nofilter"});
		this._tasktagfilter = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=tasktags&group=accounts&nofilter"});


		this._users = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=users&group=sales,accounts"});
		this._taskstatus =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=taskstatus"});
		this._tasktags = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=tasktags&group=accounts"});


		this._UpdatedCallBack = dojo.hitch ( this, this._UpdatedCall ) ;
		this._getModelItemBack = dojo.hitch ( this, this._getModelItem );
		this._LoadCustomerCall = dojo.hitch( this, this._LoadCustomer );
	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.view_grid.set("structure", this._view);
		this.view_grid._setStore ( this._tasks );
		this.view_grid["onRowClick"] = dojo.hitch(this, this._OnSelectRow );
		this.view_grid['onStyleRow'] = dojo.hitch(this,this._OnStyleRow);

		this.taskstatusid.store = this._taskstatus;
		this.assigntoid.store = this._users;
		this.tasktagid.store = this._tasktags;


		this.taskstatusfilter.store = this._taskstatusfilter;
		this.userfilter.store = this._userfilter;
		this.tasktypefilter.store = this._tasktypefilter;
		this.tasktagfilter.store = this._tasktagfilter;

		this.taskstatusfilter.set("value",-1);
		this.userfilter.set("value",-1);
		this.tasktypefilter.set("value",-1);
		this.tasktagfilter.set("value",-1);

	},
	_OnStyleRow:function(inRow)
	{
		var rowData = this.view_grid.getItem(inRow.index);
		if (rowData && rowData.i.isoverdue == true)
		{
			inRow.customClasses += " prmaxOverDueRow";
		}

		ttl.GridHelpers.onStyleRow(inRow);
	},
	_OnSelectRow : function(e) {

		this._row = this.view_grid.getItem(e.rowIndex);

		this.crmviewer.LoadControls( null, null, null, this._row.i.customerid, this._row.i.taskid );

		this.taskstatusid.set("value",this._row.i.taskstatusid);
		this.due_date.set("value", ttl.utilities.parseDate ( this._row.i.due_date_full) );
		this.assigntoid.set("value", this._row.i.userid);
		this.taskid.set("value", this._row.i.taskid);
		this.tasktagid.set("value", this._row.i.tasktagid);
		this.reason.set("value","");

		this.details_container.selectChild ( this.details_view );

		this.view_grid.selection.clickSelectEvent(e);

	},
	resize:function()
	{
		this.borderControl.resize(arguments[0]);
		this.inherited(arguments);
	},
	_ClearFilter:function()
	{
		this.taskstatusfilter.set("value",-1);
		this.userfilter.set("value",-1);
		this.tasktypefilter.set("value",-1);
		this.overdue.set("checked", false ) ;
		this.tasktagfilter.set("value", -1 ) ;
	},

	_view : { noscroll: false,
		cells: [[
		{name: ' ',width: "2em",field:'customerid'},
		{name: 'Customer Name',width: "200px",field:'customername'},
		{name: 'Contact Name',width: "150px",field:'contactname'},
		{name: 'Tel.',width: "100px",field:'tel'},
		{name: 'Owner',width: "150px",field:'user_name'},
		{name: 'Date',width: "60px",field:'due_date_display'},
		{name: 'Status',width: "80px",field:'taskstatusdescription'},
		{name: 'Type',width: "80px",field:'tasktypedescription'},
		{name: 'Diary Type',width: "80px",field:'tasktagdescription'},
		{name: 'Subject',width: "150px",field:'subject'}
		]]
	},
	_ExecuteFilter:function()
	{
		var query = {};

		if ( arguments[0].iuserid != -1 )
			query["iuserid"] = arguments[0].iuserid;
		if (arguments[0].tasktypeid != -1 )
			query["tasktypeid"] = arguments[0].tasktypeid;
		if (arguments[0].taskstatusid != -1 )
			query["taskstatusid"] = arguments[0].taskstatusid;
		if (arguments[0].tasktagid != -1 )
			query["tasktagid"] = arguments[0].tasktagid;

		console.log ( arguments ) ;

		this.view_grid.setQuery(ttl.utilities.getPreventCache(query));
		this.details_container.selectChild ( this.blank_view );
	},
	_SetExpire:function()
	{
		this.expirectrl.Load( this._row.i.customerid, this._row.i.taskid );
	},
	_SendConfirmation:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadCustomerCall,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._row.i.customerid}
			}));
	},
	_LoadCustomer:function( response )
	{
		if ( response.success == "OK" )
		{
			this.sendorderconfirmationctrl.setCustomer (
				response.data.cust.customerid,
				response.data.cust.customername,
				response.data.cust.email,
				this.sendorderconfirmationdialog,
				response.data.cust.isadvancedemo) ;

			this.sendorderconfirmationdialog.show();
		}
		else
		{
			alert("Problem Loading Customer Details");
		}
	},
	_UpdatedCall:function( response )
	{
		if ( response.success == "OK")
		{
			this.crmviewer.refresh ( this._row.i.taskid ) ;
			this.tmp_row = null;

			var item  = {
				identity:response.task.taskid,
				onItem: this._getModelItemBack
				};

			this._tasks.fetchItemByIdentity(item);

			if ( this.tmp_row != null )
			{
				this._tasks.setValue(  this.tmp_row, "tasktypedescription" , response.task.tasktypedescription, true );
				this._tasks.setValue(  this.tmp_row, "taskstatusdescription" , response.task.taskstatusdescription, true );
				this._tasks.setValue(  this.tmp_row, "due_date_display" , response.task.due_date_display, true );
			}

			this.reason.set("value","");
			alert("Updated");
		}
		else
		{
			alert("Problem");
		}
		this.updbtn.cancel();
	},
	_getModelItem:function()
	{
		if ( arguments[0].i.i !=null )
			this.tmp_row = arguments[0].i;
		else
			this.tmp_row = arguments[0];
	},
	_Update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.updbtn.cancel();
			return false;
		}

		if ( this.reason.get("value").length == 0 )
		{
			alert("Please Enter Details");
			this.updbtn.cancel();
			this.reason.focus();
			return false;
		}

		var content = this.form.get("value");

		content["due_date"] = ttl.utilities.toJsonDate ( this.due_date.get("value") ) ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._UpdatedCallBack),
			url:'/iadmin/task_update',
			content:content}));
	},
	_NewTask:function()
	{
		this.newtaskctrl.Load ( "accounts", this.newtaskdialog, this._tasks);
		this.newtaskdialog.show();
	},
	_Refresh:function()
	{
		this.view_grid.setQuery(ttl.utilities.getPreventCache({}));
		this.details_container.selectChild ( this.blank_view );

	}
});

}

if(!dojo._hasResource["dojox.grid.enhanced._Events"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.enhanced._Events"] = true;
dojo.provide("dojox.grid.enhanced._Events");

dojo.declare("dojox.grid.enhanced._Events", null, {
	// summary:
	//		Overwrite some default events of DataGrid
	//
	// description:
	//		Methods are copied or replaced for overwriting, this might be refined once
	//		an overall plugin architecture is set up for DataGrid.

	//_events: Object
	//		Method map cached from dojox.grid._Events().
	_events: null,

	// headerCellActiveClass: String
	//		css class to apply to grid header cells when activated(mouse down)
	headerCellActiveClass: 'dojoxGridHeaderActive',
	
	// cellActiveClass: String
	//		css class to apply to grid content cells when activated(mouse down)
	cellActiveClass: 'dojoxGridCellActive',
	
	// rowActiveClass: String
	//		css class to apply to grid rows when activated(mouse down)
	rowActiveClass: 'dojoxGridRowActive',

	constructor: function(inGrid){
		//get the default Grid events
		this._events = new dojox.grid._Events();
		//for methods that won't be overwritten, copy them to "this" scope
		for(var p in this._events){
			if(!this[p]){
				this.p = this._events.p;
			}
		}
		//mixin "this" to Grid
		inGrid.mixin(inGrid, this);
	},
	dokeyup: function(e){
		// summary:
		//		Grid key up event handler.
		// e: Event
		//		Un-decorated event object
		this.focus.currentArea().keyup(e);
	},
	onKeyDown: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onKeyDown();
		if(e.altKey || e.metaKey){ return; }
		var dk = dojo.keys;
		var focus = this.focus;
		switch(e.keyCode){
			case dk.TAB:
				if(e.ctrlKey){ return; }
				focus.tab(e.shiftKey ? -1:1,e);
				break;
			case dk.UP_ARROW:
			case dk.DOWN_ARROW:
				focus.currentArea().move(e.keyCode == dk.UP_ARROW ? -1 : 1, 0, e);
				break;
			case dk.LEFT_ARROW:
			case dk.RIGHT_ARROW:
				var offset = (e.keyCode == dk.LEFT_ARROW) ? 1 : -1;
				if(dojo._isBodyLtr()){ offset *= -1; }
				focus.currentArea().move(0, offset, e);
				break;
			case dk.F10:
				if(this.menus && e.shiftKey){
					this.onRowContextMenu(e);
				}
				break;
			default:
				focus.currentArea().keydown(e);
				break;
		}
	},
	//TODO - make the following events more reasonalble - e.g. more accurate conditions
	//events for row selectors
	domouseup: function(e){
		if(e.cellNode){
			this.onMouseUp(e);
		}else{
			this.onRowSelectorMouseUp(e);
		}
	},
	domousedown: function(e){
		if(!e.cellNode){
			this.onRowSelectorMouseDown(e);
		}
	},
	onMouseUp: function(e){
		// summary:
		//		New - Event fired when mouse is up inside grid.
		// e: Event
		//		Decorated event object that contains reference to grid, cell, and rowIndex
		this[e.rowIndex == -1 ? "onHeaderCellMouseUp" : "onCellMouseUp"](e);
	},
	onCellMouseDown: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onCellMouseDown()
		dojo.addClass(e.cellNode, this.cellActiveClass);
		dojo.addClass(e.rowNode, this.rowActiveClass);
	},
	onCellMouseUp: function(e){
		// summary:
		//		New - Event fired when mouse is up inside content cell.
		// e: Event
		//		Decorated event object that contains reference to grid, cell, and rowIndex
		dojo.removeClass(e.cellNode, this.cellActiveClass);
		dojo.removeClass(e.rowNode, this.rowActiveClass);
	},
	onCellClick: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onCellClick()

		//invoke dojox.grid._Events.onCellClick()
		this._events.onCellClick.call(this, e);
		//move mouse events to the focus manager.
		this.focus.contentMouseEvent(e);//TODO
	},
	onCellDblClick: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onCellDblClick()
		if(this.pluginMgr.isFixedCell(e.cell)){ return; }
		if(this._click.length > 1 && (!this._click[0] || !this._click[1])){
			this._click[0] = this._click[1] = e;
		}
		//invoke dojox.grid._Events.onCellDblClick()
		this._events.onCellDblClick.call(this, e);
		//now focus.setFocusCell need isEditing info, so call it after that is set.
		//this.focus.setFocusCell(e.cell, e.rowIndex);
	},
	onRowClick: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onRowClick()
		this.edit.rowClick(e);
		if(!e.cell || (!e.cell.isRowSelector && (!this.rowSelectCell || !this.rowSelectCell.disabled(e.rowIndex)))){
			this.selection.clickSelectEvent(e);
		}
	},
	onRowContextMenu: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onRowContextMenu()
		if(!this.edit.isEditing() && this.menus){
			this.showMenu(e);
		}
	},
	onSelectedRegionContextMenu: function(e){
		// summary:
		//		New - Event fired when a selected region context menu is accessed via mouse right click.
		// e: Event
		//		Decorated event object which contains reference to grid and info of selected
		//		regions(selection type - row|column, selected index - [...])
		if(this.selectedRegionMenu){
			this.selectedRegionMenu._openMyself({
				target: e.target,
				coords: e.keyCode !== dojo.keys.F10 && "pageX" in e ? {
					x: e.pageX,
					y: e.pageY
				} : null
			});
			dojo.stopEvent(e);
		}
	},
	onHeaderCellMouseOut: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onHeaderCellMouseOut()
		if(e.cellNode){
			dojo.removeClass(e.cellNode, this.cellOverClass);
			dojo.removeClass(e.cellNode, this.headerCellActiveClass);
		}
	},
	onHeaderCellMouseDown: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onHeaderCellMouseDown()
		if(e.cellNode){//TBD - apply to selection region for nested sorting?
			dojo.addClass(e.cellNode, this.headerCellActiveClass);
		}
	},
	onHeaderCellMouseUp: function(e){
		// summary:
		//		New event
		if(e.cellNode){
			dojo.removeClass(e.cellNode, this.headerCellActiveClass);
		}
	},
	onHeaderCellClick: function(e){
		// summary:
		//		Overwritten, see dojox.grid._Events.onHeaderCellClick()
		//move focus to header.
		this.focus.currentArea("header");
		//invoke dojox.grid._Events.onHeaderCellClick()
		if(!e.cell.isRowSelector){
			this._events.onHeaderCellClick.call(this, e);
		}
		//move mouse events to the focus manager.
		this.focus.headerMouseEvent(e);
	},
	onRowSelectorMouseDown: function(e){
		this.focus.focusArea("rowHeader", e);
	},
	
	onRowSelectorMouseUp: function(e){},
	
	//triggered in _View, see Selector plugin
	onMouseUpRow: function(e){
		if(e.rowIndex != -1){
			this.onRowMouseUp(e);
		}
	},
	onRowMouseUp: function(e){}
});

}

if(!dojo._hasResource["dojox.grid.enhanced._FocusManager"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.enhanced._FocusManager"] = true;
dojo.provide("dojox.grid.enhanced._FocusManager");

dojo.declare("dojox.grid.enhanced._FocusArea",null,{
	// summary:
	//		This is a friend class of _FocusManager
/*=====
		// name: string
		//		Name of this area.
		name: "",
		
		// onFocus: function(event, step)
		//		Called when this area logically gets focus.
		//		event: Event object
		//				May be unavailable, should check before use.
		//		step: Integer
		//				The distance in the tab sequence from last focused area to this area.
		//		returns:
		//				whether this area is successfully focused. If not, the next area will get focus.
		onFocus: function(event, step){return true;},
		
		// onBlur: function(event, step)
		//		Called when this area logically loses focus.
		//		event: Event object
		//				May be unavailable, should check before use.
		//		step: Integer
		//				The distance in the tab sequence from this area to the area to focus.
		//		returns:
		//				If Boolean, means whether this area has successfully blurred. If not, the next area to focus is still this one.
		//				If String, means the next area to focus is given by this returned name.
		onBlur: function(event, step){return true;},
		
		// onMove: function(rowStep, colStep, event)
		//		Called when focus is moving around within this area.
		//		rowStep: Integer
		//		colStep: Integer
		//		event: Event object
		//				May be unavailable, should check before use.
		onMove: function(rowStep, colStep, event){},
		
		// onKey: function(event, isBubble)
		//		Called when some key is pressed when focus is logically in this area.
		//		event: Event object
		//		isBubble: Boolean
		//				Whether is in bubble stage (true) or catch stage (false).
		//		returns:
		//				If you do NOT want the event to propagate any further along the area stack, return exactly false.
		//				So if you return nothing (undefined), this event is still propagating.
		onKey: function(event, isBubble){return true},
		
		// getRegions: function()
		//		Define the small regions (dom nodes) in this area.
		//		returns: Array of dom nodes.
		getRegions: function(){},
		
		// onRegionFocus: function(event)
		//		Connected to the onfocus event of the defined regions (if any)
		onRegionFocus: function(event){},
		
		// onRegionBlur: function(event)
		//		Connected to the onblur event of the defined regions (if any)
		onRegionBlur: function(event){},
=====*/
	constructor: function(area, focusManager){
		this._fm = focusManager;
		this._evtStack = [area.name];
		var dummy = function(){return true;};
		area.onFocus = area.onFocus || dummy;
		area.onBlur = area.onBlur || dummy;
		area.onMove = area.onMove || dummy;
		area.onKeyUp = area.onKeyUp || dummy;
		area.onKeyDown = area.onKeyDown || dummy;
		dojo.mixin(this, area);
	},
	move: function(rowStep, colStep, evt){
		if(this.name){
			var i, len = this._evtStack.length;
			for(i = len - 1; i >= 0; --i){
				if(this._fm._areas[this._evtStack[i]].onMove(rowStep, colStep, evt) === false){
					return false;
				}
			}
		}
		return true;
	},
	_onKeyEvent: function(evt, funcName){
		if(this.name){
			var i, len = this._evtStack.length;
			for(i = len - 1; i >= 0; --i){
				if(this._fm._areas[this._evtStack[i]][funcName](evt, false) === false){
					return false;
				}
			}
			for(i = 0; i < len; ++i){
				if(this._fm._areas[this._evtStack[i]][funcName](evt, true) === false){
					return false;
				}
			}
		}
		return true;
	},
	keydown: function(evt){
		return this._onKeyEvent(evt, "onKeyDown");
	},
	keyup: function(evt){
		return this._onKeyEvent(evt, "onKeyUp");
	},
	contentMouseEventPlanner: function(){
		return 0;
	},
	headerMouseEventPlanner: function(){
		return 0;
	}
});
dojo.declare("dojox.grid.enhanced._FocusManager", dojox.grid._FocusManager, {
	_stopEvent: function(evt){
		try{
			if(evt && evt.preventDefault){
				dojo.stopEvent(evt);
			}
		}catch(e){}
	},
	
	constructor: function(grid){
		this.grid = grid;
		this._areas = {};
		this._areaQueue = [];
		this._contentMouseEventHandlers = [];
		this._headerMouseEventHandlers = [];
		this._currentAreaIdx = -1;
		this._gridBlured = true;
		this._connects.push(dojo.connect(grid, "onBlur", this, "_doBlur"));
		this._connects.push(dojo.connect(grid.scroller, "renderPage", this, "_delayedCellFocus"));
		
		this.addArea({
			name: "header",
			onFocus: dojo.hitch(this, this.focusHeader),
			onBlur: dojo.hitch(this, this._blurHeader),
			onMove: dojo.hitch(this, this._navHeader),
			getRegions: dojo.hitch(this, this._findHeaderCells),
			onRegionFocus: dojo.hitch(this, this.doColHeaderFocus),
			onRegionBlur: dojo.hitch(this, this.doColHeaderBlur),
			onKeyDown: dojo.hitch(this, this._onHeaderKeyDown)
		});
		this.addArea({
			name: "content",
			onFocus: dojo.hitch(this, this._focusContent),
			onBlur: dojo.hitch(this, this._blurContent),
			onMove: dojo.hitch(this, this._navContent),
			onKeyDown: dojo.hitch(this, this._onContentKeyDown)
		});
		this.addArea({
			name: "editableCell",
			onFocus: dojo.hitch(this, this._focusEditableCell),
			onBlur: dojo.hitch(this, this._blurEditableCell),
			onKeyDown: dojo.hitch(this, this._onEditableCellKeyDown),
			onContentMouseEvent: dojo.hitch(this, this._onEditableCellMouseEvent),
			contentMouseEventPlanner: function(evt, areas){ return -1; }
		});
		this.placeArea("header");
		this.placeArea("content");
		this.placeArea("editableCell");
		this.placeArea("editableCell","above","content");
	},
	destroy: function(){
		for(var name in this._areas){
			var area = this._areas[name];
			dojo.forEach(area._connects, dojo.disconnect);
			area._connects = null;
			if(area.uninitialize){
				area.uninitialize();
			}
		}
		this.inherited(arguments);
	},
	addArea: function(area){
		if(area.name && dojo.isString(area.name)){
			if(this._areas[area.name]){
				//Just replace the original area, instead of remove it, so the position does not change.
				dojo.forEach(area._connects, dojo.disconnect);
			}
			this._areas[area.name] = new dojox.grid.enhanced._FocusArea(area, this);
			if(area.onHeaderMouseEvent){
				this._headerMouseEventHandlers.push(area.name);
			}
			if(area.onContentMouseEvent){
				this._contentMouseEventHandlers.push(area.name);
			}
		}
	},
	getArea: function(areaName){
		return this._areas[areaName];
	},
	_bindAreaEvents: function(){
		var area, hdl, areas = this._areas;
		dojo.forEach(this._areaQueue, function(name){
			area = areas[name];
			if(!area._initialized && dojo.isFunction(area.initialize)){
				area.initialize();
				area._initialized = true;
			}
			if(area.getRegions){
				area._regions = area.getRegions() || [];
				dojo.forEach(area._connects || [], dojo.disconnect);
				area._connects = [];
				dojo.forEach(area._regions, function(r){
					if(area.onRegionFocus){
						hdl = dojo.connect(r, "onfocus", area.onRegionFocus);
						area._connects.push(hdl);
					}
					if(area.onRegionBlur){
						hdl = dojo.connect(r, "onblur", area.onRegionBlur);
						area._connects.push(hdl);
					}
				});
			}
		});
	},
	removeArea: function(areaName){
		var area = this._areas[areaName];
		if(area){
			this.ignoreArea(areaName);
			var i = dojo.indexOf(this._contentMouseEventHandlers, areaName);
			if(i >= 0){
				this._contentMouseEventHandlers.splice(i, 1);
			}
			i = dojo.indexOf(this._headerMouseEventHandlers, areaName);
			if(i >= 0){
				this._headerMouseEventHandlers.splice(i, 1);
			}
			dojo.forEach(area._connects, dojo.disconnect);
			if(area.uninitialize){
				area.uninitialize();
			}
			delete this._areas[areaName];
		}
	},
	currentArea: function(areaName, toBlurOld){
		// summary:
		//		Set current area to the one areaName refers.
		// areaName: String
		var idx, cai = this._currentAreaIdx;
		if(dojo.isString(areaName) && (idx = dojo.indexOf(this._areaQueue, areaName)) >= 0){
			if(cai != idx){
				this.tabbingOut = false;
				if(toBlurOld && cai >= 0 && cai < this._areaQueue.length){
					this._areas[this._areaQueue[cai]].onBlur();
				}
				this._currentAreaIdx = idx;
			}
		}else{
			return (cai < 0 || cai >= this._areaQueue.length) ?
				new dojox.grid.enhanced._FocusArea({}, this) :
				this._areas[this._areaQueue[this._currentAreaIdx]];
		}
		return null;
	},
	placeArea: function(name, pos, otherAreaName){
		// summary:
		//		Place the area refered by *name* at some logical position relative to an existing area.
		// example:
		//		placeArea("myarea","before"|"after",...)
		//		placeArea("myarea","below"|"above",...)
		if(!this._areas[name]){ return; }
		var idx = dojo.indexOf(this._areaQueue,otherAreaName);
		switch(pos){
			case "after":
				if(idx >= 0){ ++idx; }
				//intentional drop through
			case "before":
				if(idx >= 0){
					this._areaQueue.splice(idx,0,name);
					break;
				}
				//intentional drop through
			default:
				this._areaQueue.push(name);
				break;
			case "above":
				var isAbove = true;
				//intentional drop through
			case "below":
				var otherArea = this._areas[otherAreaName];
				if(otherArea){
					if(isAbove){
						otherArea._evtStack.push(name);
					}else{
						otherArea._evtStack.splice(0,0,name);
					}
				}
		}
	},
	ignoreArea: function(name){
		this._areaQueue = dojo.filter(this._areaQueue,function(areaName){
			return areaName != name;
		});
	},
	focusArea: function(/* int|string|areaObj */areaId,evt){
		var idx;
		if(typeof areaId == "number"){
			idx = areaId < 0 ? this._areaQueue.length + areaId : areaId;
		}else{
			idx = dojo.indexOf(this._areaQueue,
				dojo.isString(areaId) ? areaId : (areaId && areaId.name));
		}
		if(idx < 0){ idx = 0; }
		var step = idx - this._currentAreaIdx;
		this._gridBlured = false;
		if(step){
			this.tab(step, evt);
		}else{
			this.currentArea().onFocus(evt, step);
		}
	},
	tab: function(step,evt){
		//console.log("===========tab",step,"curArea",this._currentAreaIdx,"areaCnt",this._areaQueue.length);
		this._gridBlured = false;
		this.tabbingOut = false;
		if(step === 0){
			return;
		}
		var cai = this._currentAreaIdx;
		var dir = step > 0 ? 1:-1;
		if(cai < 0 || cai >= this._areaQueue.length){
			cai = (this._currentAreaIdx += step);
		}else{
			var nextArea = this._areas[this._areaQueue[cai]].onBlur(evt,step);
			if(nextArea === true){
				cai = (this._currentAreaIdx += step);
			}else if(dojo.isString(nextArea) && this._areas[nextArea]){
				cai = this._currentAreaIdx = dojo.indexOf(this._areaQueue,nextArea);
			}
		}
		//console.log("target area:",cai);
		for(; cai >= 0 && cai < this._areaQueue.length; cai += dir){
			this._currentAreaIdx = cai;
			if(this._areaQueue[cai] && this._areas[this._areaQueue[cai]].onFocus(evt,step)){
				//console.log("final target area:",this._currentAreaIdx);
				return;
			}
		}
		//console.log("tab out");
		this.tabbingOut = true;
		if(step < 0){
			this._currentAreaIdx = -1;
			dijit.focus(this.grid.domNode);
		}else{
			this._currentAreaIdx = this._areaQueue.length;
			dijit.focus(this.grid.lastFocusNode);
		}
	},
	_onMouseEvent: function(type, evt){
		var lowercase = type.toLowerCase(),
			handlers = this["_" + lowercase + "MouseEventHandlers"],
			res = dojo.map(handlers, function(areaName){
				return {
					"area": areaName,
					"idx": this._areas[areaName][lowercase + "MouseEventPlanner"](evt, handlers)
				};
			}, this).sort(function(a, b){
				return b.idx - a.idx;
			}),
			resHandlers = dojo.map(res, function(handler){
				return res.area;
			}),
			i = res.length;
		while(--i >= 0){
			if(this._areas[res[i].area]["on" + type + "MouseEvent"](evt, resHandlers) === false){
				return;
			}
		}
	},
	contentMouseEvent: function(evt){
		this._onMouseEvent("Content", evt);
	},
	headerMouseEvent: function(evt){
		this._onMouseEvent("Header", evt);
	},
	initFocusView: function(){
		// summary:
		//		Overwritten
		this.focusView = this.grid.views.getFirstScrollingView() || this.focusView || this.grid.views.views[0];
		this._bindAreaEvents();
	},
	isNavHeader: function(){
		// summary:
		//		Overwritten
		//		Check whether currently navigating among column headers.
		// return:
		//		true - focus is on a certain column header | false otherwise
		return this._areaQueue[this._currentAreaIdx] == "header";
	},
	previousKey: function(e){
		// summary:
		//		Overwritten
		this.tab(-1,e);
	},
	nextKey: function(e){
		// summary:
		//		Overwritten
		this.tab(1,e);
	},
	setFocusCell: function(/* Object */inCell, /* Integer */inRowIndex){
		// summary:
		//		Overwritten - focuses the given grid cell
		if(inCell){
			this.currentArea(this.grid.edit.isEditing() ? "editableCell" : "content", true);
			//This is very slow when selecting cells!
			//this.focusGridView();
			this._focusifyCellNode(false);
			this.cell = inCell;
			this.rowIndex = inRowIndex;
			this._focusifyCellNode(true);
		}
		this.grid.onCellFocus(this.cell, this.rowIndex);
	},
	doFocus: function(e){
		// summary:
		//		Overwritten
		//		trap focus only for grid dom node
		//		do not focus for scrolling if grid is about to blur
		if(e && e.target == e.currentTarget && !this.tabbingOut){
			if(this._gridBlured){
				this._gridBlured = false;
				if(this._currentAreaIdx < 0 || this._currentAreaIdx >= this._areaQueue.length){
					this.focusArea(0, e);
				}else{
					this.focusArea(this._currentAreaIdx, e);
				}
			}
		}else{
			this.tabbingOut = false;
		}
		dojo.stopEvent(e);
	},
	_doBlur: function(){
		this._gridBlured = true;
	},
	doLastNodeFocus: function(e){
		// summary:
		//		Overwritten
		if(this.tabbingOut){
			this.tabbingOut = false;
		}else{
			this.focusArea(-1, e);
		}
	},
	_delayedHeaderFocus: function(){
		// summary:
		//		Overwritten
		if(this.isNavHeader()){
			this.focusHeader();
		}
	},
	_delayedCellFocus: function(){
		// summary:
		//		Overwritten
		this.currentArea("header", true);
		this.focusArea(this._currentAreaIdx);
	},
	_changeMenuBindNode: function(oldBindNode, newBindNode){
		var hm = this.grid.headerMenu;
		if(hm && this._contextMenuBindNode == oldBindNode){
			hm.unBindDomNode(oldBindNode);
			hm.bindDomNode(newBindNode);
			this._contextMenuBindNode = newBindNode;
		}
	},
	//---------------Header Area------------------------------------------
	focusHeader: function(evt, step){ //need a further look why these changes to parent's
		// summary:
		//		Overwritten
		var didFocus = false;
		this.inherited(arguments);
		if(this._colHeadNode && dojo.style(this._colHeadNode, 'display') != "none"){
			dijit.focus(this._colHeadNode);
			this._stopEvent(evt);
			didFocus = true;
		}
		return didFocus;
	},
	_blurHeader: function(evt,step){
		// summary:
		//		Overwritten
		if(this._colHeadNode){
			dojo.removeClass(this._colHeadNode, this.focusClass);
		}
		dojo.removeAttr(this.grid.domNode,"aria-activedescendant");
		// reset contextMenu onto viewsHeaderNode so right mouse on header will invoke (see focusHeader)
		this._changeMenuBindNode(this.grid.domNode,this.grid.viewsHeaderNode);
		//moved here from nextKey
		this._colHeadNode = this._colHeadFocusIdx = null;
		return true;
	},
	_navHeader: function(rowStep, colStep, evt){
		var colDir = colStep < 0 ? -1 : 1,
			savedIdx = dojo.indexOf(this._findHeaderCells(), this._colHeadNode);
		if(savedIdx >= 0 && (evt.shiftKey && evt.ctrlKey)){
			this.colSizeAdjust(evt, savedIdx, colDir * 5);
			return;
		}
		this.move(rowStep, colStep);
	},
	_onHeaderKeyDown: function(e, isBubble){
		if(isBubble){
			var dk = dojo.keys;
			switch(e.keyCode){
				case dk.ENTER:
				case dk.SPACE:
					var colIdx = this.getHeaderIndex();
					if(colIdx >= 0 && !this.grid.pluginMgr.isFixedCell(e.cell)/*TODO*/){
						this.grid.setSortIndex(colIdx, null, e);
						dojo.stopEvent(e);
					}
					break;
			}
		}
		return true;
	},
	_setActiveColHeader: function(){
		// summary:
		//		Overwritten
		this.inherited(arguments);
		//EDG now will decorate event on header key events, if no focus, the cell will be wrong
		dijit.focus(this._colHeadNode);
	},
	//---------------Content Area------------------------------------------
	findAndFocusGridCell: function(){
		// summary:
		//		Overwritten
		this._focusContent();
	},
	_focusContent: function(evt,step){
		var didFocus = true;
		var isEmpty = (this.grid.rowCount === 0); // If grid is empty this.grid.rowCount == 0
		if(this.isNoFocusCell() && !isEmpty){
			//skip all the hidden cells
			for(var i = 0, cell = this.grid.getCell(0); cell && cell.hidden; cell = this.grid.getCell(++i)){}
			this.setFocusIndex(0, cell ? i : 0);
		}else if(this.cell && !isEmpty){
			if(this.focusView && !this.focusView.rowNodes[this.rowIndex]){
				// if rowNode for current index is undefined (likely as a result of a sort and because of #7304)
				// scroll to that row
				this.grid.scrollToRow(this.rowIndex);
				this.focusGrid();
			}else{
				this.setFocusIndex(this.rowIndex, this.cell.index);
			}
		}else{
			didFocus = false;
		}
		if(didFocus){ this._stopEvent(evt); }
		return didFocus;
	},
	_blurContent: function(evt,step){
		this._focusifyCellNode(false);
		return true;
	},
	_navContent: function(rowStep, colStep, evt){
		if((this.rowIndex === 0 && rowStep < 0) || (this.rowIndex === this.grid.rowCount - 1 && rowStep > 0)){
			return;
		}
		this._colHeadNode = null;
		this.move(rowStep, colStep, evt);
		if(evt){
			dojo.stopEvent(evt);
		}
	},
	_onContentKeyDown: function(e, isBubble){
		if(isBubble){
			var dk = dojo.keys, s = this.grid.scroller;
			switch(e.keyCode){
				case dk.ENTER:
				case dk.SPACE:
					var g = this.grid;
					if(g.indirectSelection){ break; }
					g.selection.clickSelect(this.rowIndex, dojo.isCopyKey(e), e.shiftKey);
					g.onRowClick(e);
					dojo.stopEvent(e);
					break;
				case dk.PAGE_UP:
					if(this.rowIndex !== 0){
						if(this.rowIndex != s.firstVisibleRow + 1){
							this._navContent(s.firstVisibleRow - this.rowIndex, 0);
						}else{
							this.grid.setScrollTop(s.findScrollTop(this.rowIndex - 1));
							this._navContent(s.firstVisibleRow - s.lastVisibleRow + 1, 0);
						}
						dojo.stopEvent(e);
					}
					break;
				case dk.PAGE_DOWN:
					if(this.rowIndex + 1 != this.grid.rowCount){
						dojo.stopEvent(e);
						if(this.rowIndex != s.lastVisibleRow - 1){
							this._navContent(s.lastVisibleRow - this.rowIndex - 1, 0);
						}else{
							this.grid.setScrollTop(s.findScrollTop(this.rowIndex + 1));
							this._navContent(s.lastVisibleRow - s.firstVisibleRow - 1, 0);
						}
						dojo.stopEvent(e);
					}
					break;
			}
		}
		return true;
	},
	//------------------editable content area-------------------------
	_blurFromEditableCell: false,
	_isNavigating: false,
	_navElems: null,
	_focusEditableCell: function(evt,step){
		var didFocus = false;
		if(this._isNavigating){
			didFocus = true;
		}else if(this.grid.edit.isEditing() && this.cell){
			if(this._blurFromEditableCell || !this._blurEditableCell(evt, step)){
				this.setFocusIndex(this.rowIndex,this.cell.index);
				didFocus = true;
			}
			this._stopEvent(evt);
		}
		return didFocus;
	},
	_applyEditableCell: function(){
		try{
			this.grid.edit.apply();
		}catch(e){
			console.warn("_FocusManager._applyEditableCell() error:", e);
		}
	},
	_blurEditableCell: function(evt,step){
		this._blurFromEditableCell = false;
		if(this._isNavigating){
			var toBlur = true;
			if(evt){
				var elems = this._navElems;
				var firstElem = elems.lowest || elems.first;
				var lastElem = elems.last || elems.highest || firstElem;
				var target = dojo.isIE ? evt.srcElement : evt.target;
				toBlur = target == (step > 0 ? lastElem : firstElem);
			}
			if(toBlur){
				this._isNavigating = false;
				return "content";
			}
			return false;
		}else if(this.grid.edit.isEditing() && this.cell){
			if(!step || typeof step != "number"){ return false; }
			var dir = step > 0 ? 1 : -1;
			var cc = this.grid.layout.cellCount;
			for(var cell, col = this.cell.index + dir; col >= 0 && col < cc; col += dir){
				cell = this.grid.getCell(col);
				if(cell.editable){
					this.cell = cell;
					this._blurFromEditableCell = true;
					return false;
				}
			}
			if((this.rowIndex > 0 || dir == 1) && (this.rowIndex < this.grid.rowCount || dir == -1)){
				this.rowIndex += dir;
				//this.cell = this.grid.getCell(0); //There must be an editable cell, so this is not necessary.
				for(col = dir > 0 ? 0 : cc - 1; col >= 0 && col < cc; col += dir){
					cell = this.grid.getCell(col);
					if(cell.editable){
						this.cell = cell;
						break;
					}
				}
				this._applyEditableCell();
				return "content";
			}
		}
		return true;
	},
	_initNavigatableElems: function(){
		this._navElems = dijit._getTabNavigable(this.cell.getNode(this.rowIndex));
	},
	_onEditableCellKeyDown: function(e, isBubble){
		var dk = dojo.keys,
			g = this.grid,
			edit = g.edit,
			editApplied = false,
			toPropagate = true;
		switch(e.keyCode){
			case dk.ENTER:
				if(isBubble && edit.isEditing()){
					this._applyEditableCell();
					editApplied = true;
					dojo.stopEvent(e);
				}
				//intentional drop through
			case dk.SPACE:
				if(!isBubble && this._isNavigating){
					toPropagate = false;
					break;
				}
				if(isBubble){
					if(!this.cell.editable && this.cell.navigatable){
						this._initNavigatableElems();
						var toFocus = this._navElems.lowest || this._navElems.first;
						if(toFocus){
							this._isNavigating = true;
							dijit.focus(toFocus);
							dojo.stopEvent(e);
							this.currentArea("editableCell", true);
							break;
						}
					}
					if(!editApplied && !edit.isEditing() && !g.pluginMgr.isFixedCell(this.cell)){
						edit.setEditCell(this.cell, this.rowIndex);
					}
					if(editApplied){
						this.currentArea("content", true);
					}else if(this.cell.editable && g.canEdit()){
						this.currentArea("editableCell", true);
					}
				}
				break;
			case dk.PAGE_UP:
			case dk.PAGE_DOWN:
				if(!isBubble && edit.isEditing()){
					//prevent propagating to content area
					toPropagate = false;
				}
				break;
			case dk.ESCAPE:
				if(!isBubble){
					edit.cancel();
					this.currentArea("content", true);
				}
		}
		return toPropagate;
	},
	_onEditableCellMouseEvent: function(evt){
		if(evt.type == "click"){
			var cell = this.cell || evt.cell;
			if(cell && !cell.editable && cell.navigatable){
				this._initNavigatableElems();
				if(this._navElems.lowest || this._navElems.first){
					var target = dojo.isIE ? evt.srcElement : evt.target;
					if(target != cell.getNode(evt.rowIndex)){
						this._isNavigating = true;
						this.focusArea("editableCell", evt);
						dijit.focus(target);
						return false;
					}
				}
			}else if(this.grid.singleClickEdit){
				this.currentArea("editableCell");
				return false;
			}
		}
		return true;
	}
});

}

if(!dojo._hasResource["dojox.grid.enhanced._PluginManager"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.enhanced._PluginManager"] = true;
dojo.provide("dojox.grid.enhanced._PluginManager");




dojo.declare("dojox.grid.enhanced._PluginManager", null, {
	// summary:
	//		Singleton plugin manager
	//
	// description:
	//		Plugin manager is responsible for
	//		1. Loading required plugins
	//		2. Handling collaboration and dependencies among plugins
	//
	//      Some plugin dependencies:
	//		- "columnReordering" attribute won't work when either DnD or Indirect Selections plugin is on.
		
	//_options: Object
	//		Normalized plugin options
	_options: null,

	//_plugins: Array
	//		Plugin list
	_plugins: null,

	//_connects: Array
	//		Connection list
	_connects: null,

	constructor: function(inGrid){
		this.grid = inGrid;
		this._store = inGrid.store;
		this._options = {};
		this._plugins = [];
		this._connects = [];
		this._parseProps(this.grid.plugins);
		
		inGrid.connect(inGrid, "_setStore", dojo.hitch(this, function(store){
			if(this._store !== store){
				this.forEach('onSetStore', [store, this._store]);
				this._store = store;
			}
		}));
	},
	startup: function(){
		this.forEach('onStartUp');
	},
	preInit: function(){
		// summary:
		//		Load appropriate plugins before DataGrid.postCreate().
		//		See EnhancedGrid.postCreate()
		this.grid.focus.destroy();
		this.grid.focus = new dojox.grid.enhanced._FocusManager(this.grid);
		new dojox.grid.enhanced._Events(this.grid);//overwrite some default events of DataGrid
		this._init(true);
		this.forEach('onPreInit');
	},
	postInit: function(){
		// summary:
		//		Load plugins after DataGrid.postCreate() - the default phase when plugins are created
		//		See EnhancedGrid.postCreate()
		this._init(false);
		
		dojo.forEach(this.grid.views.views, this._initView, this);
		this._connects.push(dojo.connect(this.grid.views, 'addView', dojo.hitch(this, this._initView)));
			
		if(this._plugins.length > 0){
			var edit = this.grid.edit;
			if(edit){ edit.styleRow = function(inRow){}; }
		}
		this.forEach('onPostInit');
	},
	forEach: function(func, args){
		dojo.forEach(this._plugins, function(p){
			if(!p || !p[func]){ return; }
			p[func].apply(p, args ? args : []);
		});
	},
	_parseProps: function(plugins){
		// summary:
		//		Parse plugins properties
		// plugins: Object
		//		Plugin properties defined by user
		if(!plugins){ return; }
		
		var p, loading = {}, options = this._options, grid = this.grid;
		var registry = dojox.grid.enhanced._PluginManager.registry;//global plugin registry
		for(p in plugins){
			if(plugins[p]){//filter out boolean false e.g. {p:false}
				this._normalize(p, plugins, registry, loading);
			}
		}
		//"columnReordering" attribute won't work when either DnD or Indirect Selections plugin is used.
		if(options.dnd || options.indirectSelection){
			options.columnReordering = false;
		}
		
		//mixin all plugin properties into Grid
		dojo.mixin(grid, options);
	},
	_normalize: function(p, plugins, registry, loading){
		// summary:
		//		Normalize plugin properties especially the dependency chain
		// p: String
		//		Plugin name
		// plugins: Object
		//		Plugin properties set by user
		// registry: Object
		//		The global plugin registry
		// loading: Object
		//		Map for checking process state
		if(!registry[p]){ throw new Error('Plugin ' + p + ' is required.');}
		
		if(loading[p]){ throw new Error('Recursive cycle dependency is not supported.'); }
		
		var options = this._options;
		if(options[p]){ return options[p]; }
		
		loading[p] = true;
		//TBD - more strict conditions?
		options[p] = dojo.mixin({}, registry[p], dojo.isObject(plugins[p]) ? plugins[p] : {});
		
		var dependencies = options[p]['dependency'];
		if(dependencies){
			if(!dojo.isArray(dependencies)){
				dependencies = options[p]['dependency'] = [dependencies];
			}
			dojo.forEach(dependencies, function(dependency){
				if(!this._normalize(dependency, plugins, registry, loading)){
					throw new Error('Plugin ' + dependency + ' is required.');
				}
			}, this);
		}
		delete loading[p];
		return options[p];
	},
	_init: function(pre){
		// summary:
		//		Find appropriate plugins and load them
		// pre: Boolean
		//		True - preInit | False - postInit(by default)
		var p, preInit, options = this._options;
		for(p in options){
			preInit = options[p]['preInit'];
			if((pre ? preInit : !preInit) && options[p]['class'] && !this.pluginExisted(p)){
				this.loadPlugin(p);
			}
		}
	},
	loadPlugin: function(name){
		// summary:
		//		Load required plugin("name")
		// name: String
		//		Plugin name
		// return: Object
		//		The newly loaded plugin
		var option = this._options[name];
		if(!option){ return null; } //return if no plugin option
		
		var plugin = this.getPlugin(name);
		if(plugin){ return plugin; } //return if plugin("name") already existed
		
		var dependencies = option['dependency'];
		dojo.forEach(dependencies, function(dependency){
			if(!this.loadPlugin(dependency)){
				throw new Error('Plugin ' + dependency + ' is required.');
			}
		}, this);
		var cls = option['class'];
		delete option['class'];//remove it for safety
		plugin = new this.getPluginClazz(cls)(this.grid, option);
		this._plugins.push(plugin);
		return plugin;
	},
	_initView: function(view){
		// summary:
		//		Overwrite several default behavior for each views(including _RowSelector view)
		if(!view){ return; }
		//add more events handler - _View
		dojox.grid.util.funnelEvents(view.contentNode, view, "doContentEvent", ['mouseup', 'mousemove']);
		dojox.grid.util.funnelEvents(view.headerNode, view, "doHeaderEvent", ['mouseup']);
	},
	pluginExisted: function(name){
		// summary:
		//		Check if plugin("name") existed
		// name: String
		//		Plugin name
		// return: Boolean
		//		True - existed | False - not existed
		return !!this.getPlugin(name);
	},
	getPlugin: function(name){
		// summary:
		//		Get plugin("name")
		// name: String
		//		Plugin name
		// return: Object
		//		Plugin instance
		var plugins = this._plugins;
		name = name.toLowerCase();
		for(var i = 0, len = plugins.length; i < len; i++){
			if(name == plugins[i]['name'].toLowerCase()){
				return plugins[i];
			}
		}
		return null;
	},
	getPluginClazz: function(clazz){
		// summary:
		//		Load target plugin which must be already required (dojo.require(..))
		// clazz: class | String
		//		Plugin class
		if(dojo.isFunction(clazz)){
			return clazz;//return if it's already a clazz
		}
		var errorMsg = 'Please make sure Plugin "' + clazz + '" is existed.';
		try{
			var cls = dojo.getObject(clazz);
			if(!cls){ throw new Error(errorMsg); }
			return cls;
		}catch(e){
			throw new Error(errorMsg);
		}
	},
	isFixedCell: function(cell){
		// summary:
		//		See if target cell(column) is fixed or not.
		// cell: Object
		//		Target cell(column)
		// return: Boolean
		//		True - fixed| False - not fixed

		//target cell can use Boolean attributes named "isRowSelector" or "fixedPos" to mark it's a fixed cell(column)
		return cell && (cell.isRowSelector || cell.fixedPos);
	},
	destroy: function(){
		// summary:
		//		Destroy all resources
		dojo.forEach(this._connects, dojo.disconnect);
		this.forEach('destroy');
		if(this.grid.unwrap){
			this.grid.unwrap();
		}
		delete this._connects;
		delete this._plugins;
		delete this._options;
	}
});

dojox.grid.enhanced._PluginManager.registerPlugin = function(clazz, props){
		// summary:
		//		Register plugins - TODO, a better way rather than global registry?
		// clazz: String
		//		Full class name, e.g. "dojox.grid.enhanced.plugins.DnD"
		// props: Object - Optional
		//		Plugin properties e.g. {"dependency": ["nestedSorting"], ...}
	if(!clazz){
		console.warn("Failed to register plugin, class missed!");
		return;
	}
	var cls = dojox.grid.enhanced._PluginManager;
	cls.registry = cls.registry || {};
	cls.registry[clazz.prototype.name]/*plugin name*/ = dojo.mixin({"class": clazz}, (props ? props : {}));
};

}

if(!dojo._hasResource["dojox.grid.enhanced.plugins._SelectionPreserver"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.enhanced.plugins._SelectionPreserver"] = true;
dojo.provide("dojox.grid.enhanced.plugins._SelectionPreserver");

dojo.declare("dojox.grid.enhanced.plugins._SelectionPreserver", null, {
	// summary:
	//		Preserve selections across various user actions.
	//
	// description:
	//		When this feature turned on, Grid will try to preserve selections across various user actions, e.g. sorting, filtering etc.
	//		Precondition - Identifier(id) is required for store, as id is used for differentiating row items.
	//		Known issue - The preserved selections might be inaccurate if some unloaded rows are selected by range previously(e.g.SHIFT + click)
	//
	// example:
	// |	//To turn on this - set 'keepSelection' attribute to true
	// |	<div dojoType="dojox.grid.EnhancedGrid" keepSelection = true .../>
	
	//_connects: Array
	//		List of all connections.
	_connects: [],
	
	constructor: function(selection){
		this.selection = selection;
		var grid = this.grid = selection.grid;
		grid.onSelectedById = this.onSelectedById;
		this.reset();

		var oldClearData = grid._clearData;
		var _this = this;
		grid._clearData = function(){
			_this._updateMapping(!grid._noInternalMapping);
			_this._trustSelection = [];
			oldClearData.apply(grid, arguments);
		};
		this.connect(grid, '_setStore', 'reset');
		this.connect(grid, '_addItem', '_reSelectById');
		this.connect(selection, 'addToSelection', dojo.hitch(this, '_selectById', true));
		this.connect(selection, 'deselect', dojo.hitch(this, '_selectById', false));
		this.connect(selection, 'selectRange', dojo.hitch(this, '_updateMapping', true, true, false));
		this.connect(selection, 'deselectRange', dojo.hitch(this, '_updateMapping', true, false, false));
		this.connect(selection, 'deselectAll', dojo.hitch(this, '_updateMapping', true, false, true));
	},
	destroy: function(){
		this.reset();
		dojo.forEach(this._connects, dojo.disconnect);
		delete this._connects;
	},
	connect: function(obj, event, method){
		// summary:
		//		Connects specified obj/event to specified method of this object.
		var conn = dojo.connect(obj, event, this, method);
		this._connects.push(conn);
		return conn;
	},
	reset: function(){
		this._idMap = [];
		this._selectedById = {};
		this._trustSelection = [];
		this._defaultSelected = false;
	},
	_reSelectById: function(item, index){
		// summary:
		//		When some rows is fetched, determine whether it should be selected.
		//		When this function is called, grid.selection.selected[] is not trustable.
		var s = this.selection, g = this.grid;
		if(item && g._hasIdentity){
			var id = g.store.getIdentity(item);
			if(this._selectedById[id] === undefined){
				if(!this._trustSelection[index]){
					s.selected[index] = this._defaultSelected;
				}
			}else{
				s.selected[index] = this._selectedById[id];
			}
			this._idMap.push(id);
			g.onSelectedById(id, index, s.selected[index]);
		}
	},
	_selectById: function(toSelect, inItemOrIndex){
		// summary:
		//		Record selected rows by ID.
		if(this.selection.mode == 'none' || !this.grid._hasIdentity){ return; }
		var item = inItemOrIndex;
		if(typeof inItemOrIndex == "number" || typeof inItemOrIndex == "string"){
			var entry = this.grid._by_idx[inItemOrIndex];
			item = entry && entry.item;
		}
		if(item){
			var id = this.grid.store.getIdentity(item);
			this._selectedById[id] = !!toSelect;
		}else{
			this._trustSelection[inItemOrIndex] = true;
		}
	},
	onSelectedById: function(id, rowIndex, value){},
	
	_updateMapping: function(trustSelection, isSelect, isForAll, from, to){
		// summary:
		//		This function trys to keep the selection info updated when range selection is performed.
		//		1. Calculate how many unloaded rows are there;
		//		2. update _selectedById data if grid.selection._selected can be trusted, so loaded but unselected rows can
		//			be properly recorded.
		var s = this.selection, g = this.grid, flag = 0, unloaded = 0, i, id;
		for(i = g.rowCount - 1; i >= 0; --i){
			if(!g._by_idx[i]){
				++unloaded;
				flag += s.selected[i] ? 1 : -1;
			}else{
				id = g._by_idx[i].idty;
				if(id && (trustSelection || this._selectedById[id] === undefined)){
					this._selectedById[id] = !!s.selected[i];
				}
			}
		}
		if(unloaded){
			this._defaultSelected = flag > 0;
		}
		if(!isForAll && from !== undefined && to !== undefined){
			isForAll = !g.usingPagination && Math.abs(to - from + 1) === g.rowCount;
		}
		// When deselectAll, make sure every thing is deselected, even if it was selected but not loaded now.
		// This occurs only when pagination's "All" is used.
		if(isForAll && !g.usingPagination){
			for(i = this._idMap.length; i >= 0; --i){
				this._selectedById[this._idMap[i]] = isSelect;
			}
		}
	}
});

}

if(!dojo._hasResource["dojox.grid.EnhancedGrid"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.grid.EnhancedGrid"] = true;
dojo.provide("dojox.grid.EnhancedGrid");





dojo.experimental("dojox.grid.EnhancedGrid");

dojo.declare("dojox.grid.EnhancedGrid", dojox.grid.DataGrid, {
	// summary:
	//		Provides enhanced features based on DataGrid
	//
	// description:
	//		EnhancedGrid features are implemented as plugins that could be loaded on demand.
	//		Explicit dojo.require() is needed to use these feature plugins.
	//
	// example:
	//		A quick sample to use EnhancedGrid features:
	//
	//	   Step 1. Load EnhancedGrid and required features
	// |   <script type="text/javascript">
	// |		
	// |		dojo.require("dojox.grid.enhanced.plugins.DnD");
	// |		dojo.require("dojox.grid.enhanced.plugins.Menu");
	// |		dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
	// |		dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
	// |	</script>
	//
	//		Step 2. Use EnhancedGrid
	//		- Via HTML markup
	// |	<div dojoType="dojox.grid.EnhancedGrid" ...
	// |		plugins="{nestedSorting: true, dnd: true, indirectSelection: true,
	// |		menus:{headerMenu:"headerMenuId", rowMenu:"rowMenuId", cellMenu:"cellMenuId",
	// |		selectedRegionMenu:"selectedRegionMenuId"}}">
	// |			...
	// |	</div>
	//
	//		- Or via JavaScript
	// |	<script type="text/javascript">
	// |		var grid = new dojox.grid.EnhancedGrid({plugins : {nestedSorting: true, dnd: true, indirectSelection: true,
	// |	               menus:{headerMenu:"headerMenuId", rowMenu:"rowMenuId", cellMenu:"cellMenuId",selectedRegionMenu:"selectedRegionMenuId"}},
	// |			       ... }, dojo.byId('gridDiv'));
	// |		grid.startup();
	// |	</script>
	//
	//
	//		Plugin Support
	//		[Note: Plugin support is still experimental]
	//
	//		You can either customize the default plugins or add new ones, more details please see
	//		- dojox.grid.enhanced._PluginManager
	//		- dojox.grid.enhanced._Plugin
	//		- dojox.grid.enhanced.plugins.*

	//plugins: Object
	//		Plugin properties, e.g. {nestedSorting: true, dnd: true, ...}
	plugins: null,

	//pluginMgr: Object
	//		Singleton plugin manager
	pluginMgr: null,

	//keepSelection: Boolean
	//		Whether keep selection after sort, filter, pagination etc.
	keepSelection: false,
	
	//_pluginMgrClass: Object
	//		Default plugin manager class
	_pluginMgrClass: dojox.grid.enhanced._PluginManager,

	postMixInProperties: function(){
		//load nls bundle
		this._nls = dojo.i18n.getLocalization("dojox.grid.enhanced", "EnhancedGrid", this.lang);
		this.inherited(arguments);
	},
	postCreate: function(){
		//create plugin manager
		this.pluginMgr = new this._pluginMgrClass(this);
		this.pluginMgr.preInit();
		this.inherited(arguments);
		this.pluginMgr.postInit();
	},
	plugin: function(/*String*/name){
		// summary:
		//		An easier way for getting a plugin, e.g. grid.plugin('dnd')
		return this.pluginMgr.getPlugin(name);
	},
	startup: function(){
		this.inherited(arguments);
		this.pluginMgr.startup();
	},
	createSelection: function(){
		this.selection = new dojox.grid.enhanced.DataSelection(this);
	},
	canSort: function(colIndex, field){
		// summary:
		//		Overwritten
		return true;
	},
	doKeyEvent: function(e){
		// summary:
		//		Overwritten, see _Grid.doKeyEvent()
		try{
			var view = this.focus.focusView;
			view.content.decorateEvent(e);
			if(!e.cell){ view.header.decorateEvent(e); }
		}catch(e){}
		this.inherited(arguments);
	},
	doApplyCellEdit: function(inValue, inRowIndex, inAttrName){
		// summary:
		//		Overwritten, see DataGrid.doApplyCellEdit()
		if(!inAttrName){
			this.invalidated[inRowIndex] = true;
			return;
		}
		this.inherited(arguments);
	},
	mixin: function(target, source){
		var props = {};
		for(var p in source){
			if(p == '_inherited' || p == 'declaredClass' || p == 'constructor' ||
				source['privates'] && source['privates'][p]){
				continue;
			}
			props[p] = source[p];
		}
		dojo.mixin(target, props);
	},
	_copyAttr: function(idx, attr){
		// summary:
		//		Overwritten, see DataGrid._copyAttr()
		//		Fix cell TAB navigation for single click editing
		if(!attr){ return; }
		return this.inherited(arguments);
	},
	_getHeaderHeight: function(){
		// summary:
		//		Overwritten, see _Grid._getHeaderHeight()
		//		Should include borders/margins of this.viewsHeaderNode
		this.inherited(arguments);
		return dojo.marginBox(this.viewsHeaderNode).h;
	},
	_fetch: function(start, isRender){
		// summary:
		//		Overwritten, see DataGrid._fetch()
		if(this.items){
			return this.inherited(arguments);
		}
		start = start || 0;
		if(this.store && !this._pending_requests[start]){
			if(!this._isLoaded && !this._isLoading){
				this._isLoading = true;
				this.showMessage(this.loadingMessage);
			}
			this._pending_requests[start] = true;
			try{
				var req = {
					start: start,
					count: this.rowsPerPage,
					query: this.query,
					sort: this.getSortProps(),
					queryOptions: this.queryOptions,
					isRender: isRender,
					onBegin: dojo.hitch(this, "_onFetchBegin"),
					onComplete: dojo.hitch(this, "_onFetchComplete"),
					onError: dojo.hitch(this, "_onFetchError")
				};
				this._storeLayerFetch(req);
			}catch(e){
				this._onFetchError(e, {start: start, count: this.rowsPerPage});
			}
		}
		return 0;
	},
	_storeLayerFetch: function(req){
		// summary:
		//		Extracted fetch specifically for store layer use
		this.store.fetch(req);
	},
	getCellByField: function(field){
		return dojo.filter(this.layout.cells, function(cell){
			return cell.field == field;
		})[0];
	},
	onMouseUp: function(e){	},
	createView: function(){
		// summary
		//		Overwrite: rewrite getCellX of view.header
		var view = this.inherited(arguments);
		if(dojo.isMoz){
			var ascendDom = function(inNode, inWhile){
				for(var n = inNode; n && inWhile(n); n = n.parentNode){}
				return n;
			};//copied from dojox.grid._Builder
			var makeNotTagName = function(inTagName){
				var name = inTagName.toUpperCase();
				return function(node){ return node.tagName != name; };
			};//copied from dojox.grid._Builder

			var func = view.header.getCellX;
			view.header.getCellX = function(e){
				var x = func.call(view.header, e);
				var n = ascendDom(e.target, makeNotTagName("th"));
				if(n && n !== e.target && dojo.isDescendant(e.target, n)){ x += n.firstChild.offsetLeft; }
				return x;
			};
		}
		return view;
	},
	destroy: function(){
		// summary:
		//		Destroy all resources
		delete this._nls;
		this.selection.destroy();
		this.pluginMgr.destroy();
		this.inherited(arguments);
	}
});

dojo.provide("dojox.grid.enhanced.DataSelection");
//default loaded plugin

dojo.declare("dojox.grid.enhanced.DataSelection", dojox.grid.DataSelection, {
	constructor: function(grid){
		if(grid.keepSelection){
			this.preserver = new dojox.grid.enhanced.plugins._SelectionPreserver(this);
		}
	},
	_range: function(inFrom, inTo){
		this.grid._selectingRange = true;
		this.inherited(arguments);
		this.grid._selectingRange = false;
		this.onChanged();
	},
	deselectAll: function(inItemOrIndex){
		this.grid._selectingRange = true;
		this.inherited(arguments);
		this.grid._selectingRange = false;
		this.onChanged();
	},
	destroy: function(){
		if(this.preserver){
			this.preserver.destroy();
		}
	}
});

dojox.grid.EnhancedGrid.markupFactory = function(props, node, ctor, cellFunc){
	return dojox.grid._Grid.markupFactory(props, node, ctor,
					dojo.partial(dojox.grid.DataGrid.cell_markupFactory, cellFunc));
};

dojox.grid.EnhancedGrid.registerPlugin = function(clazz, props){
	dojox.grid.enhanced._PluginManager.registerPlugin(clazz, props);
};

}

if(!dojo._hasResource["dojox.json.ref"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.json.ref"] = true;
dojo.provide("dojox.json.ref");



dojox.json.ref = {
	// summary:
	// 		Adds advanced JSON {de}serialization capabilities to the base json library.
	// 		This enhances the capabilities of dojo.toJson and dojo.fromJson,
	// 		adding referencing support, date handling, and other extra format handling.
	// 		On parsing, references are resolved. When references are made to
	// 		ids/objects that have been loaded yet, the loader function will be set to
	// 		_loadObject to denote a lazy loading (not loaded yet) object.


	resolveJson: function(/*Object*/ root,/*Object?*/ args){
		// summary:
		// 		Indexes and resolves references in the JSON object.
		// description:
		// 		A JSON Schema object that can be used to advise the handling of the JSON (defining ids, date properties, urls, etc)
		//
		// root:
		//		The root object of the object graph to be processed
		// args:
		//		Object with additional arguments:
		//
		// The *index* parameter.
		//		This is the index object (map) to use to store an index of all the objects.
		// 		If you are using inter-message referencing, you must provide the same object for each call.
		// The *defaultId* parameter.
		//		This is the default id to use for the root object (if it doesn't define it's own id)
		//	The *idPrefix* parameter.
		//		This the prefix to use for the ids as they enter the index. This allows multiple tables
		// 		to use ids (that might otherwise collide) that enter the same global index.
		// 		idPrefix should be in the form "/Service/".  For example,
		//		if the idPrefix is "/Table/", and object is encountered {id:"4",...}, this would go in the
		//		index as "/Table/4".
		//	The *idAttribute* parameter.
		//		This indicates what property is the identity property. This defaults to "id"
		//	The *assignAbsoluteIds* parameter.
		//		This indicates that the resolveJson should assign absolute ids (__id) as the objects are being parsed.
		//
		// The *schemas* parameter
		//		This provides a map of schemas, from which prototypes can be retrieved
		// The *loader* parameter
		//		This is a function that is called added to the reference objects that can't be resolved (lazy objects)
		// return:
		//		An object, the result of the processing
		args = args || {};
		var idAttribute = args.idAttribute || 'id';
		var refAttribute = this.refAttribute;
		var idAsRef = args.idAsRef;
		var prefix = args.idPrefix || '';
		var assignAbsoluteIds = args.assignAbsoluteIds;
		var index = args.index || {}; // create an index if one doesn't exist
		var timeStamps = args.timeStamps;
		var ref,reWalk=[];
		var pathResolveRegex = /^(.*\/)?(\w+:\/\/)|[^\/\.]+\/\.\.\/|^.*\/(\/)/;
		var addProp = this._addProp;
		var F = function(){};
		function walk(it, stop, defaultId, needsPrefix, schema, defaultObject){
			// this walks the new graph, resolving references and making other changes
		 	var i, update, val, id = idAttribute in it ? it[idAttribute] : defaultId;
		 	if(idAttribute in it || ((id !== undefined) && needsPrefix)){
		 		id = (prefix + id).replace(pathResolveRegex,'$2$3');
		 	}
		 	var target = defaultObject || it;
			if(id !== undefined){ // if there is an id available...
				if(assignAbsoluteIds){
					it.__id = id;
				}
				if(args.schemas && (!(it instanceof Array)) && // won't try on arrays to do prototypes, plus it messes with queries
		 					(val = id.match(/^(.+\/)[^\.\[]*$/))){ // if it has a direct table id (no paths)
		 			schema = args.schemas[val[1]];
				}
				// if the id already exists in the system, we should use the existing object, and just
				// update it... as long as the object is compatible
				if(index[id] && ((it instanceof Array) == (index[id] instanceof Array))){
					target = index[id];
					delete target.$ref; // remove this artifact
					delete target._loadObject;
					update = true;
				}else{
				 	var proto = schema && schema.prototype; // and if has a prototype
					if(proto){
						// if the schema defines a prototype, that needs to be the prototype of the object
						F.prototype = proto;
						target = new F();
					}
				}
				index[id] = target; // add the prefix, set _id, and index it
				if(timeStamps){
					timeStamps[id] = args.time;
				}
			}
			while(schema){
				var properties = schema.properties;
				if(properties){
					for(i in it){
						var propertyDefinition = properties[i];
						if(propertyDefinition && propertyDefinition.format == 'date-time' && typeof it[i] == 'string'){
							it[i] = dojo.date.stamp.fromISOString(it[i]);
						}
					}
				}
				schema = schema["extends"];
			}
			var length = it.length;
			for(i in it){
				if(i==length){
					break;
				}
				if(it.hasOwnProperty(i)){
					val=it[i];
					if((typeof val =='object') && val && !(val instanceof Date) && i != '__parent'){
						ref=val[refAttribute] || (idAsRef && val[idAttribute]);
						if(!ref || !val.__parent){
							if(it != reWalk){
								val.__parent = target;
							}
						}
						if(ref){ // a reference was found
							// make sure it is a safe reference
							delete it[i];// remove the property so it doesn't resolve to itself in the case of id.propertyName lazy values
							var path = ref.toString().replace(/(#)([^\.\[])/,'$1.$2').match(/(^([^\[]*\/)?[^#\.\[]*)#?([\.\[].*)?/); // divide along the path
							if(index[(prefix + ref).replace(pathResolveRegex,'$2$3')]){
								ref = index[(prefix + ref).replace(pathResolveRegex,'$2$3')];
							}else if((ref = (path[1]=='$' || path[1]=='this' || path[1]=='') ? root : index[(prefix + path[1]).replace(pathResolveRegex,'$2$3')])){  // a $ indicates to start with the root, otherwise start with an id
								// if there is a path, we will iterate through the path references
								if(path[3]){
									path[3].replace(/(\[([^\]]+)\])|(\.?([^\.\[]+))/g,function(t,a,b,c,d){
										ref = ref && ref[b ? b.replace(/[\"\'\\]/,'') : d];
									});
								}
							}
							if(ref){
								val = ref;
							}else{
								// otherwise, no starting point was found (id not found), if stop is set, it does not exist, we have
								// unloaded reference, if stop is not set, it may be in a part of the graph not walked yet,
								// we will wait for the second loop
								if(!stop){
									var rewalking;
									if(!rewalking){
										reWalk.push(target); // we need to rewalk it to resolve references
									}
									rewalking = true; // we only want to add it once
									val = walk(val, false, val[refAttribute], true, propertyDefinition);
									// create a lazy loaded object
									val._loadObject = args.loader;
								}
							}
						}else{
							if(!stop){ // if we are in stop, that means we are in the second loop, and we only need to check this current one,
								// further walking may lead down circular loops
								val = walk(
									val,
									reWalk==it,
									id === undefined ? undefined : addProp(id, i), // the default id to use
									false,
									propertyDefinition,
									// if we have an existing object child, we want to
									// maintain it's identity, so we pass it as the default object
									target != it && typeof target[i] == 'object' && target[i]
								);
							}
						}
					}
					it[i] = val;
					if(target!=it && !target.__isDirty){// do updates if we are updating an existing object and it's not dirty
						var old = target[i];
						target[i] = val; // only update if it changed
						if(update && val !== old && // see if it is different
								!target._loadObject && // no updates if we are just lazy loading
								!(i.charAt(0) == '_' && i.charAt(1) == '_') && i != "$ref" &&
								!(val instanceof Date && old instanceof Date && val.getTime() == old.getTime()) && // make sure it isn't an identical date
								!(typeof val == 'function' && typeof old == 'function' && val.toString() == old.toString()) && // make sure it isn't an indentical function
								index.onUpdate){
							index.onUpdate(target,i,old,val); // call the listener for each update
						}
					}
				}
			}
	
			if(update && (idAttribute in it || target instanceof Array)){
				// this means we are updating with a full representation of the object, we need to remove deleted
				for(i in target){
					if(!target.__isDirty && target.hasOwnProperty(i) && !it.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && !(target instanceof Array && isNaN(i))){
						if(index.onUpdate && i != "_loadObject" && i != "_idAttr"){
							index.onUpdate(target,i,target[i],undefined); // call the listener for each update
						}
						delete target[i];
						while(target instanceof Array && target.length && target[target.length-1] === undefined){
							// shorten the target if necessary
							target.length--;
						}
					}
				}
			}else{
				if(index.onLoad){
					index.onLoad(target);
				}
			}
			return target;
		}
		if(root && typeof root == 'object'){
			root = walk(root,false,args.defaultId, true); // do the main walk through
			walk(reWalk,false); // re walk any parts that were not able to resolve references on the first round
		}
		return root;
	},


	fromJson: function(/*String*/ str,/*Object?*/ args){
	// summary:
	// 		evaluates the passed string-form of a JSON object.
	//
	// str:
	//		a string literal of a JSON item, for instance:
	//			'{ "foo": [ "bar", 1, { "baz": "thud" } ] }'
	// args: See resolveJson
	//
	// return:
	//		An object, the result of the evaluation
		function ref(target){ // support call styles references as well
			var refObject = {};
			refObject[this.refAttribute] = target;
			return refObject;
		}
		try{
			var root = eval('(' + str + ')'); // do the eval
		}catch(e){
			throw new SyntaxError("Invalid JSON string: " + e.message + " parsing: "+ str);
		}
		if(root){
			return this.resolveJson(root, args);
		}
		return root;
	},
	
	toJson: function(/*Object*/ it, /*Boolean?*/ prettyPrint, /*Object?*/ idPrefix, /*Object?*/ indexSubObjects){
		// summary:
		//		Create a JSON serialization of an object.
		//		This has support for referencing, including circular references, duplicate references, and out-of-message references
		// 		id and path-based referencing is supported as well and is based on http://www.json.com/2007/10/19/json-referencing-proposal-and-library/.
		//
		// it:
		//		an object to be serialized.
		//
		// prettyPrint:
		//		if true, we indent objects and arrays to make the output prettier.
		//		The variable dojo.toJsonIndentStr is used as the indent string
		//		-- to use something other than the default (tab),
		//		change that variable before calling dojo.toJson().
		//
		// idPrefix: The prefix that has been used for the absolute ids
		//
		// return:
		//		a String representing the serialized version of the passed object.
		var useRefs = this._useRefs;
		var addProp = this._addProp;
		var refAttribute = this.refAttribute;
		idPrefix = idPrefix || ''; // the id prefix for this context
		var paths={};
		var generated = {};
		function serialize(it,path,_indentStr){
			if(typeof it == 'object' && it){
				var value;
				if(it instanceof Date){ // properly serialize dates
					return '"' + dojo.date.stamp.toISOString(it,{zulu:true}) + '"';
				}
				var id = it.__id;
				if(id){ // we found an identifiable object, we will just serialize a reference to it... unless it is the root
					if(path != '#' && ((useRefs && !id.match(/#/)) || paths[id])){
						var ref = id;
						if(id.charAt(0)!='#'){
							if(it.__clientId == id){
								ref = "cid:" + id;
							}else if(id.substring(0, idPrefix.length) == idPrefix){ // see if the reference is in the current context
								// a reference with a prefix matching the current context, the prefix should be removed
								ref = id.substring(idPrefix.length);
							}else{
								// a reference to a different context, assume relative url based referencing
								ref = id;
							}
						}
						var refObject = {};
						refObject[refAttribute] = ref;
						return serialize(refObject,'#');
					}
					path = id;
				}else{
					it.__id = path; // we will create path ids for other objects in case they are circular
					generated[path] = it;
				}
				paths[path] = it;// save it here so they can be deleted at the end
				_indentStr = _indentStr || "";
				var nextIndent = prettyPrint ? _indentStr + dojo.toJsonIndentStr : "";
				var newLine = prettyPrint ? "\n" : "";
				var sep = prettyPrint ? " " : "";
	
				if(it instanceof Array){
					var res = dojo.map(it, function(obj,i){
						var val = serialize(obj, addProp(path, i), nextIndent);
						if(typeof val != "string"){
							val = "undefined";
						}
						return newLine + nextIndent + val;
					});
					return "[" + res.join("," + sep) + newLine + _indentStr + "]";
				}
	
				var output = [];
				for(var i in it){
					if(it.hasOwnProperty(i)){
						var keyStr;
						if(typeof i == "number"){
							keyStr = '"' + i + '"';
						}else if(typeof i == "string" && (i.charAt(0) != '_' || i.charAt(1) != '_')){
							// we don't serialize our internal properties __id and __clientId
							keyStr = dojo._escapeString(i);
						}else{
							// skip non-string or number keys
							continue;
						}
						var val = serialize(it[i],addProp(path, i),nextIndent);
						if(typeof val != "string"){
							// skip non-serializable values
							continue;
						}
						output.push(newLine + nextIndent + keyStr + ":" + sep + val);
					}
				}
				return "{" + output.join("," + sep) + newLine + _indentStr + "}";
			}else if(typeof it == "function" && dojox.json.ref.serializeFunctions){
				return it.toString();
			}
	
			return dojo.toJson(it); // use the default serializer for primitives
		}
		var json = serialize(it,'#','');
		if(!indexSubObjects){
			for(var i in generated)  {// cleanup the temporary path-generated ids
				delete generated[i].__id;
			}
		}
		return json;
	},
	_addProp: function(id, prop){
		return id + (id.match(/#/) ? id.length == 1 ? '' : '.' : '#') + prop;
	},
	//	refAttribute: String
	//		This indicates what property is the reference property. This acts like the idAttribute
	// 		except that this is used to indicate the current object is a reference or only partially
	// 		loaded. This defaults to "$ref".
	refAttribute: "$ref",
	_useRefs: false,
	serializeFunctions: false
}

}

if(!dojo._hasResource["dojox.rpc.Rest"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.rpc.Rest"] = true;
dojo.provide("dojox.rpc.Rest");


// Note: This doesn't require dojox.rpc.Service, and if you want it you must require it
// yourself, and you must load it prior to dojox.rpc.Rest.

// summary:
// 		This provides a HTTP REST service with full range REST verbs include PUT,POST, and DELETE.
// description:
// 		A normal GET query is done by using the service directly:
// 		| var restService = dojox.rpc.Rest("Project");
// 		| restService("4");
//		This will do a GET for the URL "/Project/4".
//		| restService.put("4","new content");
//		This will do a PUT to the URL "/Project/4" with the content of "new content".
//		You can also use the SMD service to generate a REST service:
// 		| var services = dojox.rpc.Service({services: {myRestService: {transport: "REST",...
// 		| services.myRestService("parameters");
//
// 		The modifying methods can be called as sub-methods of the rest service method like:
//  	| services.myRestService.put("parameters","data to put in resource");
//  	| services.myRestService.post("parameters","data to post to the resource");
//  	| services.myRestService['delete']("parameters");
	if(dojox.rpc && dojox.rpc.transportRegistry){
		// register it as an RPC service if the registry is available
		dojox.rpc.transportRegistry.register(
			"REST",
			function(str){return str == "REST";},
			{
				getExecutor : function(func,method,svc){
					return new dojox.rpc.Rest(
						method.name,
						(method.contentType||svc._smd.contentType||"").match(/json|javascript/), // isJson
						null,
						function(id, args){
							var request = svc._getRequest(method,[id]);
							request.url= request.target + (request.data ? '?'+  request.data : '');
							if(args && (args.start >= 0 || args.count >= 0)){
								request.headers = request.headers || {};
								request.headers.Range = "items=" + (args.start || '0') + '-' +
									(("count" in args && args.count != Infinity) ?
										(args.count + (args.start || 0) - 1) : '');
							}
							return request;
						}
					);
				}
			}
		);
	}
	var drr;

	function index(deferred, service, range, id){
		deferred.addCallback(function(result){
			if(deferred.ioArgs.xhr && range){
					// try to record the total number of items from the range header
					range = deferred.ioArgs.xhr.getResponseHeader("Content-Range");
					deferred.fullLength = range && (range=range.match(/\/(.*)/)) && parseInt(range[1]);
			}
			return result;
		});
		return deferred;
	}
	drr = dojox.rpc.Rest = function(/*String*/path, /*Boolean?*/isJson, /*Object?*/schema, /*Function?*/getRequest){
		// summary:
		//		Creates a REST service using the provided path.
		var service;
		// it should be in the form /Table/
		service = function(id, args){
			return drr._get(service, id, args);
		};
		service.isJson = isJson;
		service._schema = schema;
		// cache:
		//		This is an object that provides indexing service
		// 		This can be overriden to take advantage of more complex referencing/indexing
		// 		schemes
		service.cache = {
			serialize: isJson ? ((dojox.json && dojox.json.ref) || dojo).toJson : function(result){
				return result;
			}
		};
		// the default XHR args creator:
		service._getRequest = getRequest || function(id, args){
			if(dojo.isObject(id)){
				id = dojo.objectToQuery(id);
				id = id ? "?" + id: "";
			}
			if(args && args.sort && !args.queryStr){
				id += (id ? "&" : "?") + "sort="
				for(var i = 0; i<args.sort.length; i++){
					var sort = args.sort[i];
					id += (i > 0 ? "," : "") + (sort.descending ? '-' : '+') + encodeURIComponent(sort.attribute);
				}
			}
			var request = {
				url: path + (id == null ? "" : id),
				handleAs: isJson ? 'json' : 'text',
				contentType: isJson ? 'application/json' : 'text/plain',
				preventCache:true,
				sync: dojox.rpc._sync,
				headers: {
					Accept: isJson ? 'application/json,application/javascript' : '*/*'
				}
			};
			if(args && (args.start >= 0 || args.count >= 0)){
				request.headers.Range = "items=" + (args.start || '0') + '-' +
					(("count" in args && args.count != Infinity) ?
						(args.count + (args.start || 0) - 1) : '');
			}
			dojox.rpc._sync = false;
			return request;
		};
		// each calls the event handler
		function makeRest(name){
			service[name] = function(id,content){
				return drr._change(name,service,id,content); // the last parameter is to let the OfflineRest know where to store the item
			};
		}
		makeRest('put');
		makeRest('post');
		makeRest('delete');
		// record the REST services for later lookup
		service.servicePath = path;
		return service;
	};

	drr._index={};// the map of all indexed objects that have gone through REST processing
	drr._timeStamps={};
	// these do the actual requests
	drr._change = function(method,service,id,content){
		// this is called to actually do the put, post, and delete
		var request = service._getRequest(id);
		request[method+"Data"] = content;
		return index(dojo.xhr(method.toUpperCase(),request,true),service);
	};

	drr._get= function(service,id, args){
		args = args || {};
		// this is called to actually do the get
		return index(dojo.xhrGet(service._getRequest(id, args)), service, (args.start >= 0 || args.count >= 0), id);
	};

}

if(!dojo._hasResource["dojox.rpc.JsonRest"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.rpc.JsonRest"] = true;
dojo.provide("dojox.rpc.JsonRest");




	var dirtyObjects = [];
	var Rest = dojox.rpc.Rest;
	var jr;
	function resolveJson(service, deferred, value, defaultId){
		var timeStamp = deferred.ioArgs && deferred.ioArgs.xhr && deferred.ioArgs.xhr.getResponseHeader("Last-Modified");
		if(timeStamp && Rest._timeStamps){
			Rest._timeStamps[defaultId] = timeStamp;
		}
		var hrefProperty = service._schema && service._schema.hrefProperty;
		if(hrefProperty){
			dojox.json.ref.refAttribute = hrefProperty;
		}
		value = value && dojox.json.ref.resolveJson(value, {
			defaultId: defaultId,
			index: Rest._index,
			timeStamps: timeStamp && Rest._timeStamps,
			time: timeStamp,
			idPrefix: service.servicePath.replace(/[^\/]*$/,''),
			idAttribute: jr.getIdAttribute(service),
			schemas: jr.schemas,
			loader:	jr._loader,
			idAsRef: service.idAsRef,
			assignAbsoluteIds: true
		});
		dojox.json.ref.refAttribute  = "$ref";
		return value;
	}
	jr = dojox.rpc.JsonRest={
		serviceClass: dojox.rpc.Rest,
		conflictDateHeader: "If-Unmodified-Since",
		commit: function(kwArgs){
			// summary:
			//		Saves the dirty data using REST Ajax methods

			kwArgs = kwArgs || {};
			var actions = [];
			var alreadyRecorded = {};
			var savingObjects = [];
			for(var i = 0; i < dirtyObjects.length; i++){
				var dirty = dirtyObjects[i];
				var object = dirty.object;
				var old = dirty.old;
				var append = false;
				if(!(kwArgs.service && (object || old) &&
						(object || old).__id.indexOf(kwArgs.service.servicePath)) && dirty.save){
					delete object.__isDirty;
					if(object){
						if(old){
							// changed object
							var pathParts;
							if((pathParts = object.__id.match(/(.*)#.*/))){ // it is a path reference
								// this means it is a sub object, we must go to the parent object and save it
								object = Rest._index[pathParts[1]];
							}
							if(!(object.__id in alreadyRecorded)){// if it has already been saved, we don't want to repeat it
								// record that we are saving
								alreadyRecorded[object.__id] = object;
								if(kwArgs.incrementalUpdates
									&& !pathParts){ // I haven't figured out how we would do incremental updates on sub-objects yet
									// make an incremental update using a POST
									var incremental = (typeof kwArgs.incrementalUpdates == 'function' ?
										kwArgs.incrementalUpdates : function(){
											incremental = {};
											for(var j in object){
												if(object.hasOwnProperty(j)){
													if(object[j] !== old[j]){
														incremental[j] = object[j];
													}
												}else if(old.hasOwnProperty(j)){
													// we can't use incremental updates to remove properties
													return null;
												}
											}
											return incremental;
										})(object, old);
								}
								
								if(incremental){
									actions.push({method:"post",target:object, content: incremental});
								}
								else{
									actions.push({method:"put",target:object,content:object});
								}
							}
						}else{
							// new object
							var service = jr.getServiceAndId(object.__id).service;
							var idAttribute = jr.getIdAttribute(service);
							if((idAttribute in object) && !kwArgs.alwaysPostNewItems){
								// if the id attribute is specified, then we should know the location
								actions.push({method:"put",target:object, content:object});
							}else{
								actions.push({method:"post",target:{__id:service.servicePath},
														content:object});
							}
						}
					}else if(old){
						// deleted object
						actions.push({method:"delete",target:old});
					}//else{ this would happen if an object is created and then deleted, don't do anything
					savingObjects.push(dirty);
					dirtyObjects.splice(i--,1);
				}
			}
			dojo.connect(kwArgs,"onError",function(){
				if(kwArgs.revertOnError !== false){
					var postCommitDirtyObjects = dirtyObjects;
					dirtyObjects = savingObjects;
					var numDirty = 0; // make sure this does't do anything if it is called again
					jr.revert(); // revert if there was an error
					dirtyObjects = postCommitDirtyObjects;
				}
				else{
					dirtyObjects = dirtyObject.concat(savingObjects);
				}
			});
			jr.sendToServer(actions, kwArgs);
			return actions;
		},
		sendToServer: function(actions, kwArgs){
			var xhrSendId;
			var plainXhr = dojo.xhr;
			var left = actions.length;// this is how many changes are remaining to be received from the server
			var i, contentLocation;
			var timeStamp;
			var conflictDateHeader = this.conflictDateHeader;
			// add headers for extra information
			dojo.xhr = function(method,args){
				// keep the transaction open as we send requests
				args.headers = args.headers || {};
				// the last one should commit the transaction
				args.headers['Transaction'] = actions.length - 1 == i ? "commit" : "open";
				if(conflictDateHeader && timeStamp){
					args.headers[conflictDateHeader] = timeStamp;
				}
				if(contentLocation){
					args.headers['Content-ID'] = '<' + contentLocation + '>';
				}
				return plainXhr.apply(dojo,arguments);
			};
			for(i =0; i < actions.length;i++){ // iterate through the actions to execute
				var action = actions[i];
				dojox.rpc.JsonRest._contentId = action.content && action.content.__id; // this is used by OfflineRest
				var isPost = action.method == 'post';
				timeStamp = action.method == 'put' && Rest._timeStamps[action.content.__id];
				if(timeStamp){
					// update it now
					Rest._timeStamps[action.content.__id] = (new Date()) + '';
				}
				// send the content location to the server
				contentLocation = isPost && dojox.rpc.JsonRest._contentId;
				var serviceAndId = jr.getServiceAndId(action.target.__id);
				var service = serviceAndId.service;
				var dfd = action.deferred = service[action.method](
									serviceAndId.id.replace(/#/,''), // if we are using references, we need eliminate #
									dojox.json.ref.toJson(action.content, false, service.servicePath, true)
								);
				(function(object, dfd, service){
					dfd.addCallback(function(value){
						try{
							// Implements id assignment per the HTTP specification
							var newId = dfd.ioArgs.xhr && dfd.ioArgs.xhr.getResponseHeader("Location");
							//TODO: match URLs if the servicePath is relative...
							if(newId){
								// if the path starts in the middle of an absolute URL for Location, we will use the just the path part
								var startIndex = newId.match(/(^\w+:\/\/)/) && newId.indexOf(service.servicePath);
								newId = startIndex > 0 ? newId.substring(startIndex) : (service.servicePath + newId).
										// now do simple relative URL resolution in case of a relative URL.
										replace(/^(.*\/)?(\w+:\/\/)|[^\/\.]+\/\.\.\/|^.*\/(\/)/,'$2$3');
								object.__id = newId;
								Rest._index[newId] = object;
							}
							value = resolveJson(service, dfd, value, object && object.__id);
						}catch(e){}
						if(!(--left)){
							if(kwArgs.onComplete){
								kwArgs.onComplete.call(kwArgs.scope, actions);
							}
						}
						return value;
					});
				})(action.content, dfd, service);
								
				dfd.addErrback(function(value){
					
					// on an error we want to revert, first we want to separate any changes that were made since the commit
					left = -1; // first make sure that success isn't called
					kwArgs.onError.call(kwArgs.scope, value);
				});
			}
			// revert back to the normal XHR handler
			dojo.xhr = plainXhr;
			
		},
		getDirtyObjects: function(){
			return dirtyObjects;
		},
		revert: function(service){
			// summary:
			//		Reverts all the changes made to JSON/REST data
			for(var i = dirtyObjects.length; i > 0;){
				i--;
				var dirty = dirtyObjects[i];
				var object = dirty.object;
				var old = dirty.old;
				var store = dojox.data._getStoreForItem(object || old);
				
				if(!(service && (object || old) &&
					(object || old).__id.indexOf(service.servicePath))){
					// if we are in the specified store or if this is a global revert
					if(object && old){
						// changed
						for(var j in old){
							if(old.hasOwnProperty(j) && object[j] !== old[j]){
								if(store){
									store.onSet(object, j, object[j], old[j]);
								}
								object[j] = old[j];
							}
						}
						for(j in object){
							if(!old.hasOwnProperty(j)){
								if(store){
									store.onSet(object, j, object[j]);
								}
								delete object[j];
							}
						}
					}else if(!old){
						// was an addition, remove it
						if(store){
							store.onDelete(object);
						}
					}else{
						// was a deletion, we will add it back
						if(store){
							store.onNew(old);
						}
					}
					delete (object || old).__isDirty;
					dirtyObjects.splice(i, 1);
				}
			}
		},
		changing: function(object,_deleting){
			// summary:
			//		adds an object to the list of dirty objects.  This object
			//		contains a reference to the object itself as well as a
			//		cloned and trimmed version of old object for use with
			//		revert.
			if(!object.__id){
				return;
			}
			object.__isDirty = true;
			//if an object is already in the list of dirty objects, don't add it again
			//or it will overwrite the premodification data set.
			for(var i=0; i<dirtyObjects.length; i++){
				var dirty = dirtyObjects[i];
				if(object==dirty.object){
					if(_deleting){
						// we are deleting, no object is an indicator of deletiong
						dirty.object = false;
						if(!this._saveNotNeeded){
							dirty.save = true;
						}
					}
					return;
				}
			}
			var old = object instanceof Array ? [] : {};
			for(i in object){
				if(object.hasOwnProperty(i)){
					old[i] = object[i];
				}
			}
			dirtyObjects.push({object: !_deleting && object, old: old, save: !this._saveNotNeeded});
		},
		deleteObject: function(object){
			// summary:
			//		deletes an object
			//	object:
			//  	object to delete
			this.changing(object,true);
		},
		getConstructor: function(/*Function|String*/service, schema){
			// summary:
			// 		Creates or gets a constructor for objects from this service
			if(typeof service == 'string'){
				var servicePath = service;
				service = new dojox.rpc.Rest(service,true);
				this.registerService(service, servicePath, schema);
			}
			if(service._constructor){
				return service._constructor;
			}
			service._constructor = function(data){
				// summary:
				//		creates a new object for this table
				//
				//	data:
				//		object to mixed in
				var self = this;
				var args = arguments;
				var properties;
				var initializeCalled;
				function addDefaults(schema){
					if(schema){
						addDefaults(schema['extends']);
						properties = schema.properties;
						for(var i in properties){
							var propDef = properties[i];
							if(propDef && (typeof propDef == 'object') && ("default" in propDef)){
								self[i] = propDef["default"];
							}
						}
					}
					if(schema && schema.prototype && schema.prototype.initialize){
						initializeCalled = true;
						schema.prototype.initialize.apply(self, args);
					}
				}
				addDefaults(service._schema);
				if(!initializeCalled && data && typeof data == 'object'){
					dojo.mixin(self,data);
				}
				var idAttribute = jr.getIdAttribute(service);
				Rest._index[this.__id = this.__clientId =
						service.servicePath + (this[idAttribute] ||
							Math.random().toString(16).substring(2,14) + '@' + ((dojox.rpc.Client && dojox.rpc.Client.clientId) || "client"))] = this;
				if(dojox.json.schema && properties){
					dojox.json.schema.mustBeValid(dojox.json.schema.validate(this, service._schema));
				}
				dirtyObjects.push({object:this, save: true});
			};
			return dojo.mixin(service._constructor, service._schema, {load:service});
		},
		fetch: function(absoluteId){
			// summary:
			//		Fetches a resource by an absolute path/id and returns a dojo.Deferred.
			var serviceAndId = jr.getServiceAndId(absoluteId);
			return this.byId(serviceAndId.service,serviceAndId.id);
		},
		getIdAttribute: function(service){
			// summary:
			//		Return the ids attribute used by this service (based on it's schema).
			//		Defaults to "id", if not other id is defined
			var schema = service._schema;
			var idAttr;
			if(schema){
				if(!(idAttr = schema._idAttr)){
					for(var i in schema.properties){
						if(schema.properties[i].identity || (schema.properties[i].link == "self")){
							schema._idAttr = idAttr = i;
						}
					}
				}
			}
			return idAttr || 'id';
		},
		getServiceAndId: function(/*String*/absoluteId){
			// summary:
			//		Returns the REST service and the local id for the given absolute id. The result
			// 		is returned as an object with a service property and an id property
			//	absoluteId:
			//		This is the absolute id of the object
			var serviceName = '';
			
			for(var service in jr.services){
				if((absoluteId.substring(0, service.length) == service) && (service.length >= serviceName.length)){
					serviceName = service;
				}
			}
			if (serviceName){
				return {service: jr.services[serviceName], id:absoluteId.substring(serviceName.length)};
			}
			var parts = absoluteId.match(/^(.*\/)([^\/]*)$/);
			return {service: new jr.serviceClass(parts[1], true), id:parts[2]};
		},
		services:{},
		schemas:{},
		registerService: function(/*Function*/ service, /*String*/ servicePath, /*Object?*/ schema){
			//	summary:
			//		Registers a service for as a JsonRest service, mapping it to a path and schema
			//	service:
			//		This is the service to register
			//	servicePath:
			//		This is the path that is used for all the ids for the objects returned by service
			//	schema:
			//		This is a JSON Schema object to associate with objects returned by this service
			servicePath = service.servicePath = servicePath || service.servicePath;
			service._schema = jr.schemas[servicePath] = schema || service._schema || {};
			jr.services[servicePath] = service;
		},
		byId: function(service, id){
			// if caching is allowed, we look in the cache for the result
			var deferred, result = Rest._index[(service.servicePath || '') + id];
			if(result && !result._loadObject){// cache hit
				deferred = new dojo.Deferred();
				deferred.callback(result);
				return deferred;
			}
			return this.query(service, id);
		},
		query: function(service, id, args){
			var deferred = service(id, args);
			
			deferred.addCallback(function(result){
				if(result.nodeType && result.cloneNode){
					// return immediately if it is an XML document
					return result;
				}
				return resolveJson(service, deferred, result, typeof id != 'string' || (args && (args.start || args.count)) ? undefined: id);
			});
			return deferred;
		},
		_loader: function(callback){
			// load a lazy object
			var serviceAndId = jr.getServiceAndId(this.__id);
			var self = this;
			jr.query(serviceAndId.service, serviceAndId.id).addBoth(function(result){
				// if they are the same this means an object was loaded, otherwise it
				// might be a primitive that was loaded or maybe an error
				if(result == self){
					// we can clear the flag, so it is a loaded object
					delete result.$ref;
					delete result._loadObject;
				}else{
					// it is probably a primitive value, we can't change the identity of an object to
					//	the loaded value, so we will keep it lazy, but define the lazy loader to always
					//	return the loaded value
					self._loadObject = function(callback){
						callback(result);
					};
				}
				callback(result);
			});
		},
		isDirty: function(item){
			// summary
			//		returns true if the item is marked as dirty or true if there are any dirty items
			if(!item){
				return !!dirtyObjects.length;
			}
			return item.__isDirty;
		}
		
	};

}

if(!dojo._hasResource["dojox.data.ServiceStore"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.data.ServiceStore"] = true;
dojo.provide("dojox.data.ServiceStore");



// note that dojox.rpc.Service is not required, you can create your own services

// A ServiceStore is a readonly data store that provides a data.data interface to an RPC service.
// var myServices = new dojox.rpc.Service(dojo.moduleUrl("dojox.rpc.tests.resources", "test.smd"));
// var serviceStore = new dojox.data.ServiceStore({service:myServices.ServiceStore});
//
// The ServiceStore also supports lazy loading. References can be made to objects that have not been loaded.
//	For example if a service returned:
// {"name":"Example","lazyLoadedObject":{"$ref":"obj2"}}
//
// And this object has accessed using the dojo.data API:
// var obj = serviceStore.getValue(myObject,"lazyLoadedObject");
// The object would automatically be requested from the server (with an object id of "obj2").
//

dojo.declare("dojox.data.ServiceStore",
	// ClientFilter is intentionally not required, ServiceStore does not need it, and is more
	// lightweight without it, but if it is provided, the ServiceStore will use it.
	dojox.data.ClientFilter||null,{
		service: null,
		constructor: function(options){
			//summary:
			//		ServiceStore constructor, instantiate a new ServiceStore
			// 		A ServiceStore can be configured from a JSON Schema. Queries are just
			// 		passed through to the underlying services
			//
			// options:
			// 		Keyword arguments
			// The *schema* parameter
			//		This is a schema object for this store. This should be JSON Schema format.
			//
			// The *service* parameter
			// 		This is the service object that is used to retrieve lazy data and save results
			// 		The function should be directly callable with a single parameter of an object id to be loaded
			//
			// The *idAttribute* parameter
			//		Defaults to 'id'. The name of the attribute that holds an objects id.
			//		This can be a preexisting id provided by the server.
			//		If an ID isn't already provided when an object
			//		is fetched or added to the store, the autoIdentity system
			//		will generate an id for it and add it to the index.
			//
			// The *estimateCountFactor* parameter
			// 		This parameter is used by the ServiceStore to estimate the total count. When
			//		paging is indicated in a fetch and the response includes the full number of items
			//	 	requested by the fetch's count parameter, then the total count will be estimated
			//		to be estimateCountFactor multiplied by the provided count. If this is 1, then it is assumed that the server
			//		does not support paging, and the response is the full set of items, where the
			// 		total count is equal to the numer of items returned. If the server does support
			//		paging, an estimateCountFactor of 2 is a good value for estimating the total count
			//		It is also possible to override _processResults if the server can provide an exact
			// 		total count.
			//
			// The *syncMode* parameter
			//		Setting this to true will set the store to using synchronous calls by default.
			//		Sync calls return their data immediately from the calling function, so
			//		callbacks are unnecessary. This will only work with a synchronous capable service.
			//
			// description:
			//		ServiceStore can do client side caching and result set updating if
			// 		dojox.data.ClientFilter is loaded. Do this add:
			//	|	dojo.require("dojox.data.ClientFilter")
			//		prior to loading the ServiceStore (ClientFilter must be loaded before ServiceStore).
			//		To utilize client side filtering with a subclass, you can break queries into
			//		client side and server side components by putting client side actions in
			//		clientFilter property in fetch calls. For example you could override fetch:
			//	|	fetch: function(args){
				//	|		// do the sorting and paging on the client side
	 			//	|		args.clientFilter = {start:args.start, count: args.count, sort: args.sort};
	 			//	|		// args.query will be passed to the service object for the server side handling
	 			//	|		return this.inherited(arguments);
			//	|	}
			//		When extending this class, if you would like to create lazy objects, you can follow
			//		the example from dojox.data.tests.stores.ServiceStore:
			// |	var lazyItem = {
			// |		_loadObject: function(callback){
			// |			this.name="loaded";
			// |			delete this._loadObject;
			// |			callback(this);
			// |		}
			// |	};
			//setup a byId alias to the api call
			this.byId=this.fetchItemByIdentity;
			this._index = {};
			// if the advanced json parser is enabled, we can pass through object updates as onSet events
			if(options){
				dojo.mixin(this,options);
			}
			// We supply a default idAttribute for parser driven construction, but if no id attribute
			//	is supplied, it should be null so that auto identification takes place properly
			this.idAttribute = (options && options.idAttribute) || (this.schema && this.schema._idAttr);
		},
		schema: null,
		idAttribute: "id",
		labelAttribute: "label",
		syncMode: false,
		estimateCountFactor: 1,
		getSchema: function(){
			return this.schema;
		},

		loadLazyValues:true,

		getValue: function(/*Object*/ item, /*String*/property, /*value?*/defaultValue){
			// summary:
			//	Gets the value of an item's 'property'
			//
			//	item:
			//		The item to get the value from
			//	property:
			//		property to look up value for
			//	defaultValue:
			//		the default value

			var value = item[property];
			return value || // return the plain value since it was found;
						(property in item ? // a truthy value was not found, see if we actually have it
							value : // we do, so we can return it
							item._loadObject ? // property was not found, maybe because the item is not loaded, we will try to load it synchronously so we can get the property
								(dojox.rpc._sync = true) && arguments.callee.call(this,dojox.data.ServiceStore.prototype.loadItem({item:item}) || {}, property, defaultValue) : // load the item and run getValue again
								defaultValue);// not in item -> return default value
		},
		getValues: function(item, property){
			// summary:
			//		Gets the value of an item's 'property' and returns
			//		it.	If this value is an array it is just returned,
			//		if not, the value is added to an array and that is returned.
			//
			//	item: /* object */
			//	property: /* string */
			//		property to look up value for

			var val = this.getValue(item,property);
			if(val instanceof Array){
				return val;
			}
			if(!this.isItemLoaded(val)){
				dojox.rpc._sync = true;
				val = this.loadItem({item:val});
			}
			return val instanceof Array ? val : val === undefined ? [] : [val];
		},

		getAttributes: function(item){
			// summary:
			//	Gets the available attributes of an item's 'property' and returns
			//	it as an array.
			//
			//	item: /* object */

			var res = [];
			for(var i in item){
				if(item.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_')){
					res.push(i);
				}
			}
			return res;
		},

		hasAttribute: function(item,attribute){
			// summary:
			//		Checks to see if item has attribute
			//
			//	item: /* object */
			//	attribute: /* string */
			return attribute in item;
		},

		containsValue: function(item, attribute, value){
			// summary:
			//		Checks to see if 'item' has 'value' at 'attribute'
			//
			//	item: /* object */
			//	attribute: /* string */
			//	value: /* anything */
			return dojo.indexOf(this.getValues(item,attribute),value) > -1;
		},


		isItem: function(item){
			// summary:
			//		Checks to see if the argument is an item
			//
			//	item: /* object */
			//	attribute: /* string */

			// we have no way of determining if it belongs, we just have object returned from
			// 	service queries
			return (typeof item == 'object') && item && !(item instanceof Date);
		},

		isItemLoaded: function(item){
			// summary:
			//		Checks to see if the item is loaded.
			//
			//		item: /* object */

			return item && !item._loadObject;
		},

		loadItem: function(args){
			// summary:
			// 		Loads an item and calls the callback handler. Note, that this will call the callback
			// 		handler even if the item is loaded. Consequently, you can use loadItem to ensure
			// 		that an item is loaded is situations when the item may or may not be loaded yet.
			// 		If you access a value directly through property access, you can use this to load
			// 		a lazy value as well (doesn't need to be an item).
			//
			//	example:
			//		store.loadItem({
			//			item: item, // this item may or may not be loaded
			//			onItem: function(item){
			// 				// do something with the item
			//			}
			//		});

			var item;
			if(args.item._loadObject){
				args.item._loadObject(function(result){
					item = result; // in synchronous mode this can allow loadItem to return the value
					delete item._loadObject;
					var func = result instanceof Error ? args.onError : args.onItem;
					if(func){
						func.call(args.scope, result);
					}
				});
			}else if(args.onItem){
				// even if it is already loaded, we will use call the callback, this makes it easier to
				// use when it is not known if the item is loaded (you can always safely call loadItem).
				args.onItem.call(args.scope, args.item);
			}
			return item;
		},
		_currentId : 0,
		_processResults : function(results, deferred){
			// this should return an object with the items as an array and the total count of
			// items (maybe more than currently in the result set).
			// for example:
			//	| {totalCount:10, items: [{id:1},{id:2}]}

			// index the results, assigning ids as necessary

			if(results && typeof results == 'object'){
				var id = results.__id;
				if(!id){// if it hasn't been assigned yet
					if(this.idAttribute){
						// use the defined id if available
						id = results[this.idAttribute];
					}else{
						id = this._currentId++;
					}
					if(id !== undefined){
						var existingObj = this._index[id];
						if(existingObj){
							for(var j in existingObj){
								delete existingObj[j]; // clear it so we can mixin
							}
							results = dojo.mixin(existingObj,results);
						}
						results.__id = id;
						this._index[id] = results;
					}
				}
				for(var i in results){
					results[i] = this._processResults(results[i], deferred).items;
				}
				var count = results.length;
			}
			return {totalCount: deferred.request.count == count ? (deferred.request.start || 0) + count * this.estimateCountFactor : count, items: results};
		},
		close: function(request){
			return request && request.abort && request.abort();
		},
		fetch: function(args){
			// summary:
			//		See dojo.data.api.Read.fetch
			//
			// The *queryOptions.cache* parameter
			//		If true, indicates that the query result should be cached for future use. This is only available
			// 		if dojox.data.ClientFilter has been loaded before the ServiceStore
			//
			//	The *syncMode* parameter
			//		Indicates that the call should be fetch synchronously if possible (this is not always possible)
			//
			// The *clientFetch* parameter
			//		This is a fetch keyword argument for explicitly doing client side filtering, querying, and paging

			args = args || {};

			if("syncMode" in args ? args.syncMode : this.syncMode){
				dojox.rpc._sync = true;
			}
			var self = this;

			var scope = args.scope || self;
			var defResult = this.cachingFetch ? this.cachingFetch(args) : this._doQuery(args);
			defResult.request = args;
			defResult.addCallback(function(results){
				if(args.clientFetch){
					results = self.clientSideFetch({query:args.clientFetch,sort:args.sort,start:args.start,count:args.count},results);
				}
				var resultSet = self._processResults(results, defResult);
				results = args.results = resultSet.items;
				if(args.onBegin){
					args.onBegin.call(scope, resultSet.totalCount, args);
				}
				if(args.onItem){
					for(var i=0; i<results.length;i++){
						args.onItem.call(scope, results[i], args);
					}
				}
				if(args.onComplete){
					args.onComplete.call(scope, args.onItem ? null : results, args);
				}
				return results;
			});
			defResult.addErrback(args.onError && function(err){
				return args.onError.call(scope, err, args);
			});
			args.abort = function(){
				// abort the request
				defResult.cancel();
			};
			args.store = this;
			return args;
		},
		_doQuery: function(args){
			var query= typeof args.queryStr == 'string' ? args.queryStr : args.query;
			return this.service(query);
		},
		getFeatures: function(){
			// summary:
			// 		return the store feature set

			return {
				"dojo.data.api.Read": true,
				"dojo.data.api.Identity": true,
				"dojo.data.api.Schema": this.schema
			};
		},

		getLabel: function(item){
			// summary
			//		returns the label for an item. Just gets the "label" attribute.
			//
			return this.getValue(item,this.labelAttribute);
		},

		getLabelAttributes: function(item){
			// summary:
			//		returns an array of attributes that are used to create the label of an item
			return [this.labelAttribute];
		},

		//Identity API Support


		getIdentity: function(item){
			return item.__id;
		},

		getIdentityAttributes: function(item){
			// summary:
			//		returns the attributes which are used to make up the
			//		identity of an item.	Basically returns this.idAttribute

			return [this.idAttribute];
		},

		fetchItemByIdentity: function(args){
			// summary:
			//		fetch an item by its identity, by looking in our index of what we have loaded
			var item = this._index[(args._prefix || '') + args.identity];
			if(item){
				// the item exists in the index
				if(item._loadObject){
					// we have a handle on the item, but it isn't loaded yet, so we need to load it
					args.item = item;
					return this.loadItem(args);
				}else if(args.onItem){
					// it's already loaded, so we can immediately callback
					args.onItem.call(args.scope, item);
				}
			}else{
				// convert the different spellings
				return this.fetch({
						query: args.identity,
						onComplete: args.onItem,
						onError: args.onError,
						scope: args.scope
					}).results;
			}
			return item;
		}

	}
);

}

if(!dojo._hasResource["dojox.data.JsonRestStore"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.data.JsonRestStore"] = true;
dojo.provide("dojox.data.JsonRestStore");





dojo.declare("dojox.data.JsonRestStore",
	dojox.data.ServiceStore,
	{
		constructor: function(options){
			//summary:
			//		JsonRestStore is a Dojo Data store interface to JSON HTTP/REST web
			//		storage services that support read and write through GET, PUT, POST, and DELETE.
			// options:
			// 		Keyword arguments
			//
			// The *schema* parameter
			//		This is a schema object for this store. This should be JSON Schema format.
			//
			// The *service* parameter
			// 		This is the service object that is used to retrieve lazy data and save results
			// 		The function should be directly callable with a single parameter of an object id to be loaded
			// 		The function should also have the following methods:
			// 			put(id,value) - puts the value at the given id
			// 			post(id,value) - posts (appends) the value at the given id
			// 			delete(id) - deletes the value corresponding to the given id
			//		Note that it is critical that the service parses responses as JSON.
			//		If you are using dojox.rpc.Service, the easiest way to make sure this
			// 		happens is to make the responses have a content type of
			// 		application/json. If you are creating your own service, make sure you
			//		use handleAs: "json" with your XHR requests.
			//
			// The *target* parameter
			// 		This is the target URL for this Service store. This may be used in place
			// 		of a service parameter to connect directly to RESTful URL without
			// 		using a dojox.rpc.Service object.
			//
			// The *idAttribute* parameter
			//		Defaults to 'id'. The name of the attribute that holds an objects id.
			//		This can be a preexisting id provided by the server.
			//		If an ID isn't already provided when an object
			//		is fetched or added to the store, the autoIdentity system
			//		will generate an id for it and add it to the index.
			//
			// The *syncMode* parameter
			//		Setting this to true will set the store to using synchronous calls by default.
			//		Sync calls return their data immediately from the calling function, so
			//		callbacks are unnecessary
			//
			//	description:
			//		The JsonRestStore will cause all saved modifications to be sent to the server using Rest commands (PUT, POST, or DELETE).
			// 		When using a Rest store on a public network, it is important to implement proper security measures to
			//		control access to resources.
			//		On the server side implementing a REST interface means providing GET, PUT, POST, and DELETE handlers.
			//		GET - Retrieve an object or array/result set, this can be by id (like /table/1) or with a
			// 			query (like /table/?name=foo).
			//		PUT - This should modify a object, the URL will correspond to the id (like /table/1), and the body will
			// 			provide the modified object
			//		POST - This should create a new object. The URL will correspond to the target store (like /table/)
			// 			and the body should be the properties of the new object. The server's response should include a
			// 			Location header that indicates the id of the newly created object. This id will be used for subsequent
			// 			PUT and DELETE requests. JsonRestStore also includes a Content-Location header that indicates
			//			the temporary randomly generated id used by client, and this location is used for subsequent
			// 			PUT/DELETEs if no Location header is provided by the server or if a modification is sent prior
			// 			to receiving a response from the server.
			// 		DELETE - This should delete an object by id.
			// 		These articles include more detailed information on using the JsonRestStore:
			//		http://www.sitepen.com/blog/2008/06/13/restful-json-dojo-data/
			//		http://blog.medryx.org/2008/07/24/jsonreststore-overview/
			//
			//	example:
			// 		A JsonRestStore takes a REST service or a URL and uses it the remote communication for a
			// 		read/write dojo.data implementation. A JsonRestStore can be created with a simple URL like:
			// 	|	new JsonRestStore({target:"/MyData/"});
			//	example:
			// 		To use a JsonRestStore with a service, you should create a
			// 		service with a REST transport. This can be configured with an SMD:
			//	|	{
			//	|		services: {
			//	|			jsonRestStore: {
			//	|				transport: "REST",
			//	|				envelope: "URL",
			//	|				target: "store.php",
			//	|				contentType:"application/json",
			//	|				parameters: [
			//	|					{name: "location", type: "string", optional: true}
			//	|				]
			//	|			}
			//	|		}
			//	|	}
			// 		The SMD can then be used to create service, and the service can be passed to a JsonRestStore. For example:
			//	|	var myServices = new dojox.rpc.Service(dojo.moduleUrl("dojox.rpc.tests.resources", "test.smd"));
			//	|	var jsonStore = new dojox.data.JsonRestStore({service:myServices.jsonRestStore});
			//	example:
			//		The JsonRestStore also supports lazy loading. References can be made to objects that have not been loaded.
			//		For example if a service returned:
			//	|	{"name":"Example","lazyLoadedObject":{"$ref":"obj2"}}
			// 		And this object has accessed using the dojo.data API:
			//	|	var obj = jsonStore.getValue(myObject,"lazyLoadedObject");
			//		The object would automatically be requested from the server (with an object id of "obj2").
			//

			dojo.connect(dojox.rpc.Rest._index,"onUpdate",this,function(obj,attrName,oldValue,newValue){
				var prefix = this.service.servicePath;
				if(!obj.__id){
					console.log("no id on updated object ", obj);
				}else if(obj.__id.substring(0,prefix.length) == prefix){
					this.onSet(obj,attrName,oldValue,newValue);
				}
			});
			this.idAttribute = this.idAttribute || 'id';// no options about it, we have to have identity

			if(typeof options.target == 'string'){
				options.target = options.target.match(/\/$/) || this.allowNoTrailingSlash ? options.target : (options.target + '/');
				if(!this.service){
					this.service = dojox.rpc.JsonRest.services[options.target] ||
							dojox.rpc.Rest(options.target, true);
					// create a default Rest service
				}
			}

			dojox.rpc.JsonRest.registerService(this.service, options.target, this.schema);
			this.schema = this.service._schema = this.schema || this.service._schema || {};
			// wrap the service with so it goes through JsonRest manager
			this.service._store = this;
			this.service.idAsRef = this.idAsRef;
			this.schema._idAttr = this.idAttribute;
			var constructor = dojox.rpc.JsonRest.getConstructor(this.service);
			var self = this;
			this._constructor = function(data){
				constructor.call(this, data);
				self.onNew(this);
			}
			this._constructor.prototype = constructor.prototype;
			this._index = dojox.rpc.Rest._index;
		},
		
		// summary:
		//		Will load any schemas referenced content-type header or in Link headers
		loadReferencedSchema: true,
		// summary:
		//		Treat objects in queries as partially loaded objects
		idAsRef: false,
		referenceIntegrity: true,
		target:"",
		// summary:
		// 		Allow no trailing slash on target paths. This is generally discouraged since
		// 		it creates prevents simple scalar values from being used a relative URLs.
		// 		Disabled by default.
		allowNoTrailingSlash: false,
		//Write API Support
		newItem: function(data, parentInfo){
			// summary:
			//		adds a new item to the store at the specified point.
			//		Takes two parameters, data, and options.
			//
			//	data: /* object */
			//		The data to be added in as an item.
			data = new this._constructor(data);
			if(parentInfo){
				// get the previous value or any empty array
				var values = this.getValue(parentInfo.parent,parentInfo.attribute,[]);
				// set the new value
				values = values.concat([data]);
				data.__parent = values;
				this.setValue(parentInfo.parent, parentInfo.attribute, values);
			}
			return data;
		},
		deleteItem: function(item){
			// summary:
			//		deletes item and any references to that item from the store.
			//
			//	item:
			//		item to delete
			//

			//	If the desire is to delete only one reference, unsetAttribute or
			//	setValue is the way to go.
			var checked = [];
			var store = dojox.data._getStoreForItem(item) || this;
			if(this.referenceIntegrity){
				// cleanup all references
				dojox.rpc.JsonRest._saveNotNeeded = true;
				var index = dojox.rpc.Rest._index;
				var fixReferences = function(parent){
					var toSplice;
					// keep track of the checked ones
					checked.push(parent);
					// mark it checked so we don't run into circular loops when encountering cycles
					parent.__checked = 1;
					for(var i in parent){
						if(i.substring(0,2) != "__"){
							var value = parent[i];
							if(value == item){
								if(parent != index){ // make sure we are just operating on real objects
									if(parent instanceof Array){
										// mark it as needing to be spliced, don't do it now or it will mess up the index into the array
										(toSplice = toSplice || []).push(i);
									}else{
										// property, just delete it.
										(dojox.data._getStoreForItem(parent) || store).unsetAttribute(parent, i);
									}
								}
							}else{
								if((typeof value == 'object') && value){
									if(!value.__checked){
										// recursively search
										fixReferences(value);
									}
									if(typeof value.__checked == 'object' && parent != index){
										// if it is a modified array, we will replace it
										(dojox.data._getStoreForItem(parent) || store).setValue(parent, i, value.__checked);
									}
								}
							}
						}
					}
					if(toSplice){
						// we need to splice the deleted item out of these arrays
						i = toSplice.length;
						parent = parent.__checked = parent.concat(); // indicates that the array is modified
						while(i--){
							parent.splice(toSplice[i], 1);
						}
						return parent;
					}
					return null;
				};
				// start with the index
				fixReferences(index);
				dojox.rpc.JsonRest._saveNotNeeded = false;
				var i = 0;
				while(checked[i]){
					// remove the checked marker
					delete checked[i++].__checked;
				}
			}
			dojox.rpc.JsonRest.deleteObject(item);

			store.onDelete(item);
		},
		changing: function(item,_deleting){
			// summary:
			//		adds an item to the list of dirty items.	This item
			//		contains a reference to the item itself as well as a
			//		cloned and trimmed version of old item for use with
			//		revert.
			dojox.rpc.JsonRest.changing(item,_deleting);
		},

		setValue: function(item, attribute, value){
			// summary:
			//		sets 'attribute' on 'item' to 'value'

			var old = item[attribute];
			var store = item.__id ? dojox.data._getStoreForItem(item) : this;
			if(dojox.json.schema && store.schema && store.schema.properties){
				// if we have a schema and schema validator available we will validate the property change
				dojox.json.schema.mustBeValid(dojox.json.schema.checkPropertyChange(value,store.schema.properties[attribute]));
			}
			if(attribute == store.idAttribute){
				throw new Error("Can not change the identity attribute for an item");
			}
			store.changing(item);
			item[attribute]=value;
			if(value && !value.__parent){
				value.__parent = item;
			}
			store.onSet(item,attribute,old,value);
		},
		setValues: function(item, attribute, values){
			// summary:
			//	sets 'attribute' on 'item' to 'value' value
			//	must be an array.


			if(!dojo.isArray(values)){
				throw new Error("setValues expects to be passed an Array object as its value");
			}
			this.setValue(item,attribute,values);
		},

		unsetAttribute: function(item, attribute){
			// summary:
			//		unsets 'attribute' on 'item'

			this.changing(item);
			var old = item[attribute];
			delete item[attribute];
			this.onSet(item,attribute,old,undefined);
		},
		save: function(kwArgs){
			// summary:
			//		Saves the dirty data using REST Ajax methods. See dojo.data.api.Write for API.
			//
			//	kwArgs.global:
			//		This will cause the save to commit the dirty data for all
			// 		JsonRestStores as a single transaction.
			//
			//	kwArgs.revertOnError
			//		This will cause the changes to be reverted if there is an
			//		error on the save. By default a revert is executed unless
			//		a value of false is provide for this parameter.
			//
			//	kwArgs.incrementalUpdates
			//		For items that have been updated, if this is enabled, the server will be sent a POST request
			// 		with a JSON object containing the changed properties. By default this is
			// 		not enabled, and a PUT is used to deliver an update, and will include a full
			// 		serialization of all the properties of the item/object.
			//		If this is true, the POST request body will consist of a JSON object with
			// 		only the changed properties. The incrementalUpdates parameter may also
			//		be a function, in which case it will be called with the updated and previous objects
			//		and an object update representation can be returned.
			//
			//	kwArgs.alwaysPostNewItems
			//		If this is true, new items will always be sent with a POST request. By default
			//		this is not enabled, and the JsonRestStore will send a POST request if
			//		the item does not include its identifier (expecting server assigned location/
			//		identifier), and will send a PUT request if the item does include its identifier
			//		(the PUT will be sent to the URI corresponding to the provided identifier).

			if(!(kwArgs && kwArgs.global)){
				(kwArgs = kwArgs || {}).service = this.service;
			}
			if("syncMode" in kwArgs ? kwArgs.syncMode : this.syncMode){
				dojox.rpc._sync = true;
			}

			var actions = dojox.rpc.JsonRest.commit(kwArgs);
			this.serverVersion = this._updates && this._updates.length;
			return actions;
		},

		revert: function(kwArgs){
			// summary
			//		returns any modified data to its original state prior to a save();
			//
			//	kwArgs.global:
			//		This will cause the revert to undo all the changes for all
			// 		JsonRestStores in a single operation.
			dojox.rpc.JsonRest.revert(kwArgs && kwArgs.global && this.service);
		},

		isDirty: function(item){
			// summary
			//		returns true if the item is marked as dirty.
			return dojox.rpc.JsonRest.isDirty(item);
		},
		isItem: function(item, anyStore){
			//	summary:
			//		Checks to see if a passed 'item'
			//		really belongs to this JsonRestStore.
			//
			//	item: /* object */
			//		The value to test for being an item
			//	anyStore: /* boolean*/
			//		If true, this will return true if the value is an item for any JsonRestStore,
			//		not just this instance
			return item && item.__id && (anyStore || this.service == dojox.rpc.JsonRest.getServiceAndId(item.__id).service);
		},
		_doQuery: function(args){
			var query= typeof args.queryStr == 'string' ? args.queryStr : args.query;
			var deferred = dojox.rpc.JsonRest.query(this.service,query, args);
			var self = this;
			if(this.loadReferencedSchema){
				deferred.addCallback(function(result){
					var contentType = deferred.ioArgs && deferred.ioArgs.xhr && deferred.ioArgs.xhr.getResponseHeader("Content-Type");
					var schemaRef = contentType && contentType.match(/definedby\s*=\s*([^;]*)/);
					if(contentType && !schemaRef){
						schemaRef = deferred.ioArgs.xhr.getResponseHeader("Link");
						schemaRef = schemaRef && schemaRef.match(/<([^>]*)>;\s*rel="?definedby"?/);
					}
					schemaRef = schemaRef && schemaRef[1];
					if(schemaRef){
						var serviceAndId = dojox.rpc.JsonRest.getServiceAndId((self.target + schemaRef).replace(/^(.*\/)?(\w+:\/\/)|[^\/\.]+\/\.\.\/|^.*\/(\/)/,"$2$3"));
						var schemaDeferred = dojox.rpc.JsonRest.byId(serviceAndId.service, serviceAndId.id);
						schemaDeferred.addCallbacks(function(newSchema){
							dojo.mixin(self.schema, newSchema);
							return result;
						}, function(error){
							console.error(error); // log it, but don't let it cause the main request to fail
							return result;
						});
						return schemaDeferred;
					}
					return undefined;//don't change anything, and deal with the stupid post-commit lint complaints
				});
			}
			return deferred;
		},
		_processResults: function(results, deferred){
			// index the results
			var count = results.length;
			// if we don't know the length, and it is partial result, we will guess that it is twice as big, that will work for most widgets
			return {totalCount:deferred.fullLength || (deferred.request.count == count ? (deferred.request.start || 0) + count * 2 : count), items: results};
		},

		getConstructor: function(){
			// summary:
			// 		Gets the constructor for objects from this store
			return this._constructor;
		},
		getIdentity: function(item){
			var id = item.__clientId || item.__id;
			if(!id){
				return id;
			}
			var prefix = this.service.servicePath.replace(/[^\/]*$/,'');
			// support for relative or absolute referencing with ids
			return id.substring(0,prefix.length) != prefix ?	id : id.substring(prefix.length); // String
		},
		fetchItemByIdentity: function(args){
			var id = args.identity;
			var store = this;
			// if it is an absolute id, we want to find the right store to query
			if(id.toString().match(/^(\w*:)?\//)){
				var serviceAndId = dojox.rpc.JsonRest.getServiceAndId(id);
				store = serviceAndId.service._store;
				args.identity = serviceAndId.id;
			}
			args._prefix = store.service.servicePath.replace(/[^\/]*$/,'');
			return store.inherited(arguments);
		},
		//Notifcation Support

		onSet: function(){},
		onNew: function(){},
		onDelete: 	function(){},

		getFeatures: function(){
			// summary:
			// 		return the store feature set
			var features = this.inherited(arguments);
			features["dojo.data.api.Write"] = true;
			features["dojo.data.api.Notification"] = true;
			return features;
		},

		getParent: function(item){
			//	summary:
			//		Returns the parent item (or query) for the given item
			//	item:
			//		The item to find the parent of

			return item && item.__parent;
		}


	}
);
dojox.data.JsonRestStore.getStore = function(options, Class){
	//	summary:
	//		Will retrieve or create a store using the given options (the same options
	//		that are passed to JsonRestStore constructor. Returns a JsonRestStore instance
	//	options:
	//		See the JsonRestStore constructor
	//	Class:
	//		Constructor to use (for creating stores from JsonRestStore subclasses).
	// 		This is optional and defaults to JsonRestStore.
	if(typeof options.target == 'string'){
		options.target = options.target.match(/\/$/) || options.allowNoTrailingSlash ?
				options.target : (options.target + '/');
		var store = (dojox.rpc.JsonRest.services[options.target] || {})._store;
		if(store){
			return store;
		}
	}
	return new (Class || dojox.data.JsonRestStore)(options);
};
dojox.data._getStoreForItem = function(item){
	if(item.__id){
		var serviceAndId = dojox.rpc.JsonRest.getServiceAndId(item.__id);
		if(serviceAndId && serviceAndId.service._store){
			return serviceAndId.service._store;
		}else{
			var servicePath = item.__id.toString().match(/.*\//)[0];
			return new dojox.data.JsonRestStore({target:servicePath});
		}
	}
	return null;
};
dojox.json.ref._useRefs = true; // Use referencing when identifiable objects are referenced

}

if(!dojo._hasResource["prmax.iadmin.accounts.SeoView"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.accounts.SeoView"] = true;
//-----------------------------------------------------------------------------
// Name:    SeoView.js
// Author:  Chris Hoy
// Purpose:
// Created: 11/01/2012
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.accounts.SeoView");







dojo.declare("prmax.iadmin.accounts.SeoView",
	[ttl.BaseWidget],{
		templateString:"<div>\r\n\t<div data-dojo-attach-point=\"borderCtrl\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='style:\"width:100%;height:100%\",gutters:false' >\r\n\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:42px;width:100%;padding:0px;margin:0px;overflow:hidden\", region:\"top\"'>\r\n\t\t\t<div data-dojo-type=\"dijit.form.DropDownButton\"  data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxFilterIcon\",label:\"Filter SEO\",showLabel:false'>\r\n\t\t\t\t<span></span>\r\n\t\t\t\t<div data-dojo-type=\"dijit.TooltipDialog\" data-dojo-attach-event=\"execute:_ExecuteFilter\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Invoice Id</td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"filter_invoicenbr\" data-dojo-props='name:\"invoicenbr\",type:\"text\"' ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Date Range?</td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"filter_daterange\" data-dojo-props='name:\"allaccount\",type:\"checkbox\"' >\r\n\t\t\t\t\t\t\t<div><p class=\"prmaxrowtag\">Between</p>\r\n\t\t\t\t\t\t\t\t<input data-dojo-props='style:\"width:8em\", name:\"from_date\", type:\"text\"' data-dojo-attach-point=\"filter_from_date\" data-dojo-type=\"dijit.form.DateTextBox\" >\r\n\t\t\t\t\t\t\t\t<p class=\"prmaxrowtag\">To</p>\r\n\t\t\t\t\t\t\t\t<input data-dojo-props='style:\"width:8em\", name:\"to_date\", type:\"text\"' data-dojo-attach-point=\"filter_to_date\" data-dojo-type=\"dijit.form.DateTextBox\" >\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Payment Method</td><td><select data-dojo-props='\"class\":\"prmaxinput\",name:\"seopaymenttypeid\",style:\"width:15em\",autoComplete:true' data-dojo-attach-point=\"filter_seopaymenttypeid\" data-dojo-type=\"dijit.form.FilteringSelect\" ></select></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Paid</td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"filter_paid\" data-dojo-props='name:\"paid\",type:\"checkbox\"' ></td></tr>\r\n\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\">Not Paid</td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"filter_notpaid\" data-dojo-props='name:\"notpaid\",type:\"checkbox\"' ></td></tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td align=\"left\"><button data-dojo-attach-event=\"onClick: _ClearFilter\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' >Clear Filter by</button></td>\r\n\t\t\t\t\t\t\t<td align=\"right\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"submit\",name:\"submit\"'>Filter by</button></td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\",style:\"width:50%\",splitter:\"true\"' >\r\n\t\t\t<div data-dojo-attach-point=\"grid\" data-dojo-type=\"dojox.grid.EnhancedGrid\" data-dojo-props='rowsPerPage:50' style=\"width:100%;height:100%\" ></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._seos = new dojox.data.JsonRestStore( {target:"/iadmin/seo/seo_list_shop", idAttribute:"seoreleaseid"});
		this._seopaymenttypes =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=seopaymenttypes?filter=1"});

	},
	postCreate:function()
	{
		this.inherited(arguments);

		this.grid.set("structure",this.view);
		this.grid._setStore(this._seos );
		this.filter_seopaymenttypeid.set("store", this._seopaymenttypes);
		this.filter_seopaymenttypeid.set("value", -1);
	},
	Load:function(icustomerid)
	{
		this._icustomerid = icustomerid;
		this.grid.setQuery({icustomerid:icustomerid});
	},
	resize:function()
	{
		this.inherited(arguments);
		this.borderCtrl.resize(arguments[0]);
	},
	view :{noscroll: false,
			cells: [[
			{name: 'Published',width: "5em",field:'published_display'},
			{name: 'Payment',width: "8em",field:'seopaymenttypedescription' },
			{name: 'Invoice',width: "5em",field:'seo_invoice_date_display'},
			{name: 'Inv Nbr.',width: "5em",field:'invoicenbr'},
			{name: 'Headline',width: "auto",field:'headline'}
		]]
	},
	_ClearFilter:function()
	{

	},
	_ExecuteFilter:function()
	{

	}
});

}

if(!dojo._hasResource["prmax.iadmin.sales.SetExpireDate"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.SetExpireDate"] = true;
dojo.provide("prmax.iadmin.sales.SetExpireDate");




dojo.declare("prmax.iadmin.sales.SetExpireDate",
	[ ttl.BaseWidget],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<div dojoAttachPoint=\"dlg\" dojoType=\"dijit.Dialog\" title=\"Set Expire Date\">\r\n\t\t<form dojoAttachPoint=\"form\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t<input type=\"hidden\" dojoAttachPoint=\"icustomerid\" name=\"icustomerid\" dojoType=\"dijit.form.TextBox\">\r\n\t\t\t<input type=\"hidden\" dojoAttachPoint=\"taskid\" name=\"taskid\" dojoType=\"dijit.form.TextBox\">\r\n\t\t\t<table style=\"width:400px;border-collapse:collapse;\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t<tr><td width=\"15%\"></td><td class=\"prmaxrowtag\" >Start Date</td><td class=\"prmaxrowtag\" >Expire Date</td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" width=\"25%\">Media</td>\r\n\t\t\t\t<td><input type=\"text\" required=\"true\" dojoAttachPoint=\"licence_start_date\" name = \"licence_start_date\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\" ></td>\r\n\t\t\t\t<td><input type=\"text\" required=\"true\" dojoAttachPoint=\"licence_expire\" name = \"licence_expire\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\" ></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr dojoAttachPoint=\"view1\"><td align=\"right\" class=\"prmaxrowtag\">Features</td>\r\n\t\t\t\t<td><input type=\"text\" dojoAttachPoint=\"advance_licence_start\" name = \"advance_licence_start\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\"></td>\r\n\t\t\t\t<td><input type=\"text\" dojoAttachPoint=\"advance_licence_expired\" name = \"advance_licence_expired\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr dojoAttachPoint=\"view2\"><td align=\"right\" class=\"prmaxrowtag\">Monitoring</td>\r\n\t\t\t\t<td><input type=\"text\" dojoAttachPoint=\"updatum_start_date\" name=\"updatum_start_date\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\"></td>\r\n\t\t\t\t<td><input type=\"text\" dojoAttachPoint=\"updatum_end_date\" name=\"updatum_end_date\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Reason</td><td colspan=\"2\"><div class=\"stdframe prmaxrequired\" style=\"height:150px;\" ><textarea class=\"prmaxrequired\" dojoAttachPoint=\"reason\" name=\"reason\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.Textarea\" style=\"width:99%;height:80%\" ></textarea></div></td></tr>\r\n\t\t\t<tr><td colspan=\"3\"><br/></td></tr>\r\n\t\t\t<tr><td><button type=\"button\" dojoAttachEvent=\"onClick:_Close\" dojoType=\"dijit.form.Button\" label=\"Close\" ></button></td><td colspan=\"2\" align=\"right\"><button type=\"button\" dojoAttachEvent=\"onClick:_Update\" dojoType=\"dijit.form.Button\" label=\"Set Expire Date\" ></button></td></tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._SetExpireDateCall = dojo.hitch(this,this._SetExpireDate);
		this._LoadedCallBack = dojo.hitch(this, this._LoadedCall);

	},
	Load:function( customerid, taskid )
	{
		this.icustomerid.set("value", customerid);
		this.taskid.set("value", taskid);

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadedCallBack,
			url:'/iadmin/get_internal' ,
			content: {icustomerid : customerid }
		}));

	},
	_LoadedCall:function ( response )
	{
		if ( response.success == "OK")
		{
			this._advancefeatures = response.data.cust.advancefeatures;
			this.licence_expire.set("value", new Date(response.data.cust.licence_expire.year, response.data.cust.licence_expire.month-1, response.data.cust.licence_expire.day));
			if (response.data.cust.licence_start_date_d)
				this.licence_start_date.set("value", new Date(response.data.cust.licence_start_date_d.year, response.data.cust.licence_start_date_d.month-1, response.data.cust.licence_start_date_d.day));
			else
				this.licence_start_date.set("value",null);

			if ( this._advancefeatures )
			{
				dojo.removeClass(this.view1,"prmaxhidden");
				if (response.data.cust.advance_licence_expired_d)
					this.advance_licence_expired.set("value", new Date(response.data.cust.advance_licence_expired_d.year, response.data.cust.advance_licence_expired_d.month-1, response.data.cust.advance_licence_expired_d.day));
				else
					this.advance_licence_expired.set("value",null);

				if (response.data.cust.advance_licence_start_d)
					this.advance_licence_start.set("value", new Date(response.data.cust.advance_licence_start_d.year, response.data.cust.advance_licence_start_d.month-1, response.data.cust.advance_licence_start_d.day));
				else
					this.advance_licence_start.set("value",null);
			}
			else
			{
				dojo.addClass(this.view1,"prmaxhidden");
			}
			if ( response.data.cust.updatum )
			{
				dojo.removeClass(this.view2,"prmaxhidden");
				if (response.data.cust.updatum_end_date_d)
					this.updatum_end_date.set("value", new Date(response.data.cust.updatum_end_date_d.year, response.data.cust.updatum_end_date_d.month-1, response.data.cust.updatum_end_date_d.day));
				else
					this.updatum_end_date.set("value",null);

				if (response.data.cust.updatum_start_date_d)
					this.updatum_start_date.set("value", new Date(response.data.cust.updatum_start_date_d.year, response.data.cust.updatum_start_date_d.month-1, response.data.cust.updatum_start_date_d.day));
				else
					this.updatum_start_date.set("value",null);
			}
			else
			{
				dojo.addClass(this.view2,"prmaxhidden");
			}
			this.reason.set("value","");
			this.dlg.show();
		}
		else
		{
			alert("Problem Loading Expire Details");
		}
	},
	_SetExpireDate:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("expire date re-set");
			dojo.publish(PRCOMMON.Events.Expire_Date_Changed, [response.data.cust]);
			this.dlg.hide();
		}
		else
			alert("Problem resetting expire date");
	},
	_Update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Invalid Expire Date");
			return false;
		}
		if ( this.reason.get("value") == "" )
		{
			alert("No Reason Given");
			this.reason.focus();
			return false;
		}

		var content = this.form.get("value");
		content["licence_expire"] = ttl.utilities.toJsonDate ( this.licence_expire.get("value"));
		content["licence_start_date"] = ttl.utilities.toJsonDate ( this.licence_start_date.get("value"));
		content["advance_licence_start"] = ttl.utilities.toJsonDate ( this.advance_licence_start.get("value"));
		content["advance_licence_expired"] = ttl.utilities.toJsonDate ( this.advance_licence_expired.get("value"));
		content["updatum_start_date"] = ttl.utilities.toJsonDate ( this.updatum_start_date.get("value"));
		content["updatum_end_date"] = ttl.utilities.toJsonDate ( this.updatum_end_date.get("value"));

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._SetExpireDateCall),
			url:'/iadmin/set_expire_date',
			content:content}));
	},
	_Close:function()
	{
		this.dlg.hide();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.sales.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.view"] = true;
dojo.provide("prmax.iadmin.sales.view");




dojo.declare("prmax.iadmin.sales.view",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div dojoAttachPoint=\"borderControl\" dojotype=\"dijit.layout.BorderContainer\" style=\"width:100%;height:100%\" gutters=\"false\">\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"top\" style=\"height:42px;width:100%;overflow:hidden;border:1px solid black\">\r\n\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left:height:100%;width:100%\" >\r\n\t\t\t\t<div dojoType=\"dijit.form.DropDownButton\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\">\r\n\t\t\t\t\t<span>Filter By</span>\r\n\t\t\t\t\t<div dojoType=\"dijit.TooltipDialog\" title=\"Filter\" dojoAttachEvent=\"execute: _ExecuteFilter\">\r\n\t\t\t\t\t\t<table width=\"500px\">\r\n\t\t\t\t\t\t\t<tr><td><label >Owner</label></td><td><select dojoAttachPoint=\"userfilter\" name=\"iuserid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></tr>\r\n\t\t\t\t\t\t\t<tr><td><label >Task</label></td><td><select dojoAttachPoint=\"tasktypefilter\" name=\"tasktypeid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></tr>\r\n\t\t\t\t\t\t\t<tr><td><label >Status</label></td><td><select name=\"taskstatusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"taskstatusfilter\" ></select></td></tr>\r\n\t\t\t\t\t\t\t<tr><td><label >Over due Only</label></td><td><input class=\"prmaxinput\" dojoAttachPoint=\"overdue\" dojoType=\"dijit.form.CheckBox\" name=\"overdue\" value=\"1\" /></td></tr>\r\n\t\t\t\t\t\t\t<tr><td ><label >Type</label></td><td><select class=\"prmaxinput\" name=\"customertypeid\" dojoAttachPoint=\"customertypeid\" style=\"width:9em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td></tr>\r\n\r\n\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td align=\"left\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_ClearFilter\">Clear Filter</button></td>\r\n\t\t\t\t\t\t\t\t<td align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"submit\" name=\"submit\">Filter</button></td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\" dojoAttachEvent=\"onClick:_Refresh\">Refresh</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div dojoAttachPoint=\"details_container\" dojoType=\"dijit.layout.StackContainer\" style=\"width:40%;height:100%\" region=\"right\"  splitter=\"true\" doLayout=\"true\" style=\"border:1px solid black\">\r\n\t\t\t<div dojoType=\"dijit.layout.ContentPane\" title=\"blank\" dojoAttachPoint=\"blank_view\" selected ></div>\r\n\t\t\t<div dojoType=\"dijit.layout.ContentPane\" title=\"details_view\" dojoAttachPoint=\"details_view\">\r\n\t\t\t\t<div dojoType=\"dijit.TitlePane\" title=\"Prospect Trial\" style=\"width: 100%\" >\r\n\t\t\t\t\t<form dojoAttachPoint=\"form\" class=\"prmaxdefault\" onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t<input type=\"hidden\" dojoAttachPoint=\"taskid\" name=\"taskid\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t\t\t<table width=\"99%\" class=\"prmaxtable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"padding-top:5px;border-style:collapsed\">\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Last Accessed</td><td dojoAttachPoint=\"last_accessed_display\" class=\"prmaxrowdisplay\"></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Status</td><td><select name=\"taskstatusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"taskstatusid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Due Date</td><td><input type=\"text\" required=\"true\" dojoAttachPoint=\"due_date\" name=\"due_date\" dojoType=\"dijit.form.DateTextBox\" style=\"width:8em\" ></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Owner</td><td><select class=\"prmaxrequired\" required=\"true\" dojoAttachPoint=\"assigntoid\" name=\"assigntoid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Follow Up Disabled</td><td><input class=\"prmaxdefault\" dojoAttachPoint=\"emailactionstatus\"  dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"emailactionstatus\"/></td></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Reason</td><td ><div class=\"stdframe prmaxrequired\" style=\"height:120px;\" ><textarea class=\"prmaxrequired\" dojoAttachPoint=\"reason\" name=\"reason\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.Textarea\" style=\"width:99%;height:80%\" ></textarea></div></td></tr>\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\" align=\"right\"><button dojoType=\"dojox.form.BusyButton\" dojoAttachPoint=\"updbtn\" busyLabel=\"Updating...\" dojoAttachEvent=\"onClick:_Update\" label=\"Update\"><td></tr>\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t<table width=\"99%\" class=\"prmaxtable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" >\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\">\r\n\t\t\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" dojoAttachEvent=\"onClick:_SendConfirmation\" label=\"Send Order Confirmation\"></button>\r\n\t\t\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" dojoAttachEvent=\"onClick:_SetExpire\" label=\"Set Expire Date\"></button>\r\n\t\t\t\t\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_GoToMainanence\" data-dojo-props='label:\"Go to Customer Details\",style:\"float:right\"'></button>\r\n\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div dojoType=\"dijit.TitlePane\" title=\"Notes\" style=\"width: 100%\" class=\"scrollpanel\">\r\n\t\t\t\t\t<div  dojoType=\"prmax.crm.viewer\" dojoAttachPoint=\"crmviewer\" region=\"center\" contacthistorysourceid_default=\"2\" taskview=\"true\" style=\"width:100%;height:300px\" class=\"scrollpanel\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div dojoType=\"dijit.TitlePane\" title=\"Customer Settings\" style=\"width: 100%\" open=\"false\">\r\n\t\t\t\t\t<form dojoAttachPoint=\"formsettingsupdate\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t<input type=\"hidden\" dojoAttachPoint=\"icustomerid\" name=\"icustomerid\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t\t\t<table width=\"99%\" class=\"prmaxtable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"padding-top:5px\">\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\" width=\"120px\">Enquiry Source</td><td><select class=\"prmaxinput\" name=\"customersourceid\" dojoAttachPoint=\"customersourceid\" style=\"width:10em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\" required=\"true\"></td></tr>\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t\t\t\t\t<tr><td colspan=\"2\" align=\"right\"><button dojoAttachPoint=\"updsettingsbtn\" class=\"prmaxhidden\" dojoType=\"dijit.form.Button\" dojoAttachEvent=\"onClick:_UpdateSettings\" label=\"Update Customer\" busylabel=\"Updating ..\"></button>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div dojotype=\"dijit.layout.ContentPane\" region=\"center\"  splitter=\"true\">\r\n\t\t\t<div dojoAttachPoint=\"view_grid\" dojoType=\"dojox.grid.DataGrid\"   query=\"{ }\" rowsPerPage=\"50\" selectable=\"true\" ></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"expirectrl\" dojoType=\"prmax.iadmin.sales.SetExpireDate\" ></div>\r\n\t<div dojoType=\"dijit.Dialog\" title=\"Enter Order Confirmation\" dojoAttachPoint=\"sendorderconfirmationdialog\">\r\n\t\t<div dojoAttachPoint=\"sendorderconfirmationctrl\" dojoType=\"prmax.iadmin.accounts.OrderConfirmation\" ></div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._tasks = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/tasks?group=sales',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});

		this._row = null ;
		this._taskstatusfilter =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=taskstatus&nofilter"});
		this._userfilter = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=users&group=sales&nofilter"});
		this._tasktypefilter =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=tasktype&nofilter"});

		this._users = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=users&group=sales,accounts"});
		this._taskstatus =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=taskstatus"});
		this._customersources =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=customersources"});

		this._UpdatedCallBack = dojo.hitch ( this, this._UpdatedCall ) ;
		this._getModelItemBack = dojo.hitch ( this, this._getModelItem );
		this._LoadCustomerCall = dojo.hitch( this, this._LoadCustomer );
		this._LoadCustomerSettingCallBack = dojo.hitch ( this, this._LoadCustomerSettingCall );
		this._UpdatedSettingsCallBack = dojo.hitch (this, this._UpdatedSettingsCall );
		this._TaskCallBack = dojo.hitch( this, this._TaskCall );

		dojo.subscribe(PRCOMMON.Events.Task_Refresh, dojo.hitch(this,this._RefreshTask));
	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.view_grid.set("structure", this._view);
		this.view_grid._setStore ( this._tasks );
		this.view_grid["onRowClick"] = dojo.hitch(this, this._OnSelectRow );
		this.view_grid['onStyleRow'] = dojo.hitch(this,this._OnStyleRow);

		this.taskstatusid.store = this._taskstatus;
		this.assigntoid.store = this._users;
		this.customersourceid.store = this._customersources;

		this.taskstatusfilter.store = this._taskstatusfilter;
		this.userfilter.store = this._userfilter;
		this.tasktypefilter.store = this._tasktypefilter;
		this.taskstatusfilter.set("value",-1);
		this.userfilter.set("value",-1);
		this.tasktypefilter.set("value",-1);

		this.customertypeid.set("store", PRCOMMON.utils.stores.Customer_Types_Filter());
		this.customertypeid.set("value", -1);


	},
	_OnStyleRow:function(inRow)
	{
		var rowData = this.view_grid.getItem(inRow.index);
		if (rowData && rowData.i.isoverdue == true)
		{
			inRow.customClasses += " prmaxOverDueRow";
		}
		if (rowData && rowData.i.istoday == true)
		{
			inRow.customClasses += " prmaxCurrent";

		}


		ttl.GridHelpers.onStyleRow(inRow);
	},
	_OnSelectRow : function(e) {

		this._row = this.view_grid.getItem(e.rowIndex);

		dojo.addClass(this.updsettingsbtn.domNode,"prmaxhidden");
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadCustomerSettingCallBack,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._row.i.customerid}
			}));


		this.crmviewer.LoadControls( null, null, null, this._row.i.customerid, this._row.i.taskid );
		this.icustomerid.set("value", this._row.i.customerid);
		this.taskstatusid.set("value",this._row.i.taskstatusid);
		this.emailactionstatus.set("value", this._row.i.emailactionstatusid == 5 ? true : false ) ;


		this.due_date.set("value", ttl.utilities.parseDate ( this._row.i.due_date_full) );
		dojo.attr(this.last_accessed_display,"innerHTML", this._row.i.last_login_display);

		this.assigntoid.set("value", this._row.i.userid);
		this.taskid.set("value", this._row.i.taskid);

		this.details_container.selectChild ( this.details_view );

		this.view_grid.selection.clickSelectEvent(e);

	},
	_LoadCustomerSettingCall:function(response)
	{
		if ( response.success == "OK" )
		{
			this.customersourceid.set("value", response.data.cust.customersourceid);
			dojo.removeClass(this.updsettingsbtn.domNode,"prmaxhidden");
		}
	},
	resize:function()
	{
		this.borderControl.resize(arguments[0]);
		this.inherited(arguments);
	},
	_ClearFilter:function()
	{
		this.taskstatusfilter.set("value",-1);
		this.userfilter.set("value",-1);
		this.tasktypefilter.set("value",-1);
		this.overdue.set("checked", false ) ;
		this.customertypeid.set("value", -1);
	},

	_view : { noscroll: false,
		cells: [[
		{name: 'Due Date',width: "60px",field:'due_date_display'},
		{name: 'Customer Name',width: "200px",field:'customername'},
		{name: 'Contact Name',width: "150px",field:'contactname'},
		{name: 'Tel.',width: "100px",field:'tel'},
		{name: 'Owner',width: "150px",field:'user_name'},
		{name: 'Status',width: "80px",field:'taskstatusdescription'},
		{name: 'Type',width: "80px",field:'tasktypedescription'},
		{name: 'Follow Up',width: "80px",field:'emailactionstatusdescription'},
		{name: 'Started',width: "60px",field:'created_display'},
		{name: 'Accessed',width: "60px",field:'last_login_display'},
		{name: 'Source',width: "80px",field:'customertypename'}
		]]
	},
	_ExecuteFilter:function()
	{
		var query = {};

		if ( arguments[0].iuserid != -1 )
			query["iuserid"] = arguments[0].iuserid;
		if (arguments[0].tasktypeid != -1 )
			query["tasktypeid"] = arguments[0].tasktypeid;
		if (arguments[0].taskstatusid != -1 )
			query["taskstatusid"] = arguments[0].taskstatusid;

		if (arguments[0].customertypeid != -1 )
			query["customertypeid"] = arguments[0].customertypeid;

		console.log ( arguments ) ;
		if ( arguments[0].overdue.length>0 )
			query["overdue"] = 1;

		this.view_grid.setQuery(ttl.utilities.getPreventCache(query));
		this.details_container.selectChild ( this.blank_view );
	},
	_SetExpire:function()
	{
		this.expirectrl.Load( this._row.i.customerid, this._row.i.taskid );
	},
	_SendConfirmation:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadCustomerCall,
			url:'/iadmin/get_internal',
			content:{'icustomerid':this._row.i.customerid}
			}));
	},
	_LoadCustomer:function( response )
	{
		if ( response.success == "OK" )
		{
			this.sendorderconfirmationctrl.setCustomer (
				response.data.cust.customerid,
				this.sendorderconfirmationdialog,
				response.data.cust,
				this._row.i.taskid) ;

			this.sendorderconfirmationdialog.show();
		}
		else
		{
			alert("Problem Loading Customer Details");
		}
	},
	_UpdatedCall:function( response )
	{
		if ( response.success == "OK")
		{
			this.crmviewer.refresh ( this._row.i.taskid ) ;

			this._tasks.setValue( this._row, "tasktypedescription" , response.task.tasktypedescription, true );
			this._tasks.setValue( this._row, "taskstatusdescription" , response.task.taskstatusdescription, true );
			this._tasks.setValue( this._row, "due_date_display" , response.task.due_date_display, true );
			this._tasks.setValue( this._row, "emailactionstatusdescription", response.task.emailactionstatusdescription, true );
			this.reason.set("value","");
			alert("Updated");
		}
		else
		{
			alert("Problem");
		}
		this.updbtn.cancel();
	},
	_getModelItem:function()
	{
		if ( arguments[0].i.i !=null )
			this.tmp_row = arguments[0].i;
		else
			this.tmp_row = arguments[0];
	},
	_Update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.updbtn.cancel();
			return false;
		}

		if ( this.reason.get("value").length == 0 )
		{
			alert("Please Enter Details");
			this.updbtn.cancel();
			this.reason.focus();
			return false;
		}

		var content = this.form.get("value");

		content["due_date"] = ttl.utilities.toJsonDate ( this.due_date.get("value") ) ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._UpdatedCallBack),
			url:'/iadmin/task_update',
			content:content}));
	},
	_UpdatedSettingsCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Customer Details Updated");
		}
		else
		{
			alert("problem");
		}
	},
	_UpdateSettings:function()
	{
		if ( confirm("Update Customer Details"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._UpdatedSettingsCallBack),
				url:'/iadmin/customer_task_settings_update',
				content:this.formsettingsupdate.get("value")}));

		}
	},
	_Refresh:function()
	{
		var query = { };

		this.view_grid.setQuery(ttl.utilities.getPreventCache(query));
		this.details_container.selectChild ( this.blank_view );

	},
	_GoToMainanence:function()
	{
		dojo.publish(PRCOMMON.Events.Show_Customer_Main, [this._row.i.customerid]);
	},
	_TaskCall:function( response )
	{
		if ( response.success == "OK" )
		{
			this.crmviewer.refresh ( this._row.i.taskid ) ;

			this._tasks.setValue( this._row, "tasktypedescription" , response.task.tasktypedescription, true );
			this._tasks.setValue( this._row, "taskstatusdescription" , response.task.taskstatusdescription, true );
			this._tasks.setValue( this._row, "due_date_display" , response.task.due_date_display, true );
			this._tasks.setValue( this._row, "emailactionstatusdescription", response.task.emailactionstatusdescription, true );
			this.reason.set("value","");

			this.taskstatusid.set("value",response.task.taskstatusid);
			this.assigntoid.set("value", response.task.userid);

		}
	},
	_RefreshTask:function()
	{
		if ( this._row )
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._TaskCallBack,
				url:'/iadmin/task_get',
				content:{taskid:this._row.i.taskid}}));
		}

	}

});

}

if(!dojo._hasResource["prmax.iadmin.sales.DemoAddCustomer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.DemoAddCustomer"] = true;
dojo.provide("prmax.iadmin.sales.DemoAddCustomer");



dojo.declare("prmax.iadmin.sales.DemoAddCustomer",
	[ ttl.BaseWidget],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<form class=\"prmaxdefault\" dojoAttachPoint=\"form\" onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t<input name=\"demorequestid\" dojoAttachPoint=\"demorequestid\" type=\"hidden\" dojoType=\"dijit.form.TextBox\" ></input>\r\n\t\t<table class=\"prmaxtable\" width=\"500px\"  border=\"0\">\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Type</td><td><select class=\"prmaxinput\" name=\"customertypeid\" dojoAttachPoint=\"customertypeid\" style=\"width:9em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Title</td><td><input class=\"prmaxinput\" name=\"contact_title\" dojoAttachPoint=\"contact_title\" type=\"text\" trim=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 4em;\" ></input></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >First Name</td><td><input class=\"prmaxrequired\" name=\"contact_firstname\" dojoAttachPoint=\"contact_firstname\" type=\"text\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 8em;\" ></input><td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Surname</td><td><input class=\"prmaxrequired\" name=\"contact_surname\" dojoAttachPoint=\"contact_surname\" type=\"text\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 12em;\"></input></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Job Title</td><td ><input class=\"prmaxinput\" dojoAttachPoint=\"job_title\" name=\"job_title\" type=\"text\" trim=\"true\" maxlength=\"80\"  dojoType=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Business Name</td><td ><input class=\"prmaxrequired\" dojoAttachPoint=\"customername\" name=\"customername\" type=\"text\" trim=\"true\" required=\"true\" maxlength=\"80\" invalidMessage=\"Please Enter the name of the business\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Email:</td><td><input class=\"prmaxrequired\" dojoAttachPoint=\"email\" name=\"email\" type=\"text\" size=\"40\" maxlength=\"80\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.ValidationTextBox\" lowercase=\"true\" regExpGen=\"dojox.validate.regexp.emailAddress\" trim=\"true\" invalidMessage=\"invalid email address\" size=\"40\" maxlength=\"70\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Address:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"address1\" name=\"address1\" type=\"text\" size=\"40\" invalidMessage=\"Please Enter first line of address\" dojoType=\"dijit.form.ValidationTextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Address 2:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"address2\" name=\"address2\" type=\"text\" size=\"40\" maxlength=\"80\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Town</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"townname\" name=\"townname\" type=\"text\" size=\"30\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >County</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"county\" name=\"county\" type=\"text\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Postcode:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"postcode\" name=\"postcode\" type=\"text\" style=\"width:10em\" maxlength=\"10\" invalidMessage=\"Please Enter a post code \" dojoType=\"dijit.form.ValidationTextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Country</td><td><select class=\"prmaxinput\" name=\"countryid\" dojoAttachPoint=\"countryid\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Tel:</td><td><input class=\"prmaxrequired\" dojoAttachPoint=\"telephone\" name=\"telephone\" type=\"text\" size=\"25\" maxlength=\"40\" required =\"true\" invalidMessage=\"Please enter a contact telephone number\" dojoType=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" >Modules</td><td>&nbsp;</td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Features</td><td><input dojoAttachPoint=\"advancefeatures\" name=\"advancefeatures\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Engagement</td><td><input dojoAttachPoint=\"crm\" name=\"crm\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan =\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">Assign To</td><td><select class=\"prmaxrequired\" required=\"true\" dojoAttachPoint=\"assigntoid\" name=\"assigntoid\" autoComplete=\"true\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan =\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan=\"2\" align=\"center\"><button dojoAttachPoint=\"saveNode\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Creating...\" dojoAttachEvent=\"onClick:_CustomerSave\" label=\"Create Demo Account\" class=\"prmaxbutton\"></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n\r\n\r\n",
	constructor: function()
	{
		this._SavedCallBack = dojo.hitch(this,this._Saved);
		this._LoadedCallBack = dojo.hitch(this, this._LoadedCall);

		this._countries = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=countries"});
		this._users = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=users&group=sales"});
	},
	postCreate:function()
	{
		this.countryid.store = this._countries;
		this.assigntoid.store = this._users;
		this.customertypeid.store = PRCOMMON.utils.stores.Customer_Types();

		this.inherited(arguments);
	},
	_Saved:function(response)
	{
		if ( response.success=="OK")
		{
			alert("Demo Created\nCustomer Id : " + response.customerid + " User Id : " + response.userid);
			this._Clear();
			this._ctrl._DeleteDemoRow();
			this._ctrl.senddlg.hide();
		}
		if ( response.success=="DU")
		{
			alert(response.message);
		}
		this.saveNode.cancel();
	},
	_CustomerSave:function()
	{
		if ( ttl.utilities.formValidator(this.form)==false)
		{
			alert("Not all required fields filled in");
			this.saveNode.cancel();
			return;
		}

		var content = this.form.get("value");

		if (this._sendemail)
			content["sendemail"] = true ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._SavedCallBack,
			url:'/iadmin/demo_to_customer' ,
			content: content
		}));
	},
	_LoadedCall:function ( response )
	{
		if ( response.success == "OK")
		{
			this.customertypeid.set("value", response.data.customertypeid);
			this.demorequestid.set("value", response.data.demorequestid);
			this.contact_title.set("value", response.data.contact_title );
			this.contact_firstname.set("value", response.data.contact_firstname);
			this.contact_surname.set("value", response.data.contact_surname);
			this.job_title.set("value", response.data.job_title);
			this.customername.set("value", response.data.customername);
			this.email.set("value", response.data.email);
			this.address1.set("value", response.data.address1);
			this.address2.set("value", response.data.address2);
			this.townname.set("value", response.data.townname);
			this.county.set("value", response.data.county);
			this.postcode.set("value", response.data.postcode);
			this.countryid.set("value", response.data.countryid);
			this.telephone.set("value", response.data.telephone);
			this.advancefeatures.set("value",true);
			this.crm.set("value",false);

			this._ctrl.senddlg.set("title", (this._sendemail == true)?"Add Customer & Send Email" : "Add Customer");
			this._ctrl.senddlg.show();
		}
		else
		{
			alert("Problem Loading Demo Details");
		}
	},
	Load:function( data ,sendemail, ctrl)
	{
		this._ctrl = ctrl;
		this._sendemail = sendemail;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadedCallBack,
			url:'/iadmin/demo_get_customer' ,
			content: { demorequestid : data.demorequestid }
		}));

	},
	_Clear:function()
	{

	}
});

}

if(!dojo._hasResource["prmax.iadmin.sales.DemoRequestView"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.DemoRequestView"] = true;
dojo.provide("prmax.iadmin.sales.DemoRequestView");







dojo.declare("prmax.iadmin.sales.DemoRequestView",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div dojotype=\"dijit.layout.BorderContainer\" gutters=\"false\" style=\"width:100%;height:100%\" dojoAttachPoint=\"borderControl\" >\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"top\" style=\"width:100%\">\r\n\t\t\t<div style=\"height:40px;width:100%;overflow:hidden;margin:0px;padding:0px\" class=\"searchresults\">\r\n\t\t\t\t<div style=\"height:100%;width:15%;float:left;margin:0px;padding:0px\" dojoAttachPoint=\"demorequests_time\" class=\"dijitToolbar prmaxrowdisplaylarge\">Time</div>\r\n\t\t\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left;height:100%;width:85%;margin:0px;padding:0px\" >\r\n\t\t\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" dojoAttachEvent=\"onClick:_RefreshDemoRequest\" showLabel=\"true\">Refresh</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t<div  dojoType=\"dijit.layout.ContentPane\" region=\"left\" style=\"width:70%\" >\r\n\t\t\t<div dojoAttachPoint=\"demorequestview\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"50\" structure=\"PRMAX.iadmin.gridlayout.demorequest\" splitter=\"true\"></div>\r\n\t\t</div>\r\n\t\t<div  dojoType=\"dijit.layout.ContentPane\" region=\"center\" splitter=\"true\">\r\n\t\t\t<div dojoAttachPoint=\"demo_options_view\" class=\"prmaxhidden\">\r\n\t\t\t\t<button dojoType=\"dijit.form.Button\" dojoAttachPoint=\"demo_to_customer_email\" label=\"Add Customer & Send Email\" dojoAttachEvent=\"onClick:_DemoToCustomerEmail\"></button><br/>\r\n\t\t\t\t<button dojoType=\"dijit.form.Button\" dojoAttachPoint=\"demo_to_customer\" label=\"Add Customer\" dojoAttachEvent=\"onClick:_DemoToCustomer\"></button><br/>\r\n\t\t\t\t<button dojoType=\"dojox.form.BusyButton\" dojoAttachPoint=\"demo_delete\" label=\"Delete Request\" busyLabel=\"Deleting Request\" dojoAttachEvent=\"onClick:_DemoDelete\"></button><br/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div dojotype=\"dijit.Dialog\" title=\"Add Customer\" dojoAttachPoint=\"senddlg\">\r\n\t\t<div dojotype=\"prmax.iadmin.sales.DemoAddCustomer\" dojoAttachPoint=\"sendctrl\"></div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{

		this._DemoToCustomerResponseCall = dojo.hitch(this,this._DemoToCustomerResponse);
		this._DemoDeleteResponseCall = dojo.hitch(this,this._DemoDeleteResponse);

		this.demo_request_data = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/demorequests',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});

	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.demorequestview.set("structure", this._view);
		this.demorequestview._setStore(this.demo_request_data );
		this.demorequestview['onRowClick'] = dojo.hitch(this,this._OnSelectDemoRequest);
		this.demorequestview['onStyleRow'] = dojo.hitch(this,this._OnStyleRow);
	},
	_OnStyleRow:function(inRow)
	{
		ttl.GridHelpers.onStyleRow(inRow);
	},
	_SetTime:function( field )
	{
		dojo.attr( field ,"innerHTML",new Date().toString());
	},
	resize:function()
	{
		this.borderControl.resize(arguments[0]);
		this.inherited(arguments);
	},
	_RefreshDemoRequest:function()
	{
		this.demorequestview.setQuery(ttl.utilities.getPreventCache());
		this._SetTime(this.demorequests_time);
	},
	_OnSelectDemoRequest:function( e )
	{
		this._demorow = this.demorequestview.getItem(e.rowIndex);
		dojo.removeClass(this.demo_options_view, "prmaxhidden");
		this.demorequestview.selection.clickSelectEvent(e);
	},
	_view : { noscroll: false,
		cells: [[
		{name: 'Source',width: "auto",field:'customertypename'},
		{name: 'Customer Name',width: "auto",field:'customername'},
		{name: 'Contact Name',width: "auto",field:'contactname'},
		{name: 'Email',width: "auto",field:'email'},
		{name: 'Address1',width: "auto",field:'address1'},
		{name: 'Town',width: "auto",field:'townname'},
		{name: 'PostCode',width: "auto",field:'postcode'},
		{name: 'Telephone',width: "auto",field:'telephone'}
		]]
	},
	_DeleteDemoRow:function()
	{
		this.demo_request_data.deleteItem(this._demorow);
		this.demorequestview.selection.clear();
		dojo.addClass(this.demo_options_view, "prmaxhidden");
	},
	_DemoToCustomerResponse:function ( response )
	{
		if ( response.success=="OK")
		{
			alert ( "Customer Added");
			this._DeleteDemoRow();
		}
		else if ( response.success=="DU")
		{
			alert ( "Customer Allready exists");
		}
		else
		{
			alert ( "Problem converting demo to customer");
		}
		this.demo_to_customer_email.cancel();
		this.demo_to_customer.cancel();
	},
	_DemoToCustomerEmail:function()
	{
		this.sendctrl.Load ( this._demorow.i , true , this ) ;
	},
	_DemoToCustomer:function()
	{
		this.sendctrl.Load ( this._demorow.i , false , this ) ;
	},
	_DemoDeleteResponse:function ( response )
	{
		if ( response.success=="OK")
		{
			alert ( "Demo Request Deleted");
			this._DeleteDemoRow();
		}
		this.demo_delete.cancel();
	},
	_DemoDelete:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._DemoDeleteResponseCall,
			url:'/iadmin/delete_demo',
			content:{demorequestid:this._demorow.i.demorequestid}}));
	}
});

}

if(!dojo._hasResource["prmax.iadmin.sales.ReActivateDemo"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.ReActivateDemo"] = true;
dojo.provide("prmax.iadmin.sales.ReActivateDemo");

dojo.declare("prmax.iadmin.sales.ReActivateDemo",
	[ ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\",\"class\":\"prmaxdefault\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"icustomerid\"' data-dojo-attach-point=\"icustomerid\" data-dojo-type=\"dijit.form.TextBox\" ></input>\r\n\t\t<table class=\"prmaxtable\" width=\"500px\"  border=\"0\">\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Email Address</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-props='\"class\":\"prmaxinput\",name:\"email\",type:\"text\",size:\"40\",maxlength:\"80\",trim:true,required:true,regExpGen:dojox.validate.regexp.emailAddress,invalidMessage:\"invalid email address\",size:\"40\"' data-dojo-attach-point=\"email\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Contact Name</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-props='\"class\":\"prmaxinput\",name:\"displayname\",type:\"text\",size:\"80\",maxlength:\"80\",trim:true,required:true' data-dojo-attach-point=\"displayname\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >End Date</td><td><input data-dojo-props='type:\"text\",required:true,name:\"licence_expire\",style:\"width:8em\"' data-dojo-attach-point=\"licence_expire\" data-dojo-type=\"dijit.form.DateTextBox\"><td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Send Email</td><td><input data-dojo-attach-point=\"sendemail\" data-dojo-props='value:\"true\",name:\"sendemail\",type:\"checkBox\"' data-dojo-type=\"dijit.form.CheckBox\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">Assigned To</td><td><select data-dojo-props='\"class\":\"prmaxrequired\",required:true,name:\"assigntoid\",autoComplete:true,style:\"width:15em\",labelType:\"html\"' data-dojo-attach-point=\"assigntoid\"  data-dojo-type=\"dijit.form.FilteringSelect\" ></select></td></td></tr>\r\n\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan =\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan=\"2\" align=\"right\"><button data-dojo-attach-point=\"updBtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='busyLabel:\"Please Wait Updating...\",label:\"Re-Activate\",\"class\":\"prmaxbutton\"' data-dojo-attach-event=\"onClick:_Update\" ></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n\r\n\r\n",
	constructor: function()
	{
		this._UpdatedCallBack = dojo.hitch(this,this._UpdatedCall);
		this._LoadedCallBack = dojo.hitch(this, this._LoadedCall);
		this._userfilter = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=users&group=sales"});
	},
	postCreate:function()
	{
		this.assigntoid.set("store", this._userfilter ) ;
	},
	Load:function( customerid, dialog )
	{
		this.updBtn.set("disabled", true ) ;
		this.icustomerid.set("value", customerid);
		this._dialog = dialog;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadedCallBack,
			url:'/iadmin/get_internal' ,
			content: {icustomerid : customerid }
		}));
	},
	_LoadedCall:function ( response )
	{
		if ( response.success == "OK")
		{
			var td = new Date();
			var t = new Date(td.getTime()  + 4*24*60*60*1000);
			this.licence_expire.set("value", t);
			this.email.set("value", response.data.cust.email ) ;
			this.displayname.set("value", response.data.cust.displayname );
			this.sendemail.set("checked", true ) ;
			this.updBtn.set("disabled", false ) ;
			this._dialog.show();
			this.updBtn.cancel();
		}
		else
		{
			alert("Problem Loading Expire Details");
		}
	},
	_UpdatedCall:function( response )
	{
		if ( response.success == "OK" )
		{

			if (this ._dialog)
				this._dialog.hide();
		}
		else
		{
			if ( response.message)
				alert( response.message ) ;
			else
				alert("Problem Upating");
		}
		this.updBtn.cancel();
	},
	_Update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Missing Data");
			this.updBtn.cancel();
			return false;
		}

		var content = this.form.get("value");
		content["licence_expire"] = ttl.utilities.toJsonDate ( this.licence_expire.get("value"));

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._UpdatedCallBack),
			url:'/iadmin/re_activate_trial',
			content:content}));
	}
});

}

if(!dojo._hasResource["prmax.iadmin.sales.SetFreeSEOCount"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.SetFreeSEOCount"] = true;
dojo.provide("prmax.iadmin.sales.SetFreeSEOCount");

dojo.declare("prmax.iadmin.sales.SetFreeSEOCount",
	[ ttl.BaseWidget],{
	templateString:"<div>\r\n\t<div data-dojo-attach-point=\"dlg\" data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Set Nbr of Free SEO for Customer\"'>\r\n\t\t<form data-dojo-attach-point=\"form\"  data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t\t<input data-dojo-attach-point=\"icustomerid\" data-dojo-props='name:\"icustomerid\",type:\"hidden\"' data-dojo-type=\"dijit.form.TextBox\">\r\n\t\t\t<table style=\"width:400px;border-collapse:collapse;\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t<tr ><td class=\"prmaxrowtag\" align=\"right\" >SEO Credit Qty</td><td><input data-dojo-props='\"class\":\"prmaxinput\",name:\"seonbrincredit\",type:\"text\",trim:true' data-dojo-attach-point=\"seonbrincredit\" data-dojo-type=\"dijit.form.NumberTextBox\"></td></tr>\r\n\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Reason</td><td colspan=\"2\"><div class=\"stdframe prmaxrequired\" style=\"height:150px;\"><textarea data-dojo-attach-point=\"reason\" data-dojo-props='\"class\":\"prmaxrequired\", name:\"reason\", trim:true, required:true, style:\"width:99%;height:80%\"' data-dojo-type=\"dijit.form.Textarea\" ></textarea></div></td></tr>\r\n\t\t\t\t<tr><td colspan=\"2\"><br/></td></tr>\r\n\t\t\t\t<tr><td><button data-dojo-attach-event=\"onClick:_Close\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Close\", type:\"button\"' ></button></td><td align=\"right\"><button data-dojo-attach-point=\"updBtn\" data-dojo-attach-event=\"onClick:_Update\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\", label:\"Set Free SEO Qty\",busyLabel:\"Please wait Updating\"' ></button></td></tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._UpdatedCallBack = dojo.hitch(this,this._UpdatedCall);
		this._LoadedCallBack = dojo.hitch(this, this._LoadedCall);
	},
	Load:function( customerid)
	{
		this.icustomerid.set("value", customerid);

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadedCallBack,
			url:'/iadmin/get_internal' ,
			content: {icustomerid : customerid }
		}));
	},
	_LoadedCall:function ( response )
	{
		if ( response.success == "OK")
		{
			this.Clear();
			this.reason.set("value", "");
			this.seonbrincredit.set("value", response.data.cust.seonbrincredit);
			this.dlg.show();
		}
		else
		{
			alert("Problem Loading SEO Value");
		}
	},
	Clear:function()
	{
		this.updBtn.cancel();
		this.reason.set("value, ");
		this.seonbrincredit.set("value", 0);

	},
	_UpdatedCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("SEO Free Count Updated");
			this.dlg.hide();
			this.Clear();
		}
		else
		{
			if ( response.message)
				alert( response.message ) ;
			else
				alert("Problem Upating");
		}
		this.updBtn.cancel();
	},
	_Update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Missing Data");
			this.updBtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._UpdatedCallBack),
			url:'/iadmin/customer_seo_qty_update',
			content:this.form.get("value")}));
	},
	_Close:function()
	{
		this.dlg.hide();
		this.Clear();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.support.FrontScreen"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.support.FrontScreen"] = true;
dojo.provide("prmax.iadmin.support.FrontScreen");



dojo.declare("prmax.iadmin.support.FrontScreen",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<table class=\"prmaxtable\" width=\"100%\">\r\n\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">Customer</td><td width=\"70%\">\r\n\t\t<select dojoAttachPoint=\"customer_front_id\"\r\n\t\t\t\t\t\t\tdojoAttachEvent=\"onChange:_LoadFrontPageChange\"\r\n\t\t\t\t\t\t\tautoComplete=\"true\"\r\n\t\t\t\t\t\t\tsearchAttr=\"customername\"\r\n\t\t\t\t\t\t\tlabelAttr=\"customername\"\r\n\t\t\t\t\t\t\tdojoType=\"dijit.form.FilteringSelect\"\r\n\t\t\t\t\t\t\tlabelType=\"html\"></select>\r\n\t\t\t\t\t<button dojoType=dijit.form.Button dojoAttachEvent=\"onClick:_UpdateFrontScreen\" type=\"button\" name=\"submit\">Update Front Screen Message</button>\r\n\t\t\t\t\t<button dojoType=dijit.form.Button dojoAttachEvent=\"onClick:_PreviewFrontScreen\" type=\"button\" >Preview Update Front Screen Message</button>\r\n\t</td></tr>\r\n\t</table>\r\n\t<textarea dojoAttachPoint=\"front_page\" class=\"dijitTextarea\" dojoType=\"dijit.form.Textarea\"  style=\"width:100%;height:400px\"></textarea>\r\n</div>\r\n",
	constructor: function()
	{
		this._LoadFrontPageCall = dojo.hitch(this,this._LoadFrontPage);
		this._UpdateFrontPageResponseCall = dojo.hitch(this,this._UpdateFrontPageResponse);

		this.customer_front_id_data = new dojox.data.QueryReadStore (
			{url:'/iadmin/customers_combo',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true
			});

	},
	postCreate:function()
	{
		this.inherited(arguments);

		this.customer_front_id.store = this.customer_front_id_data;
		this.customer_front_id.set("value","-1");
		this._GetFrontPage(-1);
	},
	_UpdateFrontScreen:function()
	{
		if ( confirm("Update Front Screen"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._UpdateFrontPageResponseCall),
				url:'/iadmin/update_front_page',
				content:{'icustomerid':this.customer_front_id.get("value"),
							info: this.front_page.get("value")}
					}));
		}
	},
	_UpdateFrontPageResponse:function ( response )
	{
		if ( response.success=="OK")
			alert("Front Page Updated");
		else
			alert("Problem Updating front page");
	},
	_GetFrontPage:function ( customerid )
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._LoadFrontPageCall),
			url:'/iadmin/get_front_page',
			content:{'icustomerid': customerid}
			}));
	},
	_LoadFrontPageChange:function ()
	{
		if ( this.front_customerid != arguments[0] )
		{
			this.front_customerid = arguments[0];
			this._GetFrontPage ( this.front_customerid ) ;
		}
	},
	_PreviewFrontScreen:function()
	{

	},
	_LoadFrontPage:function ( response )
	{
		if ( response.success == "OK" )
		{
			this.front_page.set("value", response.info);
		}
		else
		{
			alert("Problem Loading Front Page");
		}
	}
});

}

if(!dojo._hasResource["prmax.iadmin.support.ActiveUsers"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.support.ActiveUsers"] = true;
dojo.provide("prmax.iadmin.support.ActiveUsers");



dojo.declare("prmax.iadmin.support.ActiveUsers",
	[ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t\t<div dojoAttachPoint=\"frame\" dojotype=\"dijit.layout.BorderContainer\" gutters=\"false\" title=\"Active Users\" style=\"width:100%;height:100%;overflow: hidden\" >\r\n\t\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"top\" style=\"width:100%\">\r\n\t\t\t\t<div style=\"height:40px;width:100%;overflow:hidden\" class=\"searchresults\">\r\n\t\t\t\t\t<div style=\"height:100%;width:15%;float:left;\" dojoAttachPoint=\"activeusers_time\" class=\"dijitToolbar prmaxrowdisplaylarge\">Time</div>\r\n\t\t\t\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left;height:100%;width:83%\" >\r\n\t\t\t\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\" dojoAttachEvent=\"onClick:_ActiveUsers_Refresh\">Refresh</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" region=\"center\" >\r\n\t\t\t\t<div dojoAttachPoint=\"activeusers\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"50\" ></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this.activeusers_data = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/activeusers',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});
	},
	postCreate:function()
	{
		this.inherited(arguments);

		this.activeusers.set("structure", this._view);
		this.activeusers._setStore(this.activeusers_data );
		this.activeusers['onCellClick'] = dojo.hitch(this,this._OnActiveUser);

	},
	resize:function()
	{
		this.inherited(arguments);
		this.frame.resize(arguments[0] );
	},
	_UserLoggedOffCall:function( response )
	{
		if ( response.success == "OK" )
			this.activeusers_data.deleteItem(this._useractiverow);
	},

	_OnActiveUser:function (e )
	{
		if ( e.cellIndex == 3 && confirm("Log User off System") == true )
		{
			this._useractiverow = this.activeusers.getItem(e.rowIndex);

			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._UserLoggedOffCallBack,
				url:'/customers/logoff_user' ,
				content: {old_user_id:this._useractiverow.i.user_id}
			})	);
		}
	},
	_ActiveUsers_Refresh:function( )
	{
		this.activeusers.setQuery(ttl.utilities.getPreventCache());
		this._SetTime( this.activityview_time );
	},
	_SetTime:function( field )
	{
		dojo.attr( field ,"innerHTML",new Date().toString());
	},
	_view : {noscroll: false,
			cells: [[
			{name: 'Expires',width: "auto",field:'expiry'},
			{name: 'User Name',width: "auto",field:'user_name'},
			{name: 'Customer',width: "auto",field:'customername'},
			{Name: 'Logoff',width:"100px"}
		]]
		}
});

}

if(!dojo._hasResource["prmax.iadmin.support.PrivateData"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.support.PrivateData"] = true;
dojo.provide("prmax.iadmin.support.PrivateData");

dojo.declare("prmax.iadmin.support.PrivateData",
	[dijit._Widget, dijit._Templated, dijit._Container],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<form  dojoAttachPoint=\"private_form\" method=\"post\" name=\"private_form\" enctype=\"multipart/form-data\"  onSubmit=\"return false;\">\r\n\t\t<input class=\"prmaxinput\" type=\"hidden\" dojoAttachPoint=\"private_cache\" name=\"private_cache\" value=\"-1\">\r\n\t\t<table width=\"50%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\r\n\t\t\t<tr><td class=\"prmaxrowtag\">File Name</td><td><input size=\"30\" class=\"prmaxinput\" type=\"file\" dojoAttachPoint=\"private_file\" name=\"private_file\"></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\">Customer</td><td>\r\n\t\t\t<select name=\"icustomerid\"\r\n\t\t\t\tautoComplete=\"true\"\r\n\t\t\t\tdojoType=\"dijit.form.FilteringSelect\"\r\n\t\t\t\tlabelType=\"html\"\r\n\t\t\t\tsearchAttr=\"customername\"\r\n\t\t\t\tdojoAttachPoint=\"icustomerid\"\r\n\t\t\t\tsearch></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\">Add to existing Outlets</td><td><input type=\"checkbox\" name=\"no_add_outlet\" dojoType=\"dijit.form.CheckBox\"></td></tr>\r\n\t\t\t<tr><td colspan = \"2\" >&nbsp;</td></tr>\r\n\t\t\t<tr><td colspan = \"2\" ><span dojoAttachPoint=\"progressNode\" style=\"display:none;\"><div dojoType=\"dijit.ProgressBar\" dojoAttachPoint=\"progressControl\" style=\"width:200px\" indeterminate=\"true\"></div></span></td></tr>\r\n\t\t\t<tr><td colspan=\"2\" align=\"right\"><button class=\"prmaxbutton\"  dojoAttachPoint=\"saveNode\" type=\"button\"  dojoType=\"dijit.form.Button\" label=\"Upload Private Data\" dojoAttachEvent=\"onClick:_Add\"></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this.icustomerid_data = new dojox.data.QueryReadStore (
			{url:'/iadmin/customers_combo',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true
			});

		this._AddedCallback = dojo.hitch(this,this._Added);

	},
	postCreate:function()
	{
		this.icustomerid.store = this.icustomerid_data;
	},
	_Added:function( response )
	{
		this.progressNode.style.display = "none";
		if (response.success=="OK")
		{
			alert("Private Data Added");
			this._Close();
		}
		else if (response.success=="FA")
		{
			alert(response.message);
		}
		else
		{
			alert("Problem Adding Private Data");
		}
	},
	_Add:function()
	{
		this.private_cache.value = new Date().valueOf();
		this.progressNode.style.display = "block";

		dojo.io.iframe.send(
		{
			url: "/iadmin/import_customer_outlets",
			handleAs:"json",
	        load: this._AddedCallback,
	        form: this.private_form
		});
	}
});

}

if(!dojo._hasResource["prmax.iadmin.support.ResetAndSend"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.support.ResetAndSend"] = true;
dojo.provide("prmax.iadmin.support.ResetAndSend");

dojo.declare("prmax.iadmin.support.ResetAndSend",
	[ ttl.BaseWidget],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\",\"class\":\"prmaxdefault\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"iuserid\"' data-dojo-attach-point=\"iuserid\" data-dojo-type=\"dijit.form.TextBox\" ></input>\r\n\t\t<table class=\"prmaxtable\" width=\"500px\"  border=\"0\">\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Display Name</td><td data-dojo-attach-point=\"displayname\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Email To:</td><td><input data-dojo-attach-point=\"email\" data-dojo-props='name:\"email\",type:\"text\",maxlength:80,trim:true,regExpGen:dojox.validate.regexp.emailAddress,required:true,invalidMessage:\"invalid email address\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Password</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-props='\"class\":\"prmaxinput\",name:\"password\",type:\"text\",size:\"40\",maxlength:\"40\",trim:true,required:true' data-dojo-attach-point=\"password\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Full Details</td><td><input data-dojo-attach-point=\"fulldetails\" data-dojo-props='value:\"false\",name:\"fulldetails\",type:\"checkBox\"' data-dojo-type=\"dijit.form.CheckBox\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan =\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan=\"2\" align=\"right\"><button data-dojo-attach-point=\"updbtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='busyLabel:\"Please Wait...\",label:\"Send Details\",\"class\":\"prmaxbutton\"' data-dojo-attach-event=\"onClick:_update\" ></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n\r\n\r\n",
	constructor: function()
	{
		this._updated_call_back = dojo.hitch(this,this._update_call);
		this._loaded_call_back = dojo.hitch(this, this._loaded_call);
	},
	load:function( iuserid , dialog )
	{
		this.updbtn.cancel();
		this.iuserid.set("value", iuserid);
		this.email.set("value","");
		this.password.set("value","");
		this._dialog = dialog;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._loaded_call_back,
			url:'/iadmin/get_user_internal' ,
			content: {iuserid : iuserid }
		}));
	},
	_loaded_call:function ( response )
	{
		if ( response.success == "OK")
		{
			//displayname
			dojo.attr( this.displayname ,"innerHTML", response.data.display_name + " | "  + response.data.user_name);
			this.email.set("value",response.data.user_name);
			this._dialog.show();
		}
		else
		{
			alert("Problem Loading User Details");
		}
	},
	_updated_call:function( response )
	{
		if ( response.success == "OK" )
		{

			if (this ._dialog)
				this._dialog.hide();
		}
		else
		{
			if ( response.message)
				alert( response.message ) ;
			else
				alert("Problem Upating");
		}
		this.updbtn.cancel();
	},
	_update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Missing Data");
			this.updbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this, this._updated_call_back),
			url:'/iadmin/send_login_details',
			content:this.form.get("value")}));
	},
	_update_call:function( response )
	{
		if ( response.success=="OK")
		{
			alert("Email Sent");
		}
		else
		{
		alert("problem Sending Email");
		}
		this.updbtn.cancel();
	}
});


}

if(!dojo._hasResource["dijit._editor.selection"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.selection"] = true;
dojo.provide("dijit._editor.selection");



dojo.getObject("_editor.selection", true, dijit);

// FIXME:
//		all of these methods branch internally for IE. This is probably
//		sub-optimal in terms of runtime performance. We should investigate the
//		size difference for differentiating at definition time.

dojo.mixin(dijit._editor.selection, {
	getType: function(){
		// summary:
		//		Get the selection type (like dojo.doc.select.type in IE).
		if(dojo.isIE < 9){
			return dojo.doc.selection.type.toLowerCase();
		}else{
			var stype = "text";

			// Check if the actual selection is a CONTROL (IMG, TABLE, HR, etc...).
			var oSel;
			try{
				oSel = dojo.global.getSelection();
			}catch(e){ /*squelch*/ }

			if(oSel && oSel.rangeCount == 1){
				var oRange = oSel.getRangeAt(0);
				if(	(oRange.startContainer == oRange.endContainer) &&
					((oRange.endOffset - oRange.startOffset) == 1) &&
					(oRange.startContainer.nodeType != 3 /* text node*/)
				){
					stype = "control";
				}
			}
			return stype; //String
		}
	},

	getSelectedText: function(){
		// summary:
		//		Return the text (no html tags) included in the current selection or null if no text is selected
		if(dojo.isIE < 9){
			if(dijit._editor.selection.getType() == 'control'){
				return null;
			}
			return dojo.doc.selection.createRange().text;
		}else{
			var selection = dojo.global.getSelection();
			if(selection){
				return selection.toString(); //String
			}
		}
		return '';
	},

	getSelectedHtml: function(){
		// summary:
		//		Return the html text of the current selection or null if unavailable
		if(dojo.isIE < 9){
			if(dijit._editor.selection.getType() == 'control'){
				return null;
			}
			return dojo.doc.selection.createRange().htmlText;
		}else{
			var selection = dojo.global.getSelection();
			if(selection && selection.rangeCount){
				var i;
				var html = "";
				for(i = 0; i < selection.rangeCount; i++){
					//Handle selections spanning ranges, such as Opera
					var frag = selection.getRangeAt(i).cloneContents();
					var div = dojo.doc.createElement("div");
					div.appendChild(frag);
					html += div.innerHTML;
				}
				return html; //String
			}
			return null;
		}
	},

	getSelectedElement: function(){
		// summary:
		//		Retrieves the selected element (if any), just in the case that
		//		a single element (object like and image or a table) is
		//		selected.
		if(dijit._editor.selection.getType() == "control"){
			if(dojo.isIE < 9){
				var range = dojo.doc.selection.createRange();
				if(range && range.item){
					return dojo.doc.selection.createRange().item(0);
				}
			}else{
				var selection = dojo.global.getSelection();
				return selection.anchorNode.childNodes[ selection.anchorOffset ];
			}
		}
		return null;
	},

	getParentElement: function(){
		// summary:
		//		Get the parent element of the current selection
		if(dijit._editor.selection.getType() == "control"){
			var p = this.getSelectedElement();
			if(p){ return p.parentNode; }
		}else{
			if(dojo.isIE < 9){
				var r = dojo.doc.selection.createRange();
				r.collapse(true);
				return r.parentElement();
			}else{
				var selection = dojo.global.getSelection();
				if(selection){
					var node = selection.anchorNode;
					while(node && (node.nodeType != 1)){ // not an element
						node = node.parentNode;
					}
					return node;
				}
			}
		}
		return null;
	},

	hasAncestorElement: function(/*String*/tagName /* ... */){
		// summary:
		// 		Check whether current selection has a  parent element which is
		// 		of type tagName (or one of the other specified tagName)
		// tagName: String
		//		The tag name to determine if it has an ancestor of.
		return this.getAncestorElement.apply(this, arguments) != null; //Boolean
	},

	getAncestorElement: function(/*String*/tagName /* ... */){
		// summary:
		//		Return the parent element of the current selection which is of
		//		type tagName (or one of the other specified tagName)
		// tagName: String
		//		The tag name to determine if it has an ancestor of.
		var node = this.getSelectedElement() || this.getParentElement();
		return this.getParentOfType(node, arguments); //DOMNode
	},

	isTag: function(/*DomNode*/ node, /*String[]*/ tags){
		// summary:
		//		Function to determine if a node is one of an array of tags.
		// node:
		//		The node to inspect.
		// tags:
		//		An array of tag name strings to check to see if the node matches.
		if(node && node.tagName){
			var _nlc = node.tagName.toLowerCase();
			for(var i=0; i<tags.length; i++){
				var _tlc = String(tags[i]).toLowerCase();
				if(_nlc == _tlc){
					return _tlc; // String
				}
			}
		}
		return "";
	},

	getParentOfType: function(/*DomNode*/ node, /*String[]*/ tags){
		// summary:
		//		Function to locate a parent node that matches one of a set of tags
		// node:
		//		The node to inspect.
		// tags:
		//		An array of tag name strings to check to see if the node matches.
		while(node){
			if(this.isTag(node, tags).length){
				return node; // DOMNode
			}
			node = node.parentNode;
		}
		return null;
	},

	collapse: function(/*Boolean*/beginning){
		// summary:
		//		Function to collapse (clear), the current selection
		// beginning: Boolean
		//		Boolean to indicate whether to collapse the cursor to the beginning of the selection or end.
		if(window.getSelection){
			var selection = dojo.global.getSelection();
			if(selection.removeAllRanges){ // Mozilla
				if(beginning){
					selection.collapseToStart();
				}else{
					selection.collapseToEnd();
				}
			}else{ // Safari
				// pulled from WebCore/ecma/kjs_window.cpp, line 2536
				selection.collapse(beginning);
			}
		}else if(dojo.isIE){ // IE
			var range = dojo.doc.selection.createRange();
			range.collapse(beginning);
			range.select();
		}
	},

	remove: function(){
		// summary:
		//		Function to delete the currently selected content from the document.
		var sel = dojo.doc.selection;
		if(dojo.isIE < 9){
			if(sel.type.toLowerCase() != "none"){
				sel.clear();
			}
			return sel; //Selection
		}else{
			sel = dojo.global.getSelection();
			sel.deleteFromDocument();
			return sel; //Selection
		}
	},

	selectElementChildren: function(/*DomNode*/element,/*Boolean?*/nochangefocus){
		// summary:
		//		clear previous selection and select the content of the node
		//		(excluding the node itself)
		// element: DOMNode
		//		The element you wish to select the children content of.
		// nochangefocus: Boolean
		//		Boolean to indicate if the foxus should change or not.
		var win = dojo.global;
		var doc = dojo.doc;
		var range;
		element = dojo.byId(element);
		if(doc.selection && dojo.isIE < 9 && dojo.body().createTextRange){ // IE
			range = element.ownerDocument.body.createTextRange();
			range.moveToElementText(element);
			if(!nochangefocus){
				try{
					range.select(); // IE throws an exception here if the widget is hidden.  See #5439
				}catch(e){ /* squelch */}
			}
		}else if(win.getSelection){
			var selection = dojo.global.getSelection();
			if(dojo.isOpera){
				//Opera's selectAllChildren doesn't seem to work right
				//against <body> nodes and possibly others ... so
				//we use the W3C range API
				if(selection.rangeCount){
					range = selection.getRangeAt(0);
				}else{
					range = doc.createRange();
				}
				range.setStart(element, 0);
				range.setEnd(element,(element.nodeType == 3)?element.length:element.childNodes.length);
				selection.addRange(range);
			}else{
				selection.selectAllChildren(element);
			}
		}
	},

	selectElement: function(/*DomNode*/element,/*Boolean?*/nochangefocus){
		// summary:
		//		clear previous selection and select element (including all its children)
		// element:  DOMNode
		//		The element to select.
		// nochangefocus: Boolean
		//		Boolean indicating if the focus should be changed.  IE only.
		var range;
		var doc = dojo.doc;
		var win = dojo.global;
		element = dojo.byId(element);
		if(dojo.isIE < 9 && dojo.body().createTextRange){
			try{
				var tg = element.tagName ? element.tagName.toLowerCase() : "";
				if(tg === "img" || tg === "table"){
					range = dojo.body().createControlRange();
				}else{
					range = dojo.body().createRange();
				}
				range.addElement(element);
				if(!nochangefocus){
					range.select();
				}
			}catch(e){
				this.selectElementChildren(element,nochangefocus);
			}
		}else if(dojo.global.getSelection){
			var selection = win.getSelection();
			range = doc.createRange();
			if(selection.removeAllRanges){ // Mozilla
				// FIXME: does this work on Safari?
				if(dojo.isOpera){
					//Opera works if you use the current range on
					//the selection if present.
					if(selection.getRangeAt(0)){
						range = selection.getRangeAt(0);
					}
				}
				range.selectNode(element);
				selection.removeAllRanges();
				selection.addRange(range);
			}
		}
	},

	inSelection: function(node){
		// summary:
		//		This function determines if 'node' is
		//		in the current selection.
		// tags:
		//		public
		if(node){
			var newRange;
			var doc = dojo.doc;
			var range;

			if(dojo.global.getSelection){
				//WC3
				var sel = dojo.global.getSelection();
				if(sel && sel.rangeCount > 0){
					range = sel.getRangeAt(0);
				}
				if(range && range.compareBoundaryPoints && doc.createRange){
					try{
						newRange = doc.createRange();
						newRange.setStart(node, 0);
						if(range.compareBoundaryPoints(range.START_TO_END, newRange) === 1){
							return true;
						}
					}catch(e){ /* squelch */}
				}
			}else if(doc.selection){
				// Probably IE, so we can't use the range object as the pseudo
				// range doesn't implement the boundry checking, we have to
				// use IE specific crud.
				range = doc.selection.createRange();
				try{
					newRange = node.ownerDocument.body.createControlRange();
					if(newRange){
						newRange.addElement(node);
					}
				}catch(e1){
					try{
						newRange = node.ownerDocument.body.createTextRange();
						newRange.moveToElementText(node);
					}catch(e2){/* squelch */}
				}
				if(range && newRange){
					// We can finally compare similar to W3C
					if(range.compareEndPoints("EndToStart", newRange) === 1){
						return true;
					}
				}
			}
		}
		return false; // boolean
	}

});

}

if(!dojo._hasResource["dijit._editor.range"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.range"] = true;
dojo.provide("dijit._editor.range");



dijit.range={};

dijit.range.getIndex=function(/*DomNode*/node, /*DomNode*/parent){
//	dojo.profile.start("dijit.range.getIndex");
	var ret=[], retR=[];
	var stop = parent;
	var onode = node;

	var pnode, n;
	while(node != stop){
		var i = 0;
		pnode = node.parentNode;
		while((n=pnode.childNodes[i++])){
			if(n === node){
				--i;
				break;
			}
		}
		//if(i>=pnode.childNodes.length){
			//dojo.debug("Error finding index of a node in dijit.range.getIndex");
		//}
		ret.unshift(i);
		retR.unshift(i-pnode.childNodes.length);
		node = pnode;
	}

	//normalized() can not be called so often to prevent
	//invalidating selection/range, so we have to detect
	//here that any text nodes in a row
	if(ret.length > 0 && onode.nodeType == 3){
		n = onode.previousSibling;
		while(n && n.nodeType == 3){
			ret[ret.length-1]--;
			n = n.previousSibling;
		}
		n = onode.nextSibling;
		while(n && n.nodeType == 3){
			retR[retR.length-1]++;
			n = n.nextSibling;
		}
	}
//	dojo.profile.end("dijit.range.getIndex");
	return {o: ret, r:retR};
}

dijit.range.getNode = function(/*Array*/index, /*DomNode*/parent){
	if(!dojo.isArray(index) || index.length == 0){
		return parent;
	}
	var node = parent;
//	if(!node)debugger
	dojo.every(index, function(i){
		if(i >= 0 && i < node.childNodes.length){
			node = node.childNodes[i];
		}else{
			node = null;
			//console.debug('Error: can not find node with index',index,'under parent node',parent );
			return false; //terminate dojo.every
		}
		return true; //carry on the every loop
	});

	return node;
}

dijit.range.getCommonAncestor = function(n1,n2,root){
	root = root||n1.ownerDocument.body;
	var getAncestors = function(n){
		var as=[];
		while(n){
			as.unshift(n);
			if(n !== root){
				n = n.parentNode;
			}else{
				break;
			}
		}
		return as;
	};
	var n1as = getAncestors(n1);
	var n2as = getAncestors(n2);

	var m = Math.min(n1as.length,n2as.length);
	var com = n1as[0]; //at least, one element should be in the array: the root (BODY by default)
	for(var i=1;i<m;i++){
		if(n1as[i] === n2as[i]){
			com = n1as[i]
		}else{
			break;
		}
	}
	return com;
}

dijit.range.getAncestor = function(/*DomNode*/node, /*RegEx?*/regex, /*DomNode?*/root){
	root = root || node.ownerDocument.body;
	while(node && node !== root){
		var name = node.nodeName.toUpperCase() ;
		if(regex.test(name)){
			return node;
		}

		node = node.parentNode;
	}
	return null;
}

dijit.range.BlockTagNames = /^(?:P|DIV|H1|H2|H3|H4|H5|H6|ADDRESS|PRE|OL|UL|LI|DT|DE)$/;
dijit.range.getBlockAncestor = function(/*DomNode*/node, /*RegEx?*/regex, /*DomNode?*/root){
	root = root || node.ownerDocument.body;
	regex = regex || dijit.range.BlockTagNames;
	var block=null, blockContainer;
	while(node && node !== root){
		var name = node.nodeName.toUpperCase() ;
		if(!block && regex.test(name)){
			block = node;
		}
		if(!blockContainer && (/^(?:BODY|TD|TH|CAPTION)$/).test(name)){
			blockContainer = node;
		}

		node = node.parentNode;
	}
	return {blockNode:block, blockContainer:blockContainer || node.ownerDocument.body};
}

dijit.range.atBeginningOfContainer = function(/*DomNode*/container, /*DomNode*/node, /*Int*/offset){
	var atBeginning = false;
	var offsetAtBeginning = (offset == 0);
	if(!offsetAtBeginning && node.nodeType == 3){ //if this is a text node, check whether the left part is all space
		if(/^[\s\xA0]+$/.test(node.nodeValue.substr(0,offset))){
			offsetAtBeginning = true;
		}
	}
	if(offsetAtBeginning){
		var cnode = node;
		atBeginning = true;
		while(cnode && cnode !== container){
			if(cnode.previousSibling){
				atBeginning = false;
				break;
			}
			cnode = cnode.parentNode;
		}
	}
	return atBeginning;
}

dijit.range.atEndOfContainer = function(/*DomNode*/container, /*DomNode*/node, /*Int*/offset){
	var atEnd = false;
	var offsetAtEnd = (offset == (node.length || node.childNodes.length));
	if(!offsetAtEnd && node.nodeType == 3){ //if this is a text node, check whether the right part is all space
		if(/^[\s\xA0]+$/.test(node.nodeValue.substr(offset))){
			offsetAtEnd = true;
		}
	}
	if(offsetAtEnd){
		var cnode = node;
		atEnd = true;
		while(cnode && cnode !== container){
			if(cnode.nextSibling){
				atEnd = false;
				break;
			}
			cnode = cnode.parentNode;
		}
	}
	return atEnd;
}

dijit.range.adjacentNoneTextNode=function(startnode, next){
	var node = startnode;
	var len = (0-startnode.length) || 0;
	var prop = next?'nextSibling':'previousSibling';
	while(node){
		if(node.nodeType!=3){
			break;
		}
		len += node.length
		node = node[prop];
	}
	return [node,len];
}

dijit.range._w3c = Boolean(window['getSelection']);
dijit.range.create = function(/*Window?*/win){
	if(dijit.range._w3c){
		return (win || dojo.global).document.createRange();
	}else{//IE
		return new dijit.range.W3CRange;
	}
}

dijit.range.getSelection = function(/*Window*/win, /*Boolean?*/ignoreUpdate){
	if(dijit.range._w3c){
		return win.getSelection();
	}else{//IE
		var s = new dijit.range.ie.selection(win);
		if(!ignoreUpdate){
			s._getCurrentSelection();
		}
		return s;
	}
}

if(!dijit.range._w3c){
	dijit.range.ie={
		cachedSelection: {},
		selection: function(win){
			this._ranges = [];
			this.addRange = function(r, /*boolean*/internal){
				this._ranges.push(r);
				if(!internal){
					r._select();
				}
				this.rangeCount = this._ranges.length;
			};
			this.removeAllRanges = function(){
				//don't detach, the range may be used later
//				for(var i=0;i<this._ranges.length;i++){
//					this._ranges[i].detach();
//				}
				this._ranges = [];
				this.rangeCount = 0;
			};
			var _initCurrentRange = function(){
				var r = win.document.selection.createRange();
				var type=win.document.selection.type.toUpperCase();
				if(type == "CONTROL"){
					//TODO: multiple range selection(?)
					return new dijit.range.W3CRange(dijit.range.ie.decomposeControlRange(r));
				}else{
					return new dijit.range.W3CRange(dijit.range.ie.decomposeTextRange(r));
				}
			};
			this.getRangeAt = function(i){
				return this._ranges[i];
			};
			this._getCurrentSelection = function(){
				this.removeAllRanges();
				var r=_initCurrentRange();
				if(r){
					this.addRange(r, true);
				}
			};
		},
		decomposeControlRange: function(range){
			var firstnode = range.item(0), lastnode = range.item(range.length-1);
			var startContainer = firstnode.parentNode, endContainer = lastnode.parentNode;
			var startOffset = dijit.range.getIndex(firstnode, startContainer).o;
			var endOffset = dijit.range.getIndex(lastnode, endContainer).o+1;
			return [startContainer, startOffset,endContainer, endOffset];
		},
		getEndPoint: function(range, end){
			var atmrange = range.duplicate();
			atmrange.collapse(!end);
			var cmpstr = 'EndTo' + (end?'End':'Start');
			var parentNode = atmrange.parentElement();

			var startnode, startOffset, lastNode;
			if(parentNode.childNodes.length>0){
				dojo.every(parentNode.childNodes, function(node,i){
					var calOffset;
					if(node.nodeType != 3){
						atmrange.moveToElementText(node);

						if(atmrange.compareEndPoints(cmpstr,range) > 0){
							//startnode = node.previousSibling;
							if(lastNode && lastNode.nodeType == 3){
								//where shall we put the start? in the text node or after?
								startnode = lastNode;
								calOffset = true;
							}else{
								startnode = parentNode;
								startOffset = i;
								return false;
							}
						}else{
							if(i == parentNode.childNodes.length-1){
								startnode = parentNode;
								startOffset = parentNode.childNodes.length;
								return false;
							}
						}
					}else{
						if(i == parentNode.childNodes.length-1){//at the end of this node
							startnode = node;
							calOffset = true;
						}
					}
		//			try{
						if(calOffset && startnode){
							var prevnode = dijit.range.adjacentNoneTextNode(startnode)[0];
							if(prevnode){
								startnode = prevnode.nextSibling;
							}else{
								startnode = parentNode.firstChild; //firstChild must be a text node
							}
							var prevnodeobj = dijit.range.adjacentNoneTextNode(startnode);
							prevnode = prevnodeobj[0];
							var lenoffset = prevnodeobj[1];
							if(prevnode){
								atmrange.moveToElementText(prevnode);
								atmrange.collapse(false);
							}else{
								atmrange.moveToElementText(parentNode);
							}
							atmrange.setEndPoint(cmpstr, range);
							startOffset = atmrange.text.length-lenoffset;

							return false;
						}
		//			}catch(e){ debugger }
					lastNode = node;
					return true;
				});
			}else{
				startnode = parentNode;
				startOffset = 0;
			}

			//if at the end of startnode and we are dealing with start container, then
			//move the startnode to nextSibling if it is a text node
			//TODO: do this for end container?
			if(!end && startnode.nodeType == 1 && startOffset == startnode.childNodes.length){
				var nextnode=startnode.nextSibling;
				if(nextnode && nextnode.nodeType == 3){
					startnode = nextnode;
					startOffset = 0;
				}
			}
			return [startnode, startOffset];
		},
		setEndPoint: function(range, container, offset){
			//text node
			var atmrange = range.duplicate(), node, len;
			if(container.nodeType!=3){ //normal node
				if(offset > 0){
					node = container.childNodes[offset-1];
					if(node){
						if(node.nodeType == 3){
							container = node;
							offset = node.length;
							//pass through
						}else{
							if(node.nextSibling && node.nextSibling.nodeType == 3){
								container=node.nextSibling;
								offset=0;
								//pass through
							}else{
								atmrange.moveToElementText(node.nextSibling?node:container);
								var parent = node.parentNode;
								var tempNode = parent.insertBefore(node.ownerDocument.createTextNode(' '), node.nextSibling);
								atmrange.collapse(false);
								parent.removeChild(tempNode);
							}
						}
					}
				}else{
					atmrange.moveToElementText(container);
					atmrange.collapse(true);
				}
			}
			if(container.nodeType == 3){
				var prevnodeobj = dijit.range.adjacentNoneTextNode(container);
				var prevnode = prevnodeobj[0];
				len = prevnodeobj[1];
				if(prevnode){
					atmrange.moveToElementText(prevnode);
					atmrange.collapse(false);
					//if contentEditable is not inherit, the above collapse won't make the end point
					//in the correctly position: it always has a -1 offset, so compensate it
					if(prevnode.contentEditable!='inherit'){
						len++;
					}
				}else{
					atmrange.moveToElementText(container.parentNode);
					atmrange.collapse(true);
				}

				offset += len;
				if(offset>0){
					if(atmrange.move('character',offset) != offset){
						console.error('Error when moving!');
					}
				}
			}

			return atmrange;
		},
		decomposeTextRange: function(range){
			var tmpary = dijit.range.ie.getEndPoint(range);
			var startContainer = tmpary[0], startOffset = tmpary[1];
			var endContainer = tmpary[0], endOffset = tmpary[1];

			if(range.htmlText.length){
				if(range.htmlText == range.text){ //in the same text node
					endOffset = startOffset+range.text.length;
				}else{
					tmpary = dijit.range.ie.getEndPoint(range,true);
					endContainer = tmpary[0], endOffset = tmpary[1];
//					if(startContainer.tagName == "BODY"){
//						startContainer = startContainer.firstChild;
//					}
				}
			}
			return [startContainer, startOffset, endContainer, endOffset];
		},
		setRange: function(range, startContainer,
			startOffset, endContainer, endOffset, collapsed){
			var start=dijit.range.ie.setEndPoint(range, startContainer, startOffset);

			range.setEndPoint('StartToStart',start);
			if(!collapsed){
				var end=dijit.range.ie.setEndPoint(range, endContainer, endOffset);
			}
			range.setEndPoint('EndToEnd',end || start);

			return range;
		}
	}

dojo.declare("dijit.range.W3CRange",null, {
	constructor: function(){
		if(arguments.length>0){
			this.setStart(arguments[0][0],arguments[0][1]);
			this.setEnd(arguments[0][2],arguments[0][3]);
		}else{
			this.commonAncestorContainer = null;
			this.startContainer = null;
			this.startOffset = 0;
			this.endContainer = null;
			this.endOffset = 0;
			this.collapsed = true;
		}
	},
	_updateInternal: function(){
		if(this.startContainer !== this.endContainer){
			this.commonAncestorContainer = dijit.range.getCommonAncestor(this.startContainer, this.endContainer);
		}else{
			this.commonAncestorContainer = this.startContainer;
		}
		this.collapsed = (this.startContainer === this.endContainer) && (this.startOffset == this.endOffset);
	},
	setStart: function(node, offset){
		offset=parseInt(offset);
		if(this.startContainer === node && this.startOffset == offset){
			return;
		}
		delete this._cachedBookmark;

		this.startContainer = node;
		this.startOffset = offset;
		if(!this.endContainer){
			this.setEnd(node, offset);
		}else{
			this._updateInternal();
		}
	},
	setEnd: function(node, offset){
		offset=parseInt(offset);
		if(this.endContainer === node && this.endOffset == offset){
			return;
		}
		delete this._cachedBookmark;

		this.endContainer = node;
		this.endOffset = offset;
		if(!this.startContainer){
			this.setStart(node, offset);
		}else{
			this._updateInternal();
		}
	},
	setStartAfter: function(node, offset){
		this._setPoint('setStart', node, offset, 1);
	},
	setStartBefore: function(node, offset){
		this._setPoint('setStart', node, offset, 0);
	},
	setEndAfter: function(node, offset){
		this._setPoint('setEnd', node, offset, 1);
	},
	setEndBefore: function(node, offset){
		this._setPoint('setEnd', node, offset, 0);
	},
	_setPoint: function(what, node, offset, ext){
		var index = dijit.range.getIndex(node, node.parentNode).o;
		this[what](node.parentNode, index.pop()+ext);
	},
	_getIERange: function(){
		var r = (this._body || this.endContainer.ownerDocument.body).createTextRange();
		dijit.range.ie.setRange(r, this.startContainer, this.startOffset, this.endContainer, this.endOffset, this.collapsed);
		return r;
	},
	getBookmark: function(body){
		this._getIERange();
		return this._cachedBookmark;
	},
	_select: function(){
		var r = this._getIERange();
		r.select();
	},
	deleteContents: function(){
		var r = this._getIERange();
		r.pasteHTML('');
		this.endContainer = this.startContainer;
		this.endOffset = this.startOffset;
		this.collapsed = true;
	},
	cloneRange: function(){
		var r = new dijit.range.W3CRange([this.startContainer,this.startOffset,
			this.endContainer,this.endOffset]);
		r._body = this._body;
		return r;
	},
	detach: function(){
		this._body = null;
		this.commonAncestorContainer = null;
		this.startContainer = null;
		this.startOffset = 0;
		this.endContainer = null;
		this.endOffset = 0;
		this.collapsed = true;
}
});
} //if(!dijit.range._w3c)

}

if(!dojo._hasResource["dijit._editor.html"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.html"] = true;
dojo.provide("dijit._editor.html");


dojo.getObject("_editor", true, dijit);

dijit._editor.escapeXml=function(/*String*/str, /*Boolean?*/noSingleQuotes){
	// summary:
	//		Adds escape sequences for special characters in XML: &<>"'
	//		Optionally skips escapes for single quotes
	str = str.replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
	if(!noSingleQuotes){
		str = str.replace(/'/gm, "&#39;");
	}
	return str; // string
};

dijit._editor.getNodeHtml=function(/* DomNode */node){
	var output;
	switch(node.nodeType){
		case 1: //element node
			var lName = node.nodeName.toLowerCase();
			if(!lName || lName.charAt(0) == "/"){
				// IE does some strange things with malformed HTML input, like
				// treating a close tag </span> without an open tag <span>, as
				// a new tag with tagName of /span.  Corrupts output HTML, remove
				// them.  Other browsers don't prefix tags that way, so will
				// never show up.
				return "";
			}
			output = '<' + lName;

			//store the list of attributes and sort it to have the
			//attributes appear in the dictionary order
			var attrarray = [];
			var attr;
			if(dojo.isIE && node.outerHTML){
				var s = node.outerHTML;
				s = s.substr(0, s.indexOf('>'))
					.replace(/(['"])[^"']*\1/g, ''); //to make the following regexp safe
				var reg = /(\b\w+)\s?=/g;
				var m, key;
				while((m = reg.exec(s))){
					key = m[1];
					if(key.substr(0,3) != '_dj'){
						if(key == 'src' || key == 'href'){
							if(node.getAttribute('_djrealurl')){
								attrarray.push([key,node.getAttribute('_djrealurl')]);
								continue;
							}
						}
						var val, match;
						switch(key){
							case 'style':
								val = node.style.cssText.toLowerCase();
								break;
							case 'class':
								val = node.className;
								break;
							case 'width':
								if(lName === "img"){
									// This somehow gets lost on IE for IMG tags and the like
									// and we have to find it in outerHTML, known IE oddity.
									match=/width=(\S+)/i.exec(s);
									if(match){
										val = match[1];
									}
									break;
								}
							case 'height':
								if(lName === "img"){
									// This somehow gets lost on IE for IMG tags and the like
									// and we have to find it in outerHTML, known IE oddity.
									match=/height=(\S+)/i.exec(s);
									if(match){
										val = match[1];
									}
									break;
								}
							default:
								val = node.getAttribute(key);
						}
						if(val != null){
							attrarray.push([key, val.toString()]);
						}
					}
				}
			}else{
				var i = 0;
				while((attr = node.attributes[i++])){
					//ignore all attributes starting with _dj which are
					//internal temporary attributes used by the editor
					var n = attr.name;
					if(n.substr(0,3) != '_dj' /*&&
						(attr.specified == undefined || attr.specified)*/){
						var v = attr.value;
						if(n == 'src' || n == 'href'){
							if(node.getAttribute('_djrealurl')){
								v = node.getAttribute('_djrealurl');
							}
						}
						attrarray.push([n,v]);
					}
				}
			}
			attrarray.sort(function(a,b){
				return a[0] < b[0] ? -1 : (a[0] == b[0] ? 0 : 1);
			});
			var j = 0;
			while((attr = attrarray[j++])){
				output += ' ' + attr[0] + '="' +
					(dojo.isString(attr[1]) ? dijit._editor.escapeXml(attr[1], true) : attr[1]) + '"';
			}
			if(lName === "script"){
				// Browsers handle script tags differently in how you get content,
				// but innerHTML always seems to work, so insert its content that way
				// Yes, it's bad to allow script tags in the editor code, but some people
				// seem to want to do it, so we need to at least return them right.
				// other plugins/filters can strip them.
				output += '>' + node.innerHTML +'</' + lName + '>';
			}else{
				if(node.childNodes.length){
					output += '>' + dijit._editor.getChildrenHtml(node)+'</' + lName +'>';
				}else{
					switch(lName){
						case 'br':
						case 'hr':
						case 'img':
						case 'input':
						case 'base':
						case 'meta':
						case 'area':
						case 'basefont':
							// These should all be singly closed
							output += ' />';
							break;
						default:
							// Assume XML style separate closure for everything else.
							output += '></' + lName + '>';
					}
				}
			}
			break;
		case 4: // cdata
		case 3: // text
			// FIXME:
			output = dijit._editor.escapeXml(node.nodeValue, true);
			break;
		case 8: //comment
			// FIXME:
			output = '<!--' + dijit._editor.escapeXml(node.nodeValue, true) + '-->';
			break;
		default:
			output = "<!-- Element not recognized - Type: " + node.nodeType + " Name: " + node.nodeName + "-->";
	}
	return output;
};

dijit._editor.getChildrenHtml = function(/* DomNode */dom){
	// summary:
	//		Returns the html content of a DomNode and children
	var out = "";
	if(!dom){ return out; }
	var nodes = dom["childNodes"] || dom;

	//IE issue.
	//If we have an actual node we can check parent relationships on for IE,
	//We should check, as IE sometimes builds invalid DOMS.  If no parent, we can't check
	//And should just process it and hope for the best.
	var checkParent = !dojo.isIE || nodes !== dom;

	var node, i = 0;
	while((node = nodes[i++])){
		//IE is broken.  DOMs are supposed to be a tree.  But in the case of malformed HTML, IE generates a graph
		//meaning one node ends up with multiple references (multiple parents).  This is totally wrong and invalid, but
		//such is what it is.  We have to keep track and check for this because otherise the source output HTML will have dups.
		//No other browser generates a graph.  Leave it to IE to break a fundamental DOM rule.  So, we check the parent if we can
		//If we can't, nothing more we can do other than walk it.
		if(!checkParent || node.parentNode == dom){
			out += dijit._editor.getNodeHtml(node);
		}
	}
	return out; // String
};

}

if(!dojo._hasResource["dijit._editor.RichText"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.RichText"] = true;
dojo.provide("dijit._editor.RichText");








// used to restore content when user leaves this page then comes back
// but do not try doing dojo.doc.write if we are using xd loading.
// dojo.doc.write will only work if RichText.js is included in the dojo.js
// file. If it is included in dojo.js and you want to allow rich text saving
// for back/forward actions, then set dojo.config.allowXdRichTextSave = true.
if(!dojo.config["useXDomain"] || dojo.config["allowXdRichTextSave"]){
	if(dojo._postLoad){
		(function(){
			var savetextarea = dojo.doc.createElement('textarea');
			savetextarea.id = dijit._scopeName + "._editor.RichText.value";
			dojo.style(savetextarea, {
				display:'none',
				position:'absolute',
				top:"-100px",
				height:"3px",
				width:"3px"
			});
			dojo.body().appendChild(savetextarea);
		})();
	}else{
		//dojo.body() is not available before onLoad is fired
		try{
			dojo.doc.write('<textarea id="' + dijit._scopeName + '._editor.RichText.value" ' +
				'style="display:none;position:absolute;top:-100px;left:-100px;height:3px;width:3px;overflow:hidden;"></textarea>');
		}catch(e){ }
	}
}

dojo.declare("dijit._editor.RichText", [dijit._Widget, dijit._CssStateMixin], {
	constructor: function(params){
		// summary:
		//		dijit._editor.RichText is the core of dijit.Editor, which provides basic
		//		WYSIWYG editing features.
		//
		// description:
		//		dijit._editor.RichText is the core of dijit.Editor, which provides basic
		//		WYSIWYG editing features. It also encapsulates the differences
		//		of different js engines for various browsers.  Do not use this widget
		//		with an HTML &lt;TEXTAREA&gt; tag, since the browser unescapes XML escape characters,
		//		like &lt;.  This can have unexpected behavior and lead to security issues
		//		such as scripting attacks.
		//
		// tags:
		//		private

		// contentPreFilters: Function(String)[]
		//		Pre content filter function register array.
		//		these filters will be executed before the actual
		//		editing area gets the html content.
		this.contentPreFilters = [];

		// contentPostFilters: Function(String)[]
		//		post content filter function register array.
		//		These will be used on the resulting html
		//		from contentDomPostFilters. The resulting
		//		content is the final html (returned by getValue()).
		this.contentPostFilters = [];

		// contentDomPreFilters: Function(DomNode)[]
		//		Pre content dom filter function register array.
		//		These filters are applied after the result from
		//		contentPreFilters are set to the editing area.
		this.contentDomPreFilters = [];

		// contentDomPostFilters: Function(DomNode)[]
		//		Post content dom filter function register array.
		//		These filters are executed on the editing area dom.
		//		The result from these will be passed to contentPostFilters.
		this.contentDomPostFilters = [];

		// editingAreaStyleSheets: dojo._URL[]
		//		array to store all the stylesheets applied to the editing area
		this.editingAreaStyleSheets = [];

		// Make a copy of this.events before we start writing into it, otherwise we
		// will modify the prototype which leads to bad things on pages w/multiple editors
		this.events = [].concat(this.events);

		this._keyHandlers = {};

		if(params && dojo.isString(params.value)){
			this.value = params.value;
		}

		this.onLoadDeferred = new dojo.Deferred();
	},

	baseClass: "dijitEditor",

	// inheritWidth: Boolean
	//		whether to inherit the parent's width or simply use 100%
	inheritWidth: false,

	// focusOnLoad: [deprecated] Boolean
	//		Focus into this widget when the page is loaded
	focusOnLoad: false,

	// name: String?
	//		Specifies the name of a (hidden) <textarea> node on the page that's used to save
	//		the editor content on page leave.   Used to restore editor contents after navigating
	//		to a new page and then hitting the back button.
	name: "",

	// styleSheets: [const] String
	//		semicolon (";") separated list of css files for the editing area
	styleSheets: "",

	// height: String
	//		Set height to fix the editor at a specific height, with scrolling.
	//		By default, this is 300px.  If you want to have the editor always
	//		resizes to accommodate the content, use AlwaysShowToolbar plugin
	//		and set height="".  If this editor is used within a layout widget,
	//		set height="100%".
	height: "300px",

	// minHeight: String
	//		The minimum height that the editor should have.
	minHeight: "1em",

	// isClosed: [private] Boolean
	isClosed: true,

	// isLoaded: [private] Boolean
	isLoaded: false,

	// _SEPARATOR: [private] String
	//		Used to concat contents from multiple editors into a single string,
	//		so they can be saved into a single <textarea> node.  See "name" attribute.
	_SEPARATOR: "@@**%%__RICHTEXTBOUNDRY__%%**@@",

	// _NAME_CONTENT_SEP: [private] String
	//		USed to separate name from content.  Just a colon isn't safe.
	_NAME_CONTENT_SEP: "@@**%%:%%**@@",

	// onLoadDeferred: [readonly] dojo.Deferred
	//		Deferred which is fired when the editor finishes loading.
	//		Call myEditor.onLoadDeferred.then(callback) it to be informed
	//		when the rich-text area initialization is finalized.
	onLoadDeferred: null,

	// isTabIndent: Boolean
	//		Make tab key and shift-tab indent and outdent rather than navigating.
	//		Caution: sing this makes web pages inaccessible to users unable to use a mouse.
	isTabIndent: false,

	// disableSpellCheck: [const] Boolean
	//		When true, disables the browser's native spell checking, if supported.
	//		Works only in Firefox.
	disableSpellCheck: false,

	postCreate: function(){
		if("textarea" == this.domNode.tagName.toLowerCase()){
			console.warn("RichText should not be used with the TEXTAREA tag.  See dijit._editor.RichText docs.");
		}

		// Push in the builtin filters now, making them the first executed, but not over-riding anything
		// users passed in.  See: #6062
		this.contentPreFilters = [dojo.hitch(this, "_preFixUrlAttributes")].concat(this.contentPreFilters);
		if(dojo.isMoz){
			this.contentPreFilters = [this._normalizeFontStyle].concat(this.contentPreFilters);
			this.contentPostFilters = [this._removeMozBogus].concat(this.contentPostFilters);
		}
		if(dojo.isWebKit){
			// Try to clean up WebKit bogus artifacts.  The inserted classes
			// made by WebKit sometimes messes things up.
			this.contentPreFilters = [this._removeWebkitBogus].concat(this.contentPreFilters);
			this.contentPostFilters = [this._removeWebkitBogus].concat(this.contentPostFilters);
		}
		if(dojo.isIE){
			// IE generates <strong> and <em> but we want to normalize to <b> and <i>
			this.contentPostFilters = [this._normalizeFontStyle].concat(this.contentPostFilters);
		}
		this.inherited(arguments);

		dojo.publish(dijit._scopeName + "._editor.RichText::init", [this]);
		this.open();
		this.setupDefaultShortcuts();
	},

	setupDefaultShortcuts: function(){
		// summary:
		//		Add some default key handlers
		// description:
		// 		Overwrite this to setup your own handlers. The default
		// 		implementation does not use Editor commands, but directly
		//		executes the builtin commands within the underlying browser
		//		support.
		// tags:
		//		protected
		var exec = dojo.hitch(this, function(cmd, arg){
			return function(){
				return !this.execCommand(cmd,arg);
			};
		});

		var ctrlKeyHandlers = {
			b: exec("bold"),
			i: exec("italic"),
			u: exec("underline"),
			a: exec("selectall"),
			s: function(){ this.save(true); },
			m: function(){ this.isTabIndent = !this.isTabIndent; },

			"1": exec("formatblock", "h1"),
			"2": exec("formatblock", "h2"),
			"3": exec("formatblock", "h3"),
			"4": exec("formatblock", "h4"),

			"\\": exec("insertunorderedlist")
		};

		if(!dojo.isIE){
			ctrlKeyHandlers.Z = exec("redo"); //FIXME: undo?
		}

		for(var key in ctrlKeyHandlers){
			this.addKeyHandler(key, true, false, ctrlKeyHandlers[key]);
		}
	},

	// events: [private] String[]
	//		 events which should be connected to the underlying editing area
	events: ["onKeyPress", "onKeyDown", "onKeyUp"], // onClick handled specially

	// captureEvents: [deprecated] String[]
	//		 Events which should be connected to the underlying editing
	//		 area, events in this array will be addListener with
	//		 capture=true.
	// TODO: looking at the code I don't see any distinction between events and captureEvents,
	// so get rid of this for 2.0 if not sooner
	captureEvents: [],

	_editorCommandsLocalized: false,
	_localizeEditorCommands: function(){
		// summary:
		//		When IE is running in a non-English locale, the API actually changes,
		//		so that we have to say (for example) danraku instead of p (for paragraph).
		//		Handle that here.
		// tags:
		//		private
		if(dijit._editor._editorCommandsLocalized){
			// Use the already generate cache of mappings.  
			this._local2NativeFormatNames = dijit._editor._local2NativeFormatNames;
			this._native2LocalFormatNames = dijit._editor._native2LocalFormatNames;
			return;
		}
		dijit._editor._editorCommandsLocalized = true;
		dijit._editor._local2NativeFormatNames = {};
		dijit._editor._native2LocalFormatNames = {};
		this._local2NativeFormatNames = dijit._editor._local2NativeFormatNames;
		this._native2LocalFormatNames = dijit._editor._native2LocalFormatNames;
		//in IE, names for blockformat is locale dependent, so we cache the values here

		//put p after div, so if IE returns Normal, we show it as paragraph
		//We can distinguish p and div if IE returns Normal, however, in order to detect that,
		//we have to call this.document.selection.createRange().parentElement() or such, which
		//could slow things down. Leave it as it is for now
		var formats = ['div', 'p', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ol', 'ul', 'address'];
		var localhtml = "", format, i=0;
		while((format=formats[i++])){
			//append a <br> after each element to separate the elements more reliably
			if(format.charAt(1) !== 'l'){
				localhtml += "<"+format+"><span>content</span></"+format+"><br/>";
			}else{
				localhtml += "<"+format+"><li>content</li></"+format+"><br/>";
			}
		}
		// queryCommandValue returns empty if we hide editNode, so move it out of screen temporary
		// Also, IE9 does weird stuff unless we do it inside the editor iframe.
		var style = { position: "absolute", top: "0px", zIndex: 10, opacity: 0.01 };
		var div = dojo.create('div', {style: style, innerHTML: localhtml});
		dojo.body().appendChild(div);

		// IE9 has a timing issue with doing this right after setting
		// the inner HTML, so put a delay in.
		var inject = dojo.hitch(this, function(){
			var node = div.firstChild;
			while(node){
				try{
					dijit._editor.selection.selectElement(node.firstChild);
					var nativename = node.tagName.toLowerCase();
					this._local2NativeFormatNames[nativename] = document.queryCommandValue("formatblock");
					this._native2LocalFormatNames[this._local2NativeFormatNames[nativename]] = nativename;
					node = node.nextSibling.nextSibling;
					//console.log("Mapped: ", nativename, " to: ", this._local2NativeFormatNames[nativename]);
				}catch(e) { /*Sqelch the occasional IE9 error */ }
			}
			div.parentNode.removeChild(div);
			div.innerHTML = "";
		});
		setTimeout(inject, 0);
	},

	open: function(/*DomNode?*/ element){
		// summary:
		//		Transforms the node referenced in this.domNode into a rich text editing
		//		node.
		// description:
		//		Sets up the editing area asynchronously. This will result in
		//		the creation and replacement with an iframe.
		// tags:
		//		private

		if(!this.onLoadDeferred || this.onLoadDeferred.fired >= 0){
			this.onLoadDeferred = new dojo.Deferred();
		}

		if(!this.isClosed){ this.close(); }
		dojo.publish(dijit._scopeName + "._editor.RichText::open", [ this ]);

		if(arguments.length == 1 && element.nodeName){ // else unchanged
			this.domNode = element;
		}

		var dn = this.domNode;

		// "html" will hold the innerHTML of the srcNodeRef and will be used to
		// initialize the editor.
		var html;

		if(dojo.isString(this.value)){
			// Allow setting the editor content programmatically instead of
			// relying on the initial content being contained within the target
			// domNode.
			html = this.value;
			delete this.value;
			dn.innerHTML = "";
		}else if(dn.nodeName && dn.nodeName.toLowerCase() == "textarea"){
			// if we were created from a textarea, then we need to create a
			// new editing harness node.
			var ta = (this.textarea = dn);
			this.name = ta.name;
			html = ta.value;
			dn = this.domNode = dojo.doc.createElement("div");
			dn.setAttribute('widgetId', this.id);
			ta.removeAttribute('widgetId');
			dn.cssText = ta.cssText;
			dn.className += " " + ta.className;
			dojo.place(dn, ta, "before");
			var tmpFunc = dojo.hitch(this, function(){
				//some browsers refuse to submit display=none textarea, so
				//move the textarea off screen instead
				dojo.style(ta, {
					display: "block",
					position: "absolute",
					top: "-1000px"
				});

				if(dojo.isIE){ //nasty IE bug: abnormal formatting if overflow is not hidden
					var s = ta.style;
					this.__overflow = s.overflow;
					s.overflow = "hidden";
				}
			});
			if(dojo.isIE){
				setTimeout(tmpFunc, 10);
			}else{
				tmpFunc();
			}

			if(ta.form){
				var resetValue = ta.value;
				this.reset = function(){
					var current = this.getValue();
					if(current != resetValue){
						this.replaceValue(resetValue);
					}
				};
				dojo.connect(ta.form, "onsubmit", this, function(){
					// Copy value to the <textarea> so it gets submitted along with form.
					// FIXME: should we be calling close() here instead?
					dojo.attr(ta, 'disabled', this.disabled); // don't submit the value if disabled
					ta.value = this.getValue();
				});
			}
		}else{
			html = dijit._editor.getChildrenHtml(dn);
			dn.innerHTML = "";
		}

		var content = dojo.contentBox(dn);
		this._oldHeight = content.h;
		this._oldWidth = content.w;

		this.value = html;

		// If we're a list item we have to put in a blank line to force the
		// bullet to nicely align at the top of text
		if(dn.nodeName && dn.nodeName == "LI"){
			dn.innerHTML = " <br>";
		}
	
		// Construct the editor div structure.
		this.header = dn.ownerDocument.createElement("div");
		dn.appendChild(this.header);
		this.editingArea = dn.ownerDocument.createElement("div");
		dn.appendChild(this.editingArea);
		this.footer = dn.ownerDocument.createElement("div");
		dn.appendChild(this.footer);

		if(!this.name){
			this.name = this.id + "_AUTOGEN";
		}

		// User has pressed back/forward button so we lost the text in the editor, but it's saved
		// in a hidden <textarea> (which contains the data for all the editors on this page),
		// so get editor value from there
		if(this.name !== "" && (!dojo.config["useXDomain"] || dojo.config["allowXdRichTextSave"])){
			var saveTextarea = dojo.byId(dijit._scopeName + "._editor.RichText.value");
			if(saveTextarea && saveTextarea.value !== ""){
				var datas = saveTextarea.value.split(this._SEPARATOR), i=0, dat;
				while((dat=datas[i++])){
					var data = dat.split(this._NAME_CONTENT_SEP);
					if(data[0] == this.name){
						html = data[1];
						datas = datas.splice(i, 1);
						saveTextarea.value = datas.join(this._SEPARATOR);
						break;
					}
				}
			}

			if(!dijit._editor._globalSaveHandler){
				dijit._editor._globalSaveHandler = {};
				dojo.addOnUnload(function() {
					var id;
					for(id in dijit._editor._globalSaveHandler){
						var f = dijit._editor._globalSaveHandler[id];
						if(dojo.isFunction(f)){
							f();
						}
					}
				});
			}
			dijit._editor._globalSaveHandler[this.id] = dojo.hitch(this, "_saveContent");
		}

		this.isClosed = false;

		var ifr = (this.editorObject = this.iframe = dojo.doc.createElement('iframe'));
		ifr.id = this.id+"_iframe";
		this._iframeSrc = this._getIframeDocTxt();
		ifr.style.border = "none";
		ifr.style.width = "100%";
		if(this._layoutMode){
			// iframe should be 100% height, thus getting it's height from surrounding
			// <div> (which has the correct height set by Editor)
			ifr.style.height = "100%";
		}else{
			if(dojo.isIE >= 7){
				if(this.height){
					ifr.style.height = this.height;
				}
				if(this.minHeight){
					ifr.style.minHeight = this.minHeight;
				}
			}else{
				ifr.style.height = this.height ? this.height : this.minHeight;
			}
		}
		ifr.frameBorder = 0;
		ifr._loadFunc = dojo.hitch( this, function(win){
			this.window = win;
			this.document = this.window.document;

			if(dojo.isIE){
				this._localizeEditorCommands();
			}
			
			// Do final setup and set initial contents of editor
			this.onLoad(html);
		});

		// Set the iframe's initial (blank) content.
		var s = 'javascript:parent.' + dijit._scopeName + '.byId("'+this.id+'")._iframeSrc';
		ifr.setAttribute('src', s);
		this.editingArea.appendChild(ifr);

		if(dojo.isSafari <= 4){
			var src = ifr.getAttribute("src");
			if(!src || src.indexOf("javascript") == -1){
				// Safari 4 and earlier sometimes act oddly
				// So we have to set it again.
				setTimeout(function(){ifr.setAttribute('src', s);},0);
			}
		}

		// TODO: this is a guess at the default line-height, kinda works
		if(dn.nodeName == "LI"){
			dn.lastChild.style.marginTop = "-1.2em";
		}

		dojo.addClass(this.domNode, this.baseClass);
	},

	//static cache variables shared among all instance of this class
	_local2NativeFormatNames: {},
	_native2LocalFormatNames: {},

	_getIframeDocTxt: function(){
		// summary:
		//		Generates the boilerplate text of the document inside the iframe (ie, <html><head>...</head><body/></html>).
		//		Editor content (if not blank) should be added afterwards.
		// tags:
		//		private
		var _cs = dojo.getComputedStyle(this.domNode);

		// The contents inside of <body>.  The real contents are set later via a call to setValue().
		var html = "";
		var setBodyId = true;
		if(dojo.isIE || dojo.isWebKit || (!this.height && !dojo.isMoz)){
			// In auto-expand mode, need a wrapper div for AlwaysShowToolbar plugin to correctly
			// expand/contract the editor as the content changes.
			html = "<div id='dijitEditorBody'></div>";
			setBodyId = false;
		}else if(dojo.isMoz){
			// workaround bug where can't select then delete text (until user types something
			// into the editor)... and/or issue where typing doesn't erase selected text
			this._cursorToStart = true;
			html = "&nbsp;";
		}

		var font = [ _cs.fontWeight, _cs.fontSize, _cs.fontFamily ].join(" ");

		// line height is tricky - applying a units value will mess things up.
		// if we can't get a non-units value, bail out.
		var lineHeight = _cs.lineHeight;
		if(lineHeight.indexOf("px") >= 0){
			lineHeight = parseFloat(lineHeight)/parseFloat(_cs.fontSize);
			// console.debug(lineHeight);
		}else if(lineHeight.indexOf("em")>=0){
			lineHeight = parseFloat(lineHeight);
		}else{
			// If we can't get a non-units value, just default
			// it to the CSS spec default of 'normal'.  Seems to
			// work better, esp on IE, than '1.0'
			lineHeight = "normal";
		}
		var userStyle = "";
		var self = this;
		this.style.replace(/(^|;)\s*(line-|font-?)[^;]+/ig, function(match){
			match = match.replace(/^;/ig,"") + ';';
			var s = match.split(":")[0];
			if(s){
				s = dojo.trim(s);
				s = s.toLowerCase();
				var i;
				var sC = "";
				for(i = 0; i < s.length; i++){
					var c = s.charAt(i);
					switch(c){
						case "-":
							i++;
							c = s.charAt(i).toUpperCase();
						default:
							sC += c;
					}
				}
				dojo.style(self.domNode, sC, "");
			}
			userStyle += match + ';';
		});


		// need to find any associated label element and update iframe document title
		var label=dojo.query('label[for="'+this.id+'"]');

		return [
			this.isLeftToRight() ? "<html>\n<head>\n" : "<html dir='rtl'>\n<head>\n",
			(dojo.isMoz && label.length ? "<title>" + label[0].innerHTML + "</title>\n" : ""),
			"<meta http-equiv='Content-Type' content='text/html'>\n",
			"<style>\n",
			"\tbody,html {\n",
			"\t\tbackground:transparent;\n",
			"\t\tpadding: 1px 0 0 0;\n",
			"\t\tmargin: -1px 0 0 0;\n", // remove extraneous vertical scrollbar on safari and firefox

			// Set the html/body sizing.  Webkit always needs this, other browsers
			// only set it when height is defined (not auto-expanding), otherwise
			// scrollers do not appear.
			((dojo.isWebKit)?"\t\twidth: 100%;\n":""),
			((dojo.isWebKit)?"\t\theight: 100%;\n":""),
			"\t}\n",
			
			// TODO: left positioning will cause contents to disappear out of view
			//	   if it gets too wide for the visible area
			"\tbody{\n",
			"\t\ttop:0px;\n",
			"\t\tleft:0px;\n",
			"\t\tright:0px;\n",
			"\t\tfont:", font, ";\n",
				((this.height||dojo.isOpera) ? "" : "\t\tposition: fixed;\n"),
			// FIXME: IE 6 won't understand min-height?
			"\t\tmin-height:", this.minHeight, ";\n",
			"\t\tline-height:", lineHeight,";\n",
			"\t}\n",
			"\tp{ margin: 1em 0; }\n",
			
			// Determine how scrollers should be applied.  In autoexpand mode (height = "") no scrollers on y at all.
			// But in fixed height mode we want both x/y scrollers.  Also, if it's using wrapping div and in auto-expand
			// (Mainly IE) we need to kill the y scroller on body and html.
			(!setBodyId && !this.height ? "\tbody,html {overflow-y: hidden;}\n" : ""),
			"\t#dijitEditorBody{overflow-x: auto; overflow-y:" + (this.height ? "auto;" : "hidden;") + " outline: 0px;}\n",
			"\tli > ul:-moz-first-node, li > ol:-moz-first-node{ padding-top: 1.2em; }\n",
			// Can't set min-height in IE9, it puts layout on li, which puts move/resize handles.
			(!dojo.isIE ? "\tli{ min-height:1.2em; }\n" : ""), 
			"</style>\n",
			this._applyEditingAreaStyleSheets(),"\n",
			"</head>\n<body ",
			(setBodyId?"id='dijitEditorBody' ":""),
			"onload='frameElement._loadFunc(window,document)' style='"+userStyle+"'>", html, "</body>\n</html>"
		].join(""); // String
	},

	_applyEditingAreaStyleSheets: function(){
		// summary:
		//		apply the specified css files in styleSheets
		// tags:
		//		private
		var files = [];
		if(this.styleSheets){
			files = this.styleSheets.split(';');
			this.styleSheets = '';
		}

		//empty this.editingAreaStyleSheets here, as it will be filled in addStyleSheet
		files = files.concat(this.editingAreaStyleSheets);
		this.editingAreaStyleSheets = [];

		var text='', i=0, url;
		while((url=files[i++])){
			var abstring = (new dojo._Url(dojo.global.location, url)).toString();
			this.editingAreaStyleSheets.push(abstring);
			text += '<link rel="stylesheet" type="text/css" href="'+abstring+'"/>';
		}
		return text;
	},

	addStyleSheet: function(/*dojo._Url*/ uri){
		// summary:
		//		add an external stylesheet for the editing area
		// uri:
		//		A dojo.uri.Uri pointing to the url of the external css file
		var url=uri.toString();

		//if uri is relative, then convert it to absolute so that it can be resolved correctly in iframe
		if(url.charAt(0) == '.' || (url.charAt(0) != '/' && !uri.host)){
			url = (new dojo._Url(dojo.global.location, url)).toString();
		}

		if(dojo.indexOf(this.editingAreaStyleSheets, url) > -1){
//			console.debug("dijit._editor.RichText.addStyleSheet: Style sheet "+url+" is already applied");
			return;
		}

		this.editingAreaStyleSheets.push(url);
		this.onLoadDeferred.addCallback(dojo.hitch(this, function(){
			if(this.document.createStyleSheet){ //IE
				this.document.createStyleSheet(url);
			}else{ //other browser
				var head = this.document.getElementsByTagName("head")[0];
				var stylesheet = this.document.createElement("link");
				stylesheet.rel="stylesheet";
				stylesheet.type="text/css";
				stylesheet.href=url;
				head.appendChild(stylesheet);
			}
		}));
	},

	removeStyleSheet: function(/*dojo._Url*/ uri){
		// summary:
		//		remove an external stylesheet for the editing area
		var url=uri.toString();
		//if uri is relative, then convert it to absolute so that it can be resolved correctly in iframe
		if(url.charAt(0) == '.' || (url.charAt(0) != '/' && !uri.host)){
			url = (new dojo._Url(dojo.global.location, url)).toString();
		}
		var index = dojo.indexOf(this.editingAreaStyleSheets, url);
		if(index == -1){
//			console.debug("dijit._editor.RichText.removeStyleSheet: Style sheet "+url+" has not been applied");
			return;
		}
		delete this.editingAreaStyleSheets[index];
		dojo.withGlobal(this.window,'query', dojo, ['link:[href="'+url+'"]']).orphan();
	},

	// disabled: Boolean
	//		The editor is disabled; the text cannot be changed.
	disabled: false,

	_mozSettingProps: {'styleWithCSS':false},
	_setDisabledAttr: function(/*Boolean*/ value){
		value = !!value;
		this._set("disabled", value);
		if(!this.isLoaded){ return; } // this method requires init to be complete
		if(dojo.isIE || dojo.isWebKit || dojo.isOpera){
			var preventIEfocus = dojo.isIE && (this.isLoaded || !this.focusOnLoad);
			if(preventIEfocus){ this.editNode.unselectable = "on"; }
			this.editNode.contentEditable = !value;
			if(preventIEfocus){
				var _this = this;
				setTimeout(function(){ _this.editNode.unselectable = "off"; }, 0);
			}
		}else{ //moz
			try{
				this.document.designMode=(value?'off':'on');
			}catch(e){ return; } // ! _disabledOK
			if(!value && this._mozSettingProps){
				var ps = this._mozSettingProps;
				for(var n in ps){
					if(ps.hasOwnProperty(n)){
						try{
							this.document.execCommand(n,false,ps[n]);
						}catch(e2){}
					}
				}
			}
//			this.document.execCommand('contentReadOnly', false, value);
//				if(value){
//					this.blur(); //to remove the blinking caret
//				}
		}
		this._disabledOK = true;
	},

/* Event handlers
 *****************/

	onLoad: function(/*String*/ html){
		// summary:
		//		Handler after the iframe finishes loading.
		// html: String
		//		Editor contents should be set to this value
		// tags:
		//		protected

		// TODO: rename this to _onLoad, make empty public onLoad() method, deprecate/make protected onLoadDeferred handler?

		if(!this.window.__registeredWindow){
			this.window.__registeredWindow = true;
			this._iframeRegHandle = dijit.registerIframe(this.iframe);
		}
		if(!dojo.isIE && !dojo.isWebKit && (this.height || dojo.isMoz)){
			this.editNode=this.document.body;
		}else{
			// there's a wrapper div around the content, see _getIframeDocTxt().
			this.editNode=this.document.body.firstChild;
			var _this = this;
			if(dojo.isIE){ // #4996 IE wants to focus the BODY tag
				this.tabStop = dojo.create('div', { tabIndex: -1 }, this.editingArea);
				this.iframe.onfocus = function(){ _this.editNode.setActive(); };
			}
		}
		this.focusNode = this.editNode; // for InlineEditBox


		var events = this.events.concat(this.captureEvents);
		var ap = this.iframe ? this.document : this.editNode;
		dojo.forEach(events, function(item){
			this.connect(ap, item.toLowerCase(), item);
		}, this);

		this.connect(ap, "onmouseup", "onClick"); // mouseup in the margin does not generate an onclick event

		if(dojo.isIE){ // IE contentEditable
			this.connect(this.document, "onmousedown", "_onIEMouseDown"); // #4996 fix focus

			// give the node Layout on IE
			// TODO: this may no longer be needed, since we've reverted IE to using an iframe,
			// not contentEditable.   Removing it would also probably remove the need for creating
			// the extra <div> in _getIframeDocTxt()
			this.editNode.style.zoom = 1.0;
		}else{
			this.connect(this.document, "onmousedown", function(){
				// Clear the moveToStart focus, as mouse
				// down will set cursor point.  Required to properly
				// work with selection/position driven plugins and clicks in
				// the window. refs: #10678
				delete this._cursorToStart;
			});
		}
		
		if(dojo.isWebKit){
			//WebKit sometimes doesn't fire right on selections, so the toolbar
			//doesn't update right.  Therefore, help it out a bit with an additional
			//listener.  A mouse up will typically indicate a display change, so fire this
			//and get the toolbar to adapt.  Reference: #9532
			this._webkitListener = this.connect(this.document, "onmouseup", "onDisplayChanged");
			this.connect(this.document, "onmousedown", function(e){
				var t = e.target;
				if(t && (t === this.document.body || t === this.document)){
					// Since WebKit uses the inner DIV, we need to check and set position.
					// See: #12024 as to why the change was made.
					setTimeout(dojo.hitch(this, "placeCursorAtEnd"), 0);
				}
			});
		}
		
		if(dojo.isIE){
			// Try to make sure 'hidden' elements aren't visible in edit mode (like browsers other than IE
			// do).  See #9103
			try{
				this.document.execCommand('RespectVisibilityInDesign', true, null);
			}catch(e){/* squelch */}
		}

		this.isLoaded = true;

		this.set('disabled', this.disabled); // initialize content to editable (or not)

		// Note that setValue() call will only work after isLoaded is set to true (above)

		// Set up a function to allow delaying the setValue until a callback is fired
		// This ensures extensions like dijit.Editor have a way to hold the value set
		// until plugins load (and do things like register filters).
		var setContent = dojo.hitch(this, function(){
			this.setValue(html);
			if(this.onLoadDeferred){
				this.onLoadDeferred.callback(true);
			}
			this.onDisplayChanged();
			if(this.focusOnLoad){
				// after the document loads, then set focus after updateInterval expires so that
				// onNormalizedDisplayChanged has run to avoid input caret issues
				dojo.addOnLoad(dojo.hitch(this, function(){ setTimeout(dojo.hitch(this, "focus"), this.updateInterval); }));
			}
			// Save off the initial content now
			this.value = this.getValue(true);
		});
		if(this.setValueDeferred){
			this.setValueDeferred.addCallback(setContent);
		}else{
			setContent();
		}
	},

	onKeyDown: function(/* Event */ e){
		// summary:
		//		Handler for onkeydown event
		// tags:
		//		protected

		// we need this event at the moment to get the events from control keys
		// such as the backspace. It might be possible to add this to Dojo, so that
		// keyPress events can be emulated by the keyDown and keyUp detection.

		if(e.keyCode === dojo.keys.TAB && this.isTabIndent ){
			dojo.stopEvent(e); //prevent tab from moving focus out of editor

			// FIXME: this is a poor-man's indent/outdent. It would be
			// better if it added 4 "&nbsp;" chars in an undoable way.
			// Unfortunately pasteHTML does not prove to be undoable
			if(this.queryCommandEnabled((e.shiftKey ? "outdent" : "indent"))){
				this.execCommand((e.shiftKey ? "outdent" : "indent"));
			}
		}
		if(dojo.isIE){
			if(e.keyCode == dojo.keys.TAB && !this.isTabIndent){
				if(e.shiftKey && !e.ctrlKey && !e.altKey){
					// focus the BODY so the browser will tab away from it instead
					this.iframe.focus();
				}else if(!e.shiftKey && !e.ctrlKey && !e.altKey){
					// focus the BODY so the browser will tab away from it instead
					this.tabStop.focus();
				}
			}else if(e.keyCode === dojo.keys.BACKSPACE && this.document.selection.type === "Control"){
				// IE has a bug where if a non-text object is selected in the editor,
				// hitting backspace would act as if the browser's back button was
				// clicked instead of deleting the object. see #1069
				dojo.stopEvent(e);
				this.execCommand("delete");
			}else if((65 <= e.keyCode && e.keyCode <= 90) ||
				(e.keyCode>=37 && e.keyCode<=40) // FIXME: get this from connect() instead!
			){ //arrow keys
				e.charCode = e.keyCode;
				this.onKeyPress(e);
			}
		}
		return true;
	},

	onKeyUp: function(e){
		// summary:
		//		Handler for onkeyup event
		// tags:
		//      callback
		return;
	},

	setDisabled: function(/*Boolean*/ disabled){
		// summary:
		//		Deprecated, use set('disabled', ...) instead.
		// tags:
		//		deprecated
		dojo.deprecated('dijit.Editor::setDisabled is deprecated','use dijit.Editor::attr("disabled",boolean) instead', 2.0);
		this.set('disabled',disabled);
	},
	_setValueAttr: function(/*String*/ value){
		// summary:
		//      Registers that attr("value", foo) should call setValue(foo)
		this.setValue(value);
	},
	_setDisableSpellCheckAttr: function(/*Boolean*/ disabled){
		if(this.document){
			dojo.attr(this.document.body, "spellcheck", !disabled);
		}else{
			// try again after the editor is finished loading
			this.onLoadDeferred.addCallback(dojo.hitch(this, function(){
				dojo.attr(this.document.body, "spellcheck", !disabled);
			}));
		}
		this._set("disableSpellCheck", disabled);
	},

	onKeyPress: function(e){
		// summary:
		//		Handle the various key events
		// tags:
		//		protected

		var c = (e.keyChar && e.keyChar.toLowerCase()) || e.keyCode,
			handlers = this._keyHandlers[c],
			args = arguments;

		if(handlers && !e.altKey){
			dojo.some(handlers, function(h){
				// treat meta- same as ctrl-, for benefit of mac users
				if(!(h.shift ^ e.shiftKey) && !(h.ctrl ^ (e.ctrlKey||e.metaKey))){
					if(!h.handler.apply(this, args)){
						e.preventDefault();
					}
					return true;
				}
			}, this);
		}

		// function call after the character has been inserted
		if(!this._onKeyHitch){
			this._onKeyHitch = dojo.hitch(this, "onKeyPressed");
		}
		setTimeout(this._onKeyHitch, 1);
		return true;
	},

	addKeyHandler: function(/*String*/ key, /*Boolean*/ ctrl, /*Boolean*/ shift, /*Function*/ handler){
		// summary:
		//		Add a handler for a keyboard shortcut
		// description:
		//		The key argument should be in lowercase if it is a letter character
		// tags:
		//		protected
		if(!dojo.isArray(this._keyHandlers[key])){
			this._keyHandlers[key] = [];
		}
		//TODO: would be nice to make this a hash instead of an array for quick lookups
		this._keyHandlers[key].push({
			shift: shift || false,
			ctrl: ctrl || false,
			handler: handler
		});
	},

	onKeyPressed: function(){
		// summary:
		//		Handler for after the user has pressed a key, and the display has been updated.
		//		(Runs on a timer so that it runs after the display is updated)
		// tags:
		//		private
		this.onDisplayChanged(/*e*/); // can't pass in e
	},

	onClick: function(/*Event*/ e){
		// summary:
		//		Handler for when the user clicks.
		// tags:
		//		private

		// console.info('onClick',this._tryDesignModeOn);
		this.onDisplayChanged(e);
	},

	_onIEMouseDown: function(/*Event*/ e){
		// summary:
		//		IE only to prevent 2 clicks to focus
		// tags:
		//		protected

		if(!this._focused && !this.disabled){
			this.focus();
		}
	},

	_onBlur: function(e){
		// summary:
		//		Called from focus manager when focus has moved away from this editor
		// tags:
		//		protected

		// console.info('_onBlur')

		this.inherited(arguments);

		var newValue = this.getValue(true);
		if(newValue != this.value){
			this.onChange(newValue);
		}
		this._set("value", newValue);
	},

	_onFocus: function(/*Event*/ e){
		// summary:
		//		Called from focus manager when focus has moved into this editor
		// tags:
		//		protected

		// console.info('_onFocus')
		if(!this.disabled){
			if(!this._disabledOK){
				this.set('disabled', false);
			}
			this.inherited(arguments);
		}
	},

	// TODO: remove in 2.0
	blur: function(){
		// summary:
		//		Remove focus from this instance.
		// tags:
		//		deprecated
		if(!dojo.isIE && this.window.document.documentElement && this.window.document.documentElement.focus){
			this.window.document.documentElement.focus();
		}else if(dojo.doc.body.focus){
			dojo.doc.body.focus();
		}
	},

	focus: function(){
		// summary:
		//		Move focus to this editor
		if(!this.isLoaded){
			this.focusOnLoad = true;
			return;
		}
		if(this._cursorToStart){
			delete this._cursorToStart;
			if(this.editNode.childNodes){
				this.placeCursorAtStart(); // this calls focus() so return
				return;
			}
		}
		if(!dojo.isIE){
			dijit.focus(this.iframe);
		}else if(this.editNode && this.editNode.focus){
			// editNode may be hidden in display:none div, lets just punt in this case
			//this.editNode.focus(); -> causes IE to scroll always (strict and quirks mode) to the top the Iframe
			// if we fire the event manually and let the browser handle the focusing, the latest
			// cursor position is focused like in FF
			this.iframe.fireEvent('onfocus', document.createEventObject()); // createEventObject only in IE
		//	}else{
		// TODO: should we throw here?
		// console.debug("Have no idea how to focus into the editor!");
		}
	},

	// _lastUpdate: 0,
	updateInterval: 200,
	_updateTimer: null,
	onDisplayChanged: function(/*Event*/ e){
		// summary:
		//		This event will be fired everytime the display context
		//		changes and the result needs to be reflected in the UI.
		// description:
		//		If you don't want to have update too often,
		//		onNormalizedDisplayChanged should be used instead
		// tags:
		//		private

		// var _t=new Date();
		if(this._updateTimer){
			clearTimeout(this._updateTimer);
		}
		if(!this._updateHandler){
			this._updateHandler = dojo.hitch(this,"onNormalizedDisplayChanged");
		}
		this._updateTimer = setTimeout(this._updateHandler, this.updateInterval);
		
		// Technically this should trigger a call to watch("value", ...) registered handlers,
		// but getValue() is too slow to call on every keystroke so we don't.
	},
	onNormalizedDisplayChanged: function(){
		// summary:
		//		This event is fired every updateInterval ms or more
		// description:
		//		If something needs to happen immediately after a
		//		user change, please use onDisplayChanged instead.
		// tags:
		//		private
		delete this._updateTimer;
	},
	onChange: function(newContent){
		// summary:
		//		This is fired if and only if the editor loses focus and
		//		the content is changed.
	},
	_normalizeCommand: function(/*String*/ cmd, /*Anything?*/argument){
		// summary:
		//		Used as the advice function by dojo.connect to map our
		//		normalized set of commands to those supported by the target
		//		browser.
		// tags:
		//		private

		var command = cmd.toLowerCase();
		if(command == "formatblock"){
			if(dojo.isSafari && argument === undefined){ command = "heading"; }
		}else if(command == "hilitecolor" && !dojo.isMoz){
			command = "backcolor";
		}

		return command;
	},

	_qcaCache: {},
	queryCommandAvailable: function(/*String*/ command){
		// summary:
		//		Tests whether a command is supported by the host. Clients
		//		SHOULD check whether a command is supported before attempting
		//		to use it, behaviour for unsupported commands is undefined.
		// command:
		//		The command to test for
		// tags:
		//		private

		// memoizing version. See _queryCommandAvailable for computing version
		var ca = this._qcaCache[command];
		if(ca !== undefined){ return ca; }
		return (this._qcaCache[command] = this._queryCommandAvailable(command));
	},

	_queryCommandAvailable: function(/*String*/ command){
		// summary:
		//		See queryCommandAvailable().
		// tags:
		//		private

		var ie = 1;
		var mozilla = 1 << 1;
		var webkit = 1 << 2;
		var opera = 1 << 3;

		function isSupportedBy(browsers){
			return {
				ie: Boolean(browsers & ie),
				mozilla: Boolean(browsers & mozilla),
				webkit: Boolean(browsers & webkit),
				opera: Boolean(browsers & opera)
			};
		}

		var supportedBy = null;

		switch(command.toLowerCase()){
			case "bold": case "italic": case "underline":
			case "subscript": case "superscript":
			case "fontname": case "fontsize":
			case "forecolor": case "hilitecolor":
			case "justifycenter": case "justifyfull": case "justifyleft":
			case "justifyright": case "delete": case "selectall": case "toggledir":
				supportedBy = isSupportedBy(mozilla | ie | webkit | opera);
				break;

			case "createlink": case "unlink": case "removeformat":
			case "inserthorizontalrule": case "insertimage":
			case "insertorderedlist": case "insertunorderedlist":
			case "indent": case "outdent": case "formatblock":
			case "inserthtml": case "undo": case "redo": case "strikethrough": case "tabindent":
				supportedBy = isSupportedBy(mozilla | ie | opera | webkit);
				break;

			case "blockdirltr": case "blockdirrtl":
			case "dirltr": case "dirrtl":
			case "inlinedirltr": case "inlinedirrtl":
				supportedBy = isSupportedBy(ie);
				break;
			case "cut": case "copy": case "paste":
				supportedBy = isSupportedBy( ie | mozilla | webkit);
				break;

			case "inserttable":
				supportedBy = isSupportedBy(mozilla | ie);
				break;

			case "insertcell": case "insertcol": case "insertrow":
			case "deletecells": case "deletecols": case "deleterows":
			case "mergecells": case "splitcell":
				supportedBy = isSupportedBy(ie | mozilla);
				break;

			default: return false;
		}

		return (dojo.isIE && supportedBy.ie) ||
			(dojo.isMoz && supportedBy.mozilla) ||
			(dojo.isWebKit && supportedBy.webkit) ||
			(dojo.isOpera && supportedBy.opera);	// Boolean return true if the command is supported, false otherwise
	},

	execCommand: function(/*String*/ command, argument){
		// summary:
		//		Executes a command in the Rich Text area
		// command:
		//		The command to execute
		// argument:
		//		An optional argument to the command
		// tags:
		//		protected
		var returnValue;

		//focus() is required for IE to work
		//In addition, focus() makes sure after the execution of
		//the command, the editor receives the focus as expected
		this.focus();

		command = this._normalizeCommand(command, argument);

		if(argument !== undefined){
			if(command == "heading"){
				throw new Error("unimplemented");
			}else if((command == "formatblock") && dojo.isIE){
				argument = '<'+argument+'>';
			}
		}

		//Check to see if we have any over-rides for commands, they will be functions on this
		//widget of the form _commandImpl.  If we don't, fall through to the basic native
		//exec command of the browser.
		var implFunc = "_" + command + "Impl";
		if(this[implFunc]){
			returnValue = this[implFunc](argument);
		}else{
			argument = arguments.length > 1 ? argument : null;
			if(argument || command!="createlink"){
				returnValue = this.document.execCommand(command, false, argument);
			}
		}

		this.onDisplayChanged();
		return returnValue;
	},

	queryCommandEnabled: function(/*String*/ command){
		// summary:
		//		Check whether a command is enabled or not.
		// tags:
		//		protected
		if(this.disabled || !this._disabledOK){ return false; }
		command = this._normalizeCommand(command);
		if(dojo.isMoz || dojo.isWebKit){
			if(command == "unlink"){ // mozilla returns true always
				// console.debug(this._sCall("hasAncestorElement", ['a']));
				return this._sCall("hasAncestorElement", ["a"]);
			}else if(command == "inserttable"){
				return true;
			}
		}
		//see #4109
		if(dojo.isWebKit){
			if(command == "cut" || command == "copy") {
				// WebKit deems clipboard activity as a security threat and natively would return false
				var sel = this.window.getSelection();
				if(sel){ sel = sel.toString(); }
				return !!sel;
			}else if(command == "paste"){
				return true;
			}
		}

		var elem = dojo.isIE ? this.document.selection.createRange() : this.document;
		try{
			return elem.queryCommandEnabled(command);
		}catch(e){
			//Squelch, occurs if editor is hidden on FF 3 (and maybe others.)
			return false;
		}

	},

	queryCommandState: function(command){
		// summary:
		//		Check the state of a given command and returns true or false.
		// tags:
		//		protected

		if(this.disabled || !this._disabledOK){ return false; }
		command = this._normalizeCommand(command);
		try{
			return this.document.queryCommandState(command);
		}catch(e){
			//Squelch, occurs if editor is hidden on FF 3 (and maybe others.)
			return false;
		}
	},

	queryCommandValue: function(command){
		// summary:
		//		Check the value of a given command. This matters most for
		//		custom selections and complex values like font value setting.
		// tags:
		//		protected

		if(this.disabled || !this._disabledOK){ return false; }
		var r;
		command = this._normalizeCommand(command);
		if(dojo.isIE && command == "formatblock"){
			r = this._native2LocalFormatNames[this.document.queryCommandValue(command)];
		}else if(dojo.isMoz && command === "hilitecolor"){
			var oldValue;
			try{
				oldValue = this.document.queryCommandValue("styleWithCSS");
			}catch(e){
				oldValue = false;
			}
			this.document.execCommand("styleWithCSS", false, true);
			r = this.document.queryCommandValue(command);
			this.document.execCommand("styleWithCSS", false, oldValue);
		}else{
			r = this.document.queryCommandValue(command);
		}
		return r;
	},

	// Misc.

	_sCall: function(name, args){
		// summary:
		//		Run the named method of dijit._editor.selection over the
		//		current editor instance's window, with the passed args.
		// tags:
		//		private
		return dojo.withGlobal(this.window, name, dijit._editor.selection, args);
	},

	// FIXME: this is a TON of code duplication. Why?

	placeCursorAtStart: function(){
		// summary:
		//		Place the cursor at the start of the editing area.
		// tags:
		//		private

		this.focus();

		//see comments in placeCursorAtEnd
		var isvalid=false;
		if(dojo.isMoz){
			// TODO:  Is this branch even necessary?
			var first=this.editNode.firstChild;
			while(first){
				if(first.nodeType == 3){
					if(first.nodeValue.replace(/^\s+|\s+$/g, "").length>0){
						isvalid=true;
						this._sCall("selectElement", [ first ]);
						break;
					}
				}else if(first.nodeType == 1){
					isvalid=true;
					var tg = first.tagName ? first.tagName.toLowerCase() : "";
					// Collapse before childless tags.
					if(/br|input|img|base|meta|area|basefont|hr|link/.test(tg)){
						this._sCall("selectElement", [ first ]);
					}else{
						// Collapse inside tags with children.
						this._sCall("selectElementChildren", [ first ]);
					}
					break;
				}
				first = first.nextSibling;
			}
		}else{
			isvalid=true;
			this._sCall("selectElementChildren", [ this.editNode ]);
		}
		if(isvalid){
			this._sCall("collapse", [ true ]);
		}
	},

	placeCursorAtEnd: function(){
		// summary:
		//		Place the cursor at the end of the editing area.
		// tags:
		//		private

		this.focus();

		//In mozilla, if last child is not a text node, we have to use
		// selectElementChildren on this.editNode.lastChild otherwise the
		// cursor would be placed at the end of the closing tag of
		//this.editNode.lastChild
		var isvalid=false;
		if(dojo.isMoz){
			var last=this.editNode.lastChild;
			while(last){
				if(last.nodeType == 3){
					if(last.nodeValue.replace(/^\s+|\s+$/g, "").length>0){
						isvalid=true;
						this._sCall("selectElement", [ last ]);
						break;
					}
				}else if(last.nodeType == 1){
					isvalid=true;
					if(last.lastChild){
						this._sCall("selectElement", [ last.lastChild ]);
					}else{
						this._sCall("selectElement", [ last ]);
					}
					break;
				}
				last = last.previousSibling;
			}
		}else{
			isvalid=true;
			this._sCall("selectElementChildren", [ this.editNode ]);
		}
		if(isvalid){
			this._sCall("collapse", [ false ]);
		}
	},

	getValue: function(/*Boolean?*/ nonDestructive){
		// summary:
		//		Return the current content of the editing area (post filters
		//		are applied).  Users should call get('value') instead.
		//	nonDestructive:
		//		defaults to false. Should the post-filtering be run over a copy
		//		of the live DOM? Most users should pass "true" here unless they
		//		*really* know that none of the installed filters are going to
		//		mess up the editing session.
		// tags:
		//		private
		if(this.textarea){
			if(this.isClosed || !this.isLoaded){
				return this.textarea.value;
			}
		}

		return this._postFilterContent(null, nonDestructive);
	},
	_getValueAttr: function(){
		// summary:
		//		Hook to make attr("value") work
		return this.getValue(true);
	},

	setValue: function(/*String*/ html){
		// summary:
		//		This function sets the content. No undo history is preserved.
		//		Users should use set('value', ...) instead.
		// tags:
		//		deprecated

		// TODO: remove this and getValue() for 2.0, and move code to _setValueAttr()

		if(!this.isLoaded){
			// try again after the editor is finished loading
			this.onLoadDeferred.addCallback(dojo.hitch(this, function(){
				this.setValue(html);
			}));
			return;
		}
		this._cursorToStart = true;
		if(this.textarea && (this.isClosed || !this.isLoaded)){
			this.textarea.value=html;
		}else{
			html = this._preFilterContent(html);
			var node = this.isClosed ? this.domNode : this.editNode;
			if(html && dojo.isMoz && html.toLowerCase() == "<p></p>"){
				html = "<p>&nbsp;</p>";
			}

			// Use &nbsp; to avoid webkit problems where editor is disabled until the user clicks it
			if(!html && dojo.isWebKit){
				html = "&nbsp;";
			}
			node.innerHTML = html;
			this._preDomFilterContent(node);
		}

		this.onDisplayChanged();
		this._set("value", this.getValue(true));
	},

	replaceValue: function(/*String*/ html){
		// summary:
		//		This function set the content while trying to maintain the undo stack
		//		(now only works fine with Moz, this is identical to setValue in all
		//		other browsers)
		// tags:
		//		protected

		if(this.isClosed){
			this.setValue(html);
		}else if(this.window && this.window.getSelection && !dojo.isMoz){ // Safari
			// look ma! it's a totally f'd browser!
			this.setValue(html);
		}else if(this.window && this.window.getSelection){ // Moz
			html = this._preFilterContent(html);
			this.execCommand("selectall");
			if(!html){
				this._cursorToStart = true;
				html = "&nbsp;";
			}
			this.execCommand("inserthtml", html);
			this._preDomFilterContent(this.editNode);
		}else if(this.document && this.document.selection){//IE
			//In IE, when the first element is not a text node, say
			//an <a> tag, when replacing the content of the editing
			//area, the <a> tag will be around all the content
			//so for now, use setValue for IE too
			this.setValue(html);
		}

		this._set("value", this.getValue(true));
	},

	_preFilterContent: function(/*String*/ html){
		// summary:
		//		Filter the input before setting the content of the editing
		//		area. DOM pre-filtering may happen after this
		//		string-based filtering takes place but as of 1.2, this is not
		//		guaranteed for operations such as the inserthtml command.
		// tags:
		//		private

		var ec = html;
		dojo.forEach(this.contentPreFilters, function(ef){ if(ef){ ec = ef(ec); } });
		return ec;
	},
	_preDomFilterContent: function(/*DomNode*/ dom){
		// summary:
		//		filter the input's live DOM. All filter operations should be
		//		considered to be "live" and operating on the DOM that the user
		//		will be interacting with in their editing session.
		// tags:
		//		private
		dom = dom || this.editNode;
		dojo.forEach(this.contentDomPreFilters, function(ef){
			if(ef && dojo.isFunction(ef)){
				ef(dom);
			}
		}, this);
	},

	_postFilterContent: function(
		/*DomNode|DomNode[]|String?*/ dom,
		/*Boolean?*/ nonDestructive){
		// summary:
		//		filter the output after getting the content of the editing area
		//
		// description:
		//		post-filtering allows plug-ins and users to specify any number
		//		of transforms over the editor's content, enabling many common
		//		use-cases such as transforming absolute to relative URLs (and
		//		vice-versa), ensuring conformance with a particular DTD, etc.
		//		The filters are registered in the contentDomPostFilters and
		//		contentPostFilters arrays. Each item in the
		//		contentDomPostFilters array is a function which takes a DOM
		//		Node or array of nodes as its only argument and returns the
		//		same. It is then passed down the chain for further filtering.
		//		The contentPostFilters array behaves the same way, except each
		//		member operates on strings. Together, the DOM and string-based
		//		filtering allow the full range of post-processing that should
		//		be necessaray to enable even the most agressive of post-editing
		//		conversions to take place.
		//
		//		If nonDestructive is set to "true", the nodes are cloned before
		//		filtering proceeds to avoid potentially destructive transforms
		//		to the content which may still needed to be edited further.
		//		Once DOM filtering has taken place, the serialized version of
		//		the DOM which is passed is run through each of the
		//		contentPostFilters functions.
		//
		//	dom:
		//		a node, set of nodes, which to filter using each of the current
		//		members of the contentDomPostFilters and contentPostFilters arrays.
		//
		//	nonDestructive:
		//		defaults to "false". If true, ensures that filtering happens on
		//		a clone of the passed-in content and not the actual node
		//		itself.
		//
		// tags:
		//		private

		var ec;
		if(!dojo.isString(dom)){
			dom = dom || this.editNode;
			if(this.contentDomPostFilters.length){
				if(nonDestructive){
					dom = dojo.clone(dom);
				}
				dojo.forEach(this.contentDomPostFilters, function(ef){
					dom = ef(dom);
				});
			}
			ec = dijit._editor.getChildrenHtml(dom);
		}else{
			ec = dom;
		}

		if(!dojo.trim(ec.replace(/^\xA0\xA0*/, '').replace(/\xA0\xA0*$/, '')).length){
			ec = "";
		}

		//	if(dojo.isIE){
		//		//removing appended <P>&nbsp;</P> for IE
		//		ec = ec.replace(/(?:<p>&nbsp;</p>[\n\r]*)+$/i,"");
		//	}
		dojo.forEach(this.contentPostFilters, function(ef){
			ec = ef(ec);
		});

		return ec;
	},

	_saveContent: function(/*Event*/ e){
		// summary:
		//		Saves the content in an onunload event if the editor has not been closed
		// tags:
		//		private

		var saveTextarea = dojo.byId(dijit._scopeName + "._editor.RichText.value");
		if(saveTextarea.value){
			saveTextarea.value += this._SEPARATOR;
		}
		saveTextarea.value += this.name + this._NAME_CONTENT_SEP + this.getValue(true);
	},


	escapeXml: function(/*String*/ str, /*Boolean*/ noSingleQuotes){
		// summary:
		//		Adds escape sequences for special characters in XML.
		//		Optionally skips escapes for single quotes
		// tags:
		//		private

		str = str.replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/"/gm, "&quot;");
		if(!noSingleQuotes){
			str = str.replace(/'/gm, "&#39;");
		}
		return str; // string
	},

	getNodeHtml: function(/* DomNode */ node){
		// summary:
		//		Deprecated.   Use dijit._editor._getNodeHtml() instead.
		// tags:
		//		deprecated
		dojo.deprecated('dijit.Editor::getNodeHtml is deprecated','use dijit._editor.getNodeHtml instead', 2);
		return dijit._editor.getNodeHtml(node); // String
	},

	getNodeChildrenHtml: function(/* DomNode */ dom){
		// summary:
		//		Deprecated.   Use dijit._editor.getChildrenHtml() instead.
		// tags:
		//		deprecated
		dojo.deprecated('dijit.Editor::getNodeChildrenHtml is deprecated','use dijit._editor.getChildrenHtml instead', 2);
		return dijit._editor.getChildrenHtml(dom);
	},

	close: function(/*Boolean?*/ save){
		// summary:
		//		Kills the editor and optionally writes back the modified contents to the
		//		element from which it originated.
		// save:
		//		Whether or not to save the changes. If false, the changes are discarded.
		// tags:
		//		private

		if(this.isClosed){ return; }

		if(!arguments.length){ save = true; }
		if(save){
			this._set("value", this.getValue(true));
		}

		// line height is squashed for iframes
		// FIXME: why was this here? if (this.iframe){ this.domNode.style.lineHeight = null; }

		if(this.interval){ clearInterval(this.interval); }

		if(this._webkitListener){
			//Cleaup of WebKit fix: #9532
			this.disconnect(this._webkitListener);
			delete this._webkitListener;
		}

		// Guard against memory leaks on IE (see #9268)
		if(dojo.isIE){
			 this.iframe.onfocus = null;
		}
		this.iframe._loadFunc = null;

		if(this._iframeRegHandle){
			dijit.unregisterIframe(this._iframeRegHandle);
			delete this._iframeRegHandle;
		}

		if(this.textarea){
			var s = this.textarea.style;
			s.position = "";
			s.left = s.top = "";
			if(dojo.isIE){
				s.overflow = this.__overflow;
				this.__overflow = null;
			}
			this.textarea.value = this.value;
			dojo.destroy(this.domNode);
			this.domNode = this.textarea;
		}else{
			// Note that this destroys the iframe
			this.domNode.innerHTML = this.value;
		}
		delete this.iframe;

		dojo.removeClass(this.domNode, this.baseClass);
		this.isClosed = true;
		this.isLoaded = false;

		delete this.editNode;
		delete this.focusNode;

		if(this.window && this.window._frameElement){
			this.window._frameElement = null;
		}

		this.window = null;
		this.document = null;
		this.editingArea = null;
		this.editorObject = null;
	},

	destroy: function(){
		if(!this.isClosed){ this.close(false); }
		this.inherited(arguments);
		if(dijit._editor._globalSaveHandler){
			delete dijit._editor._globalSaveHandler[this.id];
		}
	},

	_removeMozBogus: function(/* String */ html){
		// summary:
		//		Post filter to remove unwanted HTML attributes generated by mozilla
		// tags:
		//		private
		return html.replace(/\stype="_moz"/gi, '').replace(/\s_moz_dirty=""/gi, '').replace(/_moz_resizing="(true|false)"/gi,''); // String
	},
	_removeWebkitBogus: function(/* String */ html){
		// summary:
		//		Post filter to remove unwanted HTML attributes generated by webkit
		// tags:
		//		private
		html = html.replace(/\sclass="webkit-block-placeholder"/gi, '');
		html = html.replace(/\sclass="apple-style-span"/gi, '');
		// For some reason copy/paste sometime adds extra meta tags for charset on
		// webkit (chrome) on mac.They need to be removed.  See: #12007"
		html = html.replace(/<meta charset=\"utf-8\" \/>/gi, '');
		return html; // String
	},
	_normalizeFontStyle: function(/* String */ html){
		// summary:
		//		Convert 'strong' and 'em' to 'b' and 'i'.
		// description:
		//		Moz can not handle strong/em tags correctly, so to help
		//		mozilla and also to normalize output, convert them to 'b' and 'i'.
		//
		//		Note the IE generates 'strong' and 'em' rather than 'b' and 'i'
		// tags:
		//		private
		return html.replace(/<(\/)?strong([ \>])/gi, '<$1b$2')
			.replace(/<(\/)?em([ \>])/gi, '<$1i$2' ); // String
	},

	_preFixUrlAttributes: function(/* String */ html){
		// summary:
		//		Pre-filter to do fixing to href attributes on <a> and <img> tags
		// tags:
		//		private
		return html.replace(/(?:(<a(?=\s).*?\shref=)("|')(.*?)\2)|(?:(<a\s.*?href=)([^"'][^ >]+))/gi,
				'$1$4$2$3$5$2 _djrealurl=$2$3$5$2')
			.replace(/(?:(<img(?=\s).*?\ssrc=)("|')(.*?)\2)|(?:(<img\s.*?src=)([^"'][^ >]+))/gi,
				'$1$4$2$3$5$2 _djrealurl=$2$3$5$2'); // String
	},

	/*****************************************************************************
		The following functions implement HTML manipulation commands for various
		browser/contentEditable implementations.  The goal of them is to enforce
		standard behaviors of them.
	******************************************************************************/

	_inserthorizontalruleImpl: function(argument){
		// summary:
		//		This function implements the insertion of HTML 'HR' tags.
		//		into a point on the page.  IE doesn't to it right, so
		//		we have to use an alternate form
		// argument:
		//		arguments to the exec command, if any.
		// tags:
		//		protected
		if(dojo.isIE){
			return this._inserthtmlImpl("<hr>");
		}
		return this.document.execCommand("inserthorizontalrule", false, argument);
	},

	_unlinkImpl: function(argument){
		// summary:
		//		This function implements the unlink of an 'a' tag.
		// argument:
		//		arguments to the exec command, if any.
		// tags:
		//		protected
		if((this.queryCommandEnabled("unlink")) && (dojo.isMoz || dojo.isWebKit)){
			var a = this._sCall("getAncestorElement", [ "a" ]);
			this._sCall("selectElement", [ a ]);
			return this.document.execCommand("unlink", false, null);
		}
		return this.document.execCommand("unlink", false, argument);
	},

	_hilitecolorImpl: function(argument){
		// summary:
		//		This function implements the hilitecolor command
		// argument:
		//		arguments to the exec command, if any.
		// tags:
		//		protected
		var returnValue;
		if(dojo.isMoz){
			// mozilla doesn't support hilitecolor properly when useCSS is
			// set to false (bugzilla #279330)
			this.document.execCommand("styleWithCSS", false, true);
			returnValue = this.document.execCommand("hilitecolor", false, argument);
			this.document.execCommand("styleWithCSS", false, false);
		}else{
			returnValue = this.document.execCommand("hilitecolor", false, argument);
		}
		return returnValue;
	},

	_backcolorImpl: function(argument){
		// summary:
		//		This function implements the backcolor command
		// argument:
		//		arguments to the exec command, if any.
		// tags:
		//		protected
		if(dojo.isIE){
			// Tested under IE 6 XP2, no problem here, comment out
			// IE weirdly collapses ranges when we exec these commands, so prevent it
			//	var tr = this.document.selection.createRange();
			argument = argument ? argument : null;
		}
		return this.document.execCommand("backcolor", false, argument);
	},

	_forecolorImpl: function(argument){
		// summary:
		//		This function implements the forecolor command
		// argument:
		//		arguments to the exec command, if any.
		// tags:
		//		protected
		if(dojo.isIE){
			// Tested under IE 6 XP2, no problem here, comment out
			// IE weirdly collapses ranges when we exec these commands, so prevent it
			//	var tr = this.document.selection.createRange();
			argument = argument? argument : null;
		}
		return this.document.execCommand("forecolor", false, argument);
	},

	_inserthtmlImpl: function(argument){
		// summary:
		//		This function implements the insertion of HTML content into
		//		a point on the page.
		// argument:
		//		The content to insert, if any.
		// tags:
		//		protected
		argument = this._preFilterContent(argument);
		var rv = true;
		if(dojo.isIE){
			var insertRange = this.document.selection.createRange();
			if(this.document.selection.type.toUpperCase() == 'CONTROL'){
				var n=insertRange.item(0);
				while(insertRange.length){
					insertRange.remove(insertRange.item(0));
				}
				n.outerHTML=argument;
			}else{
				insertRange.pasteHTML(argument);
			}
			insertRange.select();
			//insertRange.collapse(true);
		}else if(dojo.isMoz && !argument.length){
			//mozilla can not inserthtml an empty html to delete current selection
			//so we delete the selection instead in this case
			this._sCall("remove"); // FIXME
		}else{
			rv = this.document.execCommand("inserthtml", false, argument);
		}
		return rv;
	},

	_boldImpl: function(argument){
		// summary:
		//		This function implements an over-ride of the bold command.
		// argument:
		//		Not used, operates by selection.
		// tags:
		//		protected
		if(dojo.isIE){
			this._adaptIESelection()
		}
		return this.document.execCommand("bold", false, argument);
	},
	
	_italicImpl: function(argument){
		// summary:
		//		This function implements an over-ride of the italic command.
		// argument:
		//		Not used, operates by selection.
		// tags:
		//		protected
		if(dojo.isIE){
			this._adaptIESelection()
		}
		return this.document.execCommand("italic", false, argument);
	},

	_underlineImpl: function(argument){
		// summary:
		//		This function implements an over-ride of the underline command.
		// argument:
		//		Not used, operates by selection.
		// tags:
		//		protected
		if(dojo.isIE){
			this._adaptIESelection()
		}
		return this.document.execCommand("underline", false, argument);
	},
	
	_strikethroughImpl: function(argument){
		// summary:
		//		This function implements an over-ride of the strikethrough command.
		// argument:
		//		Not used, operates by selection.
		// tags:
		//		protected
		if(dojo.isIE){
			this._adaptIESelection()
		}
		return this.document.execCommand("strikethrough", false, argument);
	},

	getHeaderHeight: function(){
		// summary:
		//		A function for obtaining the height of the header node
		return this._getNodeChildrenHeight(this.header); // Number
	},

	getFooterHeight: function(){
		// summary:
		//		A function for obtaining the height of the footer node
		return this._getNodeChildrenHeight(this.footer); // Number
	},

	_getNodeChildrenHeight: function(node){
		// summary:
		//		An internal function for computing the cumulative height of all child nodes of 'node'
		// node:
		//		The node to process the children of;
		var h = 0;
		if(node && node.childNodes){
			// IE didn't compute it right when position was obtained on the node directly is some cases,
			// so we have to walk over all the children manually.
			var i;
			for(i = 0; i < node.childNodes.length; i++){
				var size = dojo.position(node.childNodes[i]);
				h += size.h;
			}
		}
		return h; // Number
	},
	
	_isNodeEmpty: function(node, startOffset){
		// summary:
		//		Function to test if a node is devoid of real content.
		// node:
		//		The node to check.
		// tags:
		//		private.
		if(node.nodeType == 1/*element*/){
			if(node.childNodes.length > 0){
				return this._isNodeEmpty(node.childNodes[0], startOffset);
	}
			return true;
		}else if(node.nodeType == 3/*text*/){
			return (node.nodeValue.substring(startOffset) == "");
		}
		return false;
	},
	
	_removeStartingRangeFromRange: function(node, range){
		// summary:
		//		Function to adjust selection range by removing the current
		//		start node.
		// node:
		//		The node to remove from the starting range.
		// range:
		//		The range to adapt.
		// tags:
		//		private
		if(node.nextSibling){
			range.setStart(node.nextSibling,0);
		}else{
			var parent = node.parentNode;
			while(parent && parent.nextSibling == null){
				//move up the tree until we find a parent that has another node, that node will be the next node
				parent = parent.parentNode;
			}
			if(parent){
				range.setStart(parent.nextSibling,0);
			}
		}
		return range;
	},
	
	_adaptIESelection: function(){
		// summary:
		//		Function to adapt the IE range by removing leading 'newlines'
		//		Needed to fix issue with bold/italics/underline not working if
		//		range included leading 'newlines'.
		//		In IE, if a user starts a selection at the very end of a line,
		//		then the native browser commands will fail to execute correctly.
		//		To work around the issue,  we can remove all empty nodes from
		//		the start of the range selection.
		var selection = dijit.range.getSelection(this.window);
		if(selection && selection.rangeCount && !selection.isCollapsed){
			var range = selection.getRangeAt(0);
			var firstNode = range.startContainer;
			var startOffset = range.startOffset;

			while(firstNode.nodeType == 3/*text*/ && startOffset >= firstNode.length && firstNode.nextSibling){
				//traverse the text nodes until we get to the one that is actually highlighted
				startOffset = startOffset - firstNode.length;
				firstNode = firstNode.nextSibling;
			}

			//Remove the starting ranges until the range does not start with an empty node.
			var lastNode=null;
			while(this._isNodeEmpty(firstNode, startOffset) && firstNode != lastNode){
				lastNode =firstNode; //this will break the loop in case we can't find the next sibling
				range = this._removeStartingRangeFromRange(firstNode, range); //move the start container to the next node in the range
				firstNode = range.startContainer;
				startOffset = 0; //start at the beginning of the new starting range
			}
			selection.removeAllRanges();// this will work as long as users cannot select multiple ranges. I have not been able to do that in the editor.
			selection.addRange(range);
		}
	}
});

}

if(!dojo._hasResource["dijit._editor._Plugin"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor._Plugin"] = true;
dojo.provide("dijit._editor._Plugin");





dojo.declare("dijit._editor._Plugin", null, {
	// summary
	//		Base class for a "plugin" to the editor, which is usually
	//		a single button on the Toolbar and some associated code

	constructor: function(/*Object?*/args, /*DomNode?*/node){
		this.params = args || {};
		dojo.mixin(this, this.params);
		this._connects=[];
		this._attrPairNames = {};
	},

	// editor: [const] dijit.Editor
	//		Points to the parent editor
	editor: null,

	// iconClassPrefix: [const] String
	//		The CSS class name for the button node is formed from `iconClassPrefix` and `command`
	iconClassPrefix: "dijitEditorIcon",

	// button: dijit._Widget?
	//		Pointer to `dijit.form.Button` or other widget (ex: `dijit.form.FilteringSelect`)
	//		that is added to the toolbar to control this plugin.
	//		If not specified, will be created on initialization according to `buttonClass`
	button: null,

	// command: String
	//		String like "insertUnorderedList", "outdent", "justifyCenter", etc. that represents an editor command.
	//		Passed to editor.execCommand() if `useDefaultCommand` is true.
	command: "",

	// useDefaultCommand: Boolean
	//		If true, this plugin executes by calling Editor.execCommand() with the argument specified in `command`.
	useDefaultCommand: true,

	// buttonClass: Widget Class
	//		Class of widget (ex: dijit.form.Button or dijit.form.FilteringSelect)
	//		that is added to the toolbar to control this plugin.
	//		This is used to instantiate the button, unless `button` itself is specified directly.
	buttonClass: dijit.form.Button,

	// disabled: Boolean
	//		Flag to indicate if this plugin has been disabled and should do nothing
	//		helps control button state, among other things.  Set via the setter api.
	disabled: false,

	getLabel: function(/*String*/key){
		// summary:
		//		Returns the label to use for the button
		// tags:
		//		private
		return this.editor.commands[key];		// String
	},

	_initButton: function(){
		// summary:
		//		Initialize the button or other widget that will control this plugin.
		//		This code only works for plugins controlling built-in commands in the editor.
		// tags:
		//		protected extension
		if(this.command.length){
			var label = this.getLabel(this.command),
				editor = this.editor,
				className = this.iconClassPrefix+" "+this.iconClassPrefix + this.command.charAt(0).toUpperCase() + this.command.substr(1);
			if(!this.button){
				var props = dojo.mixin({
					label: label,
					dir: editor.dir,
					lang: editor.lang,
					showLabel: false,
					iconClass: className,
					dropDown: this.dropDown,
					tabIndex: "-1"
				}, this.params || {});
				this.button = new this.buttonClass(props);
			}
		}
		if(this.get("disabled") && this.button){
			this.button.set("disabled", this.get("disabled"));
		}
	},

	destroy: function(){
		// summary:
		//		Destroy this plugin

		dojo.forEach(this._connects, dojo.disconnect);
		if(this.dropDown){
			this.dropDown.destroyRecursive();
		}
	},

	connect: function(o, f, tf){
		// summary:
		//		Make a dojo.connect() that is automatically disconnected when this plugin is destroyed.
		//		Similar to `dijit._Widget.connect`.
		// tags:
		//		protected
		this._connects.push(dojo.connect(o, f, this, tf));
	},

	updateState: function(){
		// summary:
		//		Change state of the plugin to respond to events in the editor.
		// description:
		//		This is called on meaningful events in the editor, such as change of selection
		//		or caret position (but not simple typing of alphanumeric keys).   It gives the
		//		plugin a chance to update the CSS of its button.
		//
		//		For example, the "bold" plugin will highlight/unhighlight the bold button depending on whether the
		//		characters next to the caret are bold or not.
		//
		//		Only makes sense when `useDefaultCommand` is true, as it calls Editor.queryCommandEnabled(`command`).
		var e = this.editor,
			c = this.command,
			checked, enabled;
		if(!e || !e.isLoaded || !c.length){ return; }
		var disabled = this.get("disabled");
		if(this.button){
			try{
				enabled = !disabled && e.queryCommandEnabled(c);
				if(this.enabled !== enabled){
					this.enabled = enabled;
					this.button.set('disabled', !enabled);
				}
				if(typeof this.button.checked == 'boolean'){
					checked = e.queryCommandState(c);
					if(this.checked !== checked){
						this.checked = checked;
						this.button.set('checked', e.queryCommandState(c));
					}
				}
			}catch(e){
				console.log(e); // FIXME: we shouldn't have debug statements in our code.  Log as an error?
			}
		}
	},

	setEditor: function(/*dijit.Editor*/ editor){
		// summary:
		//		Tell the plugin which Editor it is associated with.

		// TODO: refactor code to just pass editor to constructor.

		// FIXME: detach from previous editor!!
		this.editor = editor;

		// FIXME: prevent creating this if we don't need to (i.e., editor can't handle our command)
		this._initButton();

		// Processing for buttons that execute by calling editor.execCommand()
		if(this.button && this.useDefaultCommand){
			if(this.editor.queryCommandAvailable(this.command)){
				this.connect(this.button, "onClick",
					dojo.hitch(this.editor, "execCommand", this.command, this.commandArg)
				);
			}else{
				// hide button because editor doesn't support command (due to browser limitations)
				this.button.domNode.style.display = "none";
			}
		}

		this.connect(this.editor, "onNormalizedDisplayChanged", "updateState");
	},

	setToolbar: function(/*dijit.Toolbar*/ toolbar){
		// summary:
		//		Tell the plugin to add it's controller widget (often a button)
		//		to the toolbar.  Does nothing if there is no controller widget.

		// TODO: refactor code to just pass toolbar to constructor.

		if(this.button){
			toolbar.addChild(this.button);
		}
		// console.debug("adding", this.button, "to:", toolbar);
	},
	
	set: function(/* attribute */ name, /* anything */ value){
		// summary:
		//		Set a property on a plugin
		//	name:
		//		The property to set.
		//	value:
		//		The value to set in the property.
		// description:
		//		Sets named properties on a plugin which may potentially be handled by a
		// 		setter in the plugin.
		// 		For example, if the plugin has a properties "foo"
		//		and "bar" and a method named "_setFooAttr", calling:
		//	|	plugin.set("foo", "Howdy!");
		//		would be equivalent to writing:
		//	|	plugin._setFooAttr("Howdy!");
		//		and:
		//	|	plugin.set("bar", 3);
		//		would be equivalent to writing:
		//	|	plugin.bar = 3;
		//
		//	set() may also be called with a hash of name/value pairs, ex:
		//	|	plugin.set({
		//	|		foo: "Howdy",
		//	|		bar: 3
		//	|	})
		//	This is equivalent to calling set(foo, "Howdy") and set(bar, 3)
		if(typeof name === "object"){
			for(var x in name){
				this.set(x, name[x]);
	}
			return this;
		}
		var names = this._getAttrNames(name);
		if(this[names.s]){
			// use the explicit setter
			var result = this[names.s].apply(this, Array.prototype.slice.call(arguments, 1));
		}else{
			this._set(name, value);
		}
		return result || this;
	},

	get: function(name){
		// summary:
		//		Get a property from a plugin.
		//	name:
		//		The property to get.
		// description:
		//		Get a named property from a plugin. The property may
		//		potentially be retrieved via a getter method. If no getter is defined, this
		// 		just retrieves the object's property.
		// 		For example, if the plugin has a properties "foo"
		//		and "bar" and a method named "_getFooAttr", calling:
		//	|	plugin.get("foo");
		//		would be equivalent to writing:
		//	|	plugin._getFooAttr();
		//		and:
		//	|	plugin.get("bar");
		//		would be equivalent to writing:
		//	|	plugin.bar;
		var names = this._getAttrNames(name);
		return this[names.g] ? this[names.g]() : this[name];
	},

	_setDisabledAttr: function(disabled){
		// summary:
		//		Function to set the plugin state and call updateState to make sure the
		//		button is updated appropriately.
		this.disabled = disabled;
		this.updateState();
	},
	
	_getAttrNames: function(name){
		// summary:
		//		Helper function for get() and set().
		//		Caches attribute name values so we don't do the string ops every time.
		// tags:
		//		private

		var apn = this._attrPairNames;
		if(apn[name]){ return apn[name]; }
		var uc = name.charAt(0).toUpperCase() + name.substr(1);
		return (apn[name] = {
			s: "_set"+uc+"Attr",
			g: "_get"+uc+"Attr"
		});
	},
	
	_set: function(/*String*/ name, /*anything*/ value){
		// summary:
		//		Helper function to set new value for specified attribute
		var oldValue = this[name];
		this[name] = value;
	}
});

}

if(!dojo._hasResource["dijit._editor.plugins.EnterKeyHandling"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.plugins.EnterKeyHandling"] = true;
dojo.provide("dijit._editor.plugins.EnterKeyHandling");






dojo.declare("dijit._editor.plugins.EnterKeyHandling", dijit._editor._Plugin, {
	// summary:
	//		This plugin tries to make all browsers behave consistently with regard to
	//		how ENTER behaves in the editor window.  It traps the ENTER key and alters
	//		the way DOM is constructed in certain cases to try to commonize the generated
	//		DOM and behaviors across browsers.
	//
	// description:
	//		This plugin has three modes:
	//
	//			* blockModeForEnter=BR
	//			* blockModeForEnter=DIV
	//			* blockModeForEnter=P
	//
	//		In blockModeForEnter=P, the ENTER key starts a new
	//		paragraph, and shift-ENTER starts a new line in the current paragraph.
	//		For example, the input:
	//
	//		|	first paragraph <shift-ENTER>
	//		|	second line of first paragraph <ENTER>
	//		|	second paragraph
	//
	//		will generate:
	//
	//		|	<p>
	//		|		first paragraph
	//		|		<br/>
	//		|		second line of first paragraph
	//		|	</p>
	//		|	<p>
	//		|		second paragraph
	//		|	</p>
	//
	//		In BR and DIV mode, the ENTER key conceptually goes to a new line in the
	//		current paragraph, and users conceptually create a new paragraph by pressing ENTER twice.
	//		For example, if the user enters text into an editor like this:
	//
	//		|		one <ENTER>
	//		|		two <ENTER>
	//		|		three <ENTER>
	//		|		<ENTER>
	//		|		four <ENTER>
	//		|		five <ENTER>
	//		|		six <ENTER>
	//
	//		It will appear on the screen as two 'paragraphs' of three lines each.  Markupwise, this generates:
	//
	//		BR:
	//		|		one<br/>
	//		|		two<br/>
	//		|		three<br/>
	//		|		<br/>
	//		|		four<br/>
	//		|		five<br/>
	//		|		six<br/>
	//
	//		DIV:
	//		|		<div>one</div>
	//		|		<div>two</div>
	//		|		<div>three</div>
	//		|		<div>&nbsp;</div>
	//		|		<div>four</div>
	//		|		<div>five</div>
	//		|		<div>six</div>

	// blockNodeForEnter: String
	//		This property decides the behavior of Enter key. It can be either P,
	//		DIV, BR, or empty (which means disable this feature). Anything else
	//		will trigger errors.  The default is 'BR'
	//
	//		See class description for more details.
	blockNodeForEnter: 'BR',

	constructor: function(args){
		if(args){
			if("blockNodeForEnter" in args){
				args.blockNodeForEnter = args.blockNodeForEnter.toUpperCase();
			}
			dojo.mixin(this,args);
		}
	},

	setEditor: function(editor){
		// Overrides _Plugin.setEditor().
		if(this.editor === editor) { return; }
		this.editor = editor;
		if(this.blockNodeForEnter == 'BR'){
			// While Moz has a mode tht mostly works, it's still a little different,
			// So, try to just have a common mode and be consistent.  Which means
			// we need to enable customUndo, if not already enabled.
			this.editor.customUndo = true;
				editor.onLoadDeferred.addCallback(dojo.hitch(this,function(d){
				this.connect(editor.document, "onkeypress", function(e){
					if(e.charOrCode == dojo.keys.ENTER){
						// Just do it manually.  The handleEnterKey has a shift mode that
						// Always acts like <br>, so just use it.
						var ne = dojo.mixin({},e);
						ne.shiftKey = true;
						if(!this.handleEnterKey(ne)){
							dojo.stopEvent(e);
						}
					}
				});
					return d;
				}));
		}else if(this.blockNodeForEnter){
			// add enter key handler
			// FIXME: need to port to the new event code!!
			var h = dojo.hitch(this,this.handleEnterKey);
			editor.addKeyHandler(13, 0, 0, h); //enter
			editor.addKeyHandler(13, 0, 1, h); //shift+enter
			this.connect(this.editor,'onKeyPressed','onKeyPressed');
		}
	},
	onKeyPressed: function(e){
		// summary:
		//		Handler for keypress events.
		// tags:
		//		private
		if(this._checkListLater){
			if(dojo.withGlobal(this.editor.window, 'isCollapsed', dijit)){
				var liparent=dojo.withGlobal(this.editor.window, 'getAncestorElement', dijit._editor.selection, ['LI']);
				if(!liparent){
					// circulate the undo detection code by calling RichText::execCommand directly
					dijit._editor.RichText.prototype.execCommand.call(this.editor, 'formatblock',this.blockNodeForEnter);
					// set the innerHTML of the new block node
					var block = dojo.withGlobal(this.editor.window, 'getAncestorElement', dijit._editor.selection, [this.blockNodeForEnter]);
					if(block){
						block.innerHTML=this.bogusHtmlContent;
						if(dojo.isIE){
							// move to the start by moving backwards one char
							var r = this.editor.document.selection.createRange();
							r.move('character',-1);
							r.select();
						}
					}else{
						console.error('onKeyPressed: Cannot find the new block node'); // FIXME
					}
				}else{
					if(dojo.isMoz){
						if(liparent.parentNode.parentNode.nodeName == 'LI'){
							liparent=liparent.parentNode.parentNode;
						}
					}
					var fc=liparent.firstChild;
					if(fc && fc.nodeType == 1 && (fc.nodeName == 'UL' || fc.nodeName == 'OL')){
						liparent.insertBefore(fc.ownerDocument.createTextNode('\xA0'),fc);
						var newrange = dijit.range.create(this.editor.window);
						newrange.setStart(liparent.firstChild,0);
						var selection = dijit.range.getSelection(this.editor.window, true);
						selection.removeAllRanges();
						selection.addRange(newrange);
					}
				}
			}
			this._checkListLater = false;
		}
		if(this._pressedEnterInBlock){
			// the new created is the original current P, so we have previousSibling below
			if(this._pressedEnterInBlock.previousSibling){
				this.removeTrailingBr(this._pressedEnterInBlock.previousSibling);
			}
			delete this._pressedEnterInBlock;
		}
	},

	// bogusHtmlContent: [private] String
	//		HTML to stick into a new empty block
	bogusHtmlContent: '&nbsp;',

	// blockNodes: [private] Regex
	//		Regex for testing if a given tag is a block level (display:block) tag
	blockNodes: /^(?:P|H1|H2|H3|H4|H5|H6|LI)$/,

	handleEnterKey: function(e){
		// summary:
		//		Handler for enter key events when blockModeForEnter is DIV or P.
		// description:
		//		Manually handle enter key event to make the behavior consistent across
		//		all supported browsers. See class description for details.
		// tags:
		//		private

		var selection, range, newrange, startNode, endNode, brNode, doc=this.editor.document,br,rs,txt;
		if(e.shiftKey){		// shift+enter always generates <br>
			var parent = dojo.withGlobal(this.editor.window, "getParentElement", dijit._editor.selection);
			var header = dijit.range.getAncestor(parent,this.blockNodes);
			if(header){
				if(header.tagName == 'LI'){
					return true; // let browser handle
				}
				selection = dijit.range.getSelection(this.editor.window);
				range = selection.getRangeAt(0);
				if(!range.collapsed){
					range.deleteContents();
					selection = dijit.range.getSelection(this.editor.window);
					range = selection.getRangeAt(0);
				}
				if(dijit.range.atBeginningOfContainer(header, range.startContainer, range.startOffset)){
						br=doc.createElement('br');
						newrange = dijit.range.create(this.editor.window);
						header.insertBefore(br,header.firstChild);
						newrange.setStartBefore(br.nextSibling);
						selection.removeAllRanges();
						selection.addRange(newrange);
				}else if(dijit.range.atEndOfContainer(header, range.startContainer, range.startOffset)){
					newrange = dijit.range.create(this.editor.window);
					br=doc.createElement('br');
						header.appendChild(br);
						header.appendChild(doc.createTextNode('\xA0'));
						newrange.setStart(header.lastChild,0);
					selection.removeAllRanges();
					selection.addRange(newrange);
				}else{
					rs = range.startContainer;
					if(rs && rs.nodeType == 3){
						// Text node, we have to split it.
						txt = rs.nodeValue;
						dojo.withGlobal(this.editor.window, function(){
							startNode = doc.createTextNode(txt.substring(0, range.startOffset));
							endNode = doc.createTextNode(txt.substring(range.startOffset));
							brNode = doc.createElement("br");
							
							if(endNode.nodeValue == "" && dojo.isWebKit){
								endNode = doc.createTextNode('\xA0')
							}
							dojo.place(startNode, rs, "after");
							dojo.place(brNode, startNode, "after");
							dojo.place(endNode, brNode, "after");
							dojo.destroy(rs);
							newrange = dijit.range.create(dojo.gobal);
							newrange.setStart(endNode,0);
							selection.removeAllRanges();
							selection.addRange(newrange);
						});
						return false;
					}
					return true; // let browser handle
				}
			}else{
				selection = dijit.range.getSelection(this.editor.window);
				if(selection.rangeCount){
					range = selection.getRangeAt(0);
					if(range && range.startContainer){
						if(!range.collapsed){
							range.deleteContents();
							selection = dijit.range.getSelection(this.editor.window);
							range = selection.getRangeAt(0);
						}
						rs = range.startContainer;
						if(rs && rs.nodeType == 3){
							// Text node, we have to split it.
							dojo.withGlobal(this.editor.window, dojo.hitch(this, function(){
								var endEmpty = false;
							
								var offset = range.startOffset;
								if(rs.length < offset){
									//We are not splitting the right node, try to locate the correct one
									ret = this._adjustNodeAndOffset(rs, offset);
									rs = ret.node;
									offset = ret.offset;
								}
								txt = rs.nodeValue;
				
								startNode = doc.createTextNode(txt.substring(0, offset));
								endNode = doc.createTextNode(txt.substring(offset));
								brNode = doc.createElement("br");
								
								if(!endNode.length){
									endNode = doc.createTextNode('\xA0');
									endEmpty = true;
								}
								
								if(startNode.length){
									dojo.place(startNode, rs, "after");
								}else{
									startNode = rs;
								}
								dojo.place(brNode, startNode, "after");
								dojo.place(endNode, brNode, "after");
								dojo.destroy(rs);
								newrange = dijit.range.create(dojo.gobal);
								newrange.setStart(endNode,0);
								newrange.setEnd(endNode, endNode.length);
								selection.removeAllRanges();
								selection.addRange(newrange);
								if(endEmpty && !dojo.isWebKit){
									dijit._editor.selection.remove();
								}else{
									dijit._editor.selection.collapse(true);
								}
							}));
						}else{
							dojo.withGlobal(this.editor.window, dojo.hitch(this, function(){
								var brNode = doc.createElement("br");
								rs.appendChild(brNode);
								var endNode = doc.createTextNode('\xA0');
								rs.appendChild(endNode);
								newrange = dijit.range.create(dojo.global);
								newrange.setStart(endNode,0);
								newrange.setEnd(endNode, endNode.length);
								selection.removeAllRanges();
								selection.addRange(newrange);
								dijit._editor.selection.collapse(true);
							}));
						}
					}
				}else{
					// don't change this: do not call this.execCommand, as that may have other logic in subclass
					dijit._editor.RichText.prototype.execCommand.call(this.editor, 'inserthtml', '<br>');
				}
			}
			return false;
		}
		var _letBrowserHandle = true;

		// first remove selection
		selection = dijit.range.getSelection(this.editor.window);
		range = selection.getRangeAt(0);
		if(!range.collapsed){
			range.deleteContents();
			selection = dijit.range.getSelection(this.editor.window);
			range = selection.getRangeAt(0);
		}

		var block = dijit.range.getBlockAncestor(range.endContainer, null, this.editor.editNode);
		var blockNode = block.blockNode;

		// if this is under a LI or the parent of the blockNode is LI, just let browser to handle it
		if((this._checkListLater = (blockNode && (blockNode.nodeName == 'LI' || blockNode.parentNode.nodeName == 'LI')))){
			if(dojo.isMoz){
				// press enter in middle of P may leave a trailing <br/>, let's remove it later
				this._pressedEnterInBlock = blockNode;
			}
			// if this li only contains spaces, set the content to empty so the browser will outdent this item
			if(/^(\s|&nbsp;|\xA0|<span\b[^>]*\bclass=['"]Apple-style-span['"][^>]*>(\s|&nbsp;|\xA0)<\/span>)?(<br>)?$/.test(blockNode.innerHTML)){
				// empty LI node
				blockNode.innerHTML = '';
				if(dojo.isWebKit){ // WebKit tosses the range when innerHTML is reset
					newrange = dijit.range.create(this.editor.window);
					newrange.setStart(blockNode, 0);
					selection.removeAllRanges();
					selection.addRange(newrange);
				}
				this._checkListLater = false; // nothing to check since the browser handles outdent
			}
			return true;
		}

		// text node directly under body, let's wrap them in a node
		if(!block.blockNode || block.blockNode===this.editor.editNode){
			try{
				dijit._editor.RichText.prototype.execCommand.call(this.editor, 'formatblock',this.blockNodeForEnter);
			}catch(e2){ /*squelch FF3 exception bug when editor content is a single BR*/ }
			// get the newly created block node
			// FIXME
			block = {blockNode:dojo.withGlobal(this.editor.window, "getAncestorElement", dijit._editor.selection, [this.blockNodeForEnter]),
					blockContainer: this.editor.editNode};
			if(block.blockNode){
				if(block.blockNode != this.editor.editNode &&
					(!(block.blockNode.textContent || block.blockNode.innerHTML).replace(/^\s+|\s+$/g, "").length)){
					this.removeTrailingBr(block.blockNode);
					return false;
				}
			}else{	// we shouldn't be here if formatblock worked
				block.blockNode = this.editor.editNode;
			}
			selection = dijit.range.getSelection(this.editor.window);
			range = selection.getRangeAt(0);
		}

		var newblock = doc.createElement(this.blockNodeForEnter);
		newblock.innerHTML=this.bogusHtmlContent;
		this.removeTrailingBr(block.blockNode);
		var endOffset = range.endOffset;
		var node = range.endContainer;
		if(node.length < endOffset){
			//We are not checking the right node, try to locate the correct one
			var ret = this._adjustNodeAndOffset(node, endOffset);
			node = ret.node;
			endOffset = ret.offset;
		}
		if(dijit.range.atEndOfContainer(block.blockNode, node, endOffset)){
			if(block.blockNode === block.blockContainer){
				block.blockNode.appendChild(newblock);
			}else{
				dojo.place(newblock, block.blockNode, "after");
			}
			_letBrowserHandle = false;
			// lets move caret to the newly created block
			newrange = dijit.range.create(this.editor.window);
			newrange.setStart(newblock, 0);
			selection.removeAllRanges();
			selection.addRange(newrange);
			if(this.editor.height){
				dojo.window.scrollIntoView(newblock);
			}
		}else if(dijit.range.atBeginningOfContainer(block.blockNode,
				range.startContainer, range.startOffset)){
			dojo.place(newblock, block.blockNode, block.blockNode === block.blockContainer ? "first" : "before");
			if(newblock.nextSibling && this.editor.height){
				// position input caret - mostly WebKit needs this
				newrange = dijit.range.create(this.editor.window);
				newrange.setStart(newblock.nextSibling, 0);
				selection.removeAllRanges();
				selection.addRange(newrange);
				// browser does not scroll the caret position into view, do it manually
				dojo.window.scrollIntoView(newblock.nextSibling);
			}
			_letBrowserHandle = false;
		}else{ //press enter in the middle of P/DIV/Whatever/
			if(block.blockNode === block.blockContainer){
				block.blockNode.appendChild(newblock);
			}else{
				dojo.place(newblock, block.blockNode, "after");
			}
			_letBrowserHandle = false;

			// Clone any block level styles.
			if(block.blockNode.style){
				if(newblock.style){
					if(block.blockNode.style.cssText){
						newblock.style.cssText = block.blockNode.style.cssText;
					}
				}
			}
			
			// Okay, we probably have to split.
			rs = range.startContainer;
			var firstNodeMoved;
			if(rs && rs.nodeType == 3){ 
				// Text node, we have to split it.
				var nodeToMove, tNode;
				endOffset = range.endOffset;
				if(rs.length < endOffset){
					//We are not splitting the right node, try to locate the correct one
					ret = this._adjustNodeAndOffset(rs, endOffset);
					rs = ret.node;
					endOffset = ret.offset;
				}
				
				txt = rs.nodeValue;
				startNode = doc.createTextNode(txt.substring(0, endOffset));
				endNode = doc.createTextNode(txt.substring(endOffset, txt.length));

				// Place the split, then remove original nodes.
				dojo.place(startNode, rs, "before");
				dojo.place(endNode, rs, "after");
				dojo.destroy(rs);

				// Okay, we split the text.  Now we need to see if we're
				// parented to the block element we're splitting and if
				// not, we have to split all the way up.  Ugh.
				var parentC = startNode.parentNode;
				while(parentC !== block.blockNode){
					var tg = parentC.tagName;
					var newTg = doc.createElement(tg);
					// Clone over any 'style' data.
					if(parentC.style){
						if(newTg.style){
							if(parentC.style.cssText){
								newTg.style.cssText = parentC.style.cssText;
							}
						}
					}
					// If font also need to clone over any font data. 
					if(parentC.tagName === "FONT"){
						if(parentC.color){
							newTg.color = parentC.color;
						}
						if(parentC.face){
							newTg.face = parentC.face;
						}
						if(parentC.size){  // this check was necessary on IE
							newTg.size = parentC.size;
						}
					}
					
					nodeToMove = endNode;
					while(nodeToMove){
						tNode = nodeToMove.nextSibling;
						newTg.appendChild(nodeToMove);
						nodeToMove = tNode;
					}
					dojo.place(newTg, parentC, "after");
					startNode = parentC;
					endNode = newTg;
					parentC = parentC.parentNode;
				}

				// Lastly, move the split out tags to the new block.
				// as they should now be split properly.
				nodeToMove = endNode;
				if(nodeToMove.nodeType == 1 || (nodeToMove.nodeType == 3 && nodeToMove.nodeValue)){
					// Non-blank text and non-text nodes need to clear out that blank space
					// before moving the contents.
					newblock.innerHTML = "";
				}
				firstNodeMoved = nodeToMove;
				while(nodeToMove){
					tNode = nodeToMove.nextSibling;
					newblock.appendChild(nodeToMove);
					nodeToMove = tNode;
				}
			}
			
			//lets move caret to the newly created block
			newrange = dijit.range.create(this.editor.window);
			var nodeForCursor;
			var innerMostFirstNodeMoved = firstNodeMoved;
			if(this.blockNodeForEnter !== 'BR'){
				while(innerMostFirstNodeMoved){
					nodeForCursor = innerMostFirstNodeMoved;
					tNode = innerMostFirstNodeMoved.firstChild;
					innerMostFirstNodeMoved = tNode;
				}
				if(nodeForCursor && nodeForCursor.parentNode){
					newblock = nodeForCursor.parentNode;
					newrange.setStart(newblock, 0);
					selection.removeAllRanges();
					selection.addRange(newrange);
					if(this.editor.height){
						dijit.scrollIntoView(newblock);
					}
					if(dojo.isMoz){
						// press enter in middle of P may leave a trailing <br/>, let's remove it later
						this._pressedEnterInBlock = block.blockNode;
					}					
				}else{
					_letBrowserHandle = true;
				}
			}else{
				newrange.setStart(newblock, 0);
				selection.removeAllRanges();
				selection.addRange(newrange);
				if(this.editor.height){
					dijit.scrollIntoView(newblock);
				}
				if(dojo.isMoz){
					// press enter in middle of P may leave a trailing <br/>, let's remove it later
					this._pressedEnterInBlock = block.blockNode;
				}
			}
		}
		return _letBrowserHandle;
	},

	_adjustNodeAndOffset: function(/*DomNode*/node, /*Int*/offset){
		// summary:
		//              In the case there are multiple text nodes in a row the offset may not be within the node.  If the offset is larger than the node length, it will attempt to find
		//              the next text sibling until it locates the text node in which the offset refers to
		// node:
		//              The node to check.
		// offset:
		//              The position to find within the text node
		// tags:
		//              private.
		while(node.length < offset && node.nextSibling && node.nextSibling.nodeType==3){
			//Adjust the offset and node in the case of multiple text nodes in a row
			offset = offset - node.length;
			node = node.nextSibling;
		}
		var ret = {"node": node, "offset": offset};
		return ret;
	},

	removeTrailingBr: function(container){
		// summary:
		//		If last child of container is a <br>, then remove it.
		// tags:
		//		private
		var para = /P|DIV|LI/i.test(container.tagName) ?
			container : dijit._editor.selection.getParentOfType(container,['P','DIV','LI']);

		if(!para){ return; }
		if(para.lastChild){
			if((para.childNodes.length > 1 && para.lastChild.nodeType == 3 && /^[\s\xAD]*$/.test(para.lastChild.nodeValue)) ||
				para.lastChild.tagName=='BR'){

				dojo.destroy(para.lastChild);
			}
		}
		if(!para.childNodes.length){
			para.innerHTML=this.bogusHtmlContent;
		}
	}
});

}

if(!dojo._hasResource["dijit.Editor"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.Editor"] = true;
dojo.provide("dijit.Editor");













dojo.declare(
	"dijit.Editor",
	dijit._editor.RichText,
	{
		// summary:
		//		A rich text Editing widget
		//
		// description:
		//		This widget provides basic WYSIWYG editing features, based on the browser's
		//		underlying rich text editing capability, accompanied by a toolbar (`dijit.Toolbar`).
		//		A plugin model is available to extend the editor's capabilities as well as the
		//		the options available in the toolbar.  Content generation may vary across
		//		browsers, and clipboard operations may have different results, to name
		//		a few limitations.  Note: this widget should not be used with the HTML
		//		&lt;TEXTAREA&gt; tag -- see dijit._editor.RichText for details.

		// plugins: [const] Object[]
		//		A list of plugin names (as strings) or instances (as objects)
		//		for this widget.
		//
		//		When declared in markup, it might look like:
		//	|	plugins="['bold',{name:'dijit._editor.plugins.FontChoice', command:'fontName', generic:true}]"
		plugins: null,

		// extraPlugins: [const] Object[]
		//		A list of extra plugin names which will be appended to plugins array
		extraPlugins: null,

		constructor: function(){
			// summary:
			//		Runs on widget initialization to setup arrays etc.
			// tags:
			//		private

			if(!dojo.isArray(this.plugins)){
				this.plugins=["undo","redo","|","cut","copy","paste","|","bold","italic","underline","strikethrough","|",
				"insertOrderedList","insertUnorderedList","indent","outdent","|","justifyLeft","justifyRight","justifyCenter","justifyFull",
				"dijit._editor.plugins.EnterKeyHandling" /*, "createLink"*/];
			}

			this._plugins=[];
			this._editInterval = this.editActionInterval * 1000;

			//IE will always lose focus when other element gets focus, while for FF and safari,
			//when no iframe is used, focus will be lost whenever another element gets focus.
			//For IE, we can connect to onBeforeDeactivate, which will be called right before
			//the focus is lost, so we can obtain the selected range. For other browsers,
			//no equivelent of onBeforeDeactivate, so we need to do two things to make sure
			//selection is properly saved before focus is lost: 1) when user clicks another
			//element in the page, in which case we listen to mousedown on the entire page and
			//see whether user clicks out of a focus editor, if so, save selection (focus will
			//only lost after onmousedown event is fired, so we can obtain correct caret pos.)
			//2) when user tabs away from the editor, which is handled in onKeyDown below.
			if(dojo.isIE){
				this.events.push("onBeforeDeactivate");
				this.events.push("onBeforeActivate");
			}
		},

		postMixInProperties: function() {
			// summary:
			//	Extension to make sure a deferred is in place before certain functions
			//	execute, like making sure all the plugins are properly inserted.

			// Set up a deferred so that the value isn't applied to the editor
			// until all the plugins load, needed to avoid timing condition
			// reported in #10537.
			this.setValueDeferred = new dojo.Deferred();
			this.inherited(arguments);
		},
	
		postCreate: function(){
			//for custom undo/redo, if enabled.
			this._steps=this._steps.slice(0);
			this._undoedSteps=this._undoedSteps.slice(0);

			if(dojo.isArray(this.extraPlugins)){
				this.plugins=this.plugins.concat(this.extraPlugins);
			}

			this.inherited(arguments);

			this.commands = dojo.i18n.getLocalization("dijit._editor", "commands", this.lang);

			if(!this.toolbar){
				// if we haven't been assigned a toolbar, create one
				this.toolbar = new dijit.Toolbar({
					dir: this.dir,
					lang: this.lang
				});
				this.header.appendChild(this.toolbar.domNode);
			}

			dojo.forEach(this.plugins, this.addPlugin, this);

			// Okay, denote the value can now be set.
			this.setValueDeferred.callback(true);

			dojo.addClass(this.iframe.parentNode, "dijitEditorIFrameContainer");
			dojo.addClass(this.iframe, "dijitEditorIFrame");
			dojo.attr(this.iframe, "allowTransparency", true);

			if(dojo.isWebKit){
				// Disable selecting the entire editor by inadvertant double-clicks.
				// on buttons, title bar, etc.  Otherwise clicking too fast on
				// a button such as undo/redo selects the entire editor.
				dojo.style(this.domNode, "KhtmlUserSelect", "none");
			}
			this.toolbar.startup();
			this.onNormalizedDisplayChanged(); //update toolbar button status
		},
		destroy: function(){
			dojo.forEach(this._plugins, function(p){
				if(p && p.destroy){
					p.destroy();
				}
			});
			this._plugins=[];
			this.toolbar.destroyRecursive();
			delete this.toolbar;
			this.inherited(arguments);
		},
		addPlugin: function(/*String||Object*/plugin, /*Integer?*/index){
			// summary:
			//		takes a plugin name as a string or a plugin instance and
			//		adds it to the toolbar and associates it with this editor
			//		instance. The resulting plugin is added to the Editor's
			//		plugins array. If index is passed, it's placed in the plugins
			//		array at that index. No big magic, but a nice helper for
			//		passing in plugin names via markup.
			//
			// plugin: String, args object or plugin instance
			//
			// args:
			//		This object will be passed to the plugin constructor
			//
			// index: Integer
			//		Used when creating an instance from
			//		something already in this.plugins. Ensures that the new
			//		instance is assigned to this.plugins at that index.
			var args=dojo.isString(plugin)?{name:plugin}:plugin;
			if(!args.setEditor){
				var o={"args":args,"plugin":null,"editor":this};
				dojo.publish(dijit._scopeName + ".Editor.getPlugin",[o]);
				if(!o.plugin){
					var pc = dojo.getObject(args.name);
					if(pc){
						o.plugin=new pc(args);
					}
				}
				if(!o.plugin){
					console.warn('Cannot find plugin',plugin);
					return;
				}
				plugin=o.plugin;
			}
			if(arguments.length > 1){
				this._plugins[index] = plugin;
			}else{
				this._plugins.push(plugin);
			}
			plugin.setEditor(this);
			if(dojo.isFunction(plugin.setToolbar)){
				plugin.setToolbar(this.toolbar);
			}
		},
		//the following 3 functions are required to make the editor play nice under a layout widget, see #4070
		startup: function(){
			// summary:
			//		Exists to make Editor work as a child of a layout widget.
			//		Developers don't need to call this method.
			// tags:
			//		protected
			//console.log('startup',arguments);
		},
		resize: function(size){
			// summary:
			//		Resize the editor to the specified size, see `dijit.layout._LayoutWidget.resize`
			if(size){
				// we've been given a height/width for the entire editor (toolbar + contents), calls layout()
				// to split the allocated size between the toolbar and the contents
				dijit.layout._LayoutWidget.prototype.resize.apply(this, arguments);
			}
			/*
			else{
				// do nothing, the editor is already laid out correctly.   The user has probably specified
				// the height parameter, which was used to set a size on the iframe
			}
			*/
		},
		layout: function(){
			// summary:
			//		Called from `dijit.layout._LayoutWidget.resize`.  This shouldn't be called directly
			// tags:
			//		protected

			// Converts the iframe (or rather the <div> surrounding it) to take all the available space
			// except what's needed for the header (toolbars) and footer (breadcrumbs, etc).
			// A class was added to the iframe container and some themes style it, so we have to
			// calc off the added margins and padding too. See tracker: #10662
			var areaHeight = (this._contentBox.h -
				(this.getHeaderHeight() + this.getFooterHeight() +
				 dojo._getPadBorderExtents(this.iframe.parentNode).h +
				 dojo._getMarginExtents(this.iframe.parentNode).h));
			this.editingArea.style.height = areaHeight + "px";
			if(this.iframe){
				this.iframe.style.height="100%";
			}
			this._layoutMode = true;
		},
		_onIEMouseDown: function(/*Event*/ e){
			// summary:
			//		IE only to prevent 2 clicks to focus
			// tags:
			//		private
			var outsideClientArea;
			// IE 8's componentFromPoint is broken, which is a shame since it
			// was smaller code, but oh well.  We have to do this brute force
			// to detect if the click was scroller or not.
			var b = this.document.body;
			var clientWidth = b.clientWidth;
			var clientHeight = b.clientHeight;
			var clientLeft = b.clientLeft;
			var offsetWidth = b.offsetWidth;
			var offsetHeight = b.offsetHeight;
			var offsetLeft = b.offsetLeft;

			//Check for vertical scroller click.
			bodyDir = b.dir ? b.dir.toLowerCase() : "";
			if(bodyDir != "rtl"){
				if(clientWidth < offsetWidth && e.x > clientWidth && e.x < offsetWidth){
					// Check the click was between width and offset width, if so, scroller
					outsideClientArea = true;
				}
			}else{
				// RTL mode, we have to go by the left offsets.
				if(e.x < clientLeft && e.x > offsetLeft){
					// Check the click was between width and offset width, if so, scroller
					outsideClientArea = true;
				}
			}
			if(!outsideClientArea){
				// Okay, might be horiz scroller, check that.
				if(clientHeight < offsetHeight && e.y > clientHeight && e.y < offsetHeight){
					// Horizontal scroller.
					outsideClientArea = true;
				}
			}
			if(!outsideClientArea){
				delete this._cursorToStart; // Remove the force to cursor to start position.
				delete this._savedSelection; // new mouse position overrides old selection
				if(e.target.tagName == "BODY"){
					setTimeout(dojo.hitch(this, "placeCursorAtEnd"), 0);
				}
				this.inherited(arguments);
			}
		},
		onBeforeActivate: function(e){
			this._restoreSelection();
		},
		onBeforeDeactivate: function(e){
			// summary:
			//		Called on IE right before focus is lost.   Saves the selected range.
			// tags:
			//		private
			if(this.customUndo){
				this.endEditing(true);
			}
			//in IE, the selection will be lost when other elements get focus,
			//let's save focus before the editor is deactivated
			if(e.target.tagName != "BODY"){
				this._saveSelection();
			}
			//console.log('onBeforeDeactivate',this);
		},

		/* beginning of custom undo/redo support */

		// customUndo: Boolean
		//		Whether we shall use custom undo/redo support instead of the native
		//		browser support. By default, we now use custom undo.  It works better
		//		than native browser support and provides a consistent behavior across
		//		browsers with a minimal performance hit.  We already had the hit on
		//		the slowest browser, IE, anyway.
		customUndo: true,

		// editActionInterval: Integer
		//		When using customUndo, not every keystroke will be saved as a step.
		//		Instead typing (including delete) will be grouped together: after
		//		a user stops typing for editActionInterval seconds, a step will be
		//		saved; if a user resume typing within editActionInterval seconds,
		//		the timeout will be restarted. By default, editActionInterval is 3
		//		seconds.
		editActionInterval: 3,

		beginEditing: function(cmd){
			// summary:
			//		Called to note that the user has started typing alphanumeric characters, if it's not already noted.
			//		Deals with saving undo; see editActionInterval parameter.
			// tags:
			//		private
			if(!this._inEditing){
				this._inEditing=true;
				this._beginEditing(cmd);
			}
			if(this.editActionInterval>0){
				if(this._editTimer){
					clearTimeout(this._editTimer);
				}
				this._editTimer = setTimeout(dojo.hitch(this, this.endEditing), this._editInterval);
			}
		},

		// TODO: declaring these in the prototype is meaningless, just create in the constructor/postCreate
		_steps:[],
		_undoedSteps:[],

		execCommand: function(cmd){
			// summary:
			//		Main handler for executing any commands to the editor, like paste, bold, etc.
			//      Called by plugins, but not meant to be called by end users.
			// tags:
			//		protected
			if(this.customUndo && (cmd == 'undo' || cmd == 'redo')){
				return this[cmd]();
			}else{
				if(this.customUndo){
					this.endEditing();
					this._beginEditing();
				}
				var r;
				var isClipboard = /copy|cut|paste/.test(cmd);
				try{
					r = this.inherited(arguments);
					if(dojo.isWebKit && isClipboard && !r){ //see #4598: webkit does not guarantee clipboard support from js
						throw { code: 1011 }; // throw an object like Mozilla's error
					}
				}catch(e){
					//TODO: when else might we get an exception?  Do we need the Mozilla test below?
					if(e.code == 1011 /* Mozilla: service denied */ && isClipboard){
						// Warn user of platform limitation.  Cannot programmatically access clipboard. See ticket #4136
						var sub = dojo.string.substitute,
							accel = {cut:'X', copy:'C', paste:'V'};
						alert(sub(this.commands.systemShortcut,
							[this.commands[cmd], sub(this.commands[dojo.isMac ? 'appleKey' : 'ctrlKey'], [accel[cmd]])]));
					}
					r = false;
				}
				if(this.customUndo){
					this._endEditing();
				}
				return r;
			}
		},
		queryCommandEnabled: function(cmd){
			// summary:
			//		Returns true if specified editor command is enabled.
			//      Used by the plugins to know when to highlight/not highlight buttons.
			// tags:
			//		protected
			if(this.customUndo && (cmd == 'undo' || cmd == 'redo')){
				return cmd == 'undo' ? (this._steps.length > 1) : (this._undoedSteps.length > 0);
			}else{
				return this.inherited(arguments);
			}
		},
		_moveToBookmark: function(b){
			// summary:
			//		Selects the text specified in bookmark b
			// tags:
			//		private
			var bookmark = b.mark;
			var mark = b.mark;
			var col = b.isCollapsed;
			var r, sNode, eNode, sel;
			if(mark){
				if(dojo.isIE < 9){
					if(dojo.isArray(mark)){
						//IE CONTROL, have to use the native bookmark.
						bookmark = [];
						dojo.forEach(mark,function(n){
							bookmark.push(dijit.range.getNode(n,this.editNode));
						},this);
						dojo.withGlobal(this.window,'moveToBookmark',dijit,[{mark: bookmark, isCollapsed: col}]);
					}else{
						if(mark.startContainer && mark.endContainer){
							// Use the pseudo WC3 range API.  This works better for positions
							// than the IE native bookmark code.
							sel = dijit.range.getSelection(this.window);
							if(sel && sel.removeAllRanges){
								sel.removeAllRanges();
								r = dijit.range.create(this.window);
								sNode = dijit.range.getNode(mark.startContainer,this.editNode);
								eNode = dijit.range.getNode(mark.endContainer,this.editNode);
								if(sNode && eNode){
									// Okay, we believe we found the position, so add it into the selection
									// There are cases where it may not be found, particularly in undo/redo, when
									// IE changes the underlying DOM on us (wraps text in a <p> tag or similar.
									// So, in those cases, don't bother restoring selection.
									r.setStart(sNode,mark.startOffset);
									r.setEnd(eNode,mark.endOffset);
									sel.addRange(r);
								}
							}
						}
					}
				}else{//w3c range
					sel = dijit.range.getSelection(this.window);
					if(sel && sel.removeAllRanges){
						sel.removeAllRanges();
						r = dijit.range.create(this.window);
						sNode = dijit.range.getNode(mark.startContainer,this.editNode);
						eNode = dijit.range.getNode(mark.endContainer,this.editNode);
						if(sNode && eNode){
							// Okay, we believe we found the position, so add it into the selection
							// There are cases where it may not be found, particularly in undo/redo, when
							// formatting as been done and so on, so don't restore selection then.
							r.setStart(sNode,mark.startOffset);
							r.setEnd(eNode,mark.endOffset);
							sel.addRange(r);
						}
					}
				}
			}
		},
		_changeToStep: function(from, to){
			// summary:
			//		Reverts editor to "to" setting, from the undo stack.
			// tags:
			//		private
			this.setValue(to.text);
			var b=to.bookmark;
			if(!b){ return; }
			this._moveToBookmark(b);
		},
		undo: function(){
			// summary:
			//		Handler for editor undo (ex: ctrl-z) operation
			// tags:
			//		private
			//console.log('undo');
			var ret = false;
			if(!this._undoRedoActive){
				this._undoRedoActive = true;
				this.endEditing(true);
				var s=this._steps.pop();
				if(s && this._steps.length>0){
					this.focus();
					this._changeToStep(s,this._steps[this._steps.length-1]);
					this._undoedSteps.push(s);
					this.onDisplayChanged();
					delete this._undoRedoActive;
					ret = true;
				}
				delete this._undoRedoActive;
			}
			return ret;
		},
		redo: function(){
			// summary:
			//		Handler for editor redo (ex: ctrl-y) operation
			// tags:
			//		private
			//console.log('redo');
			var ret = false;
			if(!this._undoRedoActive){
				this._undoRedoActive = true;
				this.endEditing(true);
				var s=this._undoedSteps.pop();
				if(s && this._steps.length>0){
					this.focus();
					this._changeToStep(this._steps[this._steps.length-1],s);
					this._steps.push(s);
					this.onDisplayChanged();
					ret = true;
				}
				delete this._undoRedoActive;
			}
			return ret;
		},
		endEditing: function(ignore_caret){
			// summary:
			//		Called to note that the user has stopped typing alphanumeric characters, if it's not already noted.
			//		Deals with saving undo; see editActionInterval parameter.
			// tags:
			//		private
			if(this._editTimer){
				clearTimeout(this._editTimer);
			}
			if(this._inEditing){
				this._endEditing(ignore_caret);
				this._inEditing=false;
			}
		},

		_getBookmark: function(){
			// summary:
			//		Get the currently selected text
			// tags:
			//		protected
			var b=dojo.withGlobal(this.window,dijit.getBookmark);
			var tmp=[];
			if(b && b.mark){
				var mark = b.mark;
				if(dojo.isIE < 9){
					// Try to use the pseudo range API on IE for better accuracy.
					var sel = dijit.range.getSelection(this.window);
					if(!dojo.isArray(mark)){
						if(sel){
							var range;
							if(sel.rangeCount){
								range = sel.getRangeAt(0);
							}
							if(range){
								b.mark = range.cloneRange();
							}else{
								b.mark = dojo.withGlobal(this.window,dijit.getBookmark);
							}
						}
					}else{
						// Control ranges (img, table, etc), handle differently.
						dojo.forEach(b.mark,function(n){
							tmp.push(dijit.range.getIndex(n,this.editNode).o);
						},this);
						b.mark = tmp;
					}
				}
				try{
					if(b.mark && b.mark.startContainer){
						tmp=dijit.range.getIndex(b.mark.startContainer,this.editNode).o;
						b.mark={startContainer:tmp,
							startOffset:b.mark.startOffset,
							endContainer:b.mark.endContainer===b.mark.startContainer?tmp:dijit.range.getIndex(b.mark.endContainer,this.editNode).o,
							endOffset:b.mark.endOffset};
					}
				}catch(e){
					b.mark = null;
				}
			}
			return b;
		},
		_beginEditing: function(cmd){
			// summary:
			//		Called when the user starts typing alphanumeric characters.
			//		Deals with saving undo; see editActionInterval parameter.
			// tags:
			//		private
			if(this._steps.length === 0){
				// You want to use the editor content without post filtering
				// to make sure selection restores right for the 'initial' state.
				// and undo is called.  So not using this.value, as it was 'processed'
				// and the line-up for selections may have been altered.
				this._steps.push({'text':dijit._editor.getChildrenHtml(this.editNode),'bookmark':this._getBookmark()});
			}
		},
		_endEditing: function(ignore_caret){
			// summary:
			//		Called when the user stops typing alphanumeric characters.
			//		Deals with saving undo; see editActionInterval parameter.
			// tags:
			//		private
			// Avoid filtering to make sure selections restore.
			var v = dijit._editor.getChildrenHtml(this.editNode);

			this._undoedSteps=[];//clear undoed steps
			this._steps.push({text: v, bookmark: this._getBookmark()});
		},
		onKeyDown: function(e){
			// summary:
			//		Handler for onkeydown event.
			// tags:
			//		private

			//We need to save selection if the user TAB away from this editor
			//no need to call _saveSelection for IE, as that will be taken care of in onBeforeDeactivate
			if(!dojo.isIE && !this.iframe && e.keyCode == dojo.keys.TAB && !this.tabIndent){
				this._saveSelection();
			}
			if(!this.customUndo){
				this.inherited(arguments);
				return;
			}
			var k = e.keyCode, ks = dojo.keys;
			if(e.ctrlKey && !e.altKey){//undo and redo only if the special right Alt + z/y are not pressed #5892
				if(k == 90 || k == 122){ //z
					dojo.stopEvent(e);
					this.undo();
					return;
				}else if(k == 89 || k == 121){ //y
					dojo.stopEvent(e);
					this.redo();
					return;
				}
			}
			this.inherited(arguments);

			switch(k){
					case ks.ENTER:
					case ks.BACKSPACE:
					case ks.DELETE:
						this.beginEditing();
						break;
					case 88: //x
					case 86: //v
						if(e.ctrlKey && !e.altKey && !e.metaKey){
							this.endEditing();//end current typing step if any
							if(e.keyCode == 88){
								this.beginEditing('cut');
								//use timeout to trigger after the cut is complete
								setTimeout(dojo.hitch(this, this.endEditing), 1);
							}else{
								this.beginEditing('paste');
								//use timeout to trigger after the paste is complete
								setTimeout(dojo.hitch(this, this.endEditing), 1);
							}
							break;
						}
						//pass through
					default:
						if(!e.ctrlKey && !e.altKey && !e.metaKey && (e.keyCode<dojo.keys.F1 || e.keyCode>dojo.keys.F15)){
							this.beginEditing();
							break;
						}
						//pass through
					case ks.ALT:
						this.endEditing();
						break;
					case ks.UP_ARROW:
					case ks.DOWN_ARROW:
					case ks.LEFT_ARROW:
					case ks.RIGHT_ARROW:
					case ks.HOME:
					case ks.END:
					case ks.PAGE_UP:
					case ks.PAGE_DOWN:
						this.endEditing(true);
						break;
					//maybe ctrl+backspace/delete, so don't endEditing when ctrl is pressed
					case ks.CTRL:
					case ks.SHIFT:
					case ks.TAB:
						break;
				}
		},
		_onBlur: function(){
			// summary:
			//		Called from focus manager when focus has moved away from this editor
			// tags:
			//		protected

			//this._saveSelection();
			this.inherited(arguments);
			this.endEditing(true);
		},
		_saveSelection: function(){
			// summary:
			//		Save the currently selected text in _savedSelection attribute
			// tags:
			//		private
			try{
				this._savedSelection=this._getBookmark();
			}catch(e){ /* Squelch any errors that occur if selection save occurs due to being hidden simultaniously. */}
		},
		_restoreSelection: function(){
			// summary:
			//		Re-select the text specified in _savedSelection attribute;
			//		see _saveSelection().
			// tags:
			//		private
			if(this._savedSelection){
				// Clear off cursor to start, we're deliberately going to a selection.
				delete this._cursorToStart;
				// only restore the selection if the current range is collapsed
				// if not collapsed, then it means the editor does not lose
				// selection and there is no need to restore it
				if(dojo.withGlobal(this.window,'isCollapsed',dijit)){
					this._moveToBookmark(this._savedSelection);
				}
				delete this._savedSelection;
			}
		},

		onClick: function(){
			// summary:
			//		Handler for when editor is clicked
			// tags:
			//		protected
			this.endEditing(true);
			this.inherited(arguments);
		},

		replaceValue: function(/*String*/ html){
			// summary:
			//		over-ride of replaceValue to support custom undo and stack maintainence.
			// tags:
			//		protected
			if(!this.customUndo){
				this.inherited(arguments);
			}else{
				if(this.isClosed){
					this.setValue(html);
				}else{
					this.beginEditing();
					if(!html){
						html = "&nbsp;"
					}
					this.setValue(html);
					this.endEditing();
				}
			}
		},
		
		_setDisabledAttr: function(/*Boolean*/ value){
			var disableFunc = dojo.hitch(this, function(){
				if((!this.disabled && value) || (!this._buttonEnabledPlugins && value)){
				// Disable editor: disable all enabled buttons and remember that list
					dojo.forEach(this._plugins, function(p){
						p.set("disabled", true);
				});
			}else if(this.disabled && !value){
					// Restore plugins to being active.
					dojo.forEach(this._plugins, function(p){
						p.set("disabled", false);
				});
			}
			});
			this.setValueDeferred.addCallback(disableFunc);
			this.inherited(arguments);
		},
		
		_setStateClass: function(){
			try{
				this.inherited(arguments);
			
				// Let theme set the editor's text color based on editor enabled/disabled state.
				// We need to jump through hoops because the main document (where the theme CSS is)
				// is separate from the iframe's document.
				if(this.document && this.document.body){
					dojo.style(this.document.body, "color", dojo.style(this.iframe, "color"));
				}
			}catch(e){ /* Squelch any errors caused by focus change if hidden during a state change */}
		}
	}
);

// Register the "default plugins", ie, the built-in editor commands
dojo.subscribe(dijit._scopeName + ".Editor.getPlugin",null,function(o){
	if(o.plugin){ return; }
	var args = o.args, p;
	var _p = dijit._editor._Plugin;
	var name = args.name;
	switch(name){
		case "undo": case "redo": case "cut": case "copy": case "paste": case "insertOrderedList":
		case "insertUnorderedList": case "indent": case "outdent": case "justifyCenter":
		case "justifyFull": case "justifyLeft": case "justifyRight": case "delete":
		case "selectAll": case "removeFormat": case "unlink":
		case "insertHorizontalRule":
			p = new _p({ command: name });
			break;

		case "bold": case "italic": case "underline": case "strikethrough":
		case "subscript": case "superscript":
			p = new _p({ buttonClass: dijit.form.ToggleButton, command: name });
			break;
		case "|":
			p = new _p({ button: new dijit.ToolbarSeparator(), setEditor: function(editor) {this.editor = editor;} });
	}
//	console.log('name',name,p);
	o.plugin=p;
});

}

if(!dojo._hasResource["ttl.form.ValidationTextarea"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["ttl.form.ValidationTextarea"] = true;
dojo.provide("ttl.form.ValidationTextarea");




dojo.declare(
  "ttl.form.ValidationTextarea",
  [dijit.form.ValidationTextBox,dijit.form.SimpleTextarea],
  {
		invalidMessage: "This field is required",

		postCreate: function()
		{
			this.inherited(arguments);
		},

		validate: function()
		{
			this.inherited(arguments);
					if (arguments.length==0) this.validate(true);
		},

		onFocus: function()
		{
			if (!this.isValid())
			{
				this.displayMessage(this.getErrorMessage());
			}
		},
		onBlur: function()
		{
			this.validate(false);
		},
		validator: function( value, constraints)
		{
			// summary:
			//	test for constraints.
			// remove the cr characters
			// tags:
			//		protected
			value = value.replace(/[\r\l\n]+/g, ' ');

			return (new RegExp("^(?:" + this.regExpGen(constraints) + ")"+(this.required?"":"?")+"$")).test(value) &&
				(!this.required || !this._isEmpty(value)) &&
				(this._isEmpty(value) || this.parse(value, constraints) !== undefined); // Boolean
		}
});

}

if(!dojo._hasResource["dijit._TimePicker"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._TimePicker"] = true;
dojo.provide("dijit._TimePicker");





/*=====
dojo.declare(
	"dijit._TimePicker.__Constraints",
	dojo.date.locale.__FormatOptions,
	{
		// clickableIncrement: String
		//		See `dijit._TimePicker.clickableIncrement`
		clickableIncrement: "T00:15:00",

		// visibleIncrement: String
		//		See `dijit._TimePicker.visibleIncrement`
		visibleIncrement: "T01:00:00",

		// visibleRange: String
		//		See `dijit._TimePicker.visibleRange`
		visibleRange: "T05:00:00"
	}
);
=====*/

dojo.declare("dijit._TimePicker",
	[dijit._Widget, dijit._Templated],
	{
		// summary:
		//		A graphical time picker.
		//		This widget is used internally by other widgets and is not available
		//		as a standalone widget due to lack of accessibility support.

		templateString: dojo.cache("dijit", "templates/TimePicker.html", "<div id=\"widget_${id}\" class=\"dijitMenu\"\r\n    ><div dojoAttachPoint=\"upArrow\" class=\"dijitButtonNode dijitUpArrowButton\" dojoAttachEvent=\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\"\r\n\t\t><div class=\"dijitReset dijitInline dijitArrowButtonInner\" role=\"presentation\">&nbsp;</div\r\n\t\t><div class=\"dijitArrowButtonChar\">&#9650;</div></div\r\n    ><div dojoAttachPoint=\"timeMenu,focusNode\" dojoAttachEvent=\"onclick:_onOptionSelected,onmouseover,onmouseout\"></div\r\n    ><div dojoAttachPoint=\"downArrow\" class=\"dijitButtonNode dijitDownArrowButton\" dojoAttachEvent=\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\"\r\n\t\t><div class=\"dijitReset dijitInline dijitArrowButtonInner\" role=\"presentation\">&nbsp;</div\r\n\t\t><div class=\"dijitArrowButtonChar\">&#9660;</div></div\r\n></div>\r\n"),

		// baseClass: [protected] String
		//		The root className to use for the various states of this widget
		baseClass: "dijitTimePicker",

		// clickableIncrement: String
		//		ISO-8601 string representing the amount by which
		//		every clickable element in the time picker increases.
		//		Set in local time, without a time zone.
		//		Example: `T00:15:00` creates 15 minute increments
		//		Must divide dijit._TimePicker.visibleIncrement evenly
		clickableIncrement: "T00:15:00",

		// visibleIncrement: String
		//		ISO-8601 string representing the amount by which
		//		every element with a visible time in the time picker increases.
		//		Set in local time, without a time zone.
		//		Example: `T01:00:00` creates text in every 1 hour increment
		visibleIncrement: "T01:00:00",

		// visibleRange: String
		//		ISO-8601 string representing the range of this TimePicker.
		//		The TimePicker will only display times in this range.
		//		Example: `T05:00:00` displays 5 hours of options
		visibleRange: "T05:00:00",

		// value: String
		//		Date to display.
		//		Defaults to current time and date.
		//		Can be a Date object or an ISO-8601 string.
		//		If you specify the GMT time zone (`-01:00`),
		//		the time will be converted to the local time in the local time zone.
		//		Otherwise, the time is considered to be in the local time zone.
		//		If you specify the date and isDate is true, the date is used.
		//		Example: if your local time zone is `GMT -05:00`,
		//		`T10:00:00` becomes `T10:00:00-05:00` (considered to be local time),
		//		`T10:00:00-01:00` becomes `T06:00:00-05:00` (4 hour difference),
		//		`T10:00:00Z` becomes `T05:00:00-05:00` (5 hour difference between Zulu and local time)
		//		`yyyy-mm-ddThh:mm:ss` is the format to set the date and time
		//		Example: `2007-06-01T09:00:00`
		value: new Date(),

		_visibleIncrement:2,
		_clickableIncrement:1,
		_totalIncrements:10,

		// constraints: dijit._TimePicker.__Constraints
		//		Specifies valid range of times (start time, end time)
		constraints:{},

/*=====
		serialize: function(val, options){
			// summary:
			//		User overridable function used to convert the attr('value') result to a String
			// val: Date
			//		The current value
			// options: Object?
			// tags:
			//		protected
		},
=====*/
		serialize: dojo.date.stamp.toISOString,

/*=====
		// filterString: string
		//		The string to filter by
		filterString: "",
=====*/

		setValue: function(/*Date*/ value){
			// summary:
			//		Deprecated.  Used set('value') instead.
			// tags:
			//		deprecated
			dojo.deprecated("dijit._TimePicker:setValue() is deprecated.  Use set('value', ...) instead.", "", "2.0");
			this.set('value', value);
		},

		_setValueAttr: function(/*Date*/ date){
			// summary:
			//		Hook so set('value', ...) works.
			// description:
			//		Set the value of the TimePicker.
			//		Redraws the TimePicker around the new date.
			// tags:
			//		protected
			this._set("value", date);
			this._showText();
		},

		_setFilterStringAttr: function(val){
			// summary:
			//		Called by TimeTextBox to filter the values shown in my list
			this._set("filterString", val);
			this._showText();
		},

		isDisabledDate: function(/*Date*/ dateObject, /*String?*/ locale){
			// summary:
			//		May be overridden to disable certain dates in the TimePicker e.g. `isDisabledDate=dojo.date.locale.isWeekend`
			// type:
			//		extension
			return false; // Boolean
		},

		_getFilteredNodes: function(/*number*/ start, /*number*/ maxNum, /*Boolean*/ before, /*DOMnode*/ lastNode){
			// summary:
			//		Returns an array of nodes with the filter applied.  At most maxNum nodes
			//		will be returned - but fewer may be returned as well.  If the
			//		before parameter is set to true, then it will return the elements
			//		before the given index
			// tags:
			//		private
			var
				nodes = [],
				lastValue = lastNode ? lastNode.date : this._refDate,
				n,
				i = start,
				max = this._maxIncrement + Math.abs(i),
				chk = before ? -1 : 1,
				dec = before ? 1 : 0,
				inc = 1 - dec;
			do{
				i = i - dec;
				n = this._createOption(i);
				if(n){
					if((before && n.date > lastValue) || (!before && n.date < lastValue)){
						break; // don't wrap
					}
					nodes[before ? "unshift" : "push"](n);
					lastValue = n.date;
				}
				i = i + inc;
			}while(nodes.length < maxNum && (i*chk) < max);
			return nodes;
		},

		_showText: function(){
			// summary:
			//		Displays the relevant choices in the drop down list
			// tags:
			//		private
			var fromIso = dojo.date.stamp.fromISOString;
			this.timeMenu.innerHTML = "";
			this._clickableIncrementDate=fromIso(this.clickableIncrement);
			this._visibleIncrementDate=fromIso(this.visibleIncrement);
			this._visibleRangeDate=fromIso(this.visibleRange);
			// get the value of the increments and the range in seconds (since 00:00:00) to find out how many divs to create
			var
				sinceMidnight = function(/*Date*/ date){
				return date.getHours() * 60 * 60 + date.getMinutes() * 60 + date.getSeconds();
				},
				clickableIncrementSeconds = sinceMidnight(this._clickableIncrementDate),
				visibleIncrementSeconds = sinceMidnight(this._visibleIncrementDate),
				visibleRangeSeconds = sinceMidnight(this._visibleRangeDate),

			// round reference date to previous visible increment
				time = (this.value || this.currentFocus).getTime();

			this._refDate = new Date(time - time % (visibleIncrementSeconds*1000));
			this._refDate.setFullYear(1970,0,1); // match parse defaults

			// assume clickable increment is the smallest unit
			this._clickableIncrement = 1;
			// divide the visible range by the clickable increment to get the number of divs to create
			// example: 10:00:00/00:15:00 -> display 40 divs
			this._totalIncrements = visibleRangeSeconds / clickableIncrementSeconds;
			// divide the visible increments by the clickable increments to get how often to display the time inline
			// example: 01:00:00/00:15:00 -> display the time every 4 divs
			this._visibleIncrement = visibleIncrementSeconds / clickableIncrementSeconds;
			// divide the number of seconds in a day by the clickable increment in seconds to get the
			// absolute max number of increments.
			this._maxIncrement = (60 * 60 * 24) / clickableIncrementSeconds;

			var
				// Find the nodes we should display based on our filter.
				// Limit to 10 nodes displayed as a half-hearted attempt to stop drop down from overlapping <input>.
				after = this._getFilteredNodes(0, Math.min(this._totalIncrements >> 1, 10) - 1),
				before = this._getFilteredNodes(0, Math.min(this._totalIncrements, 10) - after.length, true, after[0]);
			dojo.forEach(before.concat(after), function(n){this.timeMenu.appendChild(n);}, this);
		},

		constructor: function(){
			this.constraints = {}; // create instance object
		},

		postMixInProperties: function(){
		        this.inherited(arguments);
			this._setConstraintsAttr(this.constraints); // this needs to happen now (and later) due to codependency on _set*Attr calls
		},

		_setConstraintsAttr: function(/* Object */ constraints){
			// brings in visibleRange, increments, etc.
			dojo.mixin(this, constraints);

			// dojo.date.locale needs the lang in the constraints as locale
			if(!constraints.locale){
				constraints.locale = this.lang;
			}
		},

		postCreate: function(){
			// assign typematic mouse listeners to the arrow buttons
			this.connect(this.timeMenu, dojo.isIE ? "onmousewheel" : 'DOMMouseScroll', "_mouseWheeled");
			this._connects.push(dijit.typematic.addMouseListener(this.upArrow, this, "_onArrowUp", 33, 250));
			this._connects.push(dijit.typematic.addMouseListener(this.downArrow, this, "_onArrowDown", 33, 250));

			this.inherited(arguments);
		},

		_buttonMouse: function(/*Event*/ e){
			// summary:
			//		Handler for hover (and unhover) on up/down arrows
			// tags:
			//		private

			// in non-IE browser the "mouseenter" event will become "mouseover",
			// but in IE it's still "mouseenter"
			dojo.toggleClass(e.currentTarget, e.currentTarget == this.upArrow ? "dijitUpArrowHover" : "dijitDownArrowHover",
				e.type == "mouseenter" || e.type == "mouseover");
		},

		_createOption: function(/*Number*/ index){
			// summary:
			//		Creates a clickable time option
			// tags:
			//		private
			var date = new Date(this._refDate);
			var incrementDate = this._clickableIncrementDate;
			date.setHours(date.getHours() + incrementDate.getHours() * index,
				date.getMinutes() + incrementDate.getMinutes() * index,
				date.getSeconds() + incrementDate.getSeconds() * index);
			if(this.constraints.selector == "time"){
				date.setFullYear(1970,0,1); // make sure each time is for the same date
			}
			var dateString = dojo.date.locale.format(date, this.constraints);
			if(this.filterString && dateString.toLowerCase().indexOf(this.filterString) !== 0){
				// Doesn't match the filter - return null
				return null;
			}

			var div = dojo.create("div", {"class": this.baseClass+"Item"});
			div.date = date;
			div.index = index;
			dojo.create('div',{
				"class": this.baseClass + "ItemInner",
				innerHTML: dateString
			}, div);

			if(index%this._visibleIncrement<1 && index%this._visibleIncrement>-1){
				dojo.addClass(div, this.baseClass+"Marker");
			}else if(!(index%this._clickableIncrement)){
				dojo.addClass(div, this.baseClass+"Tick");
			}

			if(this.isDisabledDate(date)){
				// set disabled
				dojo.addClass(div, this.baseClass+"ItemDisabled");
			}
			if(this.value && !dojo.date.compare(this.value, date, this.constraints.selector)){
				div.selected = true;
				dojo.addClass(div, this.baseClass+"ItemSelected");
				if(dojo.hasClass(div, this.baseClass+"Marker")){
					dojo.addClass(div, this.baseClass+"MarkerSelected");
				}else{
					dojo.addClass(div, this.baseClass+"TickSelected");
				}

				// Initially highlight the current value.   User can change highlight by up/down arrow keys
				// or mouse movement.
				this._highlightOption(div, true);
			}
			return div;
		},

		_onOptionSelected: function(/*Object*/ tgt){
			// summary:
			//		Called when user clicks an option in the drop down list
			// tags:
			//		private
			var tdate = tgt.target.date || tgt.target.parentNode.date;
			if(!tdate || this.isDisabledDate(tdate)){ return; }
			this._highlighted_option = null;
			this.set('value', tdate);
			this.onChange(tdate);
		},

		onChange: function(/*Date*/ time){
			// summary:
			//		Notification that a time was selected.  It may be the same as the previous value.
			// tags:
			//      public
		},

		_highlightOption: function(/*node*/ node, /*Boolean*/ highlight){
			// summary:
			//		Turns on/off highlight effect on a node based on mouse out/over event
			// tags:
			//		private
			if(!node){return;}
			if(highlight){
				if(this._highlighted_option){
					this._highlightOption(this._highlighted_option, false);
				}
				this._highlighted_option = node;
			}else if(this._highlighted_option !== node){
				return;
			}else{
				this._highlighted_option = null;
			}
			dojo.toggleClass(node, this.baseClass+"ItemHover", highlight);
			if(dojo.hasClass(node, this.baseClass+"Marker")){
				dojo.toggleClass(node, this.baseClass+"MarkerHover", highlight);
			}else{
				dojo.toggleClass(node, this.baseClass+"TickHover", highlight);
			}
		},

		onmouseover: function(/*Event*/ e){
			// summary:
			//		Handler for onmouseover event
			// tags:
			//		private
			this._keyboardSelected = null;
			var tgr = (e.target.parentNode === this.timeMenu) ? e.target : e.target.parentNode;
			// if we aren't targeting an item, then we return
			if(!dojo.hasClass(tgr, this.baseClass+"Item")){return;}
			this._highlightOption(tgr, true);
		},

		onmouseout: function(/*Event*/ e){
			// summary:
			//		Handler for onmouseout event
			// tags:
			//		private
			this._keyboardSelected = null;
			var tgr = (e.target.parentNode === this.timeMenu) ? e.target : e.target.parentNode;
			this._highlightOption(tgr, false);
		},

		_mouseWheeled: function(/*Event*/ e){
			// summary:
			//		Handle the mouse wheel events
			// tags:
			//		private
			this._keyboardSelected = null;
			dojo.stopEvent(e);
			// we're not _measuring_ the scroll amount, just direction
			var scrollAmount = (dojo.isIE ? e.wheelDelta : -e.detail);
			this[(scrollAmount>0 ? "_onArrowUp" : "_onArrowDown")](); // yes, we're making a new dom node every time you mousewheel, or click
		},

		_onArrowUp: function(count){
			// summary:
			//		Handler for up arrow key.
			// description:
			//		Removes the bottom time and add one to the top
			// tags:
			//		private
			if(typeof count == "number" && count == -1){ return; } // typematic end
			if(!this.timeMenu.childNodes.length){ return; }
			var index = this.timeMenu.childNodes[0].index;
			var divs = this._getFilteredNodes(index, 1, true, this.timeMenu.childNodes[0]);
			if(divs.length){
				this.timeMenu.removeChild(this.timeMenu.childNodes[this.timeMenu.childNodes.length - 1]);
				this.timeMenu.insertBefore(divs[0], this.timeMenu.childNodes[0]);
			}
		},

		_onArrowDown: function(count){
			// summary:
			//		Handler for up arrow key.
			// description:
			//		Remove the top time and add one to the bottom
			// tags:
			//		private
			if(typeof count == "number" && count == -1){ return; } // typematic end
			if(!this.timeMenu.childNodes.length){ return; }
			var index = this.timeMenu.childNodes[this.timeMenu.childNodes.length - 1].index + 1;
			var divs = this._getFilteredNodes(index, 1, false, this.timeMenu.childNodes[this.timeMenu.childNodes.length - 1]);
			if(divs.length){
				this.timeMenu.removeChild(this.timeMenu.childNodes[0]);
				this.timeMenu.appendChild(divs[0]);
			}
		},

		handleKey: function(/*Event*/ e){
			// summary:
			//		Called from `dijit.form._DateTimeTextBox` to pass a keypress event
			//		from the `dijit.form.TimeTextBox` to be handled in this widget
			// tags:
			//		protected
			var dk = dojo.keys;
			if(e.charOrCode == dk.DOWN_ARROW || e.charOrCode == dk.UP_ARROW){
				dojo.stopEvent(e);
				// Figure out which option to highlight now and then highlight it
				if(this._highlighted_option && !this._highlighted_option.parentNode){
					this._highlighted_option = null;
				}
				var timeMenu = this.timeMenu,
					tgt = this._highlighted_option || dojo.query("." + this.baseClass + "ItemSelected", timeMenu)[0];
				if(!tgt){
					tgt = timeMenu.childNodes[0];
				}else if(timeMenu.childNodes.length){
					if(e.charOrCode == dk.DOWN_ARROW && !tgt.nextSibling){
						this._onArrowDown();
					}else if(e.charOrCode == dk.UP_ARROW && !tgt.previousSibling){
						this._onArrowUp();
					}
					if(e.charOrCode == dk.DOWN_ARROW){
						tgt = tgt.nextSibling;
					}else{
						tgt = tgt.previousSibling;
					}
				}
				this._highlightOption(tgt, true);
				this._keyboardSelected = tgt;
				return false;
			}else if(e.charOrCode == dk.ENTER || e.charOrCode === dk.TAB){
				// mouse hover followed by TAB is NO selection
				if(!this._keyboardSelected && e.charOrCode === dk.TAB){
					return true;	// true means don't call stopEvent()
				}

				// Accept the currently-highlighted option as the value
				if(this._highlighted_option){
				this._onOptionSelected({target: this._highlighted_option});
			}

				// Call stopEvent() for ENTER key so that form doesn't submit,
				// but not for TAB, so that TAB does switch focus
				return e.charOrCode === dk.TAB;
			}
		}
	}
);

}

if(!dojo._hasResource["dijit.form.TimeTextBox"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.TimeTextBox"] = true;
dojo.provide("dijit.form.TimeTextBox");





/*=====
dojo.declare(
	"dijit.form.TimeTextBox.__Constraints",
	[dijit.form._DateTimeTextBox.__Constraints, dijit._TimePicker.__Constraints]
);
=====*/

dojo.declare(
	"dijit.form.TimeTextBox",
	dijit.form._DateTimeTextBox,
	{
		// summary:
		//		A validating, serializable, range-bound time text box with a drop down time picker

		baseClass: "dijitTextBox dijitComboBox dijitTimeTextBox",
		popupClass: "dijit._TimePicker",
		_selector: "time",

/*=====
		// constraints: dijit.form.TimeTextBox.__Constraints
		constraints:{},
=====*/

		// value: Date
		//		The value of this widget as a JavaScript Date object.  Note that the date portion implies time zone and daylight savings rules.
		//
		//		Example:
		// |	new dijit.form.TimeTextBox({value: dojo.date.stamp.fromISOString("T12:59:59", new Date())})
		//
		//		When passed to the parser in markup, must be specified according to locale-independent
		//		`dojo.date.stamp.fromISOString` format.
		//
		//		Example:
		// |	<input dojotype='dijit.form.TimeTextBox' value='T12:34:00'>
		value: new Date(""),		// value.toString()="NaN"
		//FIXME: in markup, you have no control over daylight savings

		_onKey: function(evt){
			this.inherited(arguments);

			// If the user has backspaced or typed some numbers, then filter the result list
			// by what they typed.  Maybe there's a better way to detect this, like _handleOnChange()?
			switch(evt.keyCode){
				case dojo.keys.ENTER:
				case dojo.keys.TAB:
				case dojo.keys.ESCAPE:
				case dojo.keys.DOWN_ARROW:
				case dojo.keys.UP_ARROW:
					// these keys have special meaning
					break;
				default:
					// setTimeout() because the keystroke hasn't yet appeared in the <input>,
					// so the get('displayedValue') call below won't give the result we want.
					setTimeout(dojo.hitch(this, function(){
						// set this.filterString to the filter to apply to the drop down list;
						// it will be used in openDropDown()
						var val = this.get('displayedValue');
						this.filterString = (val && !this.parse(val, this.constraints)) ? val.toLowerCase() : "";
	
						// close the drop down and reopen it, in order to filter the items shown in the list
						// and also since the drop down may need to be repositioned if the number of list items has changed
						// and it's being displayed above the <input>
						if(this._opened){
							this.closeDropDown();
						}
						this.openDropDown();
					}), 0);
			}
		}
	}
);

}

if(!dojo._hasResource["dijit._editor.plugins.AlwaysShowToolbar"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.plugins.AlwaysShowToolbar"] = true;
dojo.provide("dijit._editor.plugins.AlwaysShowToolbar");




dojo.declare("dijit._editor.plugins.AlwaysShowToolbar", dijit._editor._Plugin,
	{
	// summary:
	//		This plugin is required for Editors in auto-expand mode.
	//		It handles the auto-expansion as the user adds/deletes text,
	//		and keeps the editor's toolbar visible even when the top of the editor
	//		has scrolled off the top of the viewport (usually when editing a long
	//		document).
	// description:
	//		Specify this in extraPlugins (or plugins) parameter and also set
	//		height to "".
	// example:
	//	|	<div dojoType="dijit.Editor" height=""
	//	|	extraPlugins="['dijit._editor.plugins.AlwaysShowToolbar']">

	// _handleScroll: Boolean
	//		Enables/disables the handler for scroll events
	_handleScroll: true,

	setEditor: function(e){
		// Overrides _Plugin.setEditor().
		if(!e.iframe){
			console.log('Port AlwaysShowToolbar plugin to work with Editor without iframe');
			return;
		}

		this.editor = e;

		e.onLoadDeferred.addCallback(dojo.hitch(this, this.enable));
	},

	enable: function(d){
		// summary:
		//		Enable plugin.  Called when Editor has finished initializing.
		// tags:
		//		private

		this._updateHeight();
		this.connect(window, 'onscroll', "globalOnScrollHandler");
		this.connect(this.editor, 'onNormalizedDisplayChanged', "_updateHeight");
		return d;
	},

	_updateHeight: function(){
		// summary:
		//		Updates the height of the editor area to fit the contents.
		var e = this.editor;
		if(!e.isLoaded){ return; }
		if(e.height){ return; }

		var height = dojo._getMarginSize(e.editNode).h;
		if(dojo.isOpera){
			height = e.editNode.scrollHeight;
		}
		// console.debug('height',height);
		// alert(this.editNode);

		//height maybe zero in some cases even though the content is not empty,
		//we try the height of body instead
		if(!height){
			height = dojo._getMarginSize(e.document.body).h;
		}

		if(height == 0){
			console.debug("Can not figure out the height of the editing area!");
			return; //prevent setting height to 0
		}
		if(dojo.isIE <= 7 && this.editor.minHeight){
			var min = parseInt(this.editor.minHeight);
			if(height < min){ height = min; }
		}
		if(height != this._lastHeight){
			this._lastHeight = height;
			// this.editorObject.style.height = this._lastHeight + "px";
			dojo.marginBox(e.iframe, { h: this._lastHeight });
		}
	},

	// _lastHeight: Integer
	//		Height in px of the editor at the last time we did sizing
	_lastHeight: 0,

	globalOnScrollHandler: function(){
		// summary:
		//		Handler for scroll events that bubbled up to <html>
		// tags:
		//		private

		var isIE6 = dojo.isIE < 7;
		if(!this._handleScroll){ return; }
		var tdn = this.editor.header;
		var db = dojo.body;

		if(!this._scrollSetUp){
			this._scrollSetUp = true;
			this._scrollThreshold = dojo.position(tdn, true).y;
//			console.log("threshold:", this._scrollThreshold);
			//what's this for?? comment out for now
//			if((isIE6)&&(db)&&(dojo.style(db, "backgroundIimage")=="none")){
//				db.style.backgroundImage = "url(" + dojo.uri.moduleUri("dijit", "templates/blank.gif") + ")";
//				db.style.backgroundAttachment = "fixed";
//			}
		}

		var scrollPos = dojo._docScroll().y;
		var s = tdn.style;

		if(scrollPos > this._scrollThreshold && scrollPos < this._scrollThreshold+this._lastHeight){
			// dojo.debug(scrollPos);
			if(!this._fixEnabled){
				var tdnbox = dojo._getMarginSize(tdn);
				this.editor.iframe.style.marginTop = tdnbox.h+"px";

				if(isIE6){
					s.left = dojo.position(tdn).x;
					if(tdn.previousSibling){
						this._IEOriginalPos = ['after',tdn.previousSibling];
					}else if(tdn.nextSibling){
						this._IEOriginalPos = ['before',tdn.nextSibling];
					}else{
						this._IEOriginalPos = ['last',tdn.parentNode];
					}
					dojo.body().appendChild(tdn);
					dojo.addClass(tdn,'dijitIEFixedToolbar');
				}else{
					s.position = "fixed";
					s.top = "0px";
				}

				dojo.marginBox(tdn, { w: tdnbox.w });
				s.zIndex = 2000;
				this._fixEnabled = true;
			}
			// if we're showing the floating toolbar, make sure that if
			// we've scrolled past the bottom of the editor that we hide
			// the toolbar for this instance of the editor.

			// TODO: when we get multiple editor toolbar support working
			// correctly, ensure that we check this against the scroll
			// position of the bottom-most editor instance.
			var eHeight = (this.height) ? parseInt(this.editor.height) : this.editor._lastHeight;
			s.display = (scrollPos > this._scrollThreshold+eHeight) ? "none" : "";
		}else if(this._fixEnabled){
			this.editor.iframe.style.marginTop = '';
			s.position = "";
			s.top = "";
			s.zIndex = "";
			s.display = "";
			if(isIE6){
				s.left = "";
				dojo.removeClass(tdn,'dijitIEFixedToolbar');
				if(this._IEOriginalPos){
					dojo.place(tdn, this._IEOriginalPos[1], this._IEOriginalPos[0]);
					this._IEOriginalPos = null;
				}else{
					dojo.place(tdn, this.editor.iframe, 'before');
				}
			}
			s.width = "";
			this._fixEnabled = false;
		}
	},

	destroy: function(){
		// Overrides _Plugin.destroy().   TODO: call this.inherited() rather than repeating code.
		this._IEOriginalPos = null;
		this._handleScroll = false;
		dojo.forEach(this._connects, dojo.disconnect);
//		clearInterval(this.scrollInterval);

		if(dojo.isIE < 7){
			dojo.removeClass(this.editor.header, 'dijitIEFixedToolbar');
		}
	}
});

}

if(!dojo._hasResource["dijit._editor.plugins.ViewSource"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.plugins.ViewSource"] = true;
dojo.provide("dijit._editor.plugins.ViewSource");








dojo.declare("dijit._editor.plugins.ViewSource",dijit._editor._Plugin,{
	// summary:
	//		This plugin provides a simple view source capability.  When view
	//		source mode is enabled, it disables all other buttons/plugins on the RTE.
	//		It also binds to the hotkey: CTRL-SHIFT-F11 for toggling ViewSource mode.

	// stripScripts: [public] Boolean
	//		Boolean flag used to indicate if script tags should be stripped from the document.
	//		Defaults to true.
	stripScripts: true,

	// stripComments: [public] Boolean
	//		Boolean flag used to indicate if comment tags should be stripped from the document.
	//		Defaults to true.
	stripComments: true,

	// stripComments: [public] Boolean
	//		Boolean flag used to indicate if iframe tags should be stripped from the document.
	//		Defaults to true.
	stripIFrames: true,

	// readOnly: [const] Boolean
	//		Boolean flag used to indicate if the source view should be readonly or not.
	//		Cannot be changed after initialization of the plugin.
	//		Defaults to false.
	readOnly: false,

	// _fsPlugin: [private] Object
	//		Reference to a registered fullscreen plugin so that viewSource knows
	//		how to scale.
	_fsPlugin: null,

	toggle: function(){
		// summary:
		//		Function to allow programmatic toggling of the view.

		// For Webkit, we have to focus a very particular way.
		// when swapping views, otherwise focus doesn't shift right
		// but can't focus this way all the time, only for VS changes.
		// If we did it all the time, buttons like bold, italic, etc
		// break.
		if(dojo.isWebKit){this._vsFocused = true;}
		this.button.set("checked", !this.button.get("checked"));

	},

	_initButton: function(){
		// summary:
		//		Over-ride for creation of the resize button.
		var strings = dojo.i18n.getLocalization("dijit._editor", "commands"),
			editor = this.editor;
		this.button = new dijit.form.ToggleButton({
			label: strings["viewSource"],
			dir: editor.dir,
			lang: editor.lang,
			showLabel: false,
			iconClass: this.iconClassPrefix + " " + this.iconClassPrefix + "ViewSource",
			tabIndex: "-1",
			onChange: dojo.hitch(this, "_showSource")
		});

		// IE 7 has a horrible bug with zoom, so we have to create this node
		// to cross-check later.  Sigh.
		if(dojo.isIE == 7){
			this._ieFixNode = dojo.create("div", {
				style: {
					opacity: "0",
					zIndex: "-1000",
					position: "absolute",
					top: "-1000px"
				}
			}, dojo.body());
		}
		// Make sure readonly mode doesn't make the wrong cursor appear over the button.
		this.button.set("readOnly", false);
	},


	setEditor: function(/*dijit.Editor*/ editor){
		// summary:
		//		Tell the plugin which Editor it is associated with.
		// editor: Object
		//		The editor object to attach the print capability to.
		this.editor = editor;
		this._initButton();

		this.editor.addKeyHandler(dojo.keys.F12, true, true, dojo.hitch(this, function(e){
			// Move the focus before switching
			// It'll focus back.  Hiding a focused
			// node causes issues.
			this.button.focus();
			this.toggle();
			dojo.stopEvent(e);

			// Call the focus shift outside of the handler.
			setTimeout(dojo.hitch(this, function(){
				// We over-ride focus, so we just need to call.
				this.editor.focus();
			}), 100);
		}));
	},

	_showSource: function(source){
		// summary:
		//		Function to toggle between the source and RTE views.
		// source: boolean
		//		Boolean value indicating if it should be in source mode or not.
		// tags:
		//		private
		var ed = this.editor;
		var edPlugins = ed._plugins;
		var html;
		this._sourceShown = source;
		var self = this;
		try{
			if(!this.sourceArea){
				this._createSourceView();
			}
			if(source){
				// Update the QueryCommandEnabled function to disable everything but
				// the source view mode.  Have to over-ride a function, then kick all
				// plugins to check their state.
				ed._sourceQueryCommandEnabled = ed.queryCommandEnabled;
				ed.queryCommandEnabled = function(cmd){
					var lcmd = cmd.toLowerCase();
					if(lcmd === "viewsource"){
						return true;
					}else{
						return false;
					}
				};
				this.editor.onDisplayChanged();
				html = ed.get("value");
				html = this._filter(html);
				ed.set("value", html);
				this._pluginList = [];
				dojo.forEach(edPlugins, function(p){
					// Turn off any plugins not controlled by queryCommandenabled.
					if(!(p instanceof dijit._editor.plugins.ViewSource)){
						p.set("disabled", true)
					}
				});

				// We actually do need to trap this plugin and adjust how we
				// display the textarea.
				if(this._fsPlugin){
					this._fsPlugin._getAltViewNode = function(){
						return self.sourceArea;
					};
				}

				this.sourceArea.value = html;
				var is = dojo._getMarginSize(ed.iframe.parentNode);

				dojo.marginBox(this.sourceArea, {
					w: is.w,
					h: is.h
				});

				dojo.style(ed.iframe, "display", "none");
				dojo.style(this.sourceArea, {
					display: "block"
				});

				var resizer = function(){
					// function to handle resize events.
					// Will check current VP and only resize if
					// different.
					var vp = dojo.window.getBox();

					if("_prevW" in this && "_prevH" in this){
						// No actual size change, ignore.
						if(vp.w === this._prevW && vp.h === this._prevH){
							return;
						}else{
							this._prevW = vp.w;
							this._prevH = vp.h;
						}
					}else{
						this._prevW = vp.w;
						this._prevH = vp.h;
					}
					if(this._resizer){
						clearTimeout(this._resizer);
						delete this._resizer;
					}
					// Timeout it to help avoid spamming resize on IE.
					// Works for all browsers.
					this._resizer = setTimeout(dojo.hitch(this, function(){
						delete this._resizer;
						this._resize();
					}), 10);
				};
				this._resizeHandle = dojo.connect(window, "onresize", this, resizer);

				//Call this on a delay once to deal with IE glitchiness on initial size.
				setTimeout(dojo.hitch(this, this._resize), 100);

				//Trigger a check for command enablement/disablement.
				this.editor.onNormalizedDisplayChanged();

				this.editor.__oldGetValue = this.editor.getValue;
				this.editor.getValue = dojo.hitch(this, function() {
					var txt = this.sourceArea.value;
					txt = this._filter(txt);
					return txt;
				});
			}else{
				// First check that we were in source view before doing anything.
				// corner case for being called with a value of false and we hadn't
				// actually been in source display mode.
				if(!ed._sourceQueryCommandEnabled){
					return;
				}
				dojo.disconnect(this._resizeHandle);
				delete this._resizeHandle;

				if(this.editor.__oldGetValue){
					this.editor.getValue = this.editor.__oldGetValue;
					delete this.editor.__oldGetValue;
				}

				// Restore all the plugin buttons state.
				ed.queryCommandEnabled = ed._sourceQueryCommandEnabled;
				if(!this._readOnly){
					html = this.sourceArea.value;
					html = this._filter(html);
					ed.beginEditing();
					ed.set("value", html);
					ed.endEditing();
				}

				dojo.forEach(edPlugins, function(p){
					// Turn back on any plugins we turned off.
					p.set("disabled", false);
				});

				dojo.style(this.sourceArea, "display", "none");
				dojo.style(ed.iframe, "display", "block");
				delete ed._sourceQueryCommandEnabled;
                
				//Trigger a check for command enablement/disablement.
				this.editor.onDisplayChanged();
			}
			// Call a delayed resize to wait for some things to display in header/footer.
			setTimeout(dojo.hitch(this, function(){
				// Make resize calls.
				var parent = ed.domNode.parentNode;
				if(parent){
					var container = dijit.getEnclosingWidget(parent);
					if(container && container.resize){
						container.resize();
					}
				}
                ed.resize();
			}), 300);
		}catch(e){
			console.log(e);
		}
	},

	updateState: function(){
		// summary:
		//		Over-ride for button state control for disabled to work.
		this.button.set("disabled", this.get("disabled"));
	},

	_resize: function(){
		// summary:
		//		Internal function to resize the source view
		// tags:
		//		private
		var ed = this.editor;
		var tbH = ed.getHeaderHeight();
		var fH = ed.getFooterHeight();
		var eb = dojo.position(ed.domNode);

		// Styles are now applied to the internal source container, so we have
		// to subtract them off.
		var containerPadding = dojo._getPadBorderExtents(ed.iframe.parentNode);
		var containerMargin = dojo._getMarginExtents(ed.iframe.parentNode);

		var extents = dojo._getPadBorderExtents(ed.domNode);
		var mExtents = dojo._getMarginExtents(ed.domNode);
		var edb = {
			w: eb.w - (extents.w + mExtents.w),
			h: eb.h - (tbH + extents.h + mExtents.h + fH)
		};

		// Fullscreen gets odd, so we need to check for the FS plugin and
		// adapt.
		if(this._fsPlugin && this._fsPlugin.isFullscreen){
			//Okay, probably in FS, adjust.
			var vp = dojo.window.getBox();
			edb.w = (vp.w - extents.w);
			edb.h = (vp.h - (tbH + extents.h + fH));
		}

		if(dojo.isIE){
			// IE is always off by 2px, so we have to adjust here
			// Note that IE ZOOM is broken here.  I can't get
			//it to scale right.
			edb.h -= 2;
		}

		// IE has a horrible zoom bug.  So, we have to try and account for
		// it and fix up the scaling.
		if(this._ieFixNode){
			var _ie7zoom = -this._ieFixNode.offsetTop / 1000;
			edb.w = Math.floor((edb.w + 0.9) / _ie7zoom);
			edb.h = Math.floor((edb.h + 0.9) / _ie7zoom);
		}

		dojo.marginBox(this.sourceArea, {
			w: edb.w - (containerPadding.w + containerMargin.w),
			h: edb.h - (containerPadding.h + containerMargin.h)
		});

		// Scale the parent container too in this case.
		dojo.marginBox(ed.iframe.parentNode, {
			h: edb.h
		});
	},

	_createSourceView: function(){
		// summary:
		//		Internal function for creating the source view area.
		// tags:
		//		private
		var ed = this.editor;
		var edPlugins = ed._plugins;
		this.sourceArea = dojo.create("textarea");
		if(this.readOnly){
			dojo.attr(this.sourceArea, "readOnly", true);
			this._readOnly = true;
		}
		dojo.style(this.sourceArea, {
			padding: "0px",
			margin: "0px",
			borderWidth: "0px",
			borderStyle: "none"
		});
		dojo.place(this.sourceArea, ed.iframe, "before");

		if(dojo.isIE && ed.iframe.parentNode.lastChild !== ed.iframe){
			// There's some weirdo div in IE used for focus control
			// But is messed up scaling the textarea if we don't config
			// it some so it doesn't have a varying height.
			dojo.style(ed.iframe.parentNode.lastChild,{
				width: "0px",
				height: "0px",
				padding: "0px",
				margin: "0px",
				borderWidth: "0px",
				borderStyle: "none"
			});
		}

		// We also need to take over editor focus a bit here, so that focus calls to
		// focus the editor will focus to the right node when VS is active.
		ed._viewsource_oldFocus = ed.focus;
		var self = this;
		ed.focus = function(){
			if(self._sourceShown){
				self.setSourceAreaCaret();
			}else{
				try{
					if(this._vsFocused){
						delete this._vsFocused;
						// Must focus edit node in this case (webkit only) or
						// focus doesn't shift right, but in normal
						// cases we focus with the regular function.
						dijit.focus(ed.editNode);
					}else{
						ed._viewsource_oldFocus();
					}
				}catch(e){
					console.log(e);
				}
			}
		};

		var i, p;
		for(i = 0; i < edPlugins.length; i++){
			// We actually do need to trap this plugin and adjust how we
			// display the textarea.
			p = edPlugins[i];
			if(p && (p.declaredClass === "dijit._editor.plugins.FullScreen" ||
					p.declaredClass === (dijit._scopeName +
					"._editor.plugins.FullScreen"))){
				this._fsPlugin = p;
				break;
			}
		}
		if(this._fsPlugin){
			// Found, we need to over-ride the alt-view node function
			// on FullScreen with our own, chain up to parent call when appropriate.
			this._fsPlugin._viewsource_getAltViewNode = this._fsPlugin._getAltViewNode;
			this._fsPlugin._getAltViewNode = function(){
				return self._sourceShown?self.sourceArea:this._viewsource_getAltViewNode();
			};
		}

		// Listen to the source area for key events as well, as we need to be able to hotkey toggle
		// it from there too.
		this.connect(this.sourceArea, "onkeydown", dojo.hitch(this, function(e){
			if(this._sourceShown && e.keyCode == dojo.keys.F12 && e.ctrlKey && e.shiftKey){
				this.button.focus();
				this.button.set("checked", false);
				setTimeout(dojo.hitch(this, function(){ed.focus();}), 100);
				dojo.stopEvent(e);
			}
		}));
	},

	_stripScripts: function(html){
		// summary:
		//		Strips out script tags from the HTML used in editor.
		// html: String
		//		The HTML to filter
		// tags:
		//		private
		if(html){
			// Look for closed and unclosed (malformed) script attacks.
			html = html.replace(/<\s*script[^>]*>((.|\s)*?)<\\?\/\s*script\s*>/ig, "");
			html = html.replace(/<\s*script\b([^<>]|\s)*>?/ig, "");
			html = html.replace(/<[^>]*=(\s|)*[("|')]javascript:[^$1][(\s|.)]*[$1][^>]*>/ig, "");
		}
		return html;
	},

	_stripComments: function(html){
		// summary:
		//		Strips out comments from the HTML used in editor.
		// html: String
		//		The HTML to filter
		// tags:
		//		private
		if(html){
			html = html.replace(/<!--(.|\s){1,}?-->/g, "");
		}
		return html;
	},

	_stripIFrames: function(html){
		// summary:
		//		Strips out iframe tags from the content, to avoid iframe script
		//		style injection attacks.
		// html: String
		//		The HTML to filter
		// tags:
		//		private
		if(html){
			html = html.replace(/<\s*iframe[^>]*>((.|\s)*?)<\\?\/\s*iframe\s*>/ig, "");
		}
		return html;
	},

	_filter: function(html){
		// summary:
		//		Internal function to perform some filtering on the HTML.
		// html: String
		//		The HTML to filter
		// tags:
		//		private
		if(html){
			if(this.stripScripts){
				html = this._stripScripts(html);
			}
			if(this.stripComments){
				html = this._stripComments(html);
			}
			if(this.stripIFrames){
				html = this._stripIFrames(html);
			}
		}
		return html;
	},

	setSourceAreaCaret: function(){
		// summary:
		//		Internal function to set the caret in the sourceArea
		//		to 0x0
		var win = dojo.global;
		var elem = this.sourceArea;
		dijit.focus(elem);
		if(this._sourceShown && !this.readOnly){
			if(dojo.isIE){
				if(this.sourceArea.createTextRange){
					var range = elem.createTextRange();
					range.collapse(true);
					range.moveStart("character", -99999); // move to 0
					range.moveStart("character", 0); // delta from 0 is the correct position
					range.moveEnd("character", 0);
					range.select();
				}
			}else if(win.getSelection){
				if(elem.setSelectionRange){
					elem.setSelectionRange(0,0);
				}
			}
		}
	},

	destroy: function(){
		// summary:
		//		Over-ride to remove the node used to correct for IE's
		//		zoom bug.
		if(this._ieFixNode){
			dojo.body().removeChild(this._ieFixNode);
		}
		if(this._resizer){
			clearTimeout(this._resizer);
			delete this._resizer;
		}
		if(this._resizeHandle){
			dojo.disconnect(this._resizeHandle);
			delete this._resizeHandle;
		}
		this.inherited(arguments);
	}
});

// Register this plugin.
dojo.subscribe(dijit._scopeName + ".Editor.getPlugin",null,function(o){
	if(o.plugin){ return; }
	var name = o.args.name.toLowerCase();
	if(name ===  "viewsource"){
		o.plugin = new dijit._editor.plugins.ViewSource({
			readOnly: ("readOnly" in o.args)?o.args.readOnly:false,
			stripComments: ("stripComments" in o.args)?o.args.stripComments:true,
			stripScripts: ("stripScripts" in o.args)?o.args.stripScripts:true,
			stripIFrames: ("stripIFrames" in o.args)?o.args.stripIFrames:true
		});
	}
});

}

if(!dojo._hasResource["dijit._editor.plugins.FontChoice"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.plugins.FontChoice"] = true;
dojo.provide("dijit._editor.plugins.FontChoice");










dojo.declare("dijit._editor.plugins._FontDropDown",
	[dijit._Widget, dijit._Templated],{
	// summary:
	//		Base class for widgets that contains a label (like "Font:")
	//		and a FilteringSelect drop down to pick a value.
	//		Used as Toolbar entry.

	// label: [public] String
	//		The label to apply to this particular FontDropDown.
	label: "",

	// widgetsInTemplate: [public] boolean
	//		Over-ride denoting the template has widgets to parse.
	widgetsInTemplate: true,

	// plainText: [public] boolean
	//		Flag to indicate that the returned label should be plain text
	//		instead of an example.
	plainText: false,

	// templateString: [public] String
	//		The template used to construct the labeled dropdown.
	templateString:
		"<span style='white-space: nowrap' class='dijit dijitReset dijitInline'>" +
			"<label class='dijitLeft dijitInline' for='${selectId}'>${label}</label>" +
			"<input dojoType='dijit.form.FilteringSelect' required='false' labelType='html' labelAttr='label' searchAttr='name' " +
					"tabIndex='-1' id='${selectId}' dojoAttachPoint='select' value=''/>" +
		"</span>",

	postMixInProperties: function(){
		// summary:
		//		Over-ride to set specific properties.
		this.inherited(arguments);

		this.strings = dojo.i18n.getLocalization("dijit._editor", "FontChoice");

		// Set some substitution variables used in the template
		this.label = this.strings[this.command];
		this.id = dijit.getUniqueId(this.declaredClass.replace(/\./g,"_"));
		this.selectId = this.id + "_select";

		this.inherited(arguments);
	},

	postCreate: function(){
		// summary:
		//		Over-ride for the default postCreate action
		//		This establishes the filtering selects and the like.

		// Initialize the list of items in the drop down by creating data store with items like:
		// {value: 1, name: "xx-small", label: "<font size=1>xx-small</font-size>" }
		var	items = dojo.map(this.values, function(value){
				var name = this.strings[value] || value;
				return {
					label: this.getLabel(value, name),
					name: name,
					value: value
				};
			}, this);

		this.select.store = new dojo.data.ItemFileReadStore({
			data: {
				identifier: "value",
				items: items
			}
		});

		this.select.set("value", "", false);
		this.disabled = this.select.get("disabled");
	},

	_setValueAttr: function(value, priorityChange){
		// summary:
		//		Over-ride for the default action of setting the
		//		widget value, maps the input to known values
		// value: Object|String
		//		The value to set in the select.
		// priorityChange:
		//		Optional parameter used to tell the select whether or not to fire
		//		onChange event.

		//if the value is not a permitted value, just set empty string to prevent showing the warning icon
		priorityChange = priorityChange !== false?true:false;
		this.select.set('value', dojo.indexOf(this.values,value) < 0 ? "" : value, priorityChange);
		if(!priorityChange){
			// Clear the last state in case of updateState calls.  Ref: #10466
			this.select._lastValueReported=null;
		}
	},

	_getValueAttr: function(){
		// summary:
		//		Allow retreiving the value from the composite select on
		//		call to button.get("value");
		return this.select.get('value');
	},

	focus: function(){
		// summary:
		//		Over-ride for focus control of this widget.  Delegates focus down to the
		//		filtering select.
		this.select.focus();
	},

	_setDisabledAttr: function(value){
		// summary:
		//		Over-ride for the button's 'disabled' attribute so that it can be
		//		disabled programmatically.

		// Save off ths disabled state so the get retrieves it correctly
		//without needing to have a function proxy it.
		this.disabled = value;
		this.select.set("disabled", value);
	}
});


dojo.declare("dijit._editor.plugins._FontNameDropDown", dijit._editor.plugins._FontDropDown, {
	// summary:
	//		Dropdown to select a font; goes in editor toolbar.

	// generic: Boolean
	//		Use generic (web standard) font names
	generic: false,

	// command: [public] String
	//		The editor 'command' implemented by this plugin.
	command: "fontName",

	postMixInProperties: function(){
		// summary:
		//		Over-ride for the default posr mixin control
		if(!this.values){
			this.values = this.generic ?
				["serif", "sans-serif", "monospace", "cursive", "fantasy"] : // CSS font-family generics
					["Arial", "Times New Roman", "Comic Sans MS", "Courier New", "Verdana"];
		}
		this.inherited(arguments);
	},

	getLabel: function(value, name){
		// summary:
		//		Function used to generate the labels of the format dropdown
		//		will return a formatted, or plain label based on the value
		//		of the plainText option.
		// value: String
		//		The 'insert value' associated with a name
		// name: String
		//		The text name of the value
		if(this.plainText){
			return name;
		}else{
			return "<div style='font-family: "+value+"'>" + name + "</div>";
		}
	},

	_setValueAttr: function(value, priorityChange){
		// summary:
		//		Over-ride for the default action of setting the
		//		widget value, maps the input to known values

		priorityChange = priorityChange !== false?true:false;
		if(this.generic){
			var map = {
				"Arial": "sans-serif",
				"Helvetica": "sans-serif",
				"Myriad": "sans-serif",
				"Times": "serif",
				"Times New Roman": "serif",
				"Comic Sans MS": "cursive",
				"Apple Chancery": "cursive",
				"Courier": "monospace",
				"Courier New": "monospace",
				"Papyrus": "fantasy"
//					,"????": "fantasy" TODO: IE doesn't map fantasy font-family?
			};
			value = map[value] || value;
		}
		this.inherited(arguments, [value, priorityChange]);
	}
});

dojo.declare("dijit._editor.plugins._FontSizeDropDown", dijit._editor.plugins._FontDropDown, {
	// summary:
	//		Dropdown to select a font size; goes in editor toolbar.

	// command: [public] String
	//		The editor 'command' implemented by this plugin.
	command: "fontSize",

	// values: [public] Number[]
	//		The HTML font size values supported by this plugin
	values: [1,2,3,4,5,6,7], // sizes according to the old HTML FONT SIZE

	getLabel: function(value, name){
		// summary:
		//		Function used to generate the labels of the format dropdown
		//		will return a formatted, or plain label based on the value
		//		of the plainText option.
		//		We're stuck using the deprecated FONT tag to correspond
		//		with the size measurements used by the editor
		// value: String
		//		The 'insert value' associated with a name
		// name: String
		//		The text name of the value
		if(this.plainText){
			return name;
		}else{
			return "<font size=" + value + "'>" + name + "</font>";
		}
	},

	_setValueAttr: function(value, priorityChange){
		// summary:
		//		Over-ride for the default action of setting the
		//		widget value, maps the input to known values
		priorityChange = priorityChange !== false?true:false;
		if(value.indexOf && value.indexOf("px") != -1){
			var pixels = parseInt(value, 10);
			value = {10:1, 13:2, 16:3, 18:4, 24:5, 32:6, 48:7}[pixels] || value;
		}

		this.inherited(arguments, [value, priorityChange]);
	}
});


dojo.declare("dijit._editor.plugins._FormatBlockDropDown", dijit._editor.plugins._FontDropDown, {
	// summary:
	//		Dropdown to select a format (like paragraph or heading); goes in editor toolbar.

	// command: [public] String
	//		The editor 'command' implemented by this plugin.
	command: "formatBlock",

	// values: [public] Array
	//		The HTML format tags supported by this plugin
	values: ["noFormat", "p", "h1", "h2", "h3", "pre"],

	postCreate: function(){
		// Init and set the default value to no formatting.  Update state will adjust it
		// as needed.
		this.inherited(arguments);
		this.set("value", "noFormat", false);
	},

	getLabel: function(value, name){
		// summary:
		//		Function used to generate the labels of the format dropdown
		//		will return a formatted, or plain label based on the value
		//		of the plainText option.
		// value: String
		//		The 'insert value' associated with a name
		// name: String
		//		The text name of the value
		if(this.plainText || value == "noFormat"){
			return name;
		}else{
			return "<" + value + ">" + name + "</" + value + ">";
		}
	},

	_execCommand: function(editor, command, choice){
		// summary:
		//		Over-ride for default exec-command label.
		// 		Allows us to treat 'none' as special.
		if(choice === "noFormat"){
			var start;
			var end;
			var sel = dijit.range.getSelection(editor.window);
			if(sel && sel.rangeCount > 0){
				var range = sel.getRangeAt(0);
				var node, tag;
				if(range){
					start = range.startContainer;
					end = range.endContainer;

					// find containing nodes of start/end.
					while(start && start !== editor.editNode &&
						  start !== editor.document.body &&
						  start.nodeType !== 1){
						start = start.parentNode;
					}

					while(end && end !== editor.editNode &&
						  end !== editor.document.body &&
						  end.nodeType !== 1){
						end = end.parentNode;
					}

					var processChildren = dojo.hitch(this, function(node, array){
						if(node.childNodes && node.childNodes.length){
							var i;
							for(i = 0; i < node.childNodes.length; i++){
								var c = node.childNodes[i];
								if(c.nodeType == 1){
									if(dojo.withGlobal(editor.window, "inSelection", dijit._editor.selection, [c])){
										var tag = c.tagName? c.tagName.toLowerCase(): "";
										if(dojo.indexOf(this.values, tag) !== -1){
											array.push(c);
										}
										processChildren(c,array);
									}
								}
							}
						}
					});

					var unformatNodes = dojo.hitch(this, function(nodes){
						// summary:
						//		Internal function to clear format nodes.
						// nodes:
						//		The array of nodes to strip formatting from.
						if(nodes && nodes.length){
							editor.beginEditing();
							while(nodes.length){
								this._removeFormat(editor, nodes.pop());
							}
							editor.endEditing();
						}
					});

					var clearNodes = [];
					if(start == end){
						//Contained within the same block, may be collapsed, but who cares, see if we
						// have a block element to remove.
						var block;
						node = start;
						while(node && node !== editor.editNode && node !== editor.document.body){
							if(node.nodeType == 1){
								tag = node.tagName? node.tagName.toLowerCase(): "";
								if(dojo.indexOf(this.values, tag) !== -1){
									block = node;
									break;
								}
							}
							node = node.parentNode;
						}

						//Also look for all child nodes in the selection that may need to be
						//cleared of formatting
						processChildren(start, clearNodes);
						if(block) { clearNodes = [block].concat(clearNodes); }
						unformatNodes(clearNodes);
					}else{
						// Probably a multi select, so we have to process it.  Whee.
						node = start;
						while(dojo.withGlobal(editor.window, "inSelection", dijit._editor.selection, [node])){
							if(node.nodeType == 1){
								tag = node.tagName? node.tagName.toLowerCase(): "";
								if(dojo.indexOf(this.values, tag) !== -1){
									clearNodes.push(node);
								}
								processChildren(node,clearNodes);
							}
							node = node.nextSibling;
						}
						unformatNodes(clearNodes);
					}
					editor.onDisplayChanged();
				}
			}
		}else{
			editor.execCommand(command, choice);
		}
	},

	_removeFormat: function(editor, node){
		// summary:
		//		function to remove the block format node.
		// node:
		//		The block format node to remove (and leave the contents behind)
		if(editor.customUndo){
			// So of course IE doesn't work right with paste-overs.
			// We have to do this manually, which is okay since IE already uses
			// customUndo and we turned it on for WebKit.  WebKit pasted funny,
			// so couldn't use the execCommand approach
			while(node.firstChild){
				dojo.place(node.firstChild, node, "before");
			}
			node.parentNode.removeChild(node);
		}else{
			// Everyone else works fine this way, a paste-over and is native
			// undo friendly.
			dojo.withGlobal(editor.window,
				 "selectElementChildren", dijit._editor.selection, [node]);
			var html = 	dojo.withGlobal(editor.window,
				 "getSelectedHtml", dijit._editor.selection, [null]);
			dojo.withGlobal(editor.window,
				 "selectElement", dijit._editor.selection, [node]);
			editor.execCommand("inserthtml", html||"");
		}
	}
});

// TODO: for 2.0, split into FontChoice plugin into three separate classes,
// one for each command (and change registry below)
dojo.declare("dijit._editor.plugins.FontChoice", dijit._editor._Plugin,{
	// summary:
	//		This plugin provides three drop downs for setting style in the editor
	//		(font, font size, and format block), as controlled by command.
	//
	// description:
	//		The commands provided by this plugin are:
	//
	//		* fontName
	//	|		Provides a drop down to select from a list of font names
	//		* fontSize
	//	|		Provides a drop down to select from a list of font sizes
	//		* formatBlock
	//	|		Provides a drop down to select from a list of block styles
	//	|
	//
	//		which can easily be added to an editor by including one or more of the above commands
	//		in the `plugins` attribute as follows:
	//
	//	|	plugins="['fontName','fontSize',...]"
	//
	//		It is possible to override the default dropdown list by providing an Array for the `custom` property when
	//		instantiating this plugin, e.g.
	//
	//	|	plugins="[{name:'dijit._editor.plugins.FontChoice', command:'fontName', custom:['Verdana','Myriad','Garamond']},...]"
	//
	//		Alternatively, for `fontName` only, `generic:true` may be specified to provide a dropdown with
	//		[CSS generic font families](http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families)
	//
	//		Note that the editor is often unable to properly handle font styling information defined outside
	//		the context of the current editor instance, such as pre-populated HTML.

	// useDefaultCommand: [protected] booleam
	//		Override _Plugin.useDefaultCommand...
	//		processing is handled by this plugin, not by dijit.Editor.
	useDefaultCommand: false,

	_initButton: function(){
		// summary:
		//		Overrides _Plugin._initButton(), to initialize the FilteringSelect+label in toolbar,
		//		rather than a simple button.
		// tags:
		//		protected

		// Create the widget to go into the toolbar (the so-called "button")
		var clazz = {
				fontName: dijit._editor.plugins._FontNameDropDown,
				fontSize: dijit._editor.plugins._FontSizeDropDown,
				formatBlock: dijit._editor.plugins._FormatBlockDropDown
			}[this.command],
		params = this.params;

		// For back-compat reasons support setting custom values via "custom" parameter
		// rather than "values" parameter
		if(this.params.custom){
			params.values = this.params.custom;
		}

		var editor = this.editor;
		this.button = new clazz(dojo.delegate({dir: editor.dir, lang: editor.lang}, params));

		// Reflect changes to the drop down in the editor
		this.connect(this.button.select, "onChange", function(choice){
			// User invoked change, since all internal updates set priorityChange to false and will
			// not trigger an onChange event.
			this.editor.focus();

			if(this.command == "fontName" && choice.indexOf(" ") != -1){ choice = "'" + choice + "'"; }

			// Invoke, the editor already normalizes commands called through its
			// execCommand.
			if(this.button._execCommand){
				this.button._execCommand(this.editor, this.command, choice);
			}else{
				this.editor.execCommand(this.command, choice);
			}
		});
	},

	updateState: function(){
		// summary:
		//		Overrides _Plugin.updateState().  This controls updating the menu
		//		options to the right values on state changes in the document (that trigger a
		//		test of the actions.)
		//		It set value of drop down in toolbar to reflect font/font size/format block
		//		of text at current caret position.
		// tags:
		//		protected
		var _e = this.editor;
		var _c = this.command;
		if(!_e || !_e.isLoaded || !_c.length){ return; }

		if(this.button){
			var disabled = this.get("disabled");
			this.button.set("disabled", disabled);
			if(disabled){ return; }
			var value;
			try{
				value = _e.queryCommandValue(_c) || "";
			}catch(e){
				//Firefox may throw error above if the editor is just loaded, ignore it
				value = "";
			}

			// strip off single quotes, if any
			var quoted = dojo.isString(value) && value.match(/'([^']*)'/);
			if(quoted){ value = quoted[1]; }

			if(_c === "formatBlock"){
				if(!value || value == "p"){
					// Some browsers (WebKit) doesn't actually get the tag info right.
					// and IE returns paragraph when in a DIV!, so incorrect a lot,
					// so we have double-check it.
					value = null;
					var elem;
					// Try to find the current element where the caret is.
					var sel = dijit.range.getSelection(this.editor.window);
					if(sel && sel.rangeCount > 0){
						var range = sel.getRangeAt(0);
						if(range){
							elem = range.endContainer;
						}
					}

					// Okay, now see if we can find one of the formatting types we're in.
					while(elem && elem !== _e.editNode && elem !== _e.document){
						var tg = elem.tagName?elem.tagName.toLowerCase():"";
						if(tg && dojo.indexOf(this.button.values, tg) > -1){
							value = tg;
							break;
						}
						elem = elem.parentNode;
					}
					if(!value){
						// Still no value, so lets select 'none'.
						value = "noFormat";
					}
				}else{
					// Check that the block format is one allowed, if not,
					// null it so that it gets set to empty.
					if(dojo.indexOf(this.button.values, value) < 0){
						value = "noFormat";
					}
				}
			}
			if(value !== this.button.get("value")){
				// Set the value, but denote it is not a priority change, so no
				// onchange fires.
				this.button.set('value', value, false);
			}
		}
	}
});

// Register this plugin.
dojo.subscribe(dijit._scopeName + ".Editor.getPlugin",null,function(o){
	if(o.plugin){ return; }
	switch(o.args.name){
	case "fontName": case "fontSize": case "formatBlock":
		o.plugin = new dijit._editor.plugins.FontChoice({
			command: o.args.name,
			plainText: o.args.plainText?o.args.plainText:false
		});
	}
});

}

if(!dojo._hasResource["dojox.editor.plugins.Preview"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.editor.plugins.Preview"] = true;
dojo.provide("dojox.editor.plugins.Preview");







dojo.declare("dojox.editor.plugins.Preview",dijit._editor._Plugin,{
	//	summary:
	//		This plugin provides Preview cabability to the editor.  When
	//		clicked, the document in the editor frame will displayed in a separate
	//		window/tab

	//	useDefaultCommand [protected]
	//		Over-ride indicating that the command processing is done all by this plugin.
	useDefaultCommand: false,

	// styles: [public] String
	//		A string of CSS styles to apply to the previewed content, if any.
	styles: "",

	// stylesheets: [public] Array
	//		An array of stylesheets to import into the preview, if any.
	stylesheets: null,

	// iconClassPrefix: [const] String
	//		The CSS class name for the button node icon.
	iconClassPrefix: "dijitAdditionalEditorIcon",

	_initButton: function(){
		// summary:
		//		Over-ride for creation of the preview button.
		this._nlsResources = dojo.i18n.getLocalization("dojox.editor.plugins", "Preview");
		this.button = new dijit.form.Button({
			label: this._nlsResources["preview"],
			showLabel: false,
			iconClass: this.iconClassPrefix + " " + this.iconClassPrefix + "Preview",
			tabIndex: "-1",
			onClick: dojo.hitch(this, "_preview")
		});
	},

	setEditor: function(editor){
		// summary:
		//		Over-ride for the setting of the editor.
		// editor: Object
		//		The editor to configure for this plugin to use.
		this.editor = editor;
		this._initButton();
	},

	updateState: function(){
		// summary:
		//		Over-ride for button state control for disabled to work.
		this.button.set("disabled", this.get("disabled"));
	},
	
	_preview: function(){
		// summary:
		//		Function to trigger previewing of the editor document
		// tags:
		//		private
		try{
			var content = this.editor.get("value");
			var head = "\t\t<meta http-equiv='Content-Type' content='text/html; charset='UTF-8'>\n";
			var i;
			// Apply the stylesheets, then apply the styles.
			if(this.stylesheets){
				for(i = 0; i < this.stylesheets.length; i++){
					head += "\t\t<link rel='stylesheet' type='text/css' href='" + this.stylesheets[i] + "'>\n";
				}
			}
			if(this.styles){
				head += ("\t\t<style>" + this.styles + "</style>\n");
			}
			content = "<html>\n\t<head>\n" + head + "\t</head>\n\t<body>\n" + content + "\n\t</body>\n</html>";
			var win = window.open("javascript: ''", this._nlsResources["preview"], "status=1,menubar=0,location=0,toolbar=0");
			win.document.open();
			win.document.write(content);
			win.document.close();

		}catch(e){
			console.warn(e);
		}
	}
});

// Register this plugin.
dojo.subscribe(dijit._scopeName + ".Editor.getPlugin",null,function(o){
	if(o.plugin){ return; }
	var name = o.args.name.toLowerCase();
	if(name === "preview"){
		o.plugin = new dojox.editor.plugins.Preview({
			styles: ("styles" in o.args)?o.args.styles:"",
			stylesheets: ("stylesheets" in o.args)? o.args.stylesheets:null
		});
	}
});

}

if(!dojo._hasResource["dijit.form._FormSelectWidget"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form._FormSelectWidget"] = true;
dojo.provide("dijit.form._FormSelectWidget");





/*=====
dijit.form.__SelectOption = function(){
	// value: String
	//		The value of the option.  Setting to empty (or missing) will
	//		place a separator at that location
	// label: String
	//		The label for our option.  It can contain html tags.
	// selected: Boolean
	//		Whether or not we are a selected option
	// disabled: Boolean
	//		Whether or not this specific option is disabled
	this.value = value;
	this.label = label;
	this.selected = selected;
	this.disabled = disabled;
}
=====*/

dojo.declare("dijit.form._FormSelectWidget", dijit.form._FormValueWidget, {
	// summary:
	//		Extends _FormValueWidget in order to provide "select-specific"
	//		values - i.e., those values that are unique to <select> elements.
	//		This also provides the mechanism for reading the elements from
	//		a store, if desired.

	// multiple: [const] Boolean
	//		Whether or not we are multi-valued
	multiple: false,

	// options: dijit.form.__SelectOption[]
	//		The set of options for our select item.  Roughly corresponds to
	//		the html <option> tag.
	options: null,

	// store: dojo.data.api.Identity
	//		A store which, at the very least impelements dojo.data.api.Identity
	//		to use for getting our list of options - rather than reading them
	//		from the <option> html tags.
	store: null,

	// query: object
	//		A query to use when fetching items from our store
	query: null,

	// queryOptions: object
	//		Query options to use when fetching from the store
	queryOptions: null,

	// onFetch: Function
	//		A callback to do with an onFetch - but before any items are actually
	//		iterated over (i.e. to filter even futher what you want to add)
	onFetch: null,

	// sortByLabel: Boolean
	//		Flag to sort the options returned from a store by the label of
	//		the store.
	sortByLabel: true,


	// loadChildrenOnOpen: Boolean
	//		By default loadChildren is called when the items are fetched from the
	//		store.  This property allows delaying loadChildren (and the creation
	//		of the options/menuitems) until the user clicks the button to open the
	//		dropdown.
	loadChildrenOnOpen: false,

	getOptions: function(/*anything*/ valueOrIdx){
		// summary:
		//		Returns a given option (or options).
		// valueOrIdx:
		//		If passed in as a string, that string is used to look up the option
		//		in the array of options - based on the value property.
		//		(See dijit.form.__SelectOption).
		//
		//		If passed in a number, then the option with the given index (0-based)
		//		within this select will be returned.
		//
		//		If passed in a dijit.form.__SelectOption, the same option will be
		//		returned if and only if it exists within this select.
		//
		//		If passed an array, then an array will be returned with each element
		//		in the array being looked up.
		//
		//		If not passed a value, then all options will be returned
		//
		// returns:
		//		The option corresponding with the given value or index.  null
		//		is returned if any of the following are true:
		//			- A string value is passed in which doesn't exist
		//			- An index is passed in which is outside the bounds of the array of options
		//			- A dijit.form.__SelectOption is passed in which is not a part of the select

		// NOTE: the compare for passing in a dijit.form.__SelectOption checks
		//		if the value property matches - NOT if the exact option exists
		// NOTE: if passing in an array, null elements will be placed in the returned
		//		array when a value is not found.
		var lookupValue = valueOrIdx, opts = this.options || [], l = opts.length;

		if(lookupValue === undefined){
			return opts; // dijit.form.__SelectOption[]
		}
		if(dojo.isArray(lookupValue)){
			return dojo.map(lookupValue, "return this.getOptions(item);", this); // dijit.form.__SelectOption[]
		}
		if(dojo.isObject(valueOrIdx)){
			// We were passed an option - so see if it's in our array (directly),
			// and if it's not, try and find it by value.
			if(!dojo.some(this.options, function(o, idx){
				if(o === lookupValue ||
					(o.value && o.value === lookupValue.value)){
					lookupValue = idx;
					return true;
				}
				return false;
			})){
				lookupValue = -1;
			}
		}
		if(typeof lookupValue == "string"){
			for(var i=0; i<l; i++){
				if(opts[i].value === lookupValue){
					lookupValue = i;
					break;
				}
			}
		}
		if(typeof lookupValue == "number" && lookupValue >= 0 && lookupValue < l){
			return this.options[lookupValue] // dijit.form.__SelectOption
		}
		return null; // null
	},

	addOption: function(/*dijit.form.__SelectOption|dijit.form.__SelectOption[]*/ option){
		// summary:
		//		Adds an option or options to the end of the select.  If value
		//		of the option is empty or missing, a separator is created instead.
		//		Passing in an array of options will yield slightly better performance
		//		since the children are only loaded once.
		if(!dojo.isArray(option)){ option = [option]; }
		dojo.forEach(option, function(i){
			if(i && dojo.isObject(i)){
				this.options.push(i);
			}
		}, this);
		this._loadChildren();
	},

	removeOption: function(/*String|dijit.form.__SelectOption|Number|Array*/ valueOrIdx){
		// summary:
		//		Removes the given option or options.  You can remove by string
		//		(in which case the value is removed), number (in which case the
		//		index in the options array is removed), or select option (in
		//		which case, the select option with a matching value is removed).
		//		You can also pass in an array of those values for a slightly
		//		better performance since the children are only loaded once.
		if(!dojo.isArray(valueOrIdx)){ valueOrIdx = [valueOrIdx]; }
		var oldOpts = this.getOptions(valueOrIdx);
		dojo.forEach(oldOpts, function(i){
			// We can get null back in our array - if our option was not found.  In
			// that case, we don't want to blow up...
			if(i){
				this.options = dojo.filter(this.options, function(node, idx){
					return (node.value !== i.value || node.label !== i.label);
				});
				this._removeOptionItem(i);
			}
		}, this);
		this._loadChildren();
	},

	updateOption: function(/*dijit.form.__SelectOption|dijit.form.__SelectOption[]*/ newOption){
		// summary:
		//		Updates the values of the given option.  The option to update
		//		is matched based on the value of the entered option.  Passing
		//		in an array of new options will yeild better performance since
		//		the children will only be loaded once.
		if(!dojo.isArray(newOption)){ newOption = [newOption]; }
		dojo.forEach(newOption, function(i){
			var oldOpt = this.getOptions(i), k;
			if(oldOpt){
				for(k in i){ oldOpt[k] = i[k]; }
			}
		}, this);
		this._loadChildren();
	},

	setStore: function(/*dojo.data.api.Identity*/ store,
						/*anything?*/ selectedValue,
						/*Object?*/ fetchArgs){
		// summary:
		//		Sets the store you would like to use with this select widget.
		//		The selected value is the value of the new store to set.  This
		//		function returns the original store, in case you want to reuse
		//		it or something.
		// store: dojo.data.api.Identity
		//		The store you would like to use - it MUST implement Identity,
		//		and MAY implement Notification.
		// selectedValue: anything?
		//		The value that this widget should set itself to *after* the store
		//		has been loaded
		// fetchArgs: Object?
		//		The arguments that will be passed to the store's fetch() function
		var oStore = this.store;
		fetchArgs = fetchArgs || {};
		if(oStore !== store){
			// Our store has changed, so update our notifications
			dojo.forEach(this._notifyConnections || [], dojo.disconnect);
			delete this._notifyConnections;
			if(store && store.getFeatures()["dojo.data.api.Notification"]){
				this._notifyConnections = [
					dojo.connect(store, "onNew", this, "_onNewItem"),
					dojo.connect(store, "onDelete", this, "_onDeleteItem"),
					dojo.connect(store, "onSet", this, "_onSetItem")
				];
			}
			this._set("store", store);
		}

		// Turn off change notifications while we make all these changes
		this._onChangeActive = false;

		// Remove existing options (if there are any)
		if(this.options && this.options.length){
			this.removeOption(this.options);
		}

		// Add our new options
		if(store){
			this._loadingStore = true;
			store.fetch(dojo.delegate(fetchArgs, {
				onComplete: function(items, opts){
					if(this.sortByLabel && !fetchArgs.sort && items.length){
						items.sort(dojo.data.util.sorter.createSortFunction([{
							attribute: store.getLabelAttributes(items[0])[0]
						}], store));
					}
	
					if(fetchArgs.onFetch){
							items = fetchArgs.onFetch.call(this, items, opts);
					}
					// TODO: Add these guys as a batch, instead of separately
					dojo.forEach(items, function(i){
						this._addOptionForItem(i);
					}, this);
	
					// Set our value (which might be undefined), and then tweak
					// it to send a change event with the real value
					this._loadingStore = false;
						this.set("value", "_pendingValue" in this ? this._pendingValue : selectedValue);
					delete this._pendingValue;
	
					if(!this.loadChildrenOnOpen){
						this._loadChildren();
					}else{
						this._pseudoLoadChildren(items);
					}
					this._fetchedWith = opts;
					this._lastValueReported = this.multiple ? [] : null;
					this._onChangeActive = true;
					this.onSetStore();
					this._handleOnChange(this.value);
				},
				scope: this
			}));
		}else{
			delete this._fetchedWith;
		}
		return oStore;	// dojo.data.api.Identity
	},

	// TODO: implement set() and watch() for store and query, although not sure how to handle
	// setting them individually rather than together (as in setStore() above)

	_setValueAttr: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){
		// summary:
		//		set the value of the widget.
		//		If a string is passed, then we set our value from looking it up.
		if(this._loadingStore){
			// Our store is loading - so save our value, and we'll set it when
			// we're done
			this._pendingValue = newValue;
			return;
		}
		var opts = this.getOptions() || [];
		if(!dojo.isArray(newValue)){
			newValue = [newValue];
		}
		dojo.forEach(newValue, function(i, idx){
			if(!dojo.isObject(i)){
				i = i + "";
			}
			if(typeof i === "string"){
				newValue[idx] = dojo.filter(opts, function(node){
					return node.value === i;
				})[0] || {value: "", label: ""};
			}
		}, this);

		// Make sure some sane default is set
		newValue = dojo.filter(newValue, function(i){ return i && i.value; });
		if(!this.multiple && (!newValue[0] || !newValue[0].value) && opts.length){
			newValue[0] = opts[0];
		}
		dojo.forEach(opts, function(i){
			i.selected = dojo.some(newValue, function(v){ return v.value === i.value; });
		});
		var val = dojo.map(newValue, function(i){ return i.value; }),
			disp = dojo.map(newValue, function(i){ return i.label; });

		this._set("value", this.multiple ? val : val[0]);
		this._setDisplay(this.multiple ? disp : disp[0]);
		this._updateSelection();
		this._handleOnChange(this.value, priorityChange);
	},

	_getDisplayedValueAttr: function(){
		// summary:
		//		returns the displayed value of the widget
		var val = this.get("value");
		if(!dojo.isArray(val)){
			val = [val];
		}
		var ret = dojo.map(this.getOptions(val), function(v){
			if(v && "label" in v){
				return v.label;
			}else if(v){
				return v.value;
			}
			return null;
		}, this);
		return this.multiple ? ret : ret[0];
	},

	_loadChildren: function(){
		// summary:
		//		Loads the children represented by this widget's options.
		//		reset the menu to make it populatable on the next click
		if(this._loadingStore){ return; }
		dojo.forEach(this._getChildren(), function(child){
			child.destroyRecursive();
		});
		// Add each menu item
		dojo.forEach(this.options, this._addOptionItem, this);

		// Update states
		this._updateSelection();
	},

	_updateSelection: function(){
		// summary:
		//		Sets the "selected" class on the item for styling purposes
		this._set("value", this._getValueFromOpts());
		var val = this.value;
		if(!dojo.isArray(val)){
			val = [val];
		}
		if(val && val[0]){
			dojo.forEach(this._getChildren(), function(child){
				var isSelected = dojo.some(val, function(v){
					return child.option && (v === child.option.value);
				});
				dojo.toggleClass(child.domNode, this.baseClass + "SelectedOption", isSelected);
				dijit.setWaiState(child.domNode, "selected", isSelected);
			}, this);
		}
	},

	_getValueFromOpts: function(){
		// summary:
		//		Returns the value of the widget by reading the options for
		//		the selected flag
		var opts = this.getOptions() || [];
		if(!this.multiple && opts.length){
			// Mirror what a select does - choose the first one
			var opt = dojo.filter(opts, function(i){
				return i.selected;
			})[0];
			if(opt && opt.value){
				return opt.value
			}else{
				opts[0].selected = true;
				return opts[0].value;
			}
		}else if(this.multiple){
			// Set value to be the sum of all selected
			return dojo.map(dojo.filter(opts, function(i){
				return i.selected;
			}), function(i){
				return i.value;
			}) || [];
		}
		return "";
	},

	// Internal functions to call when we have store notifications come in
	_onNewItem: function(/*item*/ item, /*Object?*/ parentInfo){
		if(!parentInfo || !parentInfo.parent){
			// Only add it if we are top-level
			this._addOptionForItem(item);
		}
	},
	_onDeleteItem: function(/*item*/ item){
		var store = this.store;
		this.removeOption(store.getIdentity(item));
	},
	_onSetItem: function(/*item*/ item){
		this.updateOption(this._getOptionObjForItem(item));
	},

	_getOptionObjForItem: function(item){
		// summary:
		//		Returns an option object based off the given item.  The "value"
		//		of the option item will be the identity of the item, the "label"
		//		of the option will be the label of the item.  If the item contains
		//		children, the children value of the item will be set
		var store = this.store, label = store.getLabel(item),
			value = (label ? store.getIdentity(item) : null);
		return {value: value, label: label, item:item}; // dijit.form.__SelectOption
	},

	_addOptionForItem: function(/*item*/ item){
		// summary:
		//		Creates (and adds) the option for the given item
		var store = this.store;
		if(!store.isItemLoaded(item)){
			// We are not loaded - so let's load it and add later
			store.loadItem({item: item, onComplete: function(i){
				this._addOptionForItem(item);
			},
			scope: this});
			return;
		}
		var newOpt = this._getOptionObjForItem(item);
		this.addOption(newOpt);
	},

	constructor: function(/*Object*/ keywordArgs){
		// summary:
		//		Saves off our value, if we have an initial one set so we
		//		can use it if we have a store as well (see startup())
		this._oValue = (keywordArgs || {}).value || null;
	},

	buildRendering: function(){
		this.inherited(arguments);
		dojo.setSelectable(this.focusNode, false);
	},

	_fillContent: function(){
		// summary:
		//		Loads our options and sets up our dropdown correctly.  We
		//		don't want any content, so we don't call any inherit chain
		//		function.
		var opts = this.options;
		if(!opts){
			opts = this.options = this.srcNodeRef ? dojo.query(">",
						this.srcNodeRef).map(function(node){
							if(node.getAttribute("type") === "separator"){
								return { value: "", label: "", selected: false, disabled: false };
							}
							return {
								value: (node.getAttribute("data-" + dojo._scopeName + "-value") || node.getAttribute("value")),
										label: String(node.innerHTML),
								// FIXME: disabled and selected are not valid on complex markup children (which is why we're
								// looking for data-dojo-value above.  perhaps we should data-dojo-props="" this whole thing?)
								// decide before 1.6
										selected: node.getAttribute("selected") || false,
								disabled: node.getAttribute("disabled") || false
							};
						}, this) : [];
		}
		if(!this.value){
			this._set("value", this._getValueFromOpts());
		}else if(this.multiple && typeof this.value == "string"){
			this_set("value", this.value.split(","));
		}
	},

	postCreate: function(){
		// summary:
		//		sets up our event handling that we need for functioning
		//		as a select
		this.inherited(arguments);

		// Make our event connections for updating state
		this.connect(this, "onChange", "_updateSelection");
		this.connect(this, "startup", "_loadChildren");

		this._setValueAttr(this.value, null);
	},

	startup: function(){
		// summary:
		//		Connects in our store, if we have one defined
		this.inherited(arguments);
		var store = this.store, fetchArgs = {};
		dojo.forEach(["query", "queryOptions", "onFetch"], function(i){
			if(this[i]){
				fetchArgs[i] = this[i];
			}
			delete this[i];
		}, this);
		if(store && store.getFeatures()["dojo.data.api.Identity"]){
			// Temporarily set our store to null so that it will get set
			// and connected appropriately
			this.store = null;
			this.setStore(store, this._oValue, fetchArgs);
		}
	},

	destroy: function(){
		// summary:
		//		Clean up our connections
		dojo.forEach(this._notifyConnections || [], dojo.disconnect);
		this.inherited(arguments);
	},

	_addOptionItem: function(/*dijit.form.__SelectOption*/ option){
		// summary:
		//		User-overridable function which, for the given option, adds an
		//		item to the select.  If the option doesn't have a value, then a
		//		separator is added in that place.  Make sure to store the option
		//		in the created option widget.
	},

	_removeOptionItem: function(/*dijit.form.__SelectOption*/ option){
		// summary:
		//		User-overridable function which, for the given option, removes
		//		its item from the select.
	},

	_setDisplay: function(/*String or String[]*/ newDisplay){
		// summary:
		//		Overridable function which will set the display for the
		//		widget.  newDisplay is either a string (in the case of
		//		single selects) or array of strings (in the case of multi-selects)
	},

	_getChildren: function(){
		// summary:
		//		Overridable function to return the children that this widget contains.
		return [];
	},

	_getSelectedOptionsAttr: function(){
		// summary:
		//		hooks into this.attr to provide a mechanism for getting the
		//		option items for the current value of the widget.
		return this.getOptions(this.get("value"));
	},

	_pseudoLoadChildren: function(/*item[]*/ items){
		// summary:
		//		a function that will "fake" loading children, if needed, and
		//		if we have set to not load children until the widget opens.
		// items:
		//		An array of items that will be loaded, when needed
	},

	onSetStore: function(){
		// summary:
		//		a function that can be connected to in order to receive a
		//		notification that the store has finished loading and all options
		//		from that store are available
	}
});

}

if(!dojo._hasResource["dijit.form.Select"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.Select"] = true;
dojo.provide("dijit.form.Select");








dojo.declare("dijit.form._SelectMenu", dijit.Menu, {
	// summary:
	//		An internally-used menu for dropdown that allows us a vertical scrollbar
	buildRendering: function(){
		// summary:
		//		Stub in our own changes, so that our domNode is not a table
		//		otherwise, we won't respond correctly to heights/overflows
		this.inherited(arguments);
		var o = (this.menuTableNode = this.domNode);
		var n = (this.domNode = dojo.create("div", {style: {overflowX: "hidden", overflowY: "scroll"}}));
		if(o.parentNode){
			o.parentNode.replaceChild(n, o);
		}
		dojo.removeClass(o, "dijitMenuTable");
		n.className = o.className + " dijitSelectMenu";
		o.className = "dijitReset dijitMenuTable";
		dijit.setWaiRole(o,"listbox");
		dijit.setWaiRole(n,"presentation");
		n.appendChild(o);
	},

	postCreate: function(){
		// summary:
		//              stop mousemove from selecting text on IE to be consistent with other browsers

		this.inherited(arguments);

		this.connect(this.domNode, "onmousemove", dojo.stopEvent);
	},

	resize: function(/*Object*/ mb){
		// summary:
		//		Overridden so that we are able to handle resizing our
		//		internal widget.  Note that this is not a "full" resize
		//		implementation - it only works correctly if you pass it a
		//		marginBox.
		//
		// mb: Object
		//		The margin box to set this dropdown to.
		if(mb){
			dojo.marginBox(this.domNode, mb);
			if("w" in mb){
				// We've explicitly set the wrapper <div>'s width, so set <table> width to match.
				// 100% is safer than a pixel value because there may be a scroll bar with
				// browser/OS specific width.
				this.menuTableNode.style.width = "100%";
			}
		}
	}
});

dojo.declare("dijit.form.Select", [dijit.form._FormSelectWidget, dijit._HasDropDown], {
	// summary:
	//		This is a "styleable" select box - it is basically a DropDownButton which
	//		can take a <select> as its input.

	baseClass: "dijitSelect",

	templateString: dojo.cache("dijit.form", "templates/Select.html", "<table class=\"dijit dijitReset dijitInline dijitLeft\"\r\n\tdojoAttachPoint=\"_buttonNode,tableNode,focusNode\" cellspacing='0' cellpadding='0'\r\n\trole=\"combobox\" aria-haspopup=\"true\"\r\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\r\n\t\t><td class=\"dijitReset dijitStretch dijitButtonContents dijitButtonNode\" role=\"presentation\"\r\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"  dojoAttachPoint=\"containerNode,_popupStateNode\"></span\r\n\t\t\t><input type=\"hidden\" ${!nameAttrSetting} dojoAttachPoint=\"valueNode\" value=\"${value}\" aria-hidden=\"true\"\r\n\t\t/></td><td class=\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton\"\r\n\t\t\t\tdojoAttachPoint=\"titleNode\" role=\"presentation\"\r\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\r\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\r\n\t\t></td\r\n\t></tr></tbody\r\n></table>\r\n"),

	// attributeMap: Object
	//		Add in our style to be applied to the focus node
	attributeMap: dojo.mixin(dojo.clone(dijit.form._FormSelectWidget.prototype.attributeMap),{style:"tableNode"}),

	// required: Boolean
	//		Can be true or false, default is false.
	required: false,

	// state: String
	//		Shows current state (ie, validation result) of input (Normal, Warning, or Error)
	state: "",

	// message: String
	//		Currently displayed error/prompt message
	message: "",

	//	tooltipPosition: String[]
	//		See description of dijit.Tooltip.defaultPosition for details on this parameter.
	tooltipPosition: [],

	// emptyLabel: string
	//		What to display in an "empty" dropdown
	emptyLabel: "&nbsp;",

	// _isLoaded: Boolean
	//		Whether or not we have been loaded
	_isLoaded: false,

	// _childrenLoaded: Boolean
	//		Whether or not our children have been loaded
	_childrenLoaded: false,

	_fillContent: function(){
		// summary:
		//		Set the value to be the first, or the selected index
		this.inherited(arguments);
		// set value from selected option
		if(this.options.length && !this.value && this.srcNodeRef){
			var si = this.srcNodeRef.selectedIndex || 0; // || 0 needed for when srcNodeRef is not a SELECT
			this.value = this.options[si >= 0 ? si : 0].value;
		}
		// Create the dropDown widget
		this.dropDown = new dijit.form._SelectMenu({id: this.id + "_menu"});
		dojo.addClass(this.dropDown.domNode, this.baseClass + "Menu");
	},

	_getMenuItemForOption: function(/*dijit.form.__SelectOption*/ option){
		// summary:
		//		For the given option, return the menu item that should be
		//		used to display it.  This can be overridden as needed
		if(!option.value && !option.label){
			// We are a separator (no label set for it)
			return new dijit.MenuSeparator();
		}else{
			// Just a regular menu option
			var click = dojo.hitch(this, "_setValueAttr", option);
			var item = new dijit.MenuItem({
				option: option,
				label: option.label || this.emptyLabel,
				onClick: click,
				disabled: option.disabled || false
			});
			dijit.setWaiRole(item.focusNode, "listitem");
			return item;
		}
	},

	_addOptionItem: function(/*dijit.form.__SelectOption*/ option){
		// summary:
		//		For the given option, add an option to our dropdown.
		//		If the option doesn't have a value, then a separator is added
		//		in that place.
		if(this.dropDown){
			this.dropDown.addChild(this._getMenuItemForOption(option));
		}
	},

	_getChildren: function(){
		if(!this.dropDown){
			return [];
		}
		return this.dropDown.getChildren();
	},

	_loadChildren: function(/*Boolean*/ loadMenuItems){
		// summary:
		//		Resets the menu and the length attribute of the button - and
		//		ensures that the label is appropriately set.
		//	loadMenuItems: Boolean
		//		actually loads the child menu items - we only do this when we are
		//		populating for showing the dropdown.

		if(loadMenuItems === true){
			// this.inherited destroys this.dropDown's child widgets (MenuItems).
			// Avoid this.dropDown (Menu widget) having a pointer to a destroyed widget (which will cause
			// issues later in _setSelected). (see #10296)
			if(this.dropDown){
				delete this.dropDown.focusedChild;
			}
			if(this.options.length){
				this.inherited(arguments);
			}else{
				// Drop down menu is blank but add one blank entry just so something appears on the screen
				// to let users know that they are no choices (mimicing native select behavior)
				dojo.forEach(this._getChildren(), function(child){ child.destroyRecursive(); });
				var item = new dijit.MenuItem({label: "&nbsp;"});
				this.dropDown.addChild(item);
			}
		}else{
			this._updateSelection();
		}

		this._isLoaded = false;
		this._childrenLoaded = true;

		if(!this._loadingStore){
			// Don't call this if we are loading - since we will handle it later
			this._setValueAttr(this.value);
		}
	},

	_setValueAttr: function(value){
		this.inherited(arguments);
		dojo.attr(this.valueNode, "value", this.get("value"));
	},

	_setDisplay: function(/*String*/ newDisplay){
		// summary:
		//		sets the display for the given value (or values)
		var lbl = newDisplay || this.emptyLabel;
		this.containerNode.innerHTML = '<span class="dijitReset dijitInline ' + this.baseClass + 'Label">' + lbl + '</span>';
		dijit.setWaiState(this.focusNode, "valuetext", lbl);
	},

	validate: function(/*Boolean*/ isFocused){
		// summary:
		//		Called by oninit, onblur, and onkeypress.
		// description:
		//		Show missing or invalid messages if appropriate, and highlight textbox field.
		//		Used when a select is initially set to no value and the user is required to
		//		set the value.
		
		var isValid = this.isValid(isFocused);
		this._set("state", isValid ? "" : "Error");
		dijit.setWaiState(this.focusNode, "invalid", isValid ? "false" : "true");
		var message = isValid ? "" : this._missingMsg;
		if(this.message !== message){
			this._set("message", message);
			dijit.hideTooltip(this.domNode);
			if(message){
				dijit.showTooltip(message, this.domNode, this.tooltipPosition, !this.isLeftToRight());
			}
		}
		return isValid;
	},

	isValid: function(/*Boolean*/ isFocused){
		// summary:
		//		Whether or not this is a valid value.  The only way a Select
		//		can be invalid is when it's required but nothing is selected.
		return (!this.required || this.value === 0 || !(/^\s*$/.test(this.value || ""))); // handle value is null or undefined
	},

	reset: function(){
		// summary:
		//		Overridden so that the state will be cleared.
		this.inherited(arguments);
		dijit.hideTooltip(this.domNode);
		this._set("state", "");
		this._set("message", "")
	},

	postMixInProperties: function(){
		// summary:
		//		set the missing message
		this.inherited(arguments);
		this._missingMsg = dojo.i18n.getLocalization("dijit.form", "validate",
									this.lang).missingMessage;
	},

	postCreate: function(){
		// summary:
		//		stop mousemove from selecting text on IE to be consistent with other browsers

		this.inherited(arguments);

		this.connect(this.domNode, "onmousemove", dojo.stopEvent);
	},

	_setStyleAttr: function(/*String||Object*/ value){
		this.inherited(arguments);
		dojo.toggleClass(this.domNode, this.baseClass + "FixedWidth", !!this.tableNode.style.width);
	},

	isLoaded: function(){
		return this._isLoaded;
	},

	loadDropDown: function(/*Function*/ loadCallback){
		// summary:
		//		populates the menu
		this._loadChildren(true);
		this._isLoaded = true;
		loadCallback();
	},

	closeDropDown: function(){
		// overriding _HasDropDown.closeDropDown()
		this.inherited(arguments);

		if(this.dropDown && this.dropDown.menuTableNode){
			// Erase possible width: 100% setting from _SelectMenu.resize().
			// Leaving it would interfere with the next openDropDown() call, which
			// queries the natural size of the drop down.
			this.dropDown.menuTableNode.style.width = "";
		}
	},

	uninitialize: function(preserveDom){
		if(this.dropDown && !this.dropDown._destroyed){
			this.dropDown.destroyRecursive(preserveDom);
			delete this.dropDown;
		}
		this.inherited(arguments);
	}
});

}

if(!dojo._hasResource["dijit._editor.plugins.LinkDialog"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._editor.plugins.LinkDialog"] = true;
dojo.provide("dijit._editor.plugins.LinkDialog");














dojo.declare("dijit._editor.plugins.LinkDialog", dijit._editor._Plugin, {
	// summary:
	//		This plugin provides the basis for an 'anchor' (link) dialog and an extension of it
	//		provides the image link dialog.
	//
	// description:
	//		The command provided by this plugin is:
	//		* createLink

	// Override _Plugin.buttonClass.   This plugin is controlled by a DropDownButton
	// (which triggers a TooltipDialog).
	buttonClass: dijit.form.DropDownButton,

	// Override _Plugin.useDefaultCommand... processing is handled by this plugin, not by dijit.Editor.
	useDefaultCommand: false,

	// urlRegExp: [protected] String
	//		Used for validating input as correct URL.  While file:// urls are not terribly
	//		useful, they are technically valid.
	urlRegExp: "((https?|ftps?|file)\\://|\./|/|)(/[a-zA-Z]{1,1}:/|)(((?:(?:[\\da-zA-Z](?:[-\\da-zA-Z]{0,61}[\\da-zA-Z])?)\\.)*(?:[a-zA-Z](?:[-\\da-zA-Z]{0,80}[\\da-zA-Z])?)\\.?)|(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])|(0[xX]0*[\\da-fA-F]?[\\da-fA-F]\\.){3}0[xX]0*[\\da-fA-F]?[\\da-fA-F]|(0+[0-3][0-7][0-7]\\.){3}0+[0-3][0-7][0-7]|(0|[1-9]\\d{0,8}|[1-3]\\d{9}|4[01]\\d{8}|42[0-8]\\d{7}|429[0-3]\\d{6}|4294[0-8]\\d{5}|42949[0-5]\\d{4}|429496[0-6]\\d{3}|4294967[01]\\d{2}|42949672[0-8]\\d|429496729[0-5])|0[xX]0*[\\da-fA-F]{1,8}|([\\da-fA-F]{1,4}\\:){7}[\\da-fA-F]{1,4}|([\\da-fA-F]{1,4}\\:){6}((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])))(\\:\\d+)?(/(?:[^?#\\s/]+/)*(?:[^?#\\s/]{0,}(?:\\?[^?#\\s/]*)?(?:#.*)?)?)?",

	// emailRegExp: [protected] String
	//		Used for validating input as correct email address.  Taken from dojox.validate
	emailRegExp:  "<?(mailto\\:)([!#-'*+\\-\\/-9=?A-Z^-~]+[.])*[!#-'*+\\-\\/-9=?A-Z^-~]+" /*username*/ + "@" +
        "((?:(?:[\\da-zA-Z](?:[-\\da-zA-Z]{0,61}[\\da-zA-Z])?)\\.)+(?:[a-zA-Z](?:[-\\da-zA-Z]{0,6}[\\da-zA-Z])?)\\.?)|localhost|^[^-][a-zA-Z0-9_-]*>?",	// host.

	// htmlTemplate: [protected] String
	//		String used for templating the HTML to insert at the desired point.
	htmlTemplate: "<a href=\"${urlInput}\" _djrealurl=\"${urlInput}\"" +
		" target=\"${targetSelect}\"" +
		">${textInput}</a>",

	// tag: [protected] String
	//		Tag used for the link type.
	tag: "a",

	// _hostRxp [private] RegExp
	//		Regular expression used to validate url fragments (ip address, hostname, etc)
	_hostRxp:  new RegExp("^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$"),

	// _userAtRxp [private] RegExp
	//		Regular expression used to validate e-mail address fragment.
	_userAtRxp: new RegExp("^([!#-'*+\\-\\/-9=?A-Z^-~]+[.])*[!#-'*+\\-\\/-9=?A-Z^-~]+@", "i"),

	// linkDialogTemplate: [protected] String
	//		Template for contents of TooltipDialog to pick URL
	linkDialogTemplate: [
		"<table><tr><td>",
		"<label for='${id}_urlInput'>${url}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='true' " +
		"id='${id}_urlInput' name='urlInput' intermediateChanges='true'/>",
		"</td></tr><tr><td>",
		"<label for='${id}_textInput'>${text}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='true' id='${id}_textInput' " +
		"name='textInput' intermediateChanges='true'/>",
		"</td></tr><tr><td>",
		"<label for='${id}_targetSelect'>${target}</label>",
		"</td><td>",
		"<select id='${id}_targetSelect' name='targetSelect' dojoType='dijit.form.Select'>",
		"<option selected='selected' value='_self'>${currentWindow}</option>",
		"<option value='_blank'>${newWindow}</option>",
		"<option value='_top'>${topWindow}</option>",
		"<option value='_parent'>${parentWindow}</option>",
		"</select>",
		"</td></tr><tr><td colspan='2'>",
		"<button dojoType='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>",
		"<button dojoType='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>",
		"</td></tr></table>"
	].join(""),

	_initButton: function(){
		// Override _Plugin._initButton() to initialize DropDownButton and TooltipDialog.
		var _this = this;
		this.tag = this.command == 'insertImage' ? 'img' : 'a';
		var messages = dojo.mixin(dojo.i18n.getLocalization("dijit", "common", this.lang),
			dojo.i18n.getLocalization("dijit._editor", "LinkDialog", this.lang));
		var dropDown = (this.dropDown = new dijit.TooltipDialog({
			title: messages[this.command + "Title"],
			execute: dojo.hitch(this, "setValue"),
			onOpen: function(){
				_this._onOpenDialog();
				dijit.TooltipDialog.prototype.onOpen.apply(this, arguments);
			},
			onCancel: function(){
				setTimeout(dojo.hitch(_this, "_onCloseDialog"),0);
			}
		}));
		messages.urlRegExp = this.urlRegExp;
		messages.id = dijit.getUniqueId(this.editor.id);
		this._uniqueId = messages.id;
		this._setContent(dropDown.title +
			"<div style='border-bottom: 1px black solid;padding-bottom:2pt;margin-bottom:4pt'></div>" +
			dojo.string.substitute(this.linkDialogTemplate, messages));
		dropDown.startup();
		this._urlInput = dijit.byId(this._uniqueId + "_urlInput");
		this._textInput = dijit.byId(this._uniqueId + "_textInput");
		this._setButton = dijit.byId(this._uniqueId + "_setButton");
		this.connect(dijit.byId(this._uniqueId + "_cancelButton"), "onClick", function(){
			this.dropDown.onCancel();
		});
		if(this._urlInput){
			this.connect(this._urlInput, "onChange", "_checkAndFixInput");
		}
		if(this._textInput){
			this.connect(this._textInput, "onChange", "_checkAndFixInput");
		}

		// Build up the dual check for http/https/file:, and mailto formats.
		this._urlRegExp = new RegExp("^" + this.urlRegExp + "$", "i");
		this._emailRegExp = new RegExp("^" + this.emailRegExp + "$", "i");
		this._urlInput.isValid = dojo.hitch(this, function(){
			// Function over-ride of isValid to test if the input matches a url or a mailto style link.
			var value = this._urlInput.get("value");
			return this._urlRegExp.test(value) || this._emailRegExp.test(value);
		});

		this._connectTagEvents();
		this.inherited(arguments);
	},

	_checkAndFixInput: function(){
		// summary:
		//		A function to listen for onChange events and test the input contents
		//		for valid information, such as valid urls with http/https/ftp and if
		//		not present, try and guess if the input url is relative or not, and if
		//		not, append http:// to it.  Also validates other fields as determined by
		//		the internal _isValid function.
		var self = this;
		var url = this._urlInput.get("value");
		var fixupUrl = function(url){
			var appendHttp = false;
			var appendMailto = false;
			if(url && url.length > 1){
				url = dojo.trim(url);
				if(url.indexOf("mailto:") !== 0){
					if(url.indexOf("/") > 0){
						if(url.indexOf("://") === -1){
							// Check that it doesn't start with / or ./, which would
							// imply 'target server relativeness'
							if(url.charAt(0) !== '/' && url.indexOf("./") !== 0){
								if(self._hostRxp.test(url)){
									appendHttp = true;
								}
							}
						}
					}else if(self._userAtRxp.test(url)){
						// If it looks like a foo@, append a mailto.
						appendMailto = true;
					}
				}
			}
			if(appendHttp){
				self._urlInput.set("value", "http://" + url);
			}
			if(appendMailto){
				self._urlInput.set("value", "mailto:" + url);
			}
			self._setButton.set("disabled", !self._isValid());
		};
		if(this._delayedCheck){
			clearTimeout(this._delayedCheck);
			this._delayedCheck = null;
		}
		this._delayedCheck = setTimeout(function(){
			fixupUrl(url);
		}, 250);
	},

	_connectTagEvents: function(){
		// summary:
		//		Over-ridable function that connects tag specific events.
		this.editor.onLoadDeferred.addCallback(dojo.hitch(this, function(){
			this.connect(this.editor.editNode, "ondblclick", this._onDblClick);
		}));
	},

	_isValid: function(){
		// summary:
		//		Internal function to allow validating of the inputs
		//		for a link to determine if set should be disabled or not
		// tags:
		//		protected
		return this._urlInput.isValid() && this._textInput.isValid();
	},

	_setContent: function(staticPanel){
		// summary:
		//		Helper for _initButton above.   Not sure why it's a separate method.
		this.dropDown.set({
			parserScope: "dojo",		// make parser search for dojoType/data-dojo-type even if page is multi-version
			content: staticPanel
		});
	},

	_checkValues: function(args){
		// summary:
		//		Function to check the values in args and 'fix' them up as needed.
		// args: Object
		//		Content being set.
		// tags:
		//		protected
		if(args && args.urlInput){
			args.urlInput = args.urlInput.replace(/"/g, "&quot;");
		}
		return args;
	},

	setValue: function(args){
		// summary:
		//		Callback from the dialog when user presses "set" button.
		// tags:
		//		private
		//TODO: prevent closing popup if the text is empty
		this._onCloseDialog();
		if(dojo.isIE < 9){ //see #4151
			var sel = dijit.range.getSelection(this.editor.window);
			var range = sel.getRangeAt(0);
			var a = range.endContainer;
			if(a.nodeType === 3){
				// Text node, may be the link contents, so check parent.
				// This plugin doesn't really support nested HTML elements
				// in the link, it assumes all link content is text.
				a = a.parentNode;
			}
			if(a && (a.nodeName && a.nodeName.toLowerCase() !== this.tag)){
				// Stll nothing, one last thing to try on IE, as it might be 'img'
				// and thus considered a control.
				a = dojo.withGlobal(this.editor.window,
					"getSelectedElement", dijit._editor.selection, [this.tag]);
			}
			if(a && (a.nodeName && a.nodeName.toLowerCase() === this.tag)){
				// Okay, we do have a match.  IE, for some reason, sometimes pastes before
				// instead of removing the targetted paste-over element, so we unlink the
				// old one first.  If we do not the <a> tag remains, but it has no content,
				// so isn't readily visible (but is wrong for the action).
				if(this.editor.queryCommandEnabled("unlink")){
					// Select all the link childent, then unlink.  The following insert will
					// then replace the selected text.
					dojo.withGlobal(this.editor.window,
						"selectElementChildren", dijit._editor.selection, [a]);
					this.editor.execCommand("unlink");
				}
			}
		}
		// make sure values are properly escaped, etc.
		args = this._checkValues(args);
		this.editor.execCommand('inserthtml',
			dojo.string.substitute(this.htmlTemplate, args));
	},

	_onCloseDialog: function(){
		// summary:
		//		Handler for close event on the dialog
		this.editor.focus();
	},

	_getCurrentValues: function(a){
		// summary:
		//		Over-ride for getting the values to set in the dropdown.
		// a:
		//		The anchor/link to process for data for the dropdown.
		// tags:
		//		protected
		var url, text, target;
		if(a && a.tagName.toLowerCase() === this.tag){
			url = a.getAttribute('_djrealurl') || a.getAttribute('href');
			target = a.getAttribute('target') || "_self";
			text = a.textContent || a.innerText;
			dojo.withGlobal(this.editor.window, "selectElement", dijit._editor.selection, [a, true]);
		}else{
			text = dojo.withGlobal(this.editor.window, dijit._editor.selection.getSelectedText);
		}
		return {urlInput: url || '', textInput: text || '', targetSelect: target || ''}; //Object;
	},

	_onOpenDialog: function(){
		// summary:
		//		Handler for when the dialog is opened.
		//		If the caret is currently in a URL then populate the URL's info into the dialog.
		var a;
		if(dojo.isIE < 9){
			// IE is difficult to select the element in, using the range unified
			// API seems to work reasonably well.
			var sel = dijit.range.getSelection(this.editor.window);
			var range = sel.getRangeAt(0);
			a = range.endContainer;
			if(a.nodeType === 3){
				// Text node, may be the link contents, so check parent.
				// This plugin doesn't really support nested HTML elements
				// in the link, it assumes all link content is text.
				a = a.parentNode;
			}
			if(a && (a.nodeName && a.nodeName.toLowerCase() !== this.tag)){
				// Stll nothing, one last thing to try on IE, as it might be 'img'
				// and thus considered a control.
				a = dojo.withGlobal(this.editor.window,
					"getSelectedElement", dijit._editor.selection, [this.tag]);
			}
		}else{
			a = dojo.withGlobal(this.editor.window,
				"getAncestorElement", dijit._editor.selection, [this.tag]);
		}
		this.dropDown.reset();
		this._setButton.set("disabled", true);
		this.dropDown.set("value", this._getCurrentValues(a));
	},

	_onDblClick: function(e){
		// summary:
		// 		Function to define a behavior on double clicks on the element
		//		type this dialog edits to select it and pop up the editor
		//		dialog.
		// e: Object
		//		The double-click event.
		// tags:
		//		protected.
		if(e && e.target){
			var t = e.target;
			var tg = t.tagName? t.tagName.toLowerCase() : "";
			if(tg === this.tag && dojo.attr(t,"href")){
				dojo.withGlobal(this.editor.window,
					 "selectElement",
					 dijit._editor.selection, [t]);
				this.editor.onDisplayChanged();
				
				setTimeout(dojo.hitch(this, function(){
					// Focus shift outside the event handler.
					// IE doesn't like focus changes in event handles.
					this.button.set("disabled", false);
					this.button.openDropDown();
				}), 10);
			}
		}
	}
});

dojo.declare("dijit._editor.plugins.ImgLinkDialog", [dijit._editor.plugins.LinkDialog], {
	// summary:
	//		This plugin extends LinkDialog and adds in a plugin for handling image links.
	//		provides the image link dialog.
	//
	// description:
	//		The command provided by this plugin is:
	//		* insertImage

	// linkDialogTemplate: [protected] String
	//		Over-ride for template since img dialog doesn't need target that anchor tags may.
	linkDialogTemplate: [
		"<table><tr><td>",
		"<label for='${id}_urlInput'>${url}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' regExp='${urlRegExp}' " +
		"required='true' id='${id}_urlInput' name='urlInput' intermediateChanges='true'/>",
		"</td></tr><tr><td>",
		"<label for='${id}_textInput'>${text}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_textInput' " +
		"name='textInput' intermediateChanges='true'/>",
		"</td></tr><tr><td>",
		"</td><td>",
		"</td></tr><tr><td colspan='2'>",
		"<button dojoType='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>",
		"<button dojoType='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>",
		"</td></tr></table>"
	].join(""),

	// htmlTemplate: [protected] String
	//		String used for templating the <img> HTML to insert at the desired point.
	htmlTemplate: "<img src=\"${urlInput}\" _djrealurl=\"${urlInput}\" alt=\"${textInput}\" />",

	// tag: [protected] String
	//		Tag used for the link type (img).
	tag: "img",

	_getCurrentValues: function(img){
		// summary:
		//		Over-ride for getting the values to set in the dropdown.
		// a:
		//		The anchor/link to process for data for the dropdown.
		// tags:
		//		protected
		var url, text;
		if(img && img.tagName.toLowerCase() === this.tag){
			url = img.getAttribute('_djrealurl') || img.getAttribute('src');
			text = img.getAttribute('alt');
			dojo.withGlobal(this.editor.window,
				"selectElement", dijit._editor.selection, [img, true]);
		}else{
			text = dojo.withGlobal(this.editor.window, dijit._editor.selection.getSelectedText);
		}
		return {urlInput: url || '', textInput: text || ''}; //Object;
	},

	_isValid: function(){
		// summary:
		//		Over-ride for images.  You can have alt text of blank, it is valid.
		// tags:
		//		protected
		return this._urlInput.isValid();
	},

	_connectTagEvents: function(){
		// summary:
		//		Over-ridable function that connects tag specific events.
		this.inherited(arguments);
		this.editor.onLoadDeferred.addCallback(dojo.hitch(this, function(){
			// Use onmousedown instead of onclick.  Seems that IE eats the first onclick
			// to wrap it in a selector box, then the second one acts as onclick.  See #10420
			this.connect(this.editor.editNode, "onmousedown", this._selectTag);
		}));
	},

	_selectTag: function(e){
		// summary:
		//		A simple event handler that lets me select an image if it is clicked on.
		//		makes it easier to select images in a standard way across browsers.  Otherwise
		//		selecting an image for edit becomes difficult.
		// e: Event
		//		The mousedown event.
		// tags:
		//		private
		if(e && e.target){
			var t = e.target;
			var tg = t.tagName? t.tagName.toLowerCase() : "";
			if(tg === this.tag){
				dojo.withGlobal(this.editor.window,
					"selectElement",
					dijit._editor.selection, [t]);
			}
		}
	},

	_checkValues: function(args){
		// summary:
		//		Function to check the values in args and 'fix' them up as needed
		//		(special characters in the url or alt text)
		// args: Object
		//		Content being set.
		// tags:
		//		protected
		if(args && args.urlInput){
			args.urlInput = args.urlInput.replace(/"/g, "&quot;");
		}
		if(args && args.textInput){
			args.textInput = args.textInput.replace(/"/g, "&quot;");
		}
		return args;
	},

	_onDblClick: function(e){
		// summary:
		// 		Function to define a behavior on double clicks on the element
		//		type this dialog edits to select it and pop up the editor
		//		dialog.
		// e: Object
		//		The double-click event.
		// tags:
		//		protected.
		if(e && e.target){
			var t = e.target;
			var tg = t.tagName? t.tagName.toLowerCase() : "";
			if(tg === this.tag && dojo.attr(t,"src")){
				dojo.withGlobal(this.editor.window,
					 "selectElement",
					 dijit._editor.selection, [t]);
				this.editor.onDisplayChanged();
				setTimeout(dojo.hitch(this, function(){
					// Focus shift outside the event handler.
					// IE doesn't like focus changes in event handles.
					this.button.set("disabled", false);
					this.button.openDropDown();
				}), 10);
			}
		}
	}
});

// Register this plugin.
dojo.subscribe(dijit._scopeName + ".Editor.getPlugin",null,function(o){
	if(o.plugin){ return; }
	switch(o.args.name){
		case "createLink":
			o.plugin = new dijit._editor.plugins.LinkDialog({command: o.args.name});
			break;
		case "insertImage":
			o.plugin = new dijit._editor.plugins.ImgLinkDialog({command: o.args.name});
			break;
	}
});

}

if(!dojo._hasResource["prmax.editor.SeoImgLinkDialog"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.editor.SeoImgLinkDialog"] = true;
dojo.provide("prmax.editor.SeoImgLinkDialog");






dojo.declare("prmax.editor.SeoImgLinkDialog", [dijit._editor.plugins.LinkDialog], {
	// summary:
	//		This plugin extends LinkDialog and adds in a plugin for handling image links.
	//		provides the image link dialog.
	//
	// description:
	//		The command provided by this plugin is:
	//		* insertImage

	// linkDialogTemplate: [protected] String
	//		Over-ride for template since img dialog doesn't need target that anchor tags may.
	linkDialogTemplate: [
		"<table><tr><td>",
		"<label for='${id}_urlInput'>${url}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' regExp='${urlRegExp}' " +
		"required='true' id='${id}_urlInput' name='urlInput' intermediateChanges='true'>",
		"</td></tr><tr><td>",
		"<label for='${id}_textInput'>${text}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_textInput' " +
		"name='textInput' intermediateChanges='true'>",
		"</td></tr><tr><td>",
		"<label for='${id}_styleInput'>${style}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_styleInput' " +
		"name='styleInput' intermediateChanges='true'>",
		"</td></tr><tr><td>",
		"<label for='${id}_heightInput'>${height}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_heightInput' " +
		"name='heightInput' intermediateChanges='true'>",
		"</td></tr><tr><td>",
		"<label for='${id}_widthInput'>${width}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_widthInput' " +
		"name='widthInput' intermediateChanges='true'>",
		"</td></tr>",
		"</td></tr><tr><td colspan='2'>",
		"<button dojoType='dijit.form.Button' type='button' id='${id}_loadThumbNail'>${loadThumbNail}</button>",
		"<button dojoType='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>",
		"<button dojoType='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>",
		"</td></tr></table>"
	].join(""),

	// htmlTemplate: [protected] String
	//		String used for templating the <img> HTML to insert at the desired point.
	htmlTemplate: "<img src=\"${urlInput}\" _djrealurl=\"${urlInput}\" alt=\"${textInput}\" height=\"${heightInput}\" width=\"${widthInput}\" height=\"${styleInput}\"/>",

	// tag: [protected] String
	//		Tag used for the link type (img).
	tag: "img",

	_getCurrentValues: function(img){
		// summary:
		//		Over-ride for getting the values to set in the dropdown.
		// a:
		//		The anchor/link to process for data for the dropdown.
		// tags:
		//		protected
		var url, text,style,height,width;
		if(img && img.tagName.toLowerCase() === this.tag){
			url = img.getAttribute('_djrealurl');
			// check for missing djrealurl get actual url
			var url2 = img.getAttribute('src');
			url  = url || url2;
			text = img.getAttribute('alt');
			style = img.getAttribute('style');
			height = img.getAttribute('height');
			width = img.getAttribute('width');
			dojo.withGlobal(this.editor.window,
				"selectElement", dijit._editor.selection, [img, true]);
		}else{
			text = dojo.withGlobal(this.editor.window, dijit._editor.selection.getSelectedText);
		}
		return {urlInput: url || 'http://', textInput: text || '', styleInput:style , heightInput:height,widthInput:width}; //Object;
	},

	_isValid: function(){
		// summary:
		//		Over-ride for images.  You can have alt text of blank, it is valid.
		// tags:
		//		protected
		return this._urlInput.isValid();
	},

	_connectTagEvents: function(){
		// summary:
		//		Over-ridable function that connects tag specific events.
		this.inherited(arguments);
		this.editor.onLoadDeferred.addCallback(dojo.hitch(this, function(){
			// Use onmousedown instead of onclick.  Seems that IE eats the first onclick
			// to wrap it in a selector box, then the second one acts as onclick.  See #10420
			this.connect(this.editor.editNode, "onmousedown", this._selectTag);
		}));
	},

	_selectTag: function(e){
		// summary:
		//		A simple event handler that lets me select an image if it is clicked on.
		//		makes it easier to select images in a standard way across browsers.  Otherwise
		//		selecting an image for edit becomes difficult.
		// e: Event
		//		The click event.
		// tags:
		//		private
		if(e && e.target){
			var t = e.target;
			var tg = t.tagName? t.tagName.toLowerCase() : "";
			if(tg === this.tag){
				dojo.withGlobal(this.editor.window,
					"selectElement",
					dijit._editor.selection, [t]);
			}
		}
	},

	_checkValues: function(args){
		// summary:
		//		Function to check the values in args and 'fix' them up as needed
		//		(special characters in the url or alt text)
		// args: Object
		//		Content being set.
		// tags:
		//		protected
		if(args && args.urlInput){
			args.urlInput = args.urlInput.replace(/"/g, "&quot;");
		}
		if(args && args.textInput){
			args.textInput = args.textInput.replace(/"/g, "&quot;");
		}
		if(args && args.styleInput){
			args.styleInput = args.styleInput.replace(/"/g, "&quot;");
		}

		return args;
	},
	updateState: function(){
		// summary:
		//		Change state of the plugin to respond to events in the editor.
		// description:
		//		This is called on meaningful events in the editor, such as change of selection
		//		or caret position (but not simple typing of alphanumeric keys).   It gives the
		//		plugin a chance to update the CSS of its button.
		//
		//		For example, the "bold" plugin will highlight/unhighlight the bold button depending on whether the
		//		characters next to the caret are bold or not.
		//
		//		Only makes sense when `useDefaultCommand` is true, as it calls Editor.queryCommandEnabled(`command`).
		var e = this.editor,
			c = this.command,
			checked, enabled;
		if(!e || !e.isLoaded || !c.length){ return; }
		if(this.button){
			try{
				enabled = e.queryCommandEnabled(c);
				enabled = true ;
				if(this.enabled !== enabled){
					this.enabled = enabled;
					this.button.set('disabled', !enabled);
				}
				if(typeof this.button.checked == 'boolean'){
					checked = e.queryCommandState(c);
					if(this.checked !== checked){
						this.checked = checked;
						this.button.set('checked', e.queryCommandState(c));
					}
				}
			}catch(e){
				console.log(e); // FIXME: we shouldn't have debug statements in our code.  Log as an error?
			}
		}
	},
	_initButton: function(){
		// Override _Plugin._initButton() to initialize DropDownButton and TooltipDialog.
		var _this = this;
		this.tag = 'img' ;
		var messages = dojo.mixin(dojo.i18n.getLocalization("dijit", "common", this.lang),
			dojo.i18n.getLocalization("prmax", "SeoImgLinkDialog", this.lang));
		var dropDown = (this.dropDown = new dijit.TooltipDialog({
			title: messages[this.command + "Title"],
			execute: dojo.hitch(this, "setValue"),
			onOpen: function(){
				_this._onOpenDialog();
				dijit.TooltipDialog.prototype.onOpen.apply(this, arguments);
			},
			onCancel: function(){
				setTimeout(dojo.hitch(_this, "_onCloseDialog"),0);
			}
		}));
		messages.urlRegExp = this.urlRegExp;
		messages.id = dijit.getUniqueId(this.editor.id);
		this._uniqueId = messages.id;
		this._setContent(dropDown.title +
			"<div style='border-bottom: 1px black solid;padding-bottom:2pt;margin-bottom:4pt'></div>" +
			dojo.string.substitute(this.linkDialogTemplate, messages));
		dropDown.startup();
		this._urlInput = dijit.byId(this._uniqueId + "_urlInput");
		this._textInput = dijit.byId(this._uniqueId + "_textInput");
		this._setButton = dijit.byId(this._uniqueId + "_setButton");


		this.connect( dijit.byId(this._uniqueId + "_loadThumbNail"), "onClick",
			function()
			{
				dojo.xhrPost(
					ttl.utilities.makeParams({
						load: dojo.hitch( this, function()
							{ dojo.publish("/seo/thumbnail", []);
							}),
						url:"/emails/seorelease/link_to_thumbnail" ,
						content: {url:this._urlInput.get("value")}
				}))
			});

		this.connect(dijit.byId(this._uniqueId + "_cancelButton"), "onClick", function(){
			this.dropDown.onCancel();
		});
		if(this._urlInput){
			this.connect(this._urlInput, "onChange", "_checkAndFixInput");
		}
		if(this._textInput){
			this.connect(this._textInput, "onChange", "_checkAndFixInput");
		}
		this._connectTagEvents();
		if(this.command.length){
			var className = this.iconClassPrefix+" "+this.iconClassPrefix + this.command.charAt(0).toUpperCase() + this.command.substr(1);
			if(!this.button){
				var props = dojo.mixin({
					label: messages.label,
					showLabel: false,
					iconClass: className,
					dropDown: this.dropDown,
					tabIndex: "-1"
				}, this.params || {});
				this.button = new this.buttonClass(props);
			}
		}
	},
	_onDblClick: function(e){
		// summary:
		// 		Function to define a behavior on double clicks on the element
		//		type this dialog edits to select it and pop up the editor
		//		dialog.
		// e: Object
		//		The double-click event.
		// tags:
		//		protected.
		if(e && e.target){
			var t = e.target;
			var tg = t.tagName? t.tagName.toLowerCase() : "";
			if(tg === this.tag && dojo.attr(t,"src")){
				dojo.withGlobal(this.editor.window,
					 "selectElement",
					 dijit._editor.selection, [t]);
				this.editor.onDisplayChanged();
				setTimeout(dojo.hitch(this, function(){
					// Focus shift outside the event handler.
					// IE doesn't like focus changes in event handles.
					this.button.set("disabled", false);
					this.button.openDropDown();
				}), 10);
			}
		}
	}
});

// Register this plugin.
dojo.subscribe(dijit._scopeName + ".Editor.getPlugin",null,function(o){
	if(o.plugin){ return; }
	switch(o.args.name){
		case "seoinsertimage":
			o.plugin = new prmax.editor.SeoImgLinkDialog({command: o.args.name});
			break;
	}
});

}

if(!dojo._hasResource["prmax.editor.CollateralDialog"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.editor.CollateralDialog"] = true;
dojo.provide("prmax.editor.CollateralDialog");








dojo.provide("prmax.collateral.adddialog");

dojo.declare("prmax.editor._CollateralButton",
	[dijit._Widget, dijit._Templated],{
	// summary:
	//		Base class for widgets that contains a label (like "Font:")
	//		and a FilteringSelect drop down to pick a value.
	//		Used as Toolbar entry.

	// label: [public] String
	//		The label to apply to this particular FontDropDown.
	label: "",

	// widgetsInTemplate: [public] boolean
	//		Over-ride denoting the template has widgets to parse.
	widgetsInTemplate: true,

	// plainText: [public] boolean
	//		Flag to indicate that the returned label should be plain text
	//		instead of an example.
	plainText: false,

	// templateString: [public] String
	//		The template used to construct the labeled dropdown.
	templateString:
		"<span style='white-space: nowrap' class='dijit dijitReset dijitInline'>" +
			"<label class='dijitLeft dijitInline' for='${selectId}'>${label}</label>" +
			"<input dojoType='dijit.form.FilteringSelect' required=false labelType=html labelAttr=collateralcode searchAttr=collateralcode " +
					"tabIndex='-1' id='${selectId}' dojoAttachPoint='select' value='' style='width:150px'/>" +
		'<input class="dijitLeft dijitInline" id="${add_dialog_btn}" dojoType="dijit.form.ToggleButton" iconClass="fa fa-plus" showLabel="false" label="Add Collateral" dojoAttachPoint="add_btn">'+
		"</span>",

	// restrict list
	postMixInProperties: function(){
		// summary:
		//		Over-ride to misin specific properties.
		this.inherited(arguments);

		// Set some substitution variables used in the template
		this.label = "Collateral";
		this.id = dijit.getUniqueId(this.declaredClass.replace(/\./g,"_"));
		this.selectId = this.id + "_select";
		this.add_dialog_btn = this.id + "+add_btn";

		this.inherited(arguments);
	},

	postCreate: function(){
		// summary:
		//		Over-ride for the default postCreate action
		//		This establishes the filtering selects and the like.

		// Initialize the list of items in the drop down by creating data store with items like:
		// {value: 1, name: "xx-small", label: "<font size=1>xx-small</font-size>" }

		this._emailtemplatedid=-1;
		this.select.store = new dojox.data.QueryReadStore({  url:"/icollateral/collateral_list?emailtemplateid="+this._emailtemplatedid, onError:ttl.utilities.globalerrorchecker});

		this.select.set("value", "", false);
		this.disabled = this.select.get("disabled");
	},
	_add_collateral_event:function(collateral)
	{
		this.add_dialog.hide();
		this.select.set("value", collateral.collateralid, false);
	},

/*	_setValueAttr: function(value, priorityChange){
		// summary:
		//		Over-ride for the default action of setting the
		//		widget value, maps the input to known values
		// value: Object|String
		//		The value to set in the select.
		// priorityChange:
		//		Optional parameter used to tell the select whether or not to fire
		//		onChange event.

		//if the value is not a permitted value, just set empty string to prevent showing the warning icon
		priorityChange = priorityChange !== false?true:false;
		this.select.attr('value', value, priorityChange);
		if(!priorityChange){
			// Clear the last state in case of updateState calls.  Ref: #10466
			this.select._lastValueReported=null;
		}
	}, */

	_getValueAttr: function(){
		// summary:
		//		Allow retreving the value from the composite select on
		//		call to button.attr("value");
		return this.select.get('value');
	},

	focus: function(){
		// summary:
		//		Over-ride for focus control of this widget.  Delegates focus down to the
		//		filtering select.
		this.select.focus();
	},

	_setDisabledAttr: function(value){
		// summary:
		//		Over-ride for the button's 'disabled' attribute so that it can be
		//		disabled programmatically.

		// Save off ths disabled state so the get retrieves it correctly
		//without needing to have a function proxy it.
		this.disabled = value;
		this.select.set("disabled", value);
	},
	_setEmailTemplateIdAttr:function(value)
	{
		this._emailtemplatedid=value;
		this.select.store = new dojox.data.QueryReadStore({  url:"/icollateral/collateral_list?emailtemplateid="+this._emailtemplatedid, onError:ttl.utilities.globalerrorchecker});
	}
});

// TODO: for 2.0, split into FontChoice plugin into three separate classes,
// one for each command (and change registry below)
dojo.declare("prmax.editor.CollateralDialog", dijit._editor._Plugin,{
	// summary:
	//		This plugin provides three drop downs for setting style in the editor
	//		(font, font size, and format block), as controlled by command.
	//
	// description:
	//		The commands provided by this plugin are:
	//
	//		* fontName
	//	|		Provides a drop down to select from a list of font names
	//		* fontSize
	//	|		Provides a drop down to select from a list of font sizes
	//		* formatBlock
	//	|		Provides a drop down to select from a list of block styles
	//	|
	//
	//		which can easily be added to an editor by including one or more of the above commands
	//		in the `plugins` attribute as follows:
	//
	//	|	plugins="['fontName','fontSize',...]"
	//
	//		It is possible to override the default dropdown list by providing an Array for the `custom` property when
	//		instantiating this plugin, e.g.
	//
	//	|	plugins="[{name:'dijit._editor.plugins.FontChoice', command:'fontName', custom:['Verdana','Myriad','Garamond']},...]"
	//
	//		Alternatively, for `fontName` only, `generic:true` may be specified to provide a dropdown with
	//		[CSS generic font families](http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families)
	//
	//		Note that the editor is often unable to properly handle font styling information defined outside
	//		the context of the current editor instance, such as pre-populated HTML.

	// useDefaultCommand: [protected] booleam
	//		Override _Plugin.useDefaultCommand...
	//		processing is handled by this plugin, not by dijit.Editor.
	useDefaultCommand: false,

	_initButton: function(){
		// summary:
		//		Overrides _Plugin._initButton(), to initialize the FilteringSelect+label in toolbar,
		//		rather than a simple button.
		// tags:
		//		protected

		// Create the widget to go into the toolbar (the so-called "button")
		params = this.params;

		// For back-compat reasons support setting custom values via "custom" parameter
		// rather than "values" parameter
		if(this.params.custom){
			params.values = this.params.custom;
		}

		this.button = new prmax.editor._CollateralButton(params);

		this.connect(this.button.add_btn,"onChange",function()
		{
			this.button.add_dialog.show();
		});

		// Reflect changes to the drop down in the editor
		this.connect(this.button.select, "onChange", function(choice){
			// User invoked change, since all internal updates set priorityChange to false and will
			// not trigger an onChange event.
			if  ( choice == "" )  return ;
			this.editor.focus();

			// Invoke, the editor already normalizes commands called through its
			// execCommand.
			this.editor.execCommand(this.command, choice);
			var item  = {identity:choice,
									onItem: dojo.hitch (this , function () { this.tmp_row = arguments[0].i } )};
			this.button.select.store.fetchItemByIdentity(item);
			var args ={urlInput: PRMAX.utils.settings.collateralurl,
								collateralid:this.tmp_row.collateralid,
								collateralname: this.tmp_row.collateralname,
								ext  : this.tmp_row.ext };
			var template = "";
			var ext = this.tmp_row.ext.toLowerCase()
			if ( ext == '.jpg' || ext == '.gif'|| ext == '.bmp' || ext == ".tif" || ext == ".tiff" || ext == '.jpeg' || ext == ".png")
			{
			var embedded = true ;
				if ( confirm ( "To add as a link press OK\nTo add as an image press Cancel?"))
					embedded = false;

				if ( embedded )
					template = "<img src='${urlInput}/${collateralid}${ext}'></img>";
				else
					template = "<a href='${urlInput}/${collateralid}${ext}'>${collateralname}</a>";
			}
			else
				template = "<a href='${urlInput}/${collateralid}${ext}'>${collateralname}</a>";
			this.editor.execCommand('inserthtml', dojo.string.substitute(template, args));
			this.button.select.set("value","");

		});
		this.button.add_dialog = new prmax.collateral.adddialog(params);

		dojo.subscribe(PRCOMMON.Events.Collateral_Add , dojo.hitch(this.button, this.button._add_collateral_event));

	},

	updateState: function(){
		// summary:
		//		Overrides _Plugin.updateState().  This controls updating the menu
		//		options to the right values on state changes in the document (that trigger a
		//		test of the actions.)
		//		It set value of drop down in toolbar to reflect font/font size/format block
		//		of text at current caret position.
		// tags:
		//		protected
		var _e = this.editor;
		var _c = this.command;
		if(!_e || !_e.isLoaded || !_c.length){ return; }
		if(this.button){
			var value;
			try{
				value = _e.queryCommandValue(_c) || "";
			}catch(e){
				//Firefox may throw error above if the editor is just loaded, ignore it
				value = "";
			}

			// strip off single quotes, if any
			var quoted = dojo.isString(value) && value.match(/'([^']*)'/);
			if(quoted){ value = quoted[1]; }

			if(!value && _c === "formatBlock"){
				// Some browsers (WebKit) doesn't actually get the tag info right.
				// So ... lets double-check it.
				var elem;
				// Try to find the current element where the caret is.
				var sel = dijit.range.getSelection(this.editor.window);
				if(sel && sel.rangeCount > 0){
					var range = sel.getRangeAt(0);
					if(range){
						elem = range.endContainer;
					}
				}

				// Okay, now see if we can find one of the formatting types we're in.
				while(elem && elem !== _e.editNode && elem !== _e.document){
					var tg = elem.tagName?elem.tagName.toLowerCase():"";
					if(tg && dojo.indexOf(this.button.values, tg) > -1){
						value = tg;
						break;
					}
					elem = elem.parentNode;
				}
			}

			if(value !== this.button.get("value")){
				// Set the value, but denote it is not a priority change, so no
				// onchange fires.
				this.button.set('value', value, false);
			}
		}
	},
	_setEmailTemplateIdAttr:function(value)
	{
		this.button.set("EmailTemplateId",value);
	}
});

// Register this plugin.
dojo.subscribe(dijit._scopeName + ".Editor.getPlugin",null,function(o){
	if(o.plugin){ return; }
	switch(o.args.name){
	case "insertCollateral":
		o.plugin = new prmax.editor.CollateralDialog({command: o.args.name});
		PRMAX.utils.fieldControl["collateral"] = o.plugin;
	}
});

}

if(!dojo._hasResource["prmax.customer.clients.headerimage"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.customer.clients.headerimage"] = true;
//-----------------------------------------------------------------------------
// Name:    prmax.customer.client.headerimage
// Author:  Chris Hoy
// Purpose:
// Created: 11/06/2012
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.customer.clients.headerimage");



dojo.declare("prmax.customer.clients.headerimage",
	[ ttl.BaseWidget],
	{
	name:"",
	imagetypeid:1,
	title:"",
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div data-dojo-attach-point=\"borderControl\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='gutters:false'>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"width:350px;height:110px\"' >\r\n\t\t\t<img data-dojo-attach-point=\"headerimagepreview\" height=\"100px\" ></img>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\"' >\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Load\"' data-dojo-attach-event=\"onClick:_show_load\" data-dojo-attach-point=\"loadbtn\"></button>\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Clear\",\"class\":\"prmaxhidden\"' data-dojo-attach-event=\"onClick:_clear\" data-dojo-attach-point=\"clearbtn\"></button><br/>\r\n\t\t\t<span class=\"prmaxrowtagcomment\">${title}</span>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"load_image_dialog\" data-dojo-props='title:\"Upload Image\",style:\"width:300px;height:200px\"'>\r\n\t\t<form  data-dojo-attach-point=\"upload_form\" method=\"post\" name=\"upload_form\" enctype=\"multipart/form-data\"  onSubmit=\"return false;\">\r\n\t\t<input class=\"prmaxinput\" type=\"hidden\" data-dojo-attach-point=\"headerimageid\" name=\"headerimageid\" value=\"-1\">\r\n\t\t<input class=\"prmaxinput\" type=\"hidden\" data-dojo-attach-point=\"headerimage_cache\" name=\"headerimage_cache\" value=\"-1\">\r\n\t\t<input class=\"prmaxinput\" type=\"hidden\" data-dojo-attach-point=\"f_imagetypeid\" name=\"imagetypeid\" value=\"1\">\r\n\t\t<br/>\r\n\t\t<table width=\"99%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" border = \"0\">\r\n\t\t\t<tr><td width=\"10%\" align=\"right\" class=\"prmaxrowtag\">Image</td><td width=\"90%\" ><input class=\"prmaxinput\" type=\"file\" name=\"headerimage_file\" data-dojo-attach-point=\"headerimage_file\"></td></tr>\r\n\t\t\t<tr><td  >&nbsp;</td></tr>\r\n\t\t\t<tr><td colspan=\"2\"><p class=\"prmaxrowtag\">The following file types can be uploaded .jpg, .gif, .png.  Upload may take a few minutes.</p></td></tr>\r\n\t\t\t<tr><td colspan=\"2\" align=\"right\"><button data-dojo-attach-point=\"save_node\" data-dojo-props='\"class\":\"prmaxbutton\",type:\"button\",label:\"Upload Image\"' data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_up_load\"></button></td></tr>\r\n\t\t\t<tr><td colspan=\"2\">\r\n\t\t\t\t<div data-dojo-attach-point=\"progressNode\" style=\"display:none;\">\r\n\t\t\t\t\t<p style=\"text-align:center\" class=\"prmaxrowtag\">Uploading started. Please wait as this may take several minutes</p>\r\n\t\t\t\t</div>\r\n\t\t\t</td></tr>\r\n\t\t</table>\r\n\t</form>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._added_call_back = dojo.hitch ( this, this._added_call );
		this._error_call_back = dojo.hitch ( this, this._error_call );

		dojo.subscribe("/clients/headerimage", dojo.hitch ( this, this._image_reloaded_call ));

	},
	_image_reloaded_call:function()
	{
		dojo.attr(this.headerimagepreview,"src", "/clients/load_image");
		dojo.attr(this.headerimageid,"value","-2");
	},
	postCreate:function()
	{
		this.inherited(arguments);
		dojo.attr(this.f_imagetypeid,"value",this.imagetypeid);
	},
	show:function()
	{
		this.inherited(arguments);
		this.borderControl.resize( {h:80,w:450}  ) ;
	},
	resize:function()
	{
		this.borderControl.resize( {h:80,w:450}  ) ;
	},
	_up_load:function()
	{
		if (this.headerimage_file.value.length == 0 )
		{
			this.headerimage_file.focus();
			return ;
		}

		var fileName = this.headerimage_file.value;
		var ext = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
		if( ext != "jpg" && ext != "gif" && ext != "png")
			{
				alert("Upload png, jpg, gif files only");
				this.headerimage_file.focus();
				return ;
			}

		this.save_node.set("disabled",true);
		this.headerimage_cache.value = new Date().valueOf();

		dojo.io.iframe.send(
		{
			url: "/clients/header_load",
			handleAs:"json",
			load: this._added_call_back,
			form: this.upload_form,
			error:this._error_call_back
		});
	},
	_error_call:function(response, ioArgs)
	{
		alert("Problem Uploading Image");
		this._clear();
	},
	_added_call:function( response )
	{
		if (response.success=="OK")
		{
			this._clear();
			this.load_image_dialog.hide();
			dojo.attr(this.headerimagepreview,"src", "/clients/load_header_temp?imagetypeid=" + this.imagetypeid);
			dojo.attr(this.headerimageid,"value","-2");
			dojo.attr(this.f_imagetypeid,"value",this.imagetypeid);
			this.enable_controls(true);
		}
		else if (response.success=="FA")
		{
			alert(response.message);
			this._Clear();

		}
		else
		{
			alert("Problem Uploading Image");
			this._Clear();
		}
	},
	_show_load:function()
	{
		this.load_image_dialog.show();
	},
	_clear:function()
	{
		dojo.attr(this.headerimagepreview,"src", "");
		dojo.attr(this.headerimageid,"value","-1");
		this.enable_controls(false);
		this.save_node.set("disabled", false);
	},
	isValid:function()
	{
		return true;
	},
	_setValueAttr:function( value )
	{
		dojo.attr(this.headerimageid,"value",value);
		this.enable_controls ( ( value == "-1" || value == -1 ) ? false : true );
		if (parseInt(value) > 0 )
			dojo.attr(this.headerimagepreview,"src", "/clients/header_image?clientid=" + value + "&imagetypeid=" + this.imagetypeid );
		else
			dojo.attr(this.headerimagepreview,"src", "" );
	},
	_getValueAttr:function()
	{
		return dojo.attr(this.headerimageid,"value");
	},
	enable_controls:function( enable )
	{
		if ( enable )
		{
			dojo.removeClass(this.clearbtn.domNode,"prmaxhidden");
		}
		else
		{
			dojo.addClass(this.clearbtn.domNode,"prmaxhidden");
		}
	}
});

}

if(!dojo._hasResource["dojo.colors"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.colors"] = true;
dojo.provide("dojo.colors");


dojo.getObject("colors", true, dojo);

//TODO: this module appears to break naming conventions

/*=====
dojo.colors = {
	// summary: Color utilities
}
=====*/

(function(){
	// this is a standard conversion prescribed by the CSS3 Color Module
	var hue2rgb = function(m1, m2, h){
		if(h < 0){ ++h; }
		if(h > 1){ --h; }
		var h6 = 6 * h;
		if(h6 < 1){ return m1 + (m2 - m1) * h6; }
		if(2 * h < 1){ return m2; }
		if(3 * h < 2){ return m1 + (m2 - m1) * (2 / 3 - h) * 6; }
		return m1;
	};
	
	dojo.colorFromRgb = function(/*String*/ color, /*dojo.Color?*/ obj){
		// summary:
		//		get rgb(a) array from css-style color declarations
		// description:
		//		this function can handle all 4 CSS3 Color Module formats: rgb,
		//		rgba, hsl, hsla, including rgb(a) with percentage values.
		var m = color.toLowerCase().match(/^(rgba?|hsla?)\(([\s\.\-,%0-9]+)\)/);
		if(m){
			var c = m[2].split(/\s*,\s*/), l = c.length, t = m[1], a;
			if((t == "rgb" && l == 3) || (t == "rgba" && l == 4)){
				var r = c[0];
				if(r.charAt(r.length - 1) == "%"){
					// 3 rgb percentage values
					a = dojo.map(c, function(x){
						return parseFloat(x) * 2.56;
					});
					if(l == 4){ a[3] = c[3]; }
					return dojo.colorFromArray(a, obj);	// dojo.Color
				}
				return dojo.colorFromArray(c, obj);	// dojo.Color
			}
			if((t == "hsl" && l == 3) || (t == "hsla" && l == 4)){
				// normalize hsl values
				var H = ((parseFloat(c[0]) % 360) + 360) % 360 / 360,
					S = parseFloat(c[1]) / 100,
					L = parseFloat(c[2]) / 100,
					// calculate rgb according to the algorithm
					// recommended by the CSS3 Color Module
					m2 = L <= 0.5 ? L * (S + 1) : L + S - L * S,
					m1 = 2 * L - m2;
				a = [
					hue2rgb(m1, m2, H + 1 / 3) * 256,
					hue2rgb(m1, m2, H) * 256,
					hue2rgb(m1, m2, H - 1 / 3) * 256,
					1
				];
				if(l == 4){ a[3] = c[3]; }
				return dojo.colorFromArray(a, obj);	// dojo.Color
			}
		}
		return null;	// dojo.Color
	};
	
	var confine = function(c, low, high){
		// summary:
		//		sanitize a color component by making sure it is a number,
		//		and clamping it to valid values
		c = Number(c);
		return isNaN(c) ? high : c < low ? low : c > high ? high : c;	// Number
	};
	
	dojo.Color.prototype.sanitize = function(){
		// summary: makes sure that the object has correct attributes
		var t = this;
		t.r = Math.round(confine(t.r, 0, 255));
		t.g = Math.round(confine(t.g, 0, 255));
		t.b = Math.round(confine(t.b, 0, 255));
		t.a = confine(t.a, 0, 1);
		return this;	// dojo.Color
	};
})();


dojo.colors.makeGrey = function(/*Number*/ g, /*Number?*/ a){
	// summary: creates a greyscale color with an optional alpha
	return dojo.colorFromArray([g, g, g, a]);
};

// mixin all CSS3 named colors not already in _base, along with SVG 1.0 variant spellings
dojo.mixin(dojo.Color.named, {
	aliceblue:	[240,248,255],
	antiquewhite:	[250,235,215],
	aquamarine:	[127,255,212],
	azure:	[240,255,255],
	beige:	[245,245,220],
	bisque:	[255,228,196],
	blanchedalmond:	[255,235,205],
	blueviolet:	[138,43,226],
	brown:	[165,42,42],
	burlywood:	[222,184,135],
	cadetblue:	[95,158,160],
	chartreuse:	[127,255,0],
	chocolate:	[210,105,30],
	coral:	[255,127,80],
	cornflowerblue:	[100,149,237],
	cornsilk:	[255,248,220],
	crimson:	[220,20,60],
	cyan:	[0,255,255],
	darkblue:	[0,0,139],
	darkcyan:	[0,139,139],
	darkgoldenrod:	[184,134,11],
	darkgray:	[169,169,169],
	darkgreen:	[0,100,0],
	darkgrey:	[169,169,169],
	darkkhaki:	[189,183,107],
	darkmagenta:	[139,0,139],
	darkolivegreen:	[85,107,47],
	darkorange:	[255,140,0],
	darkorchid:	[153,50,204],
	darkred:	[139,0,0],
	darksalmon:	[233,150,122],
	darkseagreen:	[143,188,143],
	darkslateblue:	[72,61,139],
	darkslategray:	[47,79,79],
	darkslategrey:	[47,79,79],
	darkturquoise:	[0,206,209],
	darkviolet:	[148,0,211],
	deeppink:	[255,20,147],
	deepskyblue:	[0,191,255],
	dimgray:	[105,105,105],
	dimgrey:	[105,105,105],
	dodgerblue:	[30,144,255],
	firebrick:	[178,34,34],
	floralwhite:	[255,250,240],
	forestgreen:	[34,139,34],
	gainsboro:	[220,220,220],
	ghostwhite:	[248,248,255],
	gold:	[255,215,0],
	goldenrod:	[218,165,32],
	greenyellow:	[173,255,47],
	grey:	[128,128,128],
	honeydew:	[240,255,240],
	hotpink:	[255,105,180],
	indianred:	[205,92,92],
	indigo:	[75,0,130],
	ivory:	[255,255,240],
	khaki:	[240,230,140],
	lavender:	[230,230,250],
	lavenderblush:	[255,240,245],
	lawngreen:	[124,252,0],
	lemonchiffon:	[255,250,205],
	lightblue:	[173,216,230],
	lightcoral:	[240,128,128],
	lightcyan:	[224,255,255],
	lightgoldenrodyellow:	[250,250,210],
	lightgray:	[211,211,211],
	lightgreen:	[144,238,144],
	lightgrey:	[211,211,211],
	lightpink:	[255,182,193],
	lightsalmon:	[255,160,122],
	lightseagreen:	[32,178,170],
	lightskyblue:	[135,206,250],
	lightslategray:	[119,136,153],
	lightslategrey:	[119,136,153],
	lightsteelblue:	[176,196,222],
	lightyellow:	[255,255,224],
	limegreen:	[50,205,50],
	linen:	[250,240,230],
	magenta:	[255,0,255],
	mediumaquamarine:	[102,205,170],
	mediumblue:	[0,0,205],
	mediumorchid:	[186,85,211],
	mediumpurple:	[147,112,219],
	mediumseagreen:	[60,179,113],
	mediumslateblue:	[123,104,238],
	mediumspringgreen:	[0,250,154],
	mediumturquoise:	[72,209,204],
	mediumvioletred:	[199,21,133],
	midnightblue:	[25,25,112],
	mintcream:	[245,255,250],
	mistyrose:	[255,228,225],
	moccasin:	[255,228,181],
	navajowhite:	[255,222,173],
	oldlace:	[253,245,230],
	olivedrab:	[107,142,35],
	orange:	[255,165,0],
	orangered:	[255,69,0],
	orchid:	[218,112,214],
	palegoldenrod:	[238,232,170],
	palegreen:	[152,251,152],
	paleturquoise:	[175,238,238],
	palevioletred:	[219,112,147],
	papayawhip:	[255,239,213],
	peachpuff:	[255,218,185],
	peru:	[205,133,63],
	pink:	[255,192,203],
	plum:	[221,160,221],
	powderblue:	[176,224,230],
	rosybrown:	[188,143,143],
	royalblue:	[65,105,225],
	saddlebrown:	[139,69,19],
	salmon:	[250,128,114],
	sandybrown:	[244,164,96],
	seagreen:	[46,139,87],
	seashell:	[255,245,238],
	sienna:	[160,82,45],
	skyblue:	[135,206,235],
	slateblue:	[106,90,205],
	slategray:	[112,128,144],
	slategrey:	[112,128,144],
	snow:	[255,250,250],
	springgreen:	[0,255,127],
	steelblue:	[70,130,180],
	tan:	[210,180,140],
	thistle:	[216,191,216],
	tomato:	[255,99,71],
	transparent: [0, 0, 0, 0],
	turquoise:	[64,224,208],
	violet:	[238,130,238],
	wheat:	[245,222,179],
	whitesmoke:	[245,245,245],
	yellowgreen:	[154,205,50]
});

}

if(!dojo._hasResource["dijit._PaletteMixin"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit._PaletteMixin"] = true;
dojo.provide("dijit._PaletteMixin");




dojo.declare("dijit._PaletteMixin",
	[dijit._CssStateMixin],
	{
	// summary:
	//		A keyboard accessible palette, for picking a color/emoticon/etc.
	// description:
	//		A mixin for a grid showing various entities, so the user can pick a certain entity.

	// defaultTimeout: Number
	//		Number of milliseconds before a held key or button becomes typematic
	defaultTimeout: 500,

	// timeoutChangeRate: Number
	//		Fraction of time used to change the typematic timer between events
	//		1.0 means that each typematic event fires at defaultTimeout intervals
	//		< 1.0 means that each typematic event fires at an increasing faster rate
	timeoutChangeRate: 0.90,

	// value: String
	//		Currently selected color/emoticon/etc.
	value: null,
	
	// _selectedCell: [private] Integer
	//		Index of the currently selected cell. Initially, none selected
	_selectedCell: -1,

/*=====
	// _currentFocus: [private] DomNode
	//		The currently focused cell (if the palette itself has focus), or otherwise
	//		the cell to be focused when the palette itself gets focus.
	//		Different from value, which represents the selected (i.e. clicked) cell.
	_currentFocus: null,
=====*/

/*=====
	// _xDim: [protected] Integer
	//		This is the number of cells horizontally across.
	_xDim: null,
=====*/

/*=====
	// _yDim: [protected] Integer
	//		This is the number of cells vertically down.
	_yDim: null,
=====*/

	// tabIndex: String
	//		Widget tab index.
	tabIndex: "0",

	// cellClass: [protected] String
	//		CSS class applied to each cell in the palette
	cellClass: "dijitPaletteCell",

	// dyeClass: [protected] String
	//	 Name of javascript class for Object created for each cell of the palette.
	//	 dyeClass should implements dijit.Dye interface
	dyeClass: '',

	_preparePalette: function(choices, titles, dyeClassObj) {
		// summary:
		//		Subclass must call _preparePalette() from postCreate(), passing in the tooltip
		//		for each cell
		// choices: String[][]
		//		id's for each cell of the palette, used to create Dye JS object for each cell
		// titles: String[]
		//		Localized tooltip for each cell
		// dyeClassObj: Constructor?
		//		If specified, use this constructor rather than this.dyeClass

		this._cells = [];
		var url = this._blankGif;
		
		dyeClassObj = dyeClassObj || dojo.getObject(this.dyeClass);

		for(var row=0; row < choices.length; row++){
			var rowNode = dojo.create("tr", {tabIndex: "-1"}, this.gridNode);
			for(var col=0; col < choices[row].length; col++){
				var value = choices[row][col];
				if(value){
					var cellObject = new dyeClassObj(value, row, col);
					
					var cellNode = dojo.create("td", {
						"class": this.cellClass,
						tabIndex: "-1",
						title: titles[value]
					});

					// prepare cell inner structure
					cellObject.fillCell(cellNode, url);

					this.connect(cellNode, "ondijitclick", "_onCellClick");
					this._trackMouseState(cellNode, this.cellClass);

					dojo.place(cellNode, rowNode);

					cellNode.index = this._cells.length;

					// save cell info into _cells
					this._cells.push({node:cellNode, dye:cellObject});
				}
			}
		}
		this._xDim = choices[0].length;
		this._yDim = choices.length;

		// Now set all events
		// The palette itself is navigated to with the tab key on the keyboard
		// Keyboard navigation within the Palette is with the arrow keys
		// Spacebar selects the cell.
		// For the up key the index is changed by negative the x dimension.

		var keyIncrementMap = {
			UP_ARROW: -this._xDim,
			// The down key the index is increase by the x dimension.
			DOWN_ARROW: this._xDim,
			// Right and left move the index by 1.
			RIGHT_ARROW: this.isLeftToRight() ? 1 : -1,
			LEFT_ARROW: this.isLeftToRight() ? -1 : 1
		};
		for(var key in keyIncrementMap){
			this._connects.push(
				dijit.typematic.addKeyListener(
					this.domNode,
					{charOrCode:dojo.keys[key], ctrlKey:false, altKey:false, shiftKey:false},
					this,
					function(){
						var increment = keyIncrementMap[key];
						return function(count){ this._navigateByKey(increment, count); };
					}(),
					this.timeoutChangeRate,
					this.defaultTimeout
				)
			);
		}
	},

	postCreate: function(){
		this.inherited(arguments);

		// Set initial navigable node.
		this._setCurrent(this._cells[0].node);
	},

	focus: function(){
		// summary:
		//		Focus this widget.  Puts focus on the most recently focused cell.

		// The cell already has tabIndex set, just need to set CSS and focus it
		dijit.focus(this._currentFocus);
	},

	_onCellClick: function(/*Event*/ evt){
		// summary:
		//		Handler for click, enter key & space key. Selects the cell.
		// evt:
		//		The event.
		// tags:
		//		private

		var target = evt.currentTarget,
			value = this._getDye(target).getValue();

		// First focus the clicked cell, and then send onChange() notification.
		// onChange() (via _setValueAttr) must be after the focus call, because
		// it may trigger a refocus to somewhere else (like the Editor content area), and that
		// second focus should win.
		// Use setTimeout because IE doesn't like changing focus inside of an event handler.
		this._setCurrent(target);
		setTimeout(dojo.hitch(this, function(){
			dijit.focus(target);
			this._setValueAttr(value, true);
		}));

		// workaround bug where hover class is not removed on popup because the popup is
		// closed and then there's no onblur event on the cell
		dojo.removeClass(target, "dijitPaletteCellHover");

		dojo.stopEvent(evt);
	},

	_setCurrent: function(/*DomNode*/ node){
		// summary:
		//		Sets which node is the focused cell.
		// description:
   		//		At any point in time there's exactly one
		//		cell with tabIndex != -1.   If focus is inside the palette then
		// 		focus is on that cell.
		//
		//		After calling this method, arrow key handlers and mouse click handlers
		//		should focus the cell in a setTimeout().
		// tags:
		//		protected
		if("_currentFocus" in this){
			// Remove tabIndex on old cell
			dojo.attr(this._currentFocus, "tabIndex", "-1");
		}

		// Set tabIndex of new cell
		this._currentFocus = node;
		if(node){
			dojo.attr(node, "tabIndex", this.tabIndex);
		}
	},

	_setValueAttr: function(value, priorityChange){
		// summary:
		// 		This selects a cell. It triggers the onChange event.
		// value: String value of the cell to select
		// tags:
		//		protected
		// priorityChange:
		//		Optional parameter used to tell the select whether or not to fire
		//		onChange event.
		
		// clear old selected cell
		if(this._selectedCell >= 0){
			dojo.removeClass(this._cells[this._selectedCell].node, "dijitPaletteCellSelected");
		}
		this._selectedCell = -1;

		// search for cell matching specified value
		if(value){
			for(var i = 0; i < this._cells.length; i++){
				if(value == this._cells[i].dye.getValue()){
					this._selectedCell = i;
					dojo.addClass(this._cells[i].node, "dijitPaletteCellSelected");
					break;
				}
			}
		}
		
		// record new value, or null if no matching cell
		this._set("value", this._selectedCell >= 0 ? value : null);

		if(priorityChange || priorityChange === undefined){
			this.onChange(value);
		}
	},

	onChange: function(value){
		// summary:
		//		Callback when a cell is selected.
		// value: String
		//		Value corresponding to cell.
	},

	_navigateByKey: function(increment, typeCount){
		// summary:
		// 	  	This is the callback for typematic.
		// 		It changes the focus and the highlighed cell.
		// increment:
		// 		How much the key is navigated.
		// typeCount:
		//		How many times typematic has fired.
		// tags:
		//		private

		// typecount == -1 means the key is released.
		if(typeCount == -1){ return; }

		var newFocusIndex = this._currentFocus.index + increment;
		if(newFocusIndex < this._cells.length && newFocusIndex > -1){
			var focusNode = this._cells[newFocusIndex].node;
			this._setCurrent(focusNode);

			// Actually focus the node, for the benefit of screen readers.
			// Use setTimeout because IE doesn't like changing focus inside of an event handler
			setTimeout(dojo.hitch(dijit, "focus", focusNode), 0);
		}
	},

	_getDye: function(/*DomNode*/ cell){
		// summary:
		//		Get JS object for given cell DOMNode

		return this._cells[cell.index].dye;
	}
});

/*=====
dojo.declare("dijit.Dye",
	null,
	{
		// summary:
		//		Interface for the JS Object associated with a palette cell (i.e. DOMNode)

		constructor: function(alias, row, col){
			// summary:
			//		Initialize according to value or alias like "white"
			// alias: String
		},

		getValue: function(){
			// summary:
			//		Return "value" of cell; meaning of "value" varies by subclass.
			// description:
			//		For example color hex value, emoticon ascii value etc, entity hex value.
		},

		fillCell: function(cell, blankGif){
			// summary:
			//		Add cell DOMNode inner structure
			//	cell: DomNode
			//		The surrounding cell
			//	blankGif: String
			//		URL for blank cell image
		}
	}
);
=====*/

}

if(!dojo._hasResource["dijit.ColorPalette"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.ColorPalette"] = true;
dojo.provide("dijit.ColorPalette");










dojo.declare("dijit.ColorPalette",
	[dijit._Widget, dijit._Templated, dijit._PaletteMixin],
	{
	// summary:
	//		A keyboard accessible color-picking widget
	// description:
	//		Grid showing various colors, so the user can pick a certain color.
	//		Can be used standalone, or as a popup.
	//
	// example:
	// |	<div dojoType="dijit.ColorPalette"></div>
	//
	// example:
	// |	var picker = new dijit.ColorPalette({ },srcNode);
	// |	picker.startup();


	// palette: [const] String
	//		Size of grid, either "7x10" or "3x4".
	palette: "7x10",

	// _palettes: [protected] Map
	// 		This represents the value of the colors.
	//		The first level is a hashmap of the different palettes available.
	//		The next two dimensions represent the columns and rows of colors.
	_palettes: {
		"7x10":	[["white", "seashell", "cornsilk", "lemonchiffon","lightyellow", "palegreen", "paleturquoise", "lightcyan",	"lavender", "plum"],
				["lightgray", "pink", "bisque", "moccasin", "khaki", "lightgreen", "lightseagreen", "lightskyblue", "cornflowerblue", "violet"],
				["silver", "lightcoral", "sandybrown", "orange", "palegoldenrod", "chartreuse", "mediumturquoise", 	"skyblue", "mediumslateblue","orchid"],
				["gray", "red", "orangered", "darkorange", "yellow", "limegreen", 	"darkseagreen", "royalblue", "slateblue", "mediumorchid"],
				["dimgray", "crimson", 	"chocolate", "coral", "gold", "forestgreen", "seagreen", "blue", "blueviolet", "darkorchid"],
				["darkslategray","firebrick","saddlebrown", "sienna", "olive", "green", "darkcyan", "mediumblue","darkslateblue", "darkmagenta" ],
				["black", "darkred", "maroon", "brown", "darkolivegreen", "darkgreen", "midnightblue", "navy", "indigo", 	"purple"]],

		"3x4": [["white", "lime", "green", "blue"],
			["silver", "yellow", "fuchsia", "navy"],
			["gray", "red", "purple", "black"]]
	},

	// templateString: String
	//		The template of this widget.
	templateString: dojo.cache("dijit", "templates/ColorPalette.html", "<div class=\"dijitInline dijitColorPalette\">\r\n\t<table class=\"dijitPaletteTable\" cellSpacing=\"0\" cellPadding=\"0\">\r\n\t\t<tbody dojoAttachPoint=\"gridNode\"></tbody>\r\n\t</table>\r\n</div>\r\n"),

	baseClass: "dijitColorPalette",

	buildRendering: function(){
		// Instantiate the template, which makes a skeleton into which we'll insert a bunch of
		// <img> nodes
		this.inherited(arguments);

		// Creates <img> nodes in each cell of the template.
		// Pass in "customized" dijit._Color constructor for specified palette and high-contrast vs. normal mode
		this._preparePalette(
			this._palettes[this.palette],
			dojo.i18n.getLocalization("dojo", "colors", this.lang),
			dojo.declare(dijit._Color, {
				hc: dojo.hasClass(dojo.body(), "dijit_a11y"),
				palette: this.palette
			})
		);
	}
});

dojo.declare("dijit._Color", dojo.Color, {
	// summary:
	//		Object associated with each cell in a ColorPalette palette.
	//		Implements dijit.Dye.

	// Template for each cell in normal (non-high-contrast mode).  Each cell contains a wrapper
	// node for showing the border (called dijitPaletteImg for back-compat), and dijitColorPaletteSwatch
	// for showing the color.
	template:
		"<span class='dijitInline dijitPaletteImg'>" +
			"<img src='${blankGif}' alt='${alt}' class='dijitColorPaletteSwatch' style='background-color: ${color}'/>" +
		"</span>",

	// Template for each cell in high contrast mode.  Each cell contains an image with the whole palette,
	// but scrolled and clipped to show the correct color only
	hcTemplate:
		"<span class='dijitInline dijitPaletteImg' style='position: relative; overflow: hidden; height: 12px; width: 14px;'>" +
			"<img src='${image}' alt='${alt}' style='position: absolute; left: ${left}px; top: ${top}px; ${size}'/>" +
		"</span>",

	// _imagePaths: [protected] Map
	//		This is stores the path to the palette images used for high-contrast mode display
	_imagePaths: {
		"7x10": dojo.moduleUrl("dijit.themes", "a11y/colors7x10.png"),
		"3x4": dojo.moduleUrl("dijit.themes", "a11y/colors3x4.png")
	},

	constructor: function(/*String*/alias, /*Number*/ row, /*Number*/ col){
		this._alias = alias;
		this._row = row;
		this._col = col;
		this.setColor(dojo.Color.named[alias]);
	},

	getValue: function(){
		// summary:
		//		Note that although dijit._Color is initialized with a value like "white" getValue() always
		//		returns a hex value
		return this.toHex();
	},

	fillCell: function(/*DOMNode*/ cell, /*String*/ blankGif){
		var html = dojo.string.substitute(this.hc ? this.hcTemplate : this.template, {
			// substitution variables for normal mode
			color: this.toHex(),
			blankGif: blankGif,
			alt: this._alias,
			
			// variables used for high contrast mode
			image: this._imagePaths[this.palette].toString(),
			left: this._col * -20 - 5,
			top: this._row * -20 - 5,
			size: this.palette == "7x10" ? "height: 145px; width: 206px" : "height: 64px; width: 86px"
		});

		dojo.place(html, cell);
	}
});

}

if(!dojo._hasResource["prmax.customer.clients.pickcolour"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.customer.clients.pickcolour"] = true;
//-----------------------------------------------------------------------------
// Name:    prmax.customer.client.pickcolour
// Author:  Chris Hoy
// Purpose:
// Created: 28/06/2012
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.customer.clients.pickcolour");



dojo.declare("prmax.customer.clients.pickcolour",
	[ ttl.BaseWidget],
	{
	name:"",
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<table width=\"100%\" cellpadding=\"0\" cellpadding=\"0\">\r\n\t\t<tr><td width=\"90%\" data-dojo-attach-point=\"colour_view\">&nbsp;</td><td width=\"10%\"><button data-dojo-attach-point=\"show_picker\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_show_dialog\" data-dojo-props='label:\"Pick\",style:\"padding:0px;margin:0px\"'></button><td></tr>\r\n\t</table>\r\n\t<div data-dojo-attach-point=\"colour_dialog\" data-dojo-type=\"dijit.Dialog\">\r\n\t\t<div data-dojo-type=\"dijit.ColorPalette\" data-dojo-props=\"palette:'7x10'\" data-dojo-attach-event=\"onChange:_new_color\" data-dojo-props='style:\"margin-right:40px\"'></div><br/>\r\n\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_close_dialog\" data-dojo-props='style:\"float:right\",label:\"Close\"'></button>\r\n\t</div>\r\n<div>\r\n",
	constructor: function()
	{
		this._value = "";
	},
	_show_dialog:function()
	{
		this.colour_dialog.show();
	},
	_new_color:function( value )
	{
		this._setValueAttr ( value );
		this._close_dialog();
	},
	_close_dialog:function()
	{
		this.colour_dialog.hide();
	},
	_setValueAttr:function( value)
	{
		this._value = value;
		this.colour_view.style["backgroundColor"] = value;
	},
	_getValueAttr:function()
	{
		if (this._value == null )
			return "";
		else
			return this._value;
	}
});

}

if(!dojo._hasResource["dijit.MenuBar"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.MenuBar"] = true;
dojo.provide("dijit.MenuBar");




dojo.declare("dijit.MenuBar", dijit._MenuBase, {
	// summary:
	//		A menu bar, listing menu choices horizontally, like the "File" menu in most desktop applications

	templateString: dojo.cache("dijit", "templates/MenuBar.html", "<div class=\"dijitMenuBar dijitMenuPassive\" dojoAttachPoint=\"containerNode\"  role=\"menubar\" tabIndex=\"${tabIndex}\" dojoAttachEvent=\"onkeypress: _onKeyPress\"></div>\r\n"),

	baseClass: "dijitMenuBar",

	// _isMenuBar: [protected] Boolean
	//		This is a MenuBar widget, not a (vertical) Menu widget.
	_isMenuBar: true,

	postCreate: function(){
		var k = dojo.keys, l = this.isLeftToRight();
		this.connectKeyNavHandlers(
			l ? [k.LEFT_ARROW] : [k.RIGHT_ARROW],
			l ? [k.RIGHT_ARROW] : [k.LEFT_ARROW]
		);

		// parameter to dijit.popup.open() about where to put popup (relative to this.domNode)
		this._orient = this.isLeftToRight() ? {BL: 'TL'} : {BR: 'TR'};
	},

	focusChild: function(item){
		// overload focusChild so that whenever the focus is moved to a new item,
		// check the previous focused whether it has its popup open, if so, after
		// focusing the new item, open its submenu immediately
		var prev_item = this.focusedChild,
			showpopup = prev_item && prev_item.popup && prev_item.popup.isShowingNow;
		this.inherited(arguments);
		if(showpopup && item.popup && !item.disabled){
			this._openPopup();		// TODO: on down arrow, _openPopup() is called here and in onItemClick()
		}
	},

	_onKeyPress: function(/*Event*/ evt){
		// summary:
		//		Handle keyboard based menu navigation.
		// tags:
		//		protected

		if(evt.ctrlKey || evt.altKey){ return; }

		switch(evt.charOrCode){
			case dojo.keys.DOWN_ARROW:
				this._moveToPopup(evt);
				dojo.stopEvent(evt);
		}
	},

	onItemClick: function(/*dijit._Widget*/ item, /*Event*/ evt){
		// summary:
		//		Handle clicks on an item. Cancels a dropdown if already open.
		// tags:
		//		private
		if(item.popup && item.popup.isShowingNow){
			item.popup.onCancel();
		}else{
			this.inherited(arguments);
		}
	}
});

}

if(!dojo._hasResource["dijit.MenuBarItem"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.MenuBarItem"] = true;
dojo.provide("dijit.MenuBarItem");




dojo.declare("dijit._MenuBarItemMixin", null, {
	templateString: dojo.cache("dijit", "templates/MenuBarItem.html", "<div class=\"dijitReset dijitInline dijitMenuItem dijitMenuItemLabel\" dojoAttachPoint=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\r\n\t\tdojoAttachEvent=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\r\n\t<span dojoAttachPoint=\"containerNode\"></span>\r\n</div>\r\n"),

	// overriding attributeMap because we don't have icon
	attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
		label: { node: "containerNode", type: "innerHTML" }
	})
});

dojo.declare("dijit.MenuBarItem", [dijit.MenuItem, dijit._MenuBarItemMixin], {
	// summary:
	//		Item in a MenuBar that's clickable, and doesn't spawn a submenu when pressed (or hovered)

});

}

if(!dojo._hasResource["dijit.PopupMenuBarItem"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.PopupMenuBarItem"] = true;
dojo.provide("dijit.PopupMenuBarItem");





dojo.declare("dijit.PopupMenuBarItem", [dijit.PopupMenuItem, dijit._MenuBarItemMixin], {
	// summary:
	//		Item in a MenuBar like "File" or "Edit", that spawns a submenu when pressed (or hovered)
});

}

if(!dojo._hasResource["dijit.form.RadioButton"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dijit.form.RadioButton"] = true;
dojo.provide("dijit.form.RadioButton");




// TODO: for 2.0, move the RadioButton code into this file

}

if(!dojo._hasResource["dojo.store.util.QueryResults"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.store.util.QueryResults"] = true;
dojo.provide("dojo.store.util.QueryResults");


dojo.getObject("store.util", true, dojo);

dojo.store.util.QueryResults = function(results){
	// summary:
	//		A function that wraps the results of a store query with additional
	//		methods.
	//
	// description:
	//		QueryResults is a basic wrapper that allows for array-like iteration
	//		over any kind of returned data from a query.  While the simplest store
	//		will return a plain array of data, other stores may return deferreds or
	//		promises; this wrapper makes sure that *all* results can be treated
	//		the same.
	//
	//		Additional methods include `forEach`, `filter` and `map`.
	//
	// returns: Object
	//		An array-like object that can be used for iterating over.
	//
	// example:
	//		Query a store and iterate over the results.
	//
	//	|	store.query({ prime: true }).forEach(function(item){
	//	|		//	do something
	//	|	});
	
	if(!results){
		return results;
	}
	// if it is a promise it may be frozen
	if(results.then){
		results = dojo.delegate(results);
	}
	function addIterativeMethod(method){
		if(!results[method]){
			results[method] = function(){
				var args = arguments;
				return dojo.when(results, function(results){
					Array.prototype.unshift.call(args, results);
					return dojo.store.util.QueryResults(dojo[method].apply(dojo, args));
				});
			};
		}
	}
	addIterativeMethod("forEach");
	addIterativeMethod("filter");
	addIterativeMethod("map");
	if(!results.total){
		results.total = dojo.when(results, function(results){
			return results.length;
		});
	}
	return results;
};

}

if(!dojo._hasResource["dojo.store.util.SimpleQueryEngine"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.store.util.SimpleQueryEngine"] = true;
dojo.provide("dojo.store.util.SimpleQueryEngine");


dojo.getObject("store.util", true, dojo);

dojo.store.util.SimpleQueryEngine = function(query, options){
	// summary:
	//		Simple query engine that matches using filter functions, named filter
	//		functions or objects by name-value on a query object hash
	//
	// description:
	//		The SimpleQueryEngine provides a way of getting a QueryResults through
	//		the use of a simple object hash as a filter.  The hash will be used to
	//		match properties on data objects with the corresponding value given. In
	//		other words, only exact matches will be returned.
	//
	//		This function can be used as a template for more complex query engines;
	//		for example, an engine can be created that accepts an object hash that
	//		contains filtering functions, or a string that gets evaluated, etc.
	//
	//		When creating a new dojo.store, simply set the store's queryEngine
	//		field as a reference to this function.
	//
	// query: Object
	//		An object hash with fields that may match fields of items in the store.
	//		Values in the hash will be compared by normal == operator, but regular expressions
	//		or any object that provides a test() method are also supported and can be
	// 		used to match strings by more complex expressions
	// 		(and then the regex's or object's test() method will be used to match values).
	//
	// options: dojo.store.util.SimpleQueryEngine.__queryOptions?
	//		An object that contains optional information such as sort, start, and count.
	//
	// returns: Function
	//		A function that caches the passed query under the field "matches".  See any
	//		of the "query" methods on dojo.stores.
	//
	// example:
	//		Define a store with a reference to this engine, and set up a query method.
	//
	//	|	var myStore = function(options){
	//	|		//	...more properties here
	//	|		this.queryEngine = dojo.store.util.SimpleQueryEngine;
	//	|		//	define our query method
	//	|		this.query = function(query, options){
	//	|			return dojo.store.util.QueryResults(this.queryEngine(query, options)(this.data));
	//	|		};
	//	|	};

	// create our matching query function
	switch(typeof query){
		default:
			throw new Error("Can not query with a " + typeof query);
		case "object": case "undefined":
			var queryObject = query;
			query = function(object){
				for(var key in queryObject){
					var required = queryObject[key];
					if(required && required.test){
						if(!required.test(object[key])){
							return false;
						}
					}else if(required != object[key]){
						return false;
					}
				}
				return true;
			};
			break;
		case "string":
			// named query
			if(!this[query]){
				throw new Error("No filter function " + query + " was found in store");
			}
			query = this[query];
			// fall through
		case "function":
			// fall through
	}
	function execute(array){
		// execute the whole query, first we filter
		var results = dojo.filter(array, query);
		// next we sort
		if(options && options.sort){
			results.sort(function(a, b){
				for(var sort, i=0; sort = options.sort[i]; i++){
					var aValue = a[sort.attribute];
					var bValue = b[sort.attribute];
					if (aValue != bValue) {
						return !!sort.descending == aValue > bValue ? -1 : 1;
					}
				}
				return 0;
			});
		}
		// now we paginate
		if(options && (options.start || options.count)){
			var total = results.length;
			results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));
			results.total = total;
		}
		return results;
	}
	execute.matches = query;
	return execute;
};

}

if(!dojo._hasResource["dojo.store.Memory"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.store.Memory"] = true;
dojo.provide("dojo.store.Memory");





dojo.declare("dojo.store.Memory", null, {
	// summary:
	//		This is a basic in-memory object store. It implements dojo.store.api.Store.
	constructor: function(/*dojo.store.Memory*/ options){
		// summary:
		//		Creates a memory object store.
		// options:
		//		This provides any configuration information that will be mixed into the store.
		// 		This should generally include the data property to provide the starting set of data.
		this.index = {};
		dojo.mixin(this, options);
		this.setData(this.data || []);
	},
	// data: Array
	//		The array of all the objects in the memory store
	data:null,

	// idProperty: String
	//		Indicates the property to use as the identity property. The values of this
	//		property should be unique.
	idProperty: "id",

	// index: Object
	//		An index of data by id
	index:null,

	// queryEngine: Function
	//		Defines the query engine to use for querying the data store
	queryEngine: dojo.store.util.SimpleQueryEngine,
	get: function(id){
		//	summary:
		//		Retrieves an object by its identity
		//	id: Number
		//		The identity to use to lookup the object
		//	returns: Object
		//		The object in the store that matches the given id.
		return this.index[id];
	},
	getIdentity: function(object){
		// 	summary:
		//		Returns an object's identity
		// 	object: Object
		//		The object to get the identity from
		//	returns: Number
		return object[this.idProperty];
	},
	put: function(object, options){
		// 	summary:
		//		Stores an object
		// 	object: Object
		//		The object to store.
		// 	options: dojo.store.api.Store.PutDirectives??
		//		Additional metadata for storing the data.  Includes an "id"
		//		property if a specific id is to be used.
		//	returns: Number
		var id = options && options.id || object[this.idProperty] || Math.random();
		this.index[id] = object;
		var data = this.data,
			idProperty = this.idProperty;
		for(var i = 0, l = data.length; i < l; i++){
			if(data[i][idProperty] == id){
				data[i] = object;
				return id;
			}
		}
		this.data.push(object);
		return id;
	},
	add: function(object, options){
		// 	summary:
		//		Creates an object, throws an error if the object already exists
		// 	object: Object
		//		The object to store.
		// 	options: dojo.store.api.Store.PutDirectives??
		//		Additional metadata for storing the data.  Includes an "id"
		//		property if a specific id is to be used.
		//	returns: Number
		if(this.index[options && options.id || object[this.idProperty]]){
			throw new Error("Object already exists");
		}
		return this.put(object, options);
	},
	remove: function(id){
		// 	summary:
		//		Deletes an object by its identity
		// 	id: Number
		//		The identity to use to delete the object
		delete this.index[id];
		var data = this.data,
			idProperty = this.idProperty;
		for(var i = 0, l = data.length; i < l; i++){
			if(data[i][idProperty] == id){
				data.splice(i, 1);
				return;
			}
		}
	},
	query: function(query, options){
		// 	summary:
		//		Queries the store for objects.
		// 	query: Object
		//		The query to use for retrieving objects from the store.
		//	options: dojo.store.api.Store.QueryOptions?
		//		The optional arguments to apply to the resultset.
		//	returns: dojo.store.api.Store.QueryResults
		//		The results of the query, extended with iterative methods.
		//
		// 	example:
		// 		Given the following store:
		//
		// 	|	var store = new dojo.store.Memory({
		// 	|		data: [
		// 	|			{id: 1, name: "one", prime: false },
		//	|			{id: 2, name: "two", even: true, prime: true},
		//	|			{id: 3, name: "three", prime: true},
		//	|			{id: 4, name: "four", even: true, prime: false},
		//	|			{id: 5, name: "five", prime: true}
		//	|		]
		//	|	});
		//
		//	...find all items where "prime" is true:
		//
		//	|	var results = store.query({ prime: true });
		//
		//	...or find all items where "even" is true:
		//
		//	|	var results = store.query({ even: true });
		return dojo.store.util.QueryResults(this.queryEngine(query, options)(this.data));
	},
	setData: function(data){
		// 	summary:
		//		Sets the given data as the source for this store, and indexes it
		//	data: Object[]
		//		An array of objects to use as the source of data.
		if(data.items){
			// just for convenience with the data format IFRS expects
			this.idProperty = data.identifier;
			data = this.data = data.items;
		}else{
			this.data = data;
		}

		for(var i = 0, l = data.length; i < l; i++){
			var object = data[i];
			this.index[object[this.idProperty]] = object;
		}
	}
});

}

if(!dojo._hasResource["dojo.data.ObjectStore"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojo.data.ObjectStore"] = true;
dojo.provide("dojo.data.ObjectStore");





dojo.declare("dojo.data.ObjectStore", null,{
		objectStore: null,
		constructor: function(options){
			// summary:
			//		A Dojo Data implementation that wraps Dojo object stores for backwards
			//		compatibility.
			//	options:
			//		The configuration information to pass into the data store.
			//	options.objectStore:
			//		The object store to use as the source provider for this data store
			dojo.mixin(this, options);
		},
		labelProperty: "label",

		getValue: function(/*Object*/ item, /*String*/property, /*value?*/defaultValue){
			// summary:
			//	Gets the value of an item's 'property'
			//
			//	item:
			//		The item to get the value from
			//	property:
			//		property to look up value for
			//	defaultValue:
			//		the default value
			
			return typeof item.get === "function" ? item.get(property) :
				property in item ?
					item[property] : defaultValue;
		},
		getValues: function(item, property){
			// summary:
			//		Gets the value of an item's 'property' and returns
			//		it.	If this value is an array it is just returned,
			//		if not, the value is added to an array and that is returned.
			//
			//	item: /* object */
			//	property: /* string */
			//		property to look up value for

			var val = this.getValue(item,property);
			return val instanceof Array ? val : val === undefined ? [] : [val];
		},

		getAttributes: function(item){
			// summary:
			//	Gets the available attributes of an item's 'property' and returns
			//	it as an array.
			//
			//	item: /* object */

			var res = [];
			for(var i in item){
				if(item.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_')){
					res.push(i);
				}
			}
			return res;
		},

		hasAttribute: function(item,attribute){
			// summary:
			//		Checks to see if item has attribute
			//
			//	item: /* object */
			//	attribute: /* string */
			return attribute in item;
		},

		containsValue: function(item, attribute, value){
			// summary:
			//		Checks to see if 'item' has 'value' at 'attribute'
			//
			//	item: /* object */
			//	attribute: /* string */
			//	value: /* anything */
			return dojo.indexOf(this.getValues(item,attribute),value) > -1;
		},


		isItem: function(item){
			// summary:
			//		Checks to see if the argument is an item
			//
			//	item: /* object */
			//	attribute: /* string */

			// we have no way of determining if it belongs, we just have object returned from
			// 	service queries
			return (typeof item == 'object') && item && !(item instanceof Date);
		},

		isItemLoaded: function(item){
			// summary:
			//		Checks to see if the item is loaded.
			//
			//		item: /* object */

			return item && typeof item.load !== "function";
		},

		loadItem: function(args){
			// summary:
			// 		Loads an item and calls the callback handler. Note, that this will call the callback
			// 		handler even if the item is loaded. Consequently, you can use loadItem to ensure
			// 		that an item is loaded is situations when the item may or may not be loaded yet.
			// 		If you access a value directly through property access, you can use this to load
			// 		a lazy value as well (doesn't need to be an item).
			//
			//	example:
			//		store.loadItem({
			//			item: item, // this item may or may not be loaded
			//			onItem: function(item){
			// 				// do something with the item
			//			}
			//		});

			var item;
			if(typeof args.item.load === "function"){
				dojo.when(args.item.load(), function(result){
					item = result; // in synchronous mode this can allow loadItem to return the value
					var func = result instanceof Error ? args.onError : args.onItem;
					if(func){
						func.call(args.scope, result);
					}
				});
			}else if(args.onItem){
				// even if it is already loaded, we will use call the callback, this makes it easier to
				// use when it is not known if the item is loaded (you can always safely call loadItem).
				args.onItem.call(args.scope, args.item);
			}
			return item;
		},
		close: function(request){
			return request && request.abort && request.abort();
		},
		fetch: function(args){
			// summary:
			//		See dojo.data.api.Read.fetch
			//
			
			args = args || {};
			var self = this;
			var scope = args.scope || self;
			var query = args.query;
			if(typeof query == "object"){ // can be null, but that is ignore by for-in
				query = dojo.delegate(query); // don't modify the original
				for(var i in query){
					// find any strings and convert them to regular expressions for wildcard support
					var required = query[i];
					if(typeof required == "string"){
						query[i] = RegExp("^" + dojo.regexp.escapeString(required, "*?").replace(/\*/g, '.*').replace(/\?/g, '.') + "$", args.queryOptions && args.queryOptions.ignoreCase ? "mi" : "m");
						query[i].toString = (function(original){
							return function(){
								return original;
							}
						})(required);
					}
				}
			}
			
			var results = this.objectStore.query(query, args);
			dojo.when(results.total, function(totalCount){
				dojo.when(results, function(results){
					if(args.onBegin){
						args.onBegin.call(scope, totalCount || results.length, args);
					}
					if(args.onItem){
						for(var i=0; i<results.length;i++){
							args.onItem.call(scope, results[i], args);
						}
					}
					if(args.onComplete){
						args.onComplete.call(scope, args.onItem ? null : results, args);
					}
					return results;
				}, errorHandler);
			}, errorHandler);
			function errorHandler(error){
				if(args.onError){
					args.onError.call(scope, error, args);
				}
			}
			args.abort = function(){
				// abort the request
				if(results.cancel){
					results.cancel();
				}
			};
			args.store = this;
			return args;
		},
		getFeatures: function(){
			// summary:
			// 		return the store feature set

			return {
				"dojo.data.api.Read": !!this.objectStore.get,
				"dojo.data.api.Identity": true,
				"dojo.data.api.Write": !!this.objectStore.put,
				"dojo.data.api.Notification": true
			};
		},

		getLabel: function(/* item */ item){
			//	summary:
			//		See dojo.data.api.Read.getLabel()
			if(this.isItem(item)){
				return this.getValue(item,this.labelProperty); //String
			}
			return undefined; //undefined
		},

		getLabelAttributes: function(/* item */ item){
			//	summary:
			//		See dojo.data.api.Read.getLabelAttributes()
			return [this.labelProperty]; //array
		},

		//Identity API Support


		getIdentity: function(item){
			return item.getId ? item.getId() : item[this.objectStore.idProperty || "id"];
		},

		getIdentityAttributes: function(item){
			// summary:
			//		returns the attributes which are used to make up the
			//		identity of an item.	Basically returns this.objectStore.idProperty

			return [this.objectStore.idProperty];
		},

		fetchItemByIdentity: function(args){
			// summary:
			//		fetch an item by its identity, by looking in our index of what we have loaded
			var item;
			dojo.when(this.objectStore.get(args.identity),
				function(result){
					item = result;
					args.onItem.call(args.scope, result);
				},
				function(error){
					args.onError.call(args.scope, error);
				}
			);
			return item;
		},
		
		newItem: function(data, parentInfo){
			// summary:
			//		adds a new item to the store at the specified point.
			//		Takes two parameters, data, and options.
			//
			//	data: /* object */
			//		The data to be added in as an item.
			if(parentInfo){
				// get the previous value or any empty array
				var values = this.getValue(parentInfo.parent,parentInfo.attribute,[]);
				// set the new value
				values = values.concat([data]);
				data.__parent = values;
				this.setValue(parentInfo.parent, parentInfo.attribute, values);
			}
			this._dirtyObjects.push({object:data, save: true});
			this.onNew(data);
			return data;
		},
		deleteItem: function(item){
			// summary:
			//		deletes item and any references to that item from the store.
			//
			//	item:
			//		item to delete
			//

			//	If the desire is to delete only one reference, unsetAttribute or
			//	setValue is the way to go.
			this.changing(item, true);

			this.onDelete(item);
		},
		setValue: function(item, attribute, value){
			// summary:
			//		sets 'attribute' on 'item' to 'value'

			var old = item[attribute];
			this.changing(item);
			item[attribute]=value;
			this.onSet(item,attribute,old,value);
		},
		setValues: function(item, attribute, values){
			// summary:
			//	sets 'attribute' on 'item' to 'value' value
			//	must be an array.


			if(!dojo.isArray(values)){
				throw new Error("setValues expects to be passed an Array object as its value");
			}
			this.setValue(item,attribute,values);
		},

		unsetAttribute: function(item, attribute){
			// summary:
			//		unsets 'attribute' on 'item'

			this.changing(item);
			var old = item[attribute];
			delete item[attribute];
			this.onSet(item,attribute,old,undefined);
		},
		
		_dirtyObjects: [],
		
		changing: function(object,_deleting){
			// summary:
			//		adds an object to the list of dirty objects.  This object
			//		contains a reference to the object itself as well as a
			//		cloned and trimmed version of old object for use with
			//		revert.
			object.__isDirty = true;
			//if an object is already in the list of dirty objects, don't add it again
			//or it will overwrite the premodification data set.
			for(var i=0; i<this._dirtyObjects.length; i++){
				var dirty = this._dirtyObjects[i];
				if(object==dirty.object){
					if(_deleting){
						// we are deleting, no object is an indicator of deletiong
						dirty.object = false;
						if(!this._saveNotNeeded){
							dirty.save = true;
						}
					}
					return;
				}
			}
			var old = object instanceof Array ? [] : {};
			for(i in object){
				if(object.hasOwnProperty(i)){
					old[i] = object[i];
				}
			}
			this._dirtyObjects.push({object: !_deleting && object, old: old, save: !this._saveNotNeeded});
		},
		
		save: function(kwArgs){
			// summary:
			//		Saves the dirty data using object store provider. See dojo.data.api.Write for API.
			//
			//	kwArgs.global:
			//		This will cause the save to commit the dirty data for all
			// 		ObjectStores as a single transaction.
			//
			//	kwArgs.revertOnError
			//		This will cause the changes to be reverted if there is an
			//		error on the save. By default a revert is executed unless
			//		a value of false is provide for this parameter.

			kwArgs = kwArgs || {};
			var result, actions = [];
			var alreadyRecorded = {};
			var savingObjects = [];
			var self;
			var dirtyObjects = this._dirtyObjects;
			var left = dirtyObjects.length;// this is how many changes are remaining to be received from the server
			try{
				dojo.connect(kwArgs,"onError",function(){
					if(kwArgs.revertOnError !== false){
						var postCommitDirtyObjects = dirtyObjects;
						dirtyObjects = savingObjects;
						var numDirty = 0; // make sure this does't do anything if it is called again
						jr.revert(); // revert if there was an error
						self._dirtyObjects = postCommitDirtyObjects;
					}
					else{
						self._dirtyObjects = dirtyObject.concat(savingObjects);
					}
				});
				if(this.objectStore.transaction){
					var transaction = this.objectStore.transaction();
				}
				for(var i = 0; i < dirtyObjects.length; i++){
					var dirty = dirtyObjects[i];
					var object = dirty.object;
					var old = dirty.old;
					delete object.__isDirty;
					if(object){
						result = this.objectStore.put(object, {overwrite: !!old});
					}
					else{
						result = this.objectStore.remove(this.getIdentity(old));
					}
					savingObjects.push(dirty);
					dirtyObjects.splice(i--,1);
					dojo.when(result, function(value){
						if(!(--left)){
							if(kwArgs.onComplete){
								kwArgs.onComplete.call(kwArgs.scope, actions);
							}
						}
					},function(value){
						
						// on an error we want to revert, first we want to separate any changes that were made since the commit
						left = -1; // first make sure that success isn't called
						kwArgs.onError.call(kwArgs.scope, value);
					});
					
				}
				if(transaction){
					transaction.commit();
				}
			}catch(e){
				kwArgs.onError.call(kwArgs.scope, value);
			}
			
			
		},

		revert: function(kwArgs){
			// summary
			//		returns any modified data to its original state prior to a save();
			//
			var dirtyObjects = this._dirtyObjects;
			for(var i = dirtyObjects.length; i > 0;){
				i--;
				var dirty = dirtyObjects[i];
				var object = dirty.object;
				var old = dirty.old;
				if(object && old){
					// changed
					for(var j in old){
						if(old.hasOwnProperty(j) && object[j] !== old[j]){
							this.onSet(object, j, object[j], old[j]);
							object[j] = old[j];
						}
					}
					for(j in object){
						if(!old.hasOwnProperty(j)){
							this.onSet(object, j, object[j]);
							delete object[j];
						}
					}
				}else if(!old){
					// was an addition, remove it
					this.onDelete(object);
				}else{
					// was a deletion, we will add it back
					this.onNew(old);
				}
				delete (object || old).__isDirty;
				dirtyObjects.splice(i, 1);
			}
			
			
		},
		isDirty: function(item){
			// summary
			//		returns true if the item is marked as dirty or true if there are any dirty items
			if(!item){
				return !!this._dirtyObjects.length;
			}
			return item.__isDirty;
		},
		//Notifcation Support

		onSet: function(){},
		onNew: function(){},
		onDelete: 	function(){}
	}
);

}

if(!dojo._hasResource["prcommon.clippings.questions.add"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.clippings.questions.add"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.clippings.questions
// Author:  Chris Hoy
// Purpose:
// Created: 28/04/2015
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prcommon.clippings.questions.add");













dojo.declare("prcommon.clippings.questions.add",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div data-dojo-attach-point=\"frame\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-point='style:\"width:100%;height:100%\",gutters:false' >\r\n\t\t<div data-dojo-type=\"dijit.layout.StackContainer\" data-dojo-attach-point=\"wizard_pages\" data-dojo-props='region:\"center\"'>\r\n\t\t\t<div data-dojo-attach-point=\"page_start\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='style:\"margin:10px\", \"class\":\"common_prmax_layout\"'>\r\n\t\t\t\t<form data-dojo-attach-point=\"main_form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t\t\t\t<h2>Question Details</h2>\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t\t<label class=\"label_1\">Name</label><input data-dojo-props='\"class\":\"prmaxrequired prmaxinput\",name:\"questiontext\",type:\"text\",maxlength:80,trim:true,required:true,style:\"width:24em\",invalidMessage:\"Name cannot be Empty\"' data-dojo-attach-point=\"questiontext\" data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/><br/>\r\n\t\t\t\t\t<label class=\"label_1\"><input data-dojo-attach-point=\"question_is_text\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"questiontypeid\",\"class\":\"prmaxdefault\",checked:\"checked\",type:\"radio\",value:\"3\"'/>&nbsp;Text</label><br/>\r\n\t\t\t\t\t<label class=\"label_1\"><input data-dojo-attach-point=\"question_yes_no\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"questiontypeid\",\"class\":\"prmaxdefault\",type:\"radio\",value:\"1\"'/>&nbsp;Yes/No</label><br/>\r\n\t\t\t\t\t<label class=\"label_1\"><input data-dojo-attach-point=\"question_list\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"questiontypeid\",\"class\":\"prmaxdefault\",type:\"radio\",value:\"2\"'/>&nbsp;List</label><br/>\r\n\t\t\t\t\t<label class=\"label_1\"><input data-dojo-attach-point=\"question_multiple\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"questiontypeid\",\"class\":\"prmaxdefault\",type:\"radio\",value:\"6\"'/>&nbsp;Multiple</label><br/>\r\n\t\t\t\t\t<label class=\"label_1\"><input data-dojo-attach-point=\"question_numeric\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"questiontypeid\",\"class\":\"prmaxdefault\",type:\"radio\",value:\"4\"'/>&nbsp;Numeric</label><br/>\r\n\t\t\t\t\t<label class=\"label_1\"><input data-dojo-attach-point=\"question_currency\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"questiontypeid\",\"class\":\"prmaxdefault\",type:\"radio\",value:\"5\"'/>&nbsp;Currency</label><br/>\r\n\t\t\t\t\t<br/><br/><br/><br/><br/><br/>\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t\t<button data-dojo-attach-event=\"onClick:_next_page_start_page\" data-dojo-attach-point=\"_btn_start_page\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Next\",\"class\":\"btnright \"'></button><br/><br/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"page_answers\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='style:\"margin:10px\",\"class\":\"common_prmax_layout\"'>\r\n\t\t\t\t<h2>Answers</h2>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_add_answer\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"New Answer\",\"class\":\"btnright\"'></button><br/>\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='style:\"width:350px;height:250px\"'>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"answer_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='rowsPerPage:30,style:\"width:100%;height:100%;\"'></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_next_page_page_answers\" data-dojo-attach-point=\"_btn_page_answers_next\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Next\",\"class\":\"btnright \"'></button>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_prev_page_page_answers\" data-dojo-attach-point=\"_btn_page_answers_prev\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Prev\",\"class\":\"btnright \"'></button><br/><br/>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"page_restrictions\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='style:\"margin:10px\",\"class\":\"common_prmax_layout\"'>\r\n\t\t\t\t<h2>Restrict Scope</h2>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<form data-dojo-attach-point=\"restrict_form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t\t\t\t<div data-dojo-attach-point=\"restrict_global_label_view\"><label class=\"label_2\"><input data-dojo-attach-point=\"restrict_global\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"restrict\",\"class\":\"prmaxdefault\",checked:\"checked\",type:\"radio\",value:\"1\"' data-dojo-attach-event='onChange:_change_restrict_view'/>&nbsp;No Restriction</label><br/></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"restrict_client_label_view\"><label class=\"label_2\"><input data-dojo-attach-point=\"restrict_client\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"restrict\",\"class\":\"prmaxdefault\",type:\"radio\",value:\"2\",style:\"float:left\"' data-dojo-attach-event='onChange:_change_restrict_view'/><p data-dojo-attach-point=\"client_label_1\" style=\"float:left\">Client</p></label><br/></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"restrict_campaign_label_view\"><label class=\"label_2\"><input data-dojo-attach-point=\"restrict_campaign\" data-dojo-type=\"dijit.form.RadioButton\" data-dojo-props='name:\"restrict\",\"class\":\"prmaxdefault\",type:\"radio\",value:\"3\",style:\"float:left\"' data-dojo-attach-event='onChange:_change_restrict_view'/><p data-dojo-attach-point=\"issue_label_1\" style=\"float:left\">&nbsp;Issue</p></label><br/></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"restrict_client_view\" class=\"prmaxhidden\"><label class=\"label_1\" data-dojo-attach-point=\"client_label_2\">Client</label><select data-dojo-props='name:\"clientid\",autoComplete:true,searchAttr:\"clientname\",labelType:\"html\",required:false' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"clientid\" ></select></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"restrict_issue_view\" class=\"prmaxhidden\"><label  data-dojo-attach-point=\"issue_label_2\" class=\"label_1\">Issue</label><select data-dojo-props='name:\"issueid\",autoComplete:true,searchAttr:\"name\",required:false,invalidMessage:\"Select\",labelType:\"html\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"issueid\"></select></div>\r\n\t\t\t\t\t<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t\t<button data-dojo-attach-event=\"onClick:_next_page_restrict\" data-dojo-attach-point=\"_btn_page_restrict_next\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Next\",\"class\":\"btnright \"'></button>\r\n\t\t\t\t\t<button data-dojo-attach-event=\"onClick:_prev_page_restrict\" data-dojo-attach-point=\"_btn_page_restrict_prev\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Prev\",\"class\":\"btnright \"'></button><br/><br/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"page_default\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='style:\"margin:10px\",\"class\":\"common_prmax_layout\"'>\r\n\t\t\t\t<h2>Default Answer</h2>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<form data-dojo-attach-point=\"default_form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t\t\t\t<div data-dojo-attach-point=\"default_text_view\" class=\"prmaxhidden\"><label class=\"label_1\">Text</label><input data-dojo-props='\"class\":\"prmaxinput\", name:\"default_answer_text\",type:\"text\",maxlength:80,trim:true,style:\"width:16em\"' data-dojo-attach-point=\"default_answer_text\" data-dojo-type=\"dijit.form.ValidationTextBox\"/></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"default_list_view\" class=\"prmaxhidden\"><label class=\"label_1\">List</label><select data-dojo-props='\"class\":\"prmaxinput\", name:\"default_answer_answerid\",autoComplete:true,searchAttr:\"answertext\",required:false,invalidMessage:\"Select\",labelType:\"html\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"default_answer_answerid\"></select></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"default_yes_no_view\" class=\"prmaxhidden\"><label class=\"label_1\">Yes/No</label><input data-dojo-props='name:\"default_answer_boolean\",type:\"checkbox\"' data-dojo-attach-point=\"default_answer_boolean\" data-dojo-type=\"dijit.form.CheckBox\"/></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"default_numeric\" class=\"prmaxhidden\"><label class=\"label_1\">Number</label><input data-dojo-props='\"class\":\"prmaxinput\", name:\"default_answer_number\",type:\"text\",style:\"width:7em\",constraints:{min:0,max:999999999},value:\"0\"' data-dojo-attach-point=\"default_answer_number\" data-dojo-type=\"dijit.form.NumberTextBox\"/></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"default_currency_view\" class=\"prmaxhidden\"><label class=\"label_1\">Currency</label><input data-dojo-props='\"class\":\"prmaxinput\", name:\"default_answer_currency\",type:\"text\",style:\"width:8em\",constraints:{fractional:true,places:\"0,2\",min:0.00,max:999999.00},value:\"0.00\"' data-dojo-attach-point=\"default_answer_currency\" data-dojo-type=\"dijit.form.CurrencyTextBox\"/></div>\r\n\t\t\t\t\t<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t\t<button data-dojo-attach-event=\"onClick:_save\" data-dojo-attach-point=\"savebtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\",busyLabel:\"Please Wait Saving ...\",label:\"Save\",\"class\":\"btnright \"'></button>\r\n\t\t\t\t\t<button data-dojo-attach-event=\"onClick:_prev_page_page_default\" data-dojo-attach-point=\"_btn_page_page_default\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Prev\",\"class\":\"btnright \"'></button><br/><br/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-attach-point=\"new_answer_dlg\" data-dojo-type=\"dijit.Dialog\"  data-dojo-props='title:\"New Answer\",style:\"width:500px;height:150px\"'>\r\n\t\t<form data-dojo-attach-point=\"add_answer_form\" data-dojo-props='onsubmit:\"return false\",\"class\":\"common_prmax_layout\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t\t<br/>\r\n\t\t\t<label class=\"label_1\">Text</label><input data-dojo-props='\"class\":\"prmaxrequired prmaxinput\",name:\"answertext\",type:\"text\",maxlength:80,trim:true,required:true,style:\"width:20em\"' data-dojo-attach-point=\"answertext\" data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/><br/>\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Close\",\"class\":\"btnleft\"' data-dojo-attach-event=\"onClick:_close\"></button>\r\n\t\t\t<button data-dojo-attach-event=\"onClick:_add_answer_add\" data-dojo-attach-point=\"addanswerbtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\",busyLabel:\"Please Wait Saving ...\",label:\"Add\",\"class\":\"btnright \"'></button>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n\r\n\r\n",
	publish_path:"/clippings/question/global",
	globalonly:false,
	constructor: function()
	{
		this._save_call_back=dojo.hitch(this, this._save_call);
		this._clients = new dojox.data.JsonRestStore({target:"/clients/rest_combo", idAttribute:"id"});
		this._issues = new dojox.data.JsonRestStore({target:"/crm/issues/issues_list_rest", idAttribute:"id"});
		this._clientid = null;
		this._issueid = null;

	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.clientid.set("store", this._clients);
		this.clientid.set("value",  "-1");
		this.issueid.set("store", this._issues);
		this.issueid.set("value", "-1" );

		this.answer_grid.set("structure", this.view);
		this._memorystore=dojo.store.Memory();
		this._store = dojo.data.ObjectStore({objectStore: this._memorystore});
		this.answer_grid._setStore(this._store);
		this.answer_grid.canSort = function(){return false};
		this.answer_grid["onRowClick"] = dojo.hitch(this, this._on_row_click );
		this.default_answer_answerid.set("store", this._store);

		dojo.attr(this.issue_label_1, "innerHTML", "&nbsp;"+ PRMAX.utils.settings.issue_description);
		dojo.attr(this.issue_label_2, "innerHTML", PRMAX.utils.settings.issue_description);

		dojo.attr(this.client_label_1, "innerHTML", "&nbsp;"+ PRMAX.utils.settings.client_name);
		dojo.attr(this.client_label_2, "innerHTML", PRMAX.utils.settings.client_name);

		if (this.globalonly==true)
		{
			dojo.addClass(this.restrict_client_label_view,"prmaxhidden");
			dojo.addClass(this.restrict_campaign_label_view,"prmaxhidden");
			this.restrict_global.set("checked",true);
		}
	},
	_on_row_click:function(e)
	{
		var row = this.answer_grid.getItem(event.rowIndex);
		if ( row && confirm("Remove Answer"))
		{
			this._store.deleteItem(row);
		}
	},
	view: {
		cells: [[
		{name: 'Answer Text',width: "auto",field:"answertext"},
		{name: ' ',width:"20px",formatter:ttl.utilities.format_row_ctrl }
		]]
	},
	clear:function()
	{
		this.questiontext.set("value","");
		this.question_is_text.set("checked",true);
		this._memorystore=dojo.store.Memory();
		this._store = dojo.data.ObjectStore({objectStore: this._memorystore});
		this.answer_grid._setStore(this._store);
		this.answer_grid.setQuery(ttl.utilities.getPreventCache({}));
		this.savebtn.cancel();
		this.default_answer_answerid.set("store", this._store);
		this.restrict_global.set("checked",true);

		this.wizard_pages.selectChild(this.page_start);
	},
	load:function(clientid,issueid)
	{
		this._clientid = clientid;
		if ( this._clientid != null )
		{
			this.restrict_client.set("checked",true);
			this.clientid.set("value", this._clientid);
			dojo.addClass(this.restrict_global_label_view,"prmaxhidden");
			dojo.addClass(this.restrict_campaign_label_view,"prmaxhidden");
		}

		this._issueid = issueid;
		if ( this._issueid != null )
		{
			this.restrict_campaign.set("checked",true);
			this.issueid.set("value", this._issueid);
			dojo.addClass(this.restrict_global_label_view,"prmaxhidden");
			dojo.addClass(this.restrict_client_label_view,"prmaxhidden");
		}
	},
	_next_page_start_page:function()
	{
		if ( ttl.utilities.formValidator(this.main_form)==false)
		{
			this.questiontext.focus();
			return;
		}

		if ( this._has_multiple_answer())
				this.wizard_pages.selectChild(this.page_answers);
			else
			{
				this.wizard_pages.selectChild(this.page_restrictions);
			}
	},
	_next_page_page_answers:function()
	{
		this._store.save();

		if ( this._memorystore.data.length<=0 )
		{
			alert("No Answers Specified");
		}
		else
		{
			this.wizard_pages.selectChild(this.page_restrictions);
		}
	},
	_prev_page_page_answers:function()
	{
		this.wizard_pages.selectChild(this.page_start);
	},
	_prev_page_page_default:function()
	{
		this.wizard_pages.selectChild(this.page_restrictions);
	},
	_next_page_restrict:function()
	{
		var restriction = this.restrict_form.get("value")["restrict"];
		if ( restriction=="2")
		{
			var tmp = this.clientid.get("value");
			if (tmp == null || tmp == "" || tmp == "-1")
			{
				alert("No Client Selected");
				this.clientid.focus();
				return;
			}
		}
		if ( restriction=="3")
		{
			var tmp = this.issueid.get("value");
			if (tmp == null || tmp == "" || tmp == "-1")
			{
				alert("No Issue Selected");
				this.issueid.focus();
				return;
			}
		}

		this._show_default_selection();
		this.wizard_pages.selectChild(this.page_default);
	},
	_prev_page_restrict:function()
	{
		if ( this._has_multiple_answer())
			this.wizard_pages.selectChild(this.page_answers);
		else
		{
			this.wizard_pages.selectChild(this.page_start);
		}
	},
	_save:function()
	{
		if ( ttl.utilities.formValidator(this.main_form)==false)
		{
			alert("Not all required field filled in");
			this.savebtn.cancel();
			return;
		}

		var content=this.main_form.get("value");
		content=dojo.mixin(content,this.default_form.get("value"));
		content=dojo.mixin(content,this.restrict_form.get("value"));
		this._store.save();
		if ( this._memorystore.data.length>0 )
		{
			var answers= new Array();
			for ( var key in this._memorystore.data)
			{
				answers.push( {answertext:this._memorystore.data[key].answertext, id : this._memorystore.data[key].id} );
			}
			content["answers"]= dojo.toJson(answers);
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._save_call_back,
			url:'/clippings/questions/add',
			content: content}));
	},
	focus:function()
	{
		this.questiontext.focus();
	},
	resize:function()
	{
		this.frame.resize( {w:500, h:500} );
	},
	_has_multiple_answer:function()
	{
		if ( this.question_list.get("checked") == true ||
				 this.question_multiple.get("checked") == true)
			return true;
		else
			return false;
	},
	_show_default_selection:function()
	{
		var questiontypeid = this.main_form.get("value")["questiontypeid"];

		dojo.addClass(this.default_yes_no_view,"prmaxhidden");
		dojo.addClass(this.default_text_view,"prmaxhidden");
		dojo.addClass(this.default_numeric,"prmaxhidden");
		dojo.addClass(this.default_currency_view,"prmaxhidden");
		dojo.addClass(this.default_list_view,"prmaxhidden");

		switch (questiontypeid)
		{
		case "1":
			dojo.removeClass(this.default_yes_no_view,"prmaxhidden");
			break;
		case "2":
			dojo.removeClass(this.default_list_view,"prmaxhidden");
			break;
		case "3":
			dojo.removeClass(this.default_text_view,"prmaxhidden");
			break;
		case "4":
			dojo.removeClass(this.default_numeric,"prmaxhidden");
			break;
		case "5":
			dojo.removeClass(this.default_currency_view,"prmaxhidden");
			break;
		case "6":
			break;
		}
	},
	_save_call:function(response)
	{
		if ( response.success=="OK")
		{
			dojo.publish(this.publish_path, [response.data, this._clientid, this._issueid]);
		}
		else if ( response.success=="DU")
		{
			alert("Already Exists");
			this.wizard_pages.selectChild(this.page_start);
			this.questiontext.focus();
		}
		else
		{
			alert("Problem Saving Question");
		}

		this.savebtn.cancel();
	},
	_change_restrict_view:function()
	{
		var restriction = this.restrict_form.get("value")["restrict"];
		switch (restriction)
		{
		case "1":
			dojo.addClass(this.restrict_client_view,"prmaxhidden");
			dojo.addClass(this.restrict_issue_view,"prmaxhidden");
			this.issueid.set("required",false);
			this.clientid.set("required",false);
			this.issueid.set("value",-1);
			this.clientid.set("required",-1);
			break;
		case "2":
			dojo.removeClass(this.restrict_client_view,"prmaxhidden");
			dojo.addClass(this.restrict_issue_view,"prmaxhidden");
			this.issueid.set("required",false);
			this.issueid.set("value",-1);
			this.clientid.set("required",true);
			break;
		case "3":
			dojo.addClass(this.restrict_client_view,"prmaxhidden");
			dojo.removeClass(this.restrict_issue_view,"prmaxhidden");
			this.issueid.set("required",true);
			this.clientid.set("required",false);
			this.clientid.set("value",-1);
			break;
		}
	},
	_add_answer:function()
	{
		this.new_answer_dlg.show();
	},
	_add_answer_add:function()
	{
		if ( ttl.utilities.formValidator(this.add_answer_form)==false)
		{
			alert("Not all required field filled in");
			this.addanswerbtn.cancel();
			return;
		}

		var answertext = this.answertext.get("value");

		this._store.save();
		if ( this._memorystore.data.length>0 )
		{
			for ( var key in this._memorystore.data)
			{
				if ( this._memorystore.data[key].answertext == answertext )
				{
					alert("Answer Already Exists");
					this.addanswerbtn.cancel();
					this.answertext.focus();
					return ;
				}
			}
		}

		this._store.newItem({id:PRCOMMON.utils.uuid.createUUID(),answertext:this.answertext.get("value")});
		this.new_answer_dlg.hide();
		this.addanswerbtn.cancel();
		this.answertext.set("value","");
		this._store.save();
	},
	_close:function()
	{
		this.new_answer_dlg.hide();
	}
});

}

if(!dojo._hasResource["prcommon.clippings.questions.selectquestion"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.clippings.questions.selectquestion"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.clippings.questions.selectquestion
// Author:  Chris Hoy
// Purpose:
// Created: 28/04/2015
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prcommon.clippings.questions.selectquestion");







dojo.declare("prcommon.clippings.questions.selectquestion",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div style=\"margin:10px\">\r\n\t<h2>Add Existing Question</h2>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\",\"class\":\"common_prmax_layout\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",value:-1,name:\"clientid\"' data-dojo-attach-point=\"clientid\" data-dojo-type=\"dijit.form.TextBox\" />\r\n\t\t<input data-dojo-props='type:\"hidden\",value:-1,name:\"issueid\"' data-dojo-attach-point=\"issueid\" data-dojo-type=\"dijit.form.TextBox\" />\r\n\t\t<hr/>\r\n\t\t<label>Select Question</label><select data-dojo-props='\"class\":\"prmaxinput\", name:\"questionid\",autoComplete:true,searchAttr:\"questiontext\",labelType:\"html\",style:\"width:8em\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"questionid\"></select><br/>\r\n\t\t<button data-dojo-attach-event=\"onClick:_save\" data-dojo-attach-point=\"savebtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\",busyLabel:\"Please Wait Saving ...\",label:\"Save\",\"class\":\"btnright \"'></button>\r\n\t</form>\r\n</div>\r\n\r\n",
	publish_path:"/clippings/question/analysis",
	globalonly:false,
	constructor: function()
	{
		this._questions = new dojox.data.JsonRestStore( {target:"/clippings/questions/list_by_source", idAttribute:"questionid"});
		this._save_call_back = dojo.hitch (this, this._save_call);
	},
	postCreate:function()
	{
		this.questionid.set("store", this._questions);
		this.inherited(arguments);
		if (this.globalonly==true)
		{
			var query={globalonly:1};
			this.savebtn.cancel();
			this.questionid.set("query", query);
			this.questionid.set("value", null);

		}
	},
	load:function(clientid,issueid)
	{
		this.clientid.set("value", clientid);
		this.issueid.set("value", issueid);
		this._clientid = clientid;
		this._issueid = issueid;

		var query={};
		if (clientid!=null)
			query["iclientid"]=clientid;
		if (issueid!=null)
			query["iissueid"]=issueid;

		this.savebtn.cancel();
		this.questionid.set("query", query);
		this.questionid.set("value", null);
	},
	_save:function()
	{
		if ( ttl.utilities.formValidator(this.form)==false)
		{
			alert("Not all required field filled in");
			this.savebtn.cancel();
			return;
		}
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._save_call_back,
			url:'/clippings/analyse/add_question_to_analysis',
			content: this.form.get("value")}));
	},
	_save_call:function(response)
	{
		if ( response.success=="OK")
		{
			dojo.publish(this.publish_path, [response.data,this._clientid,this._issueid]);
		}
		else
		{
			alert("Problem");
		}
		this.savebtn.cancel();
	},
	clear:function()
	{
		if (this.globalonly==true)
		{
			var query={globalonly:1};
			this.savebtn.cancel();
			this.questionid.set("query", query);
			this.questionid.set("value", null);

		}
	}
});

}

if(!dojo._hasResource["prcommon.clippings.questions.analysis_viewer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.clippings.questions.analysis_viewer"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.clippings.questions
// Author:  Chris Hoy
// Purpose:
// Created: 28/04/2015
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prcommon.clippings.questions.analysis_viewer");











dojo.declare("prcommon.clippings.questions.analysis_viewer",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div data-dojo-attach-point=\"border_control\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-point='style:\"width:100%;height:100%\",gutters:false' >\r\n\t\t<span class=\"std_menu_view\">\r\n\t\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:38px;width:100%;padding:0x;margin:0px;overflow:hidden\",\"class\":\"std_menu_view\"'>\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"New Question\",iconClass:\"fa fa-plus fa-3x\"' data-dojo-attach-event=\"onClick:_new_question\"></button>\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='label:\"Select Question\",iconClass:\"fa fa-list fa-3x\"' data-dojo-attach-event=\"onClick:_select_question\"></button>\r\n\t\t\t</div>\r\n\t\t</span>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\"  data-dojo-props='region:\"center\",splitter:true'>\r\n\t\t\t<div data-dojo-attach-point=\"viewer_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='query:{ },rowsPerPage:30,style:\"width:100%;height:100%\"' ></div>\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"add_new_question_dlg\" data-dojo-type=\"dijit.Dialog\"  data-dojo-props='title:\"Add New Question\",style:\"width:500px;height:460px\"'>\r\n\t\t\t<div data-dojo-type=\"prcommon.clippings.questions.add\" data-dojo-attach-point=\"add_new_question_ctrl\" data-dojo-props='publish_path:\"/clippings/question/analysis\"'></div>\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"select_question_dlg\" data-dojo-type=\"dijit.Dialog\"  data-dojo-props='title:\"Select a Question\",style:\"width:500px;height:200px\"'>\r\n\t\t\t<div data-dojo-type=\"prcommon.clippings.questions.selectquestion\" data-dojo-attach-point=\"select_question_ctrl\" data-dojo-props='publish_path:\"/clippings/question/analysis/select\"'></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n",
	constructor: function()
	{
		this._questions = new dojox.data.JsonRestStore( {target:"/clippings/analyse/list_by_source", idAttribute:"clippingsanalysistemplateid"});
		this._clientid=null;
		this._issueid=null;
		this._menu_item=null;
		this._is_load=false;
		dojo.subscribe("/clippings/question/analysis", dojo.hitch(this,this._new_question_event));
		dojo.subscribe("/clippings/question/analysis/select", dojo.hitch(this, this._selected_question_event));
		this._remove_question_call_back = dojo.hitch(this, this._remove_question_call);
	},
	view1:{noscroll: false,
		cells: [[
			{name: ' ',styles: 'text-align: center;', width: "15px",formatter:ttl.utilities.format_row_ctrl},
			{name: 'Name',width: "250px",field:'questiontext'},
			{name: 'Type',width: "100px",field:'questiondescription'}
			]]
	},
	postCreate:function()
	{

		this.viewer_grid.set("structure",this.view1 );
		this.viewer_grid["onRowClick"] = dojo.hitch(this, this._on_row_click );
		this.viewer_grid.canSort = function(){return false};

		this.inherited(arguments);

	},
	_on_row_click:function(e)
	{
		var row = this.viewer_grid.getItem(event.rowIndex);
		if ( row )
		{
			this._row = row;
			if (this._menu_item==null)
			{
				this._menu_item = new dijit.Menu();
				this._menu_item.addChild(new dijit.MenuItem({label:"Remove", onClick:dojo.hitch(this,this._remove_question)}));
			}
			this._menu_item._openMyself(e);
		}
	},
	_remove_question:function()
	{
		if ( confirm ( "Remove " + this._row.questiontext + " from analysis?"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._remove_question_call_back,
				url:'/clippings/analyse/remove_question',
				content: {clippingsanalysistemplateid:this._row.clippingsanalysistemplateid}}));
		}
	},
	_remove_question_call:function(response)
	{
		if ( response.success=="OK")
		{
			this._questions.deleteItem( this._row );
		}
	},
	resize:function()
	{
		this.border_control.resize(arguments[0]);
	},
	load:function(clientid, issueid)
	{
		if (this._is_load==false)
		{
			this.viewer_grid._setStore (this._questions);
			this._is_load=true;
		}

		var content = {};

		if (clientid != null)
			content["clientid"] = clientid;
		if (issueid != null)
			content["issueid"] = issueid;

		this.viewer_grid.setQuery(ttl.utilities.getPreventCache(content));
		this._clientid=clientid;
		this._issueid=issueid;
		this.add_new_question_ctrl.load(this._clientid, this._issueid);
		this.select_question_ctrl.load(this._clientid, this._issueid);
	},
	_new_question:function()
	{
		this.add_new_question_ctrl.clear();
		this.add_new_question_dlg.show();
	},
	_select_question:function()
	{
		this.select_question_dlg.show();
	},
	_new_question_event:function(analysis,clientid,issueid)
	{
		if (this._clientid === clientid || this._issueid === issueid)
		{
			this._questions.newItem(analysis);
		}
		this.add_new_question_dlg.hide();
		this.select_question_dlg.hide();
	},
	_selected_question_event:function(question)
	{
		this._questions.newItem(question);
		this.select_question_dlg.hide();

	}
});

}

if(!dojo._hasResource["prmax.customer.clients.add"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.customer.clients.add"] = true;
//-----------------------------------------------------------------------------
// Name:    add.js
// Author:  Chris Hoy
// Purpose:
// Created: 13/10/2011
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.customer.clients.add");










dojo.declare("prmax.customer.clients.add",
	[ ttl.BaseWidget ],{
		widgetsInTemplate: true,
		mode: "add",
		templateString:"<div>\r\n\t<div data-dojo-attach-point=\"frame\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='gutters:false,style:\"width:100%;height:100%\"' >\r\n\t\t<div data-dojo-attach-point=\"tabcont\" data-dojo-type=\"dijit.layout.TabContainer\" data-dojo-props=\"region:'center',splitter:true,'class':'bordered'\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='title:\"Details\",style:\"width:100%;height:100%\"'>\r\n\t\t\t\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='\"class\":\"prmaxdefault common_prmax_layout\",onsubmit:\"return false\"'>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"clientid\" data-dojo-props='name:\"clientid\",type:\"hidden\",value:\"-1\"' >\r\n\t\t\t\t\t<label data-dojo-attach-point=\"client_name\" class=\"label_2\">Client Name</label><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"clientname\" data-dojo-props='\"class\":\"prmaxrequired\",name:\"clientname\",required:true,trim:true,maxLength:120,invalidMessage:\"Client Name Required\",promptMessage:\"Please Enter a Client Name\",type:\"text\",style:\"width:20em\"'></br>\r\n\t\t\t\t\t<label class=\"label_2\">Www</label><input data-dojo-attach-point=\"www\" data-dojo-props='name:\"www\",type:\"text\",size:\"40\",maxLength:\"90\",trim:true,style:\"width:25em\",regExpGen:dojox.validate.regexp.url' data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/>\r\n\t\t\t\t\t<label class=\"label_2\">Email</label><input data-dojo-attach-point=\"email\" data-dojo-props='name:\"email\",type:\"text\",size:\"40\",maxLength:\"84\",trim:true,style:\"width:25em\",regExpGen:dojox.validate.regexp.emailAddress' data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/>\r\n\t\t\t\t\t<label class=\"label_2\">Tel</label><input data-dojo-attach-point=\"tel\" data-dojo-props='name:\"tel\",type:\"text\",maxLength:\"40\",style:\"15em\"' data-dojo-type=\"dijit.form.TextBox\"/><br/>\r\n\t\t\t\t\t<label class=\"label_2\">Twitter</label><input data-dojo-attach-point=\"twitter\" data-dojo-props='\"class\":\"prmaxinput\",name:\"twitter\",type:\"text\",maxLength:\"90\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:25em\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t\t<label class=\"label_2\">Facebook</label><input data-dojo-attach-point=\"facebook\" data-dojo-props='\"class\":\"prmaxinput\",name:\"facebook\",type:\"text\",maxLength:\"90\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:25em\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t\t<label class=\"label_2\">Linkedin</label><input data-dojo-attach-point=\"linkedin\" data-dojo-props='\"class\":\"prmaxinput\",name:\"linkedin\",type:\"text\",maxLength:\"80\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:25em\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t\t<label class=\"label_2\">Instagram</label><input data-dojo-attach-point=\"instagram\" data-dojo-props='\"class\":\"prmaxinput\",name:\"instagram\",type:\"text\",maxLength:\"80\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:25em\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='title:\"NewsRoom\",style:\"width:100%;height:100%\",\"class\":\"scrollpanel\"' data-dojo-attach-point=\"tab_newoom\">\r\n\t\t\t\t<form data-dojo-attach-point=\"form2\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='\"class\":\"prmaxdefault common_prmax_layout\",onsubmit:\"return false\"'>\r\n\t\t\t\t\t<input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"newsroomid\" data-dojo-props='name:\"newsroomid\",type:\"hidden\",value:\"-1\"' >\r\n\t\t\t\t\t<div data-dojo-attach-point=\"newsroom_avaliable\" class=\"prmaxhidden\"<label class=\"label_1\">Has Newsroom</label><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"has_news_room\" data-dojo-props='type:\"checkbox\",name:\"has_news_room\"' data-dojo-attach-event=\"onChange:_new_room_show\"/></br></div>\r\n\t\t\t\t\t<div data-dojo-attach-point=\"news_room_details\" class=\"prmaxhidden\">\r\n\t\t\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td align=\"right\" class=\"prmaxrowtag\" width=\"20%\">News Room Root</td>\r\n\t\t\t\t\t\t\t\t<td colspan=\"2\"><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"news_room_root\" data-dojo-props='lowercase:true,\"class\":\"prmaxrequired\",name:\"news_room_root\",trim:true,maxLength:20,type:\"text\",style:\"width:10em\", regExp:\"[\\\\w]+\", invalidMessage:\"Invalid\"'/></td>\r\n\t\t\t\t\t\t\t\t<td><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"show_new_room_url\" data-dojo-attach-event=\"onClick:_show_new_room_url\" data-dojo-props='type:\"button\",\"class\":\"prmaxhidden\",label:\"Goto News Room\"'></button></td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td align=\"right\" class=\"prmaxrowtag\">Custom Link 1</td>\r\n\t\t\t\t\t\t\t\t<td colspan=\"2\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"prmaxrowtag\">Name</span><input data-dojo-attach-point=\"link_1_name\" data-dojo-props='\"class\":\"prmaxinput\",name:\"link_1_name\",type:\"text\",maxLength:\"80\",trim:true,style:\"width:10em\"' data-dojo-type=\"dijit.form.TextBox\" />\r\n\t\t\t\t\t\t\t\t\t<span class=\"prmaxrowtag\">Url</span><input data-dojo-attach-point=\"link_1_url\" data-dojo-props='\"class\":\"prmaxinput\",name:\"link_1_url\",type:\"text\",maxLength:\"80\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:20em\"' data-dojo-type=\"dijit.form.ValidationTextBox\" />\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td align=\"right\" class=\"prmaxrowtag\">Custom Link 2</td>\r\n\t\t\t\t\t\t\t\t<td colspan=\"2\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"prmaxrowtag\">Name</span><input data-dojo-attach-point=\"link_2_name\" data-dojo-props='\"class\":\"prmaxinput\",name:\"link_2_name\",type:\"text\",maxLength:\"80\",trim:true,style:\"width:10em\"' data-dojo-type=\"dijit.form.TextBox\" />\r\n\t\t\t\t\t\t\t\t\t<span class=\"prmaxrowtag\">Url</span><input data-dojo-attach-point=\"link_2_url\" data-dojo-props='\"class\":\"prmaxinput\",name:\"link_2_url\",type:\"text\",maxLength:\"80\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:20em\"' data-dojo-type=\"dijit.form.ValidationTextBox\" />\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td align=\"right\" class=\"prmaxrowtag\" valign=\"top\" >Header Color</td>\r\n\t\t\t\t\t\t\t\t<td width=\"200px\">\r\n\t\t\t\t\t\t\t\t\t<div data-dojo-type=\"prmax.customer.clients.pickcolour\" data-dojo-attach-point=\"header_colour\" data-dojo-props='name:\"header_colour\",style:\"width:200px\"' data-dojo-attach-event=\"onClick:_ColourUpdate\" ></div>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td >\r\n\t\t\t\t\t\t\t\t\t<label><input data-dojo-attach-point=\"default_header_colour\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='\"class\":\"prmaxdefault\",type:\"checkbox\",value:\"0\",checked:false' data-dojo-attach-event=\"onClick:_use_default_color\"/>Use Default</label><br/>\r\n\t\t\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" valign=\"top\" >Header Image Left</td><td colspan=\"3\"><div data-dojo-type=\"prmax.customer.clients.headerimage\" data-dojo-attach-point=\"headerimage_left\" data-dojo-props='style:\"width:500px;height:120px;margin:2px\",\"class\":\"bordered\",title:\"Left side Image\",imagetypeid:1,name:\"headerimageleftid\"' ></div></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" valign=\"top\" >Header Image Right</td><td colspan=\"3\"><div data-dojo-type=\"prmax.customer.clients.headerimage\" data-dojo-attach-point=\"headerimage_right\" data-dojo-props='style:\"width:500px;height:120px;margin:2px\",\"class\":\"bordered\",title:\"Right side Image\",imagetypeid:2,name:\"headerimagerightid\"' ></div></td></tr>\r\n\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" valign=\"top\" >About</td><td colspan=\"3\"><div data-dojo-type=\"dijit.Editor\" data-dojo-attach-point=\"about_template\" data-dojo-props='name:\"about_template\", \"class\":\"bordered\", extraPlugins:[{name:\"dijit._editor.plugins.FontChoice\",command:\"fontName\", generic:false},\"fontSize\",\"createLink\",\"viewsource\",\"preview\"],style:\"width:95%;height:150px\"' ></div></td></tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t\t<form data-dojo-attach-point=\"show_news_room_form\" target=\"_blank\" method=\"post\" action=\"\"></form>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-attach-point=\"analysis_tab\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='title:\"Analysis\",gutters:false' >\r\n\t\t\t\t<div data-dojo-type=\"prcommon.clippings.questions.analysis_viewer\" data-dojo-props='region:\"center\",style:\"width:100%;height:100%\"' data-dojo-attach-point=\"analysis_ctrl\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"bottom\",style:\"width:100%;height:50px\"'>\r\n\t\t\t<div class=\"common_prmax_layout\" style=\"padding:2px;\">\r\n\t\t\t\t<button data-dojo-attach-point=\"delete_ctrl\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-event=\"onClick:_Delete_Customer\" data-dojo-props='busyLabel:\"Please Wait Deleting...\",\"class\":\"prmaxbutton prmaxhidden\",style:\"float:left\",label:\"Delete\"'></button>\r\n\t\t\t\t<button data-dojo-attach-point=\"save\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-event=\"onClick:_Add_Customer\" data-dojo-props='busyLabel:\"Please Wait...\",\"class\":\"prmaxbutton\",style:\"float:right\",label:\"Create\"'>Create</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._Save_Call_Back = dojo.hitch(this, this._Save_Call);
		this._Load_Call_Back = dojo.hitch(this, this._Load_Call);
		this._Delete_Call_Back = dojo.hitch(this, this._Delete_Call);
		this._icustomerid = null;
	},
	postCreate:function()
	{
		this.inherited(arguments);

		dojo.attr( this.client_name,"innerHTML",PRMAX.utils.settings.client_name + " Short Name");

	},
	startup:function()
	{
		if (this.mode == "edit")
		{
			this.save._label = "Update";
			dojo.attr(this.save.containerNode,"innerHTML", "Update");
		}
		else
		{
			this.headerimage_left.show();
			this.headerimage_right.show();
		}
		this.inherited(arguments);

		if ( PRMAX.utils.settings.has_news_rooms == true)
		{
			dojo.removeClass(this.newsroom_avaliable,"prmaxhidden");
		}
		else
		{
			this.tab_newoom.controlButton.domNode.style.display = "none";
		}

		if ( PRMAX.utils.settings.clippings != true || this.mode != "edit")
			this.analysis_tab.controlButton.domNode.style.display = "none";

		if (this.mode != "edit")
		{
			this.frame.resize({w:800, h:567});
		}
	},
	_Add_Customer:function()
	{
		if ( ttl.utilities.formValidator(this.form)==false)
		{
			alert("Not all required field filled in");
			this.save.cancel();
			return;
		}

		// Check too see if the news room fields are all present
		if (this.has_news_room.get("checked") == true )
		{
			if (this.news_room_root.get("value") =="")
			{
				alert("Not all required field filled in");
				this.save.cancel();
				this.news_room_root.focus();
				return;
			}
		}

		var content = dojo.mixin(this.form.get("value"),this.form2.get("value"));

		if (this._icustomerid != null)
			content["icustomerid"] = this._icustomerid;

		dojo.xhrPost(
		ttl.utilities.makeParams({
			load: this._Save_Call_Back,
			url:'/clients/save',
			content: content
			}));
	},
	_Save_Call:function( response )
	{
		if ( response.success == "OK" )
		{
			if (this.mode == "edit")
			{
				alert("Updated");
				this.save.cancel();
				if (this._do_parent)
					this._do_parent(2,response.data.client);
				if ( response.data.client.has_news_room)
				{
					dojo.attr(this.show_news_room_form,"action",response.data.newsroom.news_room_url);
					dojo.removeClass(this.show_new_room_url.domNode,"prmaxhidden");
				}
			}
			else
			{
				alert("Added");
				if (this._do_parent)
					this._do_parent (3,response.data.client);
				this.Clear();
			}
		}
		else if ( response.success == "DU" )
		{
			alert(response.message);
			this.clientname.focus();
		}
		else
		{
			alert("Problem");
		}

		this.save.cancel();

	},
	Load:function( clientid, parent_func )
	{
		this._do_parent = parent_func;
		this.Clear();
		if ( clientid != -1 )
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._Load_Call_Back,
					url:'/clients/get',
					content: {clientid: clientid,
					extended:true}
			}));
		}
	},
	_Load_Call:function( response )
	{
		if ( response.success == "OK" )
		{
			with (response.data)
			{
				this.clientid.set("value", client.clientid );
				this.clientname.set("value", client.clientname );
				this.www.set("value", client.www );
				this.email.set("value", client.email );
				this.tel.set("value", client.tel );
				this.twitter.set("value", client.twitter );
				this.facebook.set("value", client.facebook );
				this.linkedin.set("value", client.linkedin );
				this.instagram.set("value", client.instagram );
				this.has_news_room.set("checked", client.has_news_room);
				if (newsroom)
				{
					if (client.clientid == 2014)
					{
						newsroom.news_room_url = "https://www.cardiffnewsroom.co.uk/" //live
//						newsroom.news_room_url = "http://testcardiffnewsroom.prmax.co.uk/" //test
					}
					if (client.clientid == 1966)
					{
						newsroom.news_room_url = "https://www.newyddioncaerdydd.co.uk" //live
//						newsroom.news_room_url = "http://testnewyddioncaerdydd.prmax.co.uk/" //test
					}
					this.newsroomid.set("value", newsroom.newsroomid)
					this.news_room_root.set("value", newsroom.news_room_root);
					this.about_template.set("value", newsroom.about_template);
					dojo.attr(this.show_news_room_form,"action",newsroom.news_room_url);
					dojo.removeClass(this.show_new_room_url.domNode,"prmaxhidden");
					this.headerimage_left.set("value",client.clientid);
					this.headerimage_right.set("value",client.clientid);
					this.header_colour.set("value",newsroom.header_colour);
					this._new_room_show();
					this.link_1_name.set("value",newsroom.link_1.name);
					this.link_1_url.set("value",newsroom.link_1.url);
					this.link_2_name.set("value",newsroom.link_2.name);
					this.link_2_url.set("value",newsroom.link_2.url);
				}

				if (this._do_parent)
					this._do_parent (1,response.data);
				this.headerimage_left.show();
				this.headerimage_right.show();
				if ( PRMAX.utils.settings.clippings == true )
					this.analysis_ctrl.load(client.clientid);

				dojo.removeClass(this.delete_ctrl.domNode, "prmaxhidden" );
			}
		}
	},
	Clear:function()
	{
		this.clientid.set("value", -1 ) ;
		this.clientid.set("value","");
		this.clientname.set("value","");
		this.www.set("value","");
		this.email.set("value","");
		this.tel.set("value","");
		this.twitter.set("value","");
		this.facebook.set("value","");
		this.linkedin.set("value","");
		this.instagram.set("value","");
		this.save.cancel();
		this.clientid.set("value",-1);
		this.newsroomid.set("value",-1);
		this.news_room_root.set("value", "");
		this.about_template.set("value", "");
		this.default_header_colour.set("checked", false);
		this.headerimage_left.set("value",-1);
		this.headerimage_right.set("value",-1);
		dojo.addClass(this.delete_ctrl.domNode, "prmaxhidden" );
		dojo.addClass(this.show_new_room_url.domNode,"prmaxhidden");
		this.delete_ctrl.cancel();
		this.link_1_name.set("value","");
		this.link_1_url.set("value","");
		this.link_2_name.set("value","");
		this.link_2_url.set("value","");
	},
	_Delete_Call:function ( response )
	{
		if ( response.success == "OK" )
		{
			if (this._do_parent)
				this._do_parent(3, null );
			alert("Deleted");
			this.Clear();
		}
		else if ( response.success == "DU")
		{
			alert ( "In Use");
		}
		else
		{
			alert("Problem Deleting");
		}
		this.delete_ctrl.cancel();
	},
	_Delete_Customer:function()
	{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._Delete_Call_Back,
					url:'/clients/delete',
					content: {clientid: this.clientid.get("value")}
			}));
	},
	_new_room_show:function()
	{
		if (this.has_news_room.get("checked"))
		{
			dojo.removeClass(this.news_room_details,"prmaxhidden");
			this.headerimage_left.show();
			this.headerimage_right.show();
		}
		else
		{
			dojo.addClass(this.news_room_details,"prmaxhidden");
		}
	},
	_show_new_room_url:function()
	{
		this.show_news_room_form.submit();
	},
	resize:function()
	{
		this.inherited(arguments);
		this.frame.resize(arguments[0]);
	},
	_use_default_color:function()
	{
		if (this.default_header_colour.checked)
		{
			this.header_colour.set("value", "#2e74b5")
		}
	},
	_ColourUpdate:function()
	{
		this.default_header_colour.set("checked", false);
	},
	_setIcustomeridAttr:function(value)
	{
		this._icustomerid = value;
	}
});

}

if(!dojo._hasResource["prmax.pressrelease.seo.seoimage"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.pressrelease.seo.seoimage"] = true;
//-----------------------------------------------------------------------------
// Name:    prmax.pressrelease.seo.seoimage
// Author:  Chris Hoy
// Purpose:
// Created: 18/10/2011
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.pressrelease.seo.seoimage");



dojo.declare("prmax.pressrelease.seo.seoimage",
	[ ttl.BaseWidget],
	{
	name:"seoimageid",
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div data-dojo-attach-point=\"borderControl\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='style:\"width:100%;height:100%\",gutters:false'>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"width:150px;height:110px;border:1px solid black\"' >\r\n\t\t\t<img data-dojo-attach-point=\"seoimagepreview\" height=\"100px\" ></img>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\"' >\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Load\"' data-dojo-attach-event=\"onClick:_ShowLoad\" data-dojo-attach-point=\"loadbtn\"></button>\r\n\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Clear\",\"class\":\"prmaxhidden\"' data-dojo-attach-event=\"onClick:_Clear\" data-dojo-attach-point=\"clearbtn\"></button><br/>\r\n\t\t\t<span class=\"prmaxrowtagcomment\">If you would like to include an image in your release click Load</span>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"load_image_dialog\" data-dojo-props='title:\"Upload Image\",style:\"width:500px;height:200px\"'>\r\n\t\t<form  data-dojo-attach-point=\"upload_form\" method=\"post\" name=\"upload_form\" enctype=\"multipart/form-data\"  onSubmit=\"return false;\">\r\n\t\t<input class=\"prmaxinput\" type=\"hidden\" data-dojo-attach-point=\"seoimageid\" name=\"seeimageid\" value=\"-1\">\r\n\t\t<input class=\"prmaxinput\" type=\"hidden\" data-dojo-attach-point=\"seoimage_cache\" name=\"seoimage_cache\" value=\"-1\">\r\n\t\t<br/>\r\n\t\t<table width=\"99%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" border = \"0\">\r\n\t\t\t<tr><td width=\"10%\" align=\"right\" class=\"prmaxrowtag\">Image</td><td width=\"90%\" ><input class=\"prmaxinput\" type=\"file\" name=\"seoimage_file\" data-dojo-attach-point=\"seoimage_file\"></td></tr>\r\n\t\t\t<tr><td  >&nbsp;</td></tr>\r\n\t\t\t<tr><td colspan=\"2\"><p class=\"prmaxrowtag\">The following file types can be uploaded .jpg, .gif, .png.  Upload may take a few minutes.</p></td></tr>\r\n\t\t\t<tr><td colspan=\"2\" align=\"right\"><button data-dojo-attach-point=\"saveNode\" data-dojo-props='\"class\":\"prmaxbutton\",type:\"button\",label:\"Upload Image\"' data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_UpLoad\"></button></td></tr>\r\n\t\t\t<tr><td colspan=\"2\">\r\n\t\t\t\t<div data-dojo-attach-point=\"progressNode\" style=\"display:none;\">\r\n\t\t\t\t\t<p style=\"text-align:center\" class=\"prmaxrowtag\">Uploading started. Please wait as this may take several minutes</p>\r\n\t\t\t\t</div>\r\n\t\t\t</td></tr>\r\n\t\t</table>\r\n\t</form>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._AddedCallback = dojo.hitch ( this, this._AddedCall );
		this._ErrorCallBack = dojo.hitch ( this, this._ErrorCall );

		dojo.subscribe("/seo/thumbnail", dojo.hitch ( this, this._image_reloaded_call ));

	},
	_image_reloaded_call:function()
	{
		dojo.attr(this.seoimagepreview,"src", "/emails/seorelease/load_seo_thumbnail");
		dojo.attr(this.seoimageid,"value","-2");
	},
	postCreate:function()
	{
		this.inherited(arguments);
	},
	resize:function()
	{
		this.borderControl.resize ( arguments[0] ) ;
	}
	,
	_UpLoad:function()
	{
		if (this.seoimage_file.value.length == 0 )
		{
			this.seoimage_file.focus();
			return ;
		}

		var fileName = this.seoimage_file.value;
		var ext = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
		if( ext != "jpg" && ext != "gif" && ext != "png")
			{
				alert("Upload png, jpg, gif files only");
				this.seoimage_file.focus();
				return ;
			}

		this.saveNode.set("disabled",true);
		this.seoimage_cache.value = new Date().valueOf();

		dojo.io.iframe.send(
		{
			url: "/emails/seorelease/thumbnail_image_load",
			handleAs:"json",
			load: this._AddedCallback,
			form: this.upload_form,
			error:this._ErrorCallBack
		});
	},
	_ErrorCall:function(response, ioArgs)
	{
		alert("Problem Uploading Image");
		this._Clear();
	},
	_AddedCall:function( response )
	{
		if (response.success=="OK")
		{
			this._Clear();
			this.load_image_dialog.hide();
			dojo.attr(this.seoimagepreview,"src", "/emails/seorelease/load_seo_thumbnail");
			dojo.attr(this.seoimageid,"value","-2");
			this.enableControls(true);
		}
		else if (response.success=="FA")
		{
			alert(response.message);
			this._Clear();

		}
		else
		{
			alert("Problem Uploading Image Document");
			this._Clear();
		}
	},
	_ShowLoad:function()
	{
		this.load_image_dialog.show();
	},
	_Clear:function()
	{
		dojo.attr(this.seoimagepreview,"src", "");
		dojo.attr(this.seoimageid,"value","-1");
		this.enableControls(false);
		this.saveNode.set("disabled", false);
	},
	isValid:function()
	{
		return true;
	},
	_setValueAttr:function( value )
	{
		dojo.attr(this.seoimageid,"value",value);
		this.enableControls ( ( value == "-1" || value == -1 ) ? false : true );
		if (parseInt(value) > 0 )
			dojo.attr(this.seoimagepreview,"src", "/emails/seorelease/thumbnail_image?seoimageid=" + value );
		else
			dojo.attr(this.seoimagepreview,"src", "" );
	},
	_getValueAttr:function()
	{
		return dojo.attr(this.seoimageid,"value");
	},
	enableControls:function( enable )
	{
		if ( enable )
		{
			dojo.removeClass(this.clearbtn.domNode,"prmaxhidden");
		}
		else
		{
			dojo.addClass(this.clearbtn.domNode,"prmaxhidden");
		}
	}
});

}

if(!dojo._hasResource["prcommon.newsrooms.globalnewsrooms"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.newsrooms.globalnewsrooms"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.newsrooms.globalnewsrooms
// Author:  
// Purpose:
// Created: March 2018
//
// To do:
//-----------------------------------------------------------------------------

dojo.provide("prcommon.newsrooms.globalnewsrooms");



// Main control
dojo.declare("prcommon.newsrooms.globalnewsrooms",
	[ttl.BaseWidget],
	{
		name:"",	
		value:"",
		displaytitle : 'Global Newsrooms',
		search : '',
		size:'7',
		testmode:false,
		selectonly:false,
		startopen:false,
		preload:true,
		interesttypeid:1,
		restrict:1,
		widgetsInTemplate: true,
		templateString:"<div data-dojo-attach-point=\"containerNode\" >\r\n<!--\r\n\t<table width=\"100%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" >\r\n\t\t<tr><td width=\"20%\" class=\"prmaxrowtag\">${displaytitle}</td>\r\n\t\t</tr>\r\n\t</table>\r\n-->\r\n\t<div class=\"dojolanguagesPane\" >\r\n\t\t<div data-dojo-attach-point=\"selectarea\" class=\"prmaxselectmultiple\" >\r\n\t\t\t<table width=\"100%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n\t\t\t\t  <tr><td width=\"47%\"></td><td width=\"5%\"></td><td width=\"48%\" ></td></tr>\r\n\t\t\t\t  <tr><td colspan=\"3\">\r\n\t\t\t\t  <table style=\"width:100%\" class=\"prmaxtable\" >\r\n\t\t\t\t\t  <tr>\r\n\t\t\t\t\t  <td width=\"40%\" data-dojo-attach-point=\"master_type_text\"><span class=\"prmaxrowtag\">Select </span><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-props='\"class\":\"prmaxfocus prmaxinput\",type:\"text\",style:\"width:60%\"' data-dojo-attach-point=\"newsrooms_list_select\" data-dojo-attach-event=\"onkeyup:newsrooms_select_event\" /></td>\r\n\t\t\t\t\t  </tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t  </td></tr>\r\n\t\t\t\t  <tr><td ><select style=\"width:100%\" data-dojo-attach-point=\"newsrooms_list\" size=\"${size}\" class=\"lists\" multiple=\"multiple\" ></select></td>\r\n\t\t\t\t  <td >\r\n\t\t\t\t\t<button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_add_all\"' data-dojo-attach-point=\"button_all\" data-dojo-attach-event=\"onClick:newsrooms_select_all\" data-dojo-type=\"dijit.form.Button\"><div class=\"std_movement_button\">&gt;&gt;</div></button><br/>\r\n\t\t\t\t\t<button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_add_single\"' data-dojo-attach-point=\"button_single\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:newsrooms_select_single\"><div class=\"std_movement_button\">&gt;&nbsp;</div></button><br/>\r\n\t\t\t\t\t<button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_del_all\"' data-dojo-attach-point=\"button_del_all\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:newsrooms_remove_all\"><div class=\"std_movement_button\">&lt;&lt;</div></button><br/>\r\n\t\t\t\t\t<button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_del_single\"' data-dojo-attach-point=\"button_del_single\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:newsrooms_remove_single\"><div class=\"std_movement_button\">&lt;&nbsp;</div></button></td>\r\n\t\t\t\t  <td ><select style=\"width:100%\" data-dojo-attach-point=\"newsrooms_select\" size=\"${size}\" class=\"lists\"  data-dojo-attach-event=\"onchange:newsrooms_update_selection\"></select></td>\r\n\t\t\t\t  </tr>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n",
		constructor: function()
		{
			this.disabled = false;
			this._extended = false;
			this._LoadSelectionCall = dojo.hitch(this,this._LoadSelection);
			
			this.selectTimer = null;
		},
		postCreate:function()
		{
			// key
			dojo.connect(this.newsrooms_list_select.domNode,"onkeyup" ,  dojo.hitch(this,this.newsrooms_select_event));
			dojo.connect(this.newsrooms_list,"onchange" ,  dojo.hitch(this,this.newsrooms_update_selection));
			dojo.connect(this.newsrooms_list,"ondblclick" ,  dojo.hitch(this,this.newsrooms_select_dbl));

			if (this.preload)
			{
				this._Send_Request("*");
			}			
			this.inherited(arguments);
		},
		
		Clear:function()
		{
			this._ClearSelectionBox();
			this._ClearSelectedBox();
			this.newsrooms_list_select.set("value","");
			this._Get(this._getValueAttr());
			this._SelectionOptions();

			this.inherited(arguments);
		},

		_Send_Request:function ( data )
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._LoadSelectionCall,
					url:'/newsroom/listuserselection',
					content:{ word:data}}));		
		},
		newsrooms_select_event:function()
		{
			var data = this.newsrooms_list_select.get("value");
			if (data.length>0)
			{
				if (this.selectTimer)
				{
					clearTimeout ( this.selectTimer);
					this.selectTimer = null;
				}
				this.selectTimer = setTimeout(dojo.hitch(this, this._Send_Request,data),this.searchTime);
			}
			else
			{
				if ( this.selectTimer )
				{
					clearTimeout ( this.selectTimer);
					this.selectTimer = null;
				}
				this._ClearSelectionBox();
				this._SelectionOptions();
			}

		},
		_LoadSelection:function(response)
		{
			this._ClearSelectionBox();
			for ( var i=0 ; i <response.data.length; ++i )
			{
				var record = response.data[i];
				this.newsrooms_list.options[this.newsrooms_list.options.length] = new Option(record.description,record.newsroomid);
			}
			this._SelectionOptions();
		},
		_ClearSelectionBox:function()
		{
			this.newsrooms_list.options.length=0;
		},
		_ClearSelectedBox:function()
		{
			this.newsrooms_select.length=0;
		},
		newsrooms_update_selection:function()
		{
			this._SelectionOptions();
		},
		newsrooms_select_dbl:function()
		{
			this.newsrooms_select_single();
			this._SelectionOptions();
		},
		newsrooms_select_all:function()
		{
			for (var c=0; c<this.newsrooms_list.options.length ;c++){
				var option = this.newsrooms_list.options[c];
				var addRecord = true;
				for (var c1=0; c1<this.newsrooms_select.options.length ;c1++){
					if (this.newsrooms_select.options[c1].value==option.value){
						addRecord = false;
						break;
					}
				}
				if ( addRecord ) {
					this.newsrooms_select.options[this.newsrooms_select.options.length] = new Option(option.text,option.value);
				}
			}
			this._Get(this._getValueAttr());
			this.newsrooms_list.options.length = 0 ;
			this.newsrooms_update_selection();
		},
		newsrooms_select_single:function()
		{
			for (var c=0; c<this.newsrooms_list.options.length ;c++){
				var option = this.newsrooms_list.options[c];
				if (option.selected) {
					option.selected=false;
					var addRecord = true;
					for (var c1=0; c1<this.newsrooms_select.options.length ;c1++){
						if (this.newsrooms_select.options[c1].value==option.value){
							addRecord = false;
							break;
						}
					}
					if ( addRecord ) {
						this.newsrooms_select.options[this.newsrooms_select.options.length] = new Option(option.text,option.value);
						this._Get(this._getValueAttr());
					}
				}
			}
		},
		newsrooms_remove_all:function()
		{
			this.newsrooms_select.options.length = 0 ;
			this.newsrooms_update_selection();
			this._Get(this._getValueAttr());
		},
		newsrooms_remove_single:function()
		{
			for (var c=0; c<this.newsrooms_select.options.length ;c++){
				if (this.newsrooms_select.options[c].selected)
					this.newsrooms_select.options[c] = null;
			}
			this.newsrooms_update_selection();
			this._Get(this._getValueAttr());

		},
		add_select:function(data)
		{
			this.newsrooms_select.options[this.newsrooms_select.options.length] = new Option(data.description,data.newsroomid);
		},
		_setValueAttr:function(values)
		{
			this.Clear();
			if (values != null)
			{
				var data = values.data;
				var open = false;
				if ( data == null || data == undefined )
					data = values;
				for (var key in data)
				{
					var record = data[key];
					this.newsrooms_select.options[this.newsrooms_select.options.length] = new Option(record.description,record.newsroomid);
					opne = true;
				}
				if ( open )
					this.make_open();
				this._Get(this._getValueAttr());
			}
		},
		_getValueAttr:function()
		{
			var data = Array();
			for (var c=0; c<this.newsrooms_select.options.length ;c++)
			{
				if (this._extended)
				{
					data[c] = {
						newsroomid:parseInt(this.newsrooms_select.options[c].value),
						description:this.newsrooms_select.options[c].text
						};
				}
				else
				{
					data[c] = parseInt(this.newsrooms_select.options[c].value);
				}
			}
			var obj = {data:data};

			if (this._extended)
			{
				return obj;
			}
			else
			{
				var data = data.length>0?dojo.toJson(obj):"";
				this.value = data;
				return data;
			}
		},
		_getCountAttr:function()
		{
			return this.newsrooms_select.options.length;
		},
		_setExtendedAttr:function(value)
		{
			this._extended = value
		},

		change_filter:function()
		{
			this.newsrooms_select();
		},
		_SelectionOptions:function()
		{
			this.button_all.set('disabled',this.newsrooms_list.length?false:true);
			this.button_single.set('disabled',this.newsrooms_list.selectedIndex!=-1?false:true);

			this.button_del_all.set('disabled',this.newsrooms_select.length?false:true);
			this.button_del_single.set('disabled',this.newsrooms_select.selectedIndex!=-1?false:true);

			this._up_down();
		},
		_up_down:function()
		{
			var upvalue = true ;
			var downvalue = true ;

			if (this.newsrooms_select.options.length>1 && this.newsrooms_select.selectedIndex != -1 )
			{
				if  (this.newsrooms_select.selectedIndex>0)
					upvalue = false ;

				if  (this.newsrooms_select.selectedIndex<this.newsrooms_select.options.length - 1 )
					downvalue = false;
			}
		},
		_setDisabledAttr:function(values)
		{
			this.disabled = values;
		},
		_getDisabledAttr:function()
		{
			return this.disabled;
		},
		_Get:function()
		{
			if (this.selectonly==false)
				this.inherited(arguments);
		},
		_focus:function()
		{
			this.newsrooms_list_select.focus();
		}
});


}

if(!dojo._hasResource["dojox.validate._base"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.validate._base"] = true;
dojo.provide("dojox.validate._base");
dojo.experimental("dojox.validate");

		// dojo core expressions
		// dojo number expressions
 	// additional expressions

dojox.validate.isText = function(/*String*/value, /*Object?*/flags){
	// summary:
	//	Checks if a string has non whitespace characters.
	//	Parameters allow you to constrain the length.
	//
	// value: A string
	// flags: {length: Number, minlength: Number, maxlength: Number}
	//    flags.length  If set, checks if there are exactly flags.length number of characters.
	//    flags.minlength  If set, checks if there are at least flags.minlength number of characters.
	//    flags.maxlength  If set, checks if there are at most flags.maxlength number of characters.
	
	flags = (typeof flags == "object") ? flags : {};
	
	// test for text
	if(/^\s*$/.test(value)){ return false; } // Boolean
	
	// length tests
	if(typeof flags.length == "number" && flags.length != value.length){ return false; } // Boolean
	if(typeof flags.minlength == "number" && flags.minlength > value.length){ return false; } // Boolean
	if(typeof flags.maxlength == "number" && flags.maxlength < value.length){ return false; } // Boolean
	
	return true; // Boolean

}

dojox.validate._isInRangeCache = {};
dojox.validate.isInRange = function(/*String*/value, /*Object?*/flags){
	// summary:
	//	Validates whether a string denoting a number
	//	is between a max and min.
	//
	// value: A string
	// flags: {max:Number, min:Number, decimal:String}
	//    flags.max  A number, which the value must be less than or equal to for the validation to be true.
	//    flags.min  A number, which the value must be greater than or equal to for the validation to be true.
	//    flags.decimal  The character used for the decimal point.  Default is ".".
	
	value = dojo.number.parse(value, flags);
	if(isNaN(value)){
		return false; // Boolean
	}
    
	// assign default values to missing paramters
	flags = (typeof flags == "object") ? flags : {};
	var max = (typeof flags.max == "number") ? flags.max : Infinity,
		min = (typeof flags.min == "number") ? flags.min : -Infinity,
		dec = (typeof flags.decimal == "string") ? flags.decimal : ".",
	
		cache = dojox.validate._isInRangeCache,
		cacheIdx = value + "max" + max + "min" + min + "dec" + dec
	;
	if(typeof cache[cacheIdx] != "undefined"){
		return cache[cacheIdx];
	}

	cache[cacheIdx] = !(value < min || value > max);
	return cache[cacheIdx]; // Boolean

}

dojox.validate.isNumberFormat = function(/* String */value, /* Object? */flags){
	// summary: Validates any sort of number based format
	//
	// description:
	//		Validates any sort of number based format. Use it for phone numbers,
	//		social security numbers, zip-codes, etc. The value can be validated
	//		against one format or one of multiple formats.
	//
	// Format Definition
	// |   #        Stands for a digit, 0-9.
	// |   ?        Stands for an optional digit, 0-9 or nothing.
	//    All other characters must appear literally in the expression.
	//
	// example:
	// |  "(###) ###-####"       ->   (510) 542-9742
	// |  "(###) ###-#### x#???" ->   (510) 542-9742 x153
	// |  "###-##-####"          ->   506-82-1089       i.e. social security number
	// |  "#####-####"           ->   98225-1649        i.e. zip code
	//
	// value: A string
	//
	// flags: Object?
	//		FIXME: make pseudo-object for this
	//		format: String
	//
	//    flags.format  A string or an Array of strings for multiple formats.
	//
	// example:
	// | // returns true:
	// | dojox.validate.isNumberFormat("123-45", { format:"###-##" });
	//
	// example:
	// 		Check Multiple formats:
	// |	dojox.validate.isNumberFormat("123-45", {
	// |		format:["### ##","###-##","## ###"]
	// |	});
	//

	var re = new RegExp("^" + dojox.validate.regexp.numberFormat(flags) + "$", "i");
	return re.test(value); // Boolean
}

dojox.validate.isValidLuhn = function(/* String */value){
	// summary: Validate a String value against the Luhn algorithm.
	// description:
	//		Validate a String value against the Luhn algorithm to verify
	//		its integrity.
	
	var sum = 0, parity, curDigit;
	if(!dojo.isString(value)){
		value = String(value);
	}
	value = value.replace(/[- ]/g,''); //ignore dashes and whitespaces
	parity = value.length % 2;

	for(var i = 0; i < value.length; i++){
		curDigit = parseInt(value.charAt(i));
		if(i % 2 == parity){
			curDigit *= 2;
		}
		if(curDigit > 9){
			curDigit -= 9;
		}
		sum += curDigit;
	}
	return !(sum % 10); // Boolean
}


}

if(!dojo._hasResource["dojox.validate"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["dojox.validate"] = true;
dojo.provide("dojox.validate");


}

if(!dojo._hasResource["prmax.pressrelease.seo.edit"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.pressrelease.seo.edit"] = true;
//-----------------------------------------------------------------------------
// Name:    prmax.pressrelease.seo.edit
// Author:  Chris Hoy
// Purpose:
// Created: 22/09/2011
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.pressrelease.seo.edit");



















dojo.declare("prmax.pressrelease.seo.edit",
	[ ttl.BaseWidget],
	{
	widgetsInTemplate: true,
//	_lang:this.languageid.get("value"),
	templateString:"<div>\r\n\t<div data-dojo-attach-point=\"frame\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='gutters:false,style:\"width:100%;height:100%\"'>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"overflow:auto;width:50%;height:100%\",splitter:true'>\r\n\t\t\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='\"class\":\"prmaxdefault\",onsubmit:\"return false\"'>\r\n\t\t\t\t<input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"emailtemplateid\" data-dojo-props='name:\"emailtemplateid\",type:\"hidden\"' >\r\n\t\t\t\t<input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"seoreleaseid\" data-dojo-props='name:\"seoreleaseid\",type:\"hidden\",value:\"-1\"' >\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">Headline</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"headline\" data-dojo-props='\"class\":\"prmaxrequired\",name:\"headline\",required:true,trim:true,maxLength:120,promptMessage:\"Typically this will be the headline from your press release and PRmax automatically adds your original headline for the release into the field but you can change and edit it if you choose\",missingMessage:\"Typically this will be the headline from your press release and PRmax automatically adds your original headline for the release into the field but you can change and edit it if you choose\",type:\"text\",style:\"width:30em\"' ></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Synopsis</td><td><textarea data-dojo-props='maxLength:254, \"class\":\"prmaxrequired\",name:\"synopsis\",rows:2,cols:49,required:true,promptMessage:\"This can be a summary of the content of your press release or an extract from the first few lines of the press release included automatically by PRmax\",missingMessage:\"This can be a summary of the content of your press release or an extract from the first few lines of the press release included automatically by PRmax\"' data-dojo-type=\"ttl.form.ValidationTextarea\" data-dojo-attach-point=\"synopsis\"></textarea></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">Keywords</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"keywords\" data-dojo-props='\"class\":\"prmaxrequired\",name:\"keywords\",required:true,trim:true,maxLength:120, promptMessage:\"Enter the keywords separated by a space that reflect the main subject areas of your press release to enable journalists to easily and quickly find your release when they search the Internet\", missingMessage:\"Enter the keywords separated by a space that reflect the main subject areas of your press release to enable journalists to easily and quickly find your release when they search the Internet\", type:\"text\",style:\"width:30em\"' ></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Categories<br/><br/><label class=\"prmaxrowtagcomment\">Tick the subject category boxes that relate to your release</label></td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_1\" data-dojo-props='name:\"cat_1\",type:\"checkbox\"'><label>Arts &amp; Entertainment</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_14\" data-dojo-props='name:\"cat_14\",type:\"checkbox\"'><label>Homes &amp; Gardens</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_2\" data-dojo-props='name:\"cat_2\",type:\"checkbox\"'><label>Automotive, Shipping &amp; Aviation</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_15\" data-dojo-props='name:\"cat_15\",type:\"checkbox\"'><label>Manufacturing Industry</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_3\" data-dojo-props='name:\"cat_3\",type:\"checkbox\"'><label>Business &amp; Finance</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_16\" data-dojo-props='name:\"cat_16\",type:\"checkbox\"'><label>Media &amp; Marketing</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_4\" data-dojo-props='name:\"cat_4\",type:\"checkbox\"'><label>Charities</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_17\" data-dojo-props='name:\"cat_17\",type:\"checkbox\"'><label>Mens Interests</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_5\" data-dojo-props='name:\"cat_5\",type:\"checkbox\"'><label>Children, Youths &amp; Family Life</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_18\" data-dojo-props='name:\"cat_18\",type:\"checkbox\"'><label>Retailing &amp; Wholesaling</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_6\" data-dojo-props='name:\"cat_6\",type:\"checkbox\"'><label>Construction</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_19\" data-dojo-props='name:\"cat_19\",type:\"checkbox\"'><label>Science &amp; Medicine</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_7\" data-dojo-props='name:\"cat_7\",type:\"checkbox\"'><label>Crafts &amp; Hobbies</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_20\" data-dojo-props='name:\"cat_20\",type:\"checkbox\"'><label>Sport, Health &amp; Fitness</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_8\" data-dojo-props='name:\"cat_8\",type:\"checkbox\"'><label>Energy</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_21\" data-dojo-props='name:\"cat_21\",type:\"checkbox\"'><label>Technology</label></td><tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_9\" data-dojo-props='name:\"cat_9\",type:\"checkbox\"'><label>Environment &amp; Animals</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_22\" data-dojo-props='name:\"cat_22\",type:\"checkbox\"'><label>Trade, Transport &amp; the Supply Chain</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_10\" data-dojo-props='name:\"cat_10\",type:\"checkbox\"'><label>Farming, Fishing &amp; Forestry</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_23\" data-dojo-props='name:\"cat_23\",type:\"checkbox\"'><label>Travel &amp; Tourism</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_11\" data-dojo-props='name:\"cat_11\",type:\"checkbox\"'><label>Fashion &amp; Beauty</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_24\" data-dojo-props='name:\"cat_24\",type:\"checkbox\"'><label>Womans Interests</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_12\" data-dojo-props='name:\"cat_12\",type:\"checkbox\"'><label>Food, Drink &amp; Hospitality</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_25\" data-dojo-props='name:\"cat_25\",type:\"checkbox\"'><label>Work &amp; Education</label></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"cat_13\" data-dojo-props='name:\"cat_13\",type:\"checkbox\"'><label>Government, Defence &amp; Law</label></td></tr>\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr data-dojo-attach-point=\"language_node\" data-dojo-props='\"class\":\"prmaxhidden\"'><td>Language</td><td><select data-dojo-props='style:\"width:15em\",name:\"languageid\",autoComplete:true,searchAttr:\"name\",required:false,placeHolder:\"No Selection\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"languageid\" data-dojo-attach-event=\"onChange:_change_lang\"></select></td><tr>\r\n\t\t\t\t\t<tr data-dojo-attach-point=\"tranlatedseo_node\" data-dojo-props='\"class\":\"prmaxhidden\"'><td>Translated SEO</td><td><select data-dojo-props='style:\"width:15em\",name:\"translatedseoreleaseid\",autoComplete:true,searchAttr:\"name\",required:false,placeHolder:\"No Selection\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"translatedseoreleaseid\"></select></td><tr>\r\n\r\n\t\t\t\t\t<tr data-dojo-attach-point=\"globalnewsrooms_tr\"><td>Newsroom</td><td><span><input data-dojo-attach-point=\"option0\" data-dojo-attach-event=\"onClick:_option_changed\" data-dojo-props='\"class\":\"prmaxlabeltag\",type:\"radio\",name:\"is_client_newsroom\",value:\"1\",checked:\"checked\"' data-dojo-type=\"dijit.form.RadioButton\" /><label>Client</label></span>\r\n\t\t\t\t\t\t\t\t\t <span><input data-dojo-attach-point=\"option1\" data-dojo-attach-event=\"onClick:_option_changed\" data-dojo-props='\"class\":\"prmaxlabeltag\",type:\"radio\",name:\"is_client_newsroom\",value:\"0\"' data-dojo-type=\"dijit.form.RadioButton\" /><label>Global</label></span></td></tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td valign=\"top\" align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"client_name\"></td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<select data-dojo-props='name:\"clientid\",autoComplete:true,searchAttr:\"clientname\",labelType:\"html\",promptMessage:\"If appropriate add the name of the brand or service that the press release relates to.\", missingMessage:\"If appropriate add the name of the brand or service that the press release relates to.\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"clientid\" data-dojo-attach-event=\"onChange:_ChangeClient\"></select>\r\n\t\t\t\t\t\t\t<button data-dojo-attach-point=\"addclientbtn\" data-dojo-attach-event=\"onClick: _New_Client\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",\"class\":\"prmaxdefault\"' >New</button>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td colspan=\"2\">\r\n\t\t\t\t\t\t\t<div data-dojo-attach-point=\"globalnewsrooms_node\" data-dojo-props='\"class\":\"prmaxhidden\",style:\"height:160px;width:49%;float:left;padding:0px;margin:0px\"'>\r\n\t\t\t\t\t\t\t\t<div data-dojo-attach-point=\"globalnewsrooms\" data-dojo-props='startopen:true, size:6, searchmode:true, selectonly:false,orderbtns:false,style:\"width:450px\",name:\"newsrooms\", \"class\":\"prmaxhidden\"' data-dojo-type=\"prcommon.newsrooms.globalnewsrooms\"></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\r\n\t\t\t\t\t<tr><td><label>Is Capital Ambition?</label></td><td><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"iskeytopic\" data-dojo-props='name:\"iskeytopic\",type:\"checkbox\"'></td></tr>\r\n\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"companyname_label\">Company Name</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"companyname\" data-dojo-props='\"class\":\"prmaxrequired\",name:\"companyname\",required:true,trim:true,maxLength:120,promptMessage:\"Add the name of the company that the press release relates to\",missingMessage:\"Add the name of the company that the press release related to\",type:\"text\",style:\"width:20em\"' ></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"www_label\">Www</td><td><input data-dojo-attach-point=\"www\" data-dojo-props='name:\"www\",type:\"text\",size:\"40\",maxLength:\"90\",trim:true,style:\"width:25em\",regExpGen:dojox.validate.regexp.url,promptMessage:\"The main web site that relates to the content of the press release\",missingMessage:\"The main web site that relates to the content of the press release\"' data-dojo-type=\"dijit.form.ValidationTextBox\"/></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"email_label\">Email</td><td><input data-dojo-attach-point=\"email\" data-dojo-props='name:\"email\",type:\"text\",size:\"40\",maxLength:\"84\",trim:true,style:\"width:25em\",regExpGen:dojox.validate.regexp.emailAddress,promptMessage:\"The main email address for media enquiries about the release\",missingMessage:\"The main email address for media enquiries about the release\"' data-dojo-type=\"dijit.form.ValidationTextBox\"/></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"tel_label\">Tel</td><td><input data-dojo-attach-point=\"tel\" data-dojo-props='name:\"tel\",type:\"text\",maxLength:\"40\",style:\"15em\",missingMessage:\"The main telephone number for media enquiries about the release\",promptMessage:\"The main telephone number for media enquiries about the release\"' data-dojo-type=\"dijit.form.ValidationTextBox\"/></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"twitter_label\">Twitter</td><td><input data-dojo-attach-point=\"twitter\" data-dojo-props='\"class\":\"prmaxinput\",name:\"twitter\",type:\"text\",maxLength:\"90\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:25em\",missingMessage:\"The main Twitter account that relates to the content of the press release\",promptMessage:\"The main Twitter account that relates to the content of the press release\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"facebook_label\">Facebook</td><td><input data-dojo-attach-point=\"facebook\" data-dojo-props='\"class\":\"prmaxinput\",name:\"facebook\",type:\"text\",maxLength:\"90\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:25em\",promptMessage:\"The main Facebook account that relates to the content of the press release\",missingMessage:\"The main Facebook account that relates to the content of the press release\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"linkedin_label\">Linkedin</td><td><input data-dojo-attach-point=\"linkedin\" data-dojo-props='\"class\":\"prmaxinput\",name:\"linkedin\",type:\"text\",maxLength:\"80\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:25em\",promptMessage:\"The main LinkedIn account that relates to the content of the press release\",missingMessage:\"The main LinkedIn account that relates to the content of the press release\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" data-dojo-attach-point=\"instagram_label\">Instagram</td><td><input data-dojo-attach-point=\"instagram\" data-dojo-props='\"class\":\"prmaxinput\",name:\"instagram\",type:\"text\",maxLength:\"80\",regExpGen:dojox.validate.regexp.url,trim:true,style:\"width:25em\",promptMessage:\"The main Instagram account that relates to the content of the press release\",missingMessage:\"The main Instagram account that relates to the content of the press release\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" valign=\"top\" >Image</td><td><div data-dojo-type=\"prmax.pressrelease.seo.seoimage\" data-dojo-attach-point=\"seoimage\" data-dojo-props='style:\"width:350px;height:120px\"'></div></td></tr>\r\n\t\t\t\t</table>\r\n\t\t\t</form>\r\n\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.Editor\" data-dojo-attach-point=\"seocontent\" data-dojo-props='\"class\":\"bordered\",region:\"center\",extraPlugins:[{name:\"dijit._editor.plugins.FontChoice\",command:\"fontName\", generic:false},\"fontSize\",\"createLink\",\"viewsource\",\"preview\",\"seoinsertimage\",\"insertCollateral\"],splitter:true' ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"client_add_dialog\" data-dojo-props='title:\"Add New Client\",style:\"width:700px;height:600px\"'>\r\n\t\t<div data-dojo-type=\"prmax.customer.clients.add\" data-dojo-attach-point=\"client_add_ctrl\"></div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._languages = new dojo.data.ItemFileReadStore  ({ url:"/common/lookups?searchtype=languages&nofilter=1"});

		this._nochange = false;
		this._LoadCallBack = dojo.hitch(this,this._LoadCall);
		this._SavedCallBack = dojo.hitch(this,this._SavedCall);
		this._Client_Add_Call_Back = dojo.hitch(this, this._Client_Add_Call);
		this._call_back = null;

		this._client_data = new dojox.data.QueryReadStore (
			{url:'/clients/combo',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true
			});

		this._translatedseorelease = new dojox.data.JsonRestStore( {target:"/emails/seorelease/list_rest", idAttribute:"id"});
	},
	postCreate:function()
	{
		dojo.attr(this.client_name,"innerHTML", PRMAX.utils.settings.client_name);
		this.client_add_dialog.set("title",  "Add New " + PRMAX.utils.settings.client_name);

		this.clientid.store = this._client_data;
		this.clientid.set("value",-1);
		this._Client_Get_Call_Back = dojo.hitch(this, this._Client_Get_Call );

		this.translatedseoreleaseid.store = this._translatedseorelease;

		this._has_global_newsrooms = PRMAX.utils.settings.has_global_newsroom;
		this._is_client_newsroom = true;

		this.languageid.set("store", this._languages);
		this.languageid.set("value", 1945);

		this.inherited(arguments);
		if (PRMAX.utils.settings.cid == 5454)
		{
			dojo.removeClass(this.tranlatedseo_node, 'prmaxhidden');
			dojo.removeClass(this.language_node, 'prmaxhidden');
		}
		else
		{
			dojo.addClass(this.tranlatedseo_node, 'prmaxhidden');
			dojo.addClass(this.language_node, 'prmaxhidden');
		}
	},
	_LoadCall:function(response)
	{
		if ( response.success == "OK")
		{
			this.Load ( response.data.emailtemplateid, response.data );
		}
		else
		{

		}
	},
	_SavedCall:function(response)
	{
		if ( response.success == "OK")
		{
			this.seoreleaseid.set("value", response.data.seoreleaseid ) ;
			if (this._call_back != null )
				this._call_back ( response.data );
			alert("SEO Release Updated");
		}
		else
		{
			alert("Problem updating SEO Release");
		}
	},
	LoadDefault:function( emailtemplateid )
	{
		this.emailtemplateid.set("value",emailtemplateid);
	},
	LoadSeo:function( seoreleaseid, _call_back )
	{
		this._call_back = _call_back ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
				load: this._LoadCallBack,
				url: "/emails/seorelease/get" ,
				content: {seoreleaseid:seoreleaseid}
		}));
	},
	Load:function( emailtemplateid, data )
	{
		this.LoadDefault(emailtemplateid);
		this._Load ( data ) ;
	},
	_change_lang:function()
	{
		this.translatedseoreleaseid.set("query",{languageid:this.languageid.get("value")});
		this.translatedseoreleaseid.value = -1;
	},
	_Load:function ( data )
	{
		this.translatedseoreleaseid.set("query",{languageid:data.languageid});
		this._nochange = true;

		for ( var x = 1 ; x < 26 ; x++ )
			this["cat_" + x].set("value",data["cat_" + x]);

		this.clientid.set("value", ( data.clientid == null ) ? -1 : data.clientid );
		this._nochange = false;
		this.seocontent.set("value", data.content);
		this.emailtemplateid.set("value",data.emailtemplateid);
		this.seoreleaseid.set("value",data.seoreleaseid);
		this.headline.set("value",data.headline);
		this.synopsis.set("value",data.synopsis);
		this.keywords.set("value",data.keywords);
		this.seoimage.set("value", (data.seoimageid==null)?-1:data.seoimageid);
		this._is_client_newsroom = data.is_client_newsroom;
		this.languageid.set("value", data.languageid);
		this.translatedseoreleaseid.set("value", data.translatedseoreleaseid);
		this.iskeytopic.set("value", data.iskeytopic);
		if (this._has_global_newsrooms)
		{
			dojo.removeClass(this.globalnewsrooms_tr, "prmaxhidden");

			if (data.is_client_newsroom == false && data.newsrooms.length>0){

				this.option1.set("checked", true);
				this._show_hide_fields('globalnewsrooms', data);
				this.globalnewsrooms.set("value", data.newsrooms);
				this.clientid.set("value",-1);
			}
			else
			{
				this.option0.set("checked", true);
				this._show_hide_fields('client');
				this.globalnewsrooms.Clear();
				this.companyname.set("value",data.companyname);
				this.www.set("value", data.www);
				this.email.set("value", data.email );
				this.tel.set("value", data.tel );
				this.twitter.set("value", data.twitter ) ;
				this.facebook.set("value", data.facebook);
				this.linkedin.set("value", data.linkedin);
				this.instagram.set("value", data.instagram);
			}
		}
		else
		{
			dojo.addClass(this.globalnewsrooms_tr, "prmaxhidden");

			this._show_hide_fields('client');
			this.companyname.set("value",data.companyname);
			this.www.set("value", data.www);
			this.email.set("value", data.email );
			this.tel.set("value", data.tel );
			this.twitter.set("value", data.twitter ) ;
			this.facebook.set("value", data.facebook);
			this.linkedin.set("value", data.linkedin);
			this.instagram.set("value", data.instagram);
		}
	},
	Save:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			return false;
		}
		if (this.option1.checked)
		{
			if (this.globalnewsrooms.value == "")
			{
				alert("Please Select at least one Global newsroom");
				return false;
			}
		}
		if ( this.synopsis.get("value").length>254)
		{
			alert("Synopsis too long");
			return false;
		}

		var content = this.form.get("value");
		content["content"] = this.seocontent.get("value");

		dojo.xhrPost(
			ttl.utilities.makeParams({
				load: this._SavedCallBack,
				url: "/emails/seorelease/save" ,
				content: content
			}));

		return true;
	},
	Clear:function()
	{
		this.emailtemplateid.set("value","-1");
		this.seoreleaseid.set("value", "-1")
		this.headline.set("value","");
		this.synopsis.set("value","");
		this.companyname.set("value","");
		this.keywords.set("value","");
		this.www.set("value","");
		this.email.set("value","");
		this.tel.set("value","");
		this.twitter.set("value","");
		this.facebook.set("value","");
		this.linkedin.set("value","");
		this.instagram.set("value","");
		this.seocontent.set("value", "");
		this.clientid.set("value",-1);
		this.seoimage.set("value",-1);
		this.option0.set("checked", "checked");
		this.globalnewsrooms.set("value", "");
		this.languageid.set("value", 1945);
		this._lang = 1945;
		this.translatedseoreleaseid.set("value", "");
		this.iskeytopic.set("value", false);

		for ( var x = 1 ; x < 26 ; x++ )
			this["cat_" + x].set("value",false);

	},
	resize:function()
	{
		this.frame.resize ( arguments[0] ) ;
	},
	isValid:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			return false;
		}

		return true;
	},
	seoform:function ( inData )
	{
		var content = this.form.get("value");

		content["content"] = this.seocontent.get("value");

		return dojo.mixin ( inData , content );
	},
	_Client_Get_Call:function ( response )
	{
		if ( response.success == "OK")
		{
			this.www.set("value",response.data.www);
			this.email.set("value",response.data.email);
			this.tel.set("value",response.data.tel);
			this.twitter.set("value",response.data.twitter);
			this.facebook.set("value",response.data.facebook);
			this.linkedin.set("value",response.data.linkedin);
			this.instagram.set("value",response.data.instagram);
			this.companyname.set("value",response.data.clientname);
		}
	},
	_ChangeClient:function()
	{
		var clientid = this.clientid.get("value");
		if (clientid == 2014 || clientid == 1966)
		{
			dojo.removeClass(this.iskeytopic_tr, "prmaxhidden");
		}else{
			dojo.addClass(this.iskeytopic_tr, "prmaxhidden");
		}

		if ( clientid != -1 && this._nochange == false )
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._Client_Get_Call_Back,
					url: "/clients/get" ,
					content: {clientid : clientid}
				}));
		}
	},
	_Client_Add_Call:function(action, data )
	{
		if ( action == 2 )
		{
			this.clientid.set("value", data.clientid );
			this.client_add_dialog.hide();
		}
	},
	_New_Client:function()
	{
		this.client_add_ctrl.Load(-1, this._Client_Add_Call_Back);
		this.client_add_dialog.show();
	},
	_setSeoreleaseidAttr:function( seoreleaseid )
	{
		this.seoreleaseid.set("value", seoreleaseid ) ;
	},
	_option_changed:function()	{
		if (this.option0.get("checked"))
		{
			this._show_hide_fields('client');
			this.globalnewsrooms.Clear();
		}
		else if (this.option1.get("checked"))
		{
			this._show_hide_fields('globalnewsrooms');
			this.clientid.set("value",-1);
		}
	},
	_show_hide_fields:function(mode)
	{
		if (mode == 'globalnewsrooms')
		{
			dojo.addClass(this.client_name, "prmaxhidden");
			dojo.addClass(this.clientid.domNode, "prmaxhidden");
			dojo.addClass(this.addclientbtn.domNode, "prmaxhidden");
			dojo.removeClass(this.globalnewsrooms_node, "prmaxhidden");
			dojo.removeClass(this.globalnewsrooms.domNode, "prmaxhidden");

			dojo.addClass(this.companyname_label, "prmaxhidden");
			dojo.addClass(this.companyname.domNode, "prmaxhidden");
			dojo.addClass(this.www_label, "prmaxhidden");
			dojo.addClass(this.www.domNode, "prmaxhidden");
			dojo.addClass(this.email_label, "prmaxhidden");
			dojo.addClass(this.email.domNode, "prmaxhidden");
			dojo.addClass(this.tel_label, "prmaxhidden");
			dojo.addClass(this.tel.domNode, "prmaxhidden");
			dojo.addClass(this.twitter_label, "prmaxhidden");
			dojo.addClass(this.twitter.domNode, "prmaxhidden");
			dojo.addClass(this.facebook_label, "prmaxhidden");
			dojo.addClass(this.facebook.domNode, "prmaxhidden");
			dojo.addClass(this.linkedin_label, "prmaxhidden");
			dojo.addClass(this.linkedin.domNode, "prmaxhidden");
			dojo.addClass(this.instagram_label, "prmaxhidden");
			dojo.addClass(this.instagram.domNode, "prmaxhidden");
		}
		else if (mode == 'client')
		{
			dojo.removeClass(this.client_name, "prmaxhidden");
			dojo.removeClass(this.clientid.domNode, "prmaxhidden");
			dojo.removeClass(this.addclientbtn.domNode, "prmaxhidden");
			dojo.addClass(this.globalnewsrooms_node, "prmaxhidden");
			dojo.addClass(this.globalnewsrooms.domNode, "prmaxhidden");

			dojo.removeClass(this.companyname_label, "prmaxhidden");
			dojo.removeClass(this.companyname.domNode, "prmaxhidden");
			dojo.removeClass(this.www_label, "prmaxhidden");
			dojo.removeClass(this.www.domNode, "prmaxhidden");
			dojo.removeClass(this.email_label, "prmaxhidden");
			dojo.removeClass(this.email.domNode, "prmaxhidden");
			dojo.removeClass(this.tel_label, "prmaxhidden");
			dojo.removeClass(this.tel.domNode, "prmaxhidden");
			dojo.removeClass(this.twitter_label, "prmaxhidden");
			dojo.removeClass(this.twitter.domNode, "prmaxhidden");
			dojo.removeClass(this.facebook_label, "prmaxhidden");
			dojo.removeClass(this.facebook.domNode, "prmaxhidden");
			dojo.removeClass(this.linkedin_label, "prmaxhidden");
			dojo.removeClass(this.linkedin.domNode, "prmaxhidden");
			dojo.removeClass(this.instagram_label, "prmaxhidden");
			dojo.removeClass(this.instagram.domNode, "prmaxhidden");
		}
	},
});

}

if(!dojo._hasResource["prmax.iadmin.support.seo.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.support.seo.view"] = true;
dojo.provide("prmax.iadmin.support.seo.view");



dojo.declare("prmax.iadmin.support.seo.view",
	[ttl.BaseWidget],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<div  data-dojo-attach-point=\"borderControl\" data-dojo-type=\"dijit.layout.BorderContainer\"  style=\"width:100%;height:100%;overflow: hidden\" data-dojo-props=\"gutters:false\">\r\n\t\t<div  data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props=\"region:'left',splitter:true,'class':'bordered',style:'height:100%;width:40%',gutters:false\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:42px;width:100%;overflow:hidden\"'>\r\n\t\t\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t\t\t<div data-dojo-type=\"dijit.form.DropDownButton\"  data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxFilterIcon\",label:\"Filter SEO List\",showLabel:false'>\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<div data-dojo-type=\"dijit.TooltipDialog\" data-dojo-props='title:\"Filter By\"' data-dojo-attach-event=\"execute:_ExecuteFilter\">\r\n\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t<tr><td>Status</td><td><select data-dojo-props='name:\"seostatusid\",autoComplete:true,searchAttr:\"name\",labelType:\"html\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"filter_seostatusid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td>Headline</td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"filter_headline\" data-dojo-props='name:\"headline\",type:\"text\"' ></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td>Customer</td><td><select data-dojo-props='name:\"icustomerid\", autoComplete:true, required:true, labelType:\"html\", searchAttr:\"customername\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"filter_icustomerid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td align=\"left\"><button data-dojo-attach-event=\"onClick: _ClearFilter\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' >Clear Filter</button></td>\r\n\t\t\t\t\t\t\t\t\t<td align=\"right\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"submit\",name:\"submit\"'>Filter</button></td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\"'>\r\n\t\t\t\t<div data-dojo-attach-point=\"grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='style:\"height:100%;width:100%\",rowsPerPage:50'></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"seopanel\" data-dojo-type=\"dijit.layout.StackContainer\" data-dojo-props='region:\"center\",splitter:true'>\r\n\t\t\t<div data-dojo-attach-point=\"seopanel_blank\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='selected:\"selected\",title:\"blank\"' ></div>\r\n\t\t\t<div data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-attach-point=\"seopanel_edit\" data-dojo-props='style:\"height:100%;width:100%\",gutters:false,title:\"Edit\"'>\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"top\",style:\"width:100%;height:42px\"'>\r\n\t\t\t\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t\t\t\t<div data-dojo-attach-event=\"onClick:_Delete\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxDeleteIcon\",label:\"Delete the SEO release\",showLabel:false'></div>\r\n\t\t\t\t\t\t<div data-dojo-attach-event=\"onClick:_Withdraw\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxWithDrawIcon\",label:\"Withdraw SEO release\",showLabel:false' data-dojo-attach-point=\"withdrawbtn\"></div>\r\n\t\t\t\t\t\t<div data-dojo-attach-event=\"onClick:_Update\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxUpdateIcon\",label:\"Update SEO\",showLabel:false'></div>\r\n\t\t\t\t\t\t<div data-dojo-attach-event=\"onClick:_Publish\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='\"class\":\"prmaxhidden\",iconClass:\"PRMaxStdIcon PRMaxPublishIcon\",label:\"Re-Publish and SEO\",showLabel:false' data-dojo-attach-point=\"publishbtn\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\"'>\r\n\t\t\t\t\t<div data-dojo-type=\"prmax.pressrelease.seo.edit\" data-dojo-attach-point=\"seo_edit_ctrl\" data-dojo-props='style:\"width:100%;height:100%\", isinternal:true'></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this.seo_model = new prcommon.data.QueryWriteStore(
			{	url:'/iadmin/seo/seo_list',
				onError:ttl.utilities.globalerrorchecker,
				nocallback:true
		});
		this._DeleteCallBack = dojo.hitch(this, this._DeleteCall);
		this._WithdrawCallBack = dojo.hitch(this, this._WithdrawCall);
		this._PublishCallBack = dojo.hitch(this, this._PublishCall);
		this._seostatus_data = new dojo.data.ItemFileReadStore({ url:"/common/lookups?searchtype=seostatus&nofilter="} );
		this._icustomerid_data = new dojox.data.QueryReadStore ( {url:'/iadmin/customers_combo', onError:ttl.utilities.globalerrorchecker, clearOnClose:true, urlPreventCache:true});

	},
	postCreate:function()
	{
		this.grid.set("structure",this.view );
		this.grid._setStore ( this.seo_model ) ;
		this.grid["onCellClick"] = dojo.hitch ( this, this._OnCellClick2);
		this.filter_seostatusid.set("store", this._seostatus_data);
		this.filter_seostatusid.set("value", -1 );
		this.filter_icustomerid.set("store",  this._icustomerid_data);
		this.filter_icustomerid.set("value", -2 );

		this.inherited(arguments);
	},
	_OnCellClick2:function ( e )
	{
		this.grid.selection.clickSelectEvent(e);
		this._row2 = this.grid.getItem(e.rowIndex);

		this.seo_edit_ctrl.LoadSeo(this._row2.i.seoreleaseid ) ;
		this.seopanel.selectChild (this.seopanel_edit );

		if ( this._row2.i.seostatusid == 3 || this._row2.i.seostatusid == 4)
		{
			dojo.removeClass(this.publishbtn.domNode,"prmaxhidden");
			dojo.addClass(this.withdrawbtn.domNode,"prmaxhidden");
		}
		else
		{
			dojo.addClass(this.publishbtn.domNode,"prmaxhidden");
			dojo.removeClass(this.withdrawbtn.domNode,"prmaxhidden");
		}
	},
	view:{
		cells: [[
			{name: 'C Id',width: "60px", field:"customerid"},
			{name: 'Customer',width: "120px", field:"customername"},
			{name: 'Seo Name',width: "auto", field:"headline"},
			{name: 'Status',width: "150px", field:"seostatusdescription"},
			{name: 'Published',width: "100px", field:"published_display"}
			]]
	},

	resize:function()
	{
		this.borderControl.resize( arguments[0] );
	},
	_Refresh:function()
	{
		this.grid.setQuery({});
	},
	_ClearFilter:function()
	{
		this.filter_headline.set("value", "");
		this.filter_seostatusid.set("value", "-1");
		this.filter_icustomerid.set("value", "-2" );

		this.grid.setQuery({});
		this.seopanel.selectChild (this.seopanel_blank );

	},
	_ExecuteFilter:function()
	{
		var query_command = {};

		if ( arguments[0].seostatusid != "-2")
			query_command["seostatusid"] = arguments[0].seostatusid;

		if ( arguments[0].headline )
			query_command["headline"] = arguments[0].headline;

		if ( arguments[0].icustomerid && arguments[0].icustomerid != -1)
			query_command["icustomerid"] = arguments[0].icustomerid;


		this.grid.setQuery(query_command);
	},
	_DeleteCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			this.seopanel.selectChild (this.seopanel_blank );
			this.seo_model.deleteItem( this._row2 );
			dojo.removeClass(this.publishbtn.domNode,"prmaxhidden");
			dojo.addClass(this.withdrawbtn.domNode,"prmaxhidden");
		}
	},
	_Delete:function()
	{
		if ( confirm("Delete SEO"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._DeleteCallBack,
					url: "/iadmin/seo/seo_delete" ,
					content: {seoreleaseid:this._row2.i.seoreleaseid}
			}));
		}
	},
	_WithdrawCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			this.seopanel.selectChild (this.seopanel_blank );
			this.seo_model.setValue(  this._row2, "seostatusdescription" , 'PRmax Withdrawn', true );
			dojo.removeClass(this.publishbtn.domNode,"prmaxhidden");
			dojo.addClass(this.withdrawbtn.domNode,"prmaxhidden");
		}
	},
	_Withdraw:function()
	{
		if ( confirm("Withdraw SEO"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._WithdrawCallBack,
					url: "/iadmin/seo/seo_withdraw" ,
					content: {seoreleaseid:this._row2.i.seoreleaseid}
			}));
		}
	},
	_Update:function()
	{

	},
	_Publish:function()
	{

	}
});

}

if(!dojo._hasResource["prmax.iadmin.support.seo.Complaints"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.support.seo.Complaints"] = true;
dojo.provide("prmax.iadmin.support.seo.Complaints");

dojo.declare("prmax.iadmin.support.seo.Complaints",
	[ttl.BaseWidget],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<div  data-dojo-attach-point=\"borderControl\" data-dojo-type=\"dijit.layout.BorderContainer\"  style=\"width:100%;height:100%;overflow: hidden\" data-dojo-props=\"gutters:false\">\r\n\t\t<div  data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props=\"region:'left',splitter:true,'class':'bordered',style:'height:100%;width:40%',gutters:false\">\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:42px;width:100%;overflow:hidden\"'>\r\n\t\t\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t\t\t<div data-dojo-type=\"dijit.form.DropDownButton\"  data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxFilterIcon\",label:\"Filter SEO List\",showLabel:false'>\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<div data-dojo-type=\"dijit.TooltipDialog\" data-dojo-props='title:\"Filter By\"' data-dojo-attach-event=\"execute:_ExecuteFilter\">\r\n\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t<tr><td>Status</td><td><select data-dojo-props='name:\"seostatusid\",autoComplete:true,searchAttr:\"name\",labelType:\"html\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"filter_seostatusid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td>Headline</td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"filter_headline\" data-dojo-props='name:\"headline\",type:\"text\"' ></td></tr>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td align=\"left\"><button data-dojo-attach-event=\"onClick: _ClearFilter\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' >Clear Filter by</button></td>\r\n\t\t\t\t\t\t\t\t\t<td align=\"right\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"submit\",name:\"submit\"'>Filter by</button></td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\"'>\r\n\t\t\t\t<div data-dojo-attach-point=\"grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='style:\"height:100%;width:100%\",rowsPerPage:50'></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-attach-point=\"seopanel\" data-dojo-type=\"dijit.layout.StackContainer\" data-dojo-props='region:\"center\",splitter:true'>\r\n\t\t\t<div data-dojo-attach-point=\"seopanel_blank\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='selected:\"selected\",title:\"blank\"' ></div>\r\n\t\t\t<div data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-attach-point=\"seopanel_edit\" data-dojo-props='style:\"height:100%;width:100%\",gutters:false,title:\"Edit\"'>\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"top\",style:\"width:100%;height:42px\"'>\r\n\t\t\t\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t\t\t\t<div data-dojo-attach-event=\"onClick:_Delete\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxDeleteIcon\",label:\"Delete the SEO release\",showLabel:false'></div>\r\n\t\t\t\t\t\t<div data-dojo-attach-event=\"onClick:_Withdraw\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxWithDrawIcon\",label:\"Withdraw SEO release\",showLabel:false' data-dojo-attach-point=\"withdrawbtn\"></div>\r\n\t\t\t\t\t\t<div data-dojo-attach-event=\"onClick:_Update\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxUpdateIcon\",label:\"Update SEO\",showLabel:false'></div>\r\n\t\t\t\t\t\t<div data-dojo-attach-event=\"onClick:_Publish\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='\"class\":\"prmaxhidden\",iconClass:\"PRMaxStdIcon PRMaxPublishIcon\",label:\"Re-Publish and SEO\",showLabel:false' data-dojo-attach-point=\"publishbtn\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\"'>\r\n\t\t\t\t\t<div data-dojo-type=\"prmax.pressrelease.seo.edit\" data-dojo-attach-point=\"seo_edit_ctrl\" data-dojo-props='style:\"width:100%;height:100%\"'></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this.seo_model = new prcommon.data.QueryWriteStore(
			{	url:'/iadmin/seo/complaints_list',
				onError:ttl.utilities.globalerrorchecker,
				nocallback:true
		});	},
	postCreate:function()
	{
		this.grid.set("structure",this.view );
		this.grid._setStore ( this.seo_model ) ;
		this.grid["onCellClick"] = dojo.hitch ( this, this._OnCellClick2);
		thi
		this.inherited(arguments);
	},
	_OnCellClick2:function ( e )
	{
		this.grid.selection.clickSelectEvent(e);
		this._row2 = this.grid.getItem(e.rowIndex);

	},
	view:{
		cells: [[
			{name: 'Seo Name',width: "auto", field:"headline"}
			]]
	},
	resize:function()
	{
		this.borderControl.resize( arguments[0] );
	}
});

}

if(!dojo._hasResource["prmax.editor.TtlImgLinkDialog"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.editor.TtlImgLinkDialog"] = true;
dojo.provide("prmax.editor.TtlImgLinkDialog");





dojo.declare("prmax.editor.TtlImgLinkDialog", [dijit._editor.plugins.LinkDialog], {
	// summary:
	//		This plugin extends LinkDialog and adds in a plugin for handling image links.
	//		provides the image link dialog.
	//
	// description:
	//		The command provided by this plugin is:
	//		* insertImage

	// linkDialogTemplate: [protected] String
	//		Over-ride for template since img dialog doesn't need target that anchor tags may.
	linkDialogTemplate: [
		"<table><tr><td>",
		"<label for='${id}_urlInput'>${url}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' regExp='${urlRegExp}' " +
		"required='true' id='${id}_urlInput' name='urlInput' intermediateChanges='true'>",
		"</td></tr><tr><td>",
		"<label for='${id}_textInput'>${text}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_textInput' " +
		"name='textInput' intermediateChanges='true'>",
		"</td></tr><tr><td>",
		"<label for='${id}_styleInput'>${style}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_styleInput' " +
		"name='styleInput' intermediateChanges='true'>",
		"</td></tr><tr><td>",
		"<label for='${id}_heightInput'>${height}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_heightInput' " +
		"name='heightInput' intermediateChanges='true'>",
		"</td></tr><tr><td>",
		"<label for='${id}_widthInput'>${width}</label>",
		"</td><td>",
		"<input dojoType='dijit.form.ValidationTextBox' required='false' id='${id}_widthInput' " +
		"name='widthInput' intermediateChanges='true'>",
		"</td></tr>",
		"</td></tr><tr><td colspan='2'>",
		"<button dojoType='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>",
		"<button dojoType='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>",
		"</td></tr></table>"
	].join(""),

	// htmlTemplate: [protected] String
	//		String used for templating the <img> HTML to insert at the desired point.
	htmlTemplate: "<img src=\"${urlInput}\" _djrealurl=\"${urlInput}\" alt=\"${textInput}\" height=\"${heightInput}\" width=\"${widthInput}\" height=\"${styleInput}\"/>",

	// tag: [protected] String
	//		Tag used for the link type (img).
	tag: "img",

	_getCurrentValues: function(img){
		// summary:
		//		Over-ride for getting the values to set in the dropdown.
		// a:
		//		The anchor/link to process for data for the dropdown.
		// tags:
		//		protected
		var url, text,style,height,width;
		if(img && img.tagName.toLowerCase() === this.tag){
			url = img.getAttribute('_djrealurl');
			// check for missing djrealurl get actual url
			var url2 = img.getAttribute('src');
			url  = url || url2;
			text = img.getAttribute('alt');
			style = img.getAttribute('style');
			height = img.getAttribute('height');
			width = img.getAttribute('width');
			dojo.withGlobal(this.editor.window,
				"selectElement", dijit._editor.selection, [img, true]);
		}else{
			text = dojo.withGlobal(this.editor.window, dijit._editor.selection.getSelectedText);
		}
		return {urlInput: url || 'http://', textInput: text || '', styleInput:style , heightInput:height,widthInput:width}; //Object;
	},

	_isValid: function(){
		// summary:
		//		Over-ride for images.  You can have alt text of blank, it is valid.
		// tags:
		//		protected
		return this._urlInput.isValid();
	},

	_connectTagEvents: function(){
		// summary:
		//		Over-ridable function that connects tag specific events.
		this.inherited(arguments);
		this.editor.onLoadDeferred.addCallback(dojo.hitch(this, function(){
			// Use onmousedown instead of onclick.  Seems that IE eats the first onclick
			// to wrap it in a selector box, then the second one acts as onclick.  See #10420
			this.connect(this.editor.editNode, "onmousedown", this._selectTag);
		}));
	},

	_selectTag: function(e){
		// summary:
		//		A simple event handler that lets me select an image if it is clicked on.
		//		makes it easier to select images in a standard way across browsers.  Otherwise
		//		selecting an image for edit becomes difficult.
		// e: Event
		//		The click event.
		// tags:
		//		private
		if(e && e.target){
			var t = e.target;
			var tg = t.tagName? t.tagName.toLowerCase() : "";
			if(tg === this.tag){
				dojo.withGlobal(this.editor.window,
					"selectElement",
					dijit._editor.selection, [t]);
			}
		}
	},

	_checkValues: function(args){
		// summary:
		//		Function to check the values in args and 'fix' them up as needed
		//		(special characters in the url or alt text)
		// args: Object
		//		Content being set.
		// tags:
		//		protected
		if(args && args.urlInput){
			args.urlInput = args.urlInput.replace(/"/g, "&quot;");
		}
		if(args && args.textInput){
			args.textInput = args.textInput.replace(/"/g, "&quot;");
		}
		if(args && args.styleInput){
			args.styleInput = args.styleInput.replace(/"/g, "&quot;");
		}

		return args;
	},
	updateState: function(){
		// summary:
		//		Change state of the plugin to respond to events in the editor.
		// description:
		//		This is called on meaningful events in the editor, such as change of selection
		//		or caret position (but not simple typing of alphanumeric keys).   It gives the
		//		plugin a chance to update the CSS of its button.
		//
		//		For example, the "bold" plugin will highlight/unhighlight the bold button depending on whether the
		//		characters next to the caret are bold or not.
		//
		//		Only makes sense when `useDefaultCommand` is true, as it calls Editor.queryCommandEnabled(`command`).
		var e = this.editor,
			c = this.command,
			checked, enabled;
		if(!e || !e.isLoaded || !c.length){ return; }
		if(this.button){
			try{
				enabled = e.queryCommandEnabled(c);
				enabled = true ;
				if(this.enabled !== enabled){
					this.enabled = enabled;
					this.button.set('disabled', !enabled);
				}
				if(typeof this.button.checked == 'boolean'){
					checked = e.queryCommandState(c);
					if(this.checked !== checked){
						this.checked = checked;
						this.button.set('checked', e.queryCommandState(c));
					}
				}
			}catch(e){
				console.log(e); // FIXME: we shouldn't have debug statements in our code.  Log as an error?
			}
		}
	},
	_initButton: function(){
		// Override _Plugin._initButton() to initialize DropDownButton and TooltipDialog.
		var _this = this;
		this.tag = 'img' ;
		var messages = dojo.mixin(dojo.i18n.getLocalization("dijit", "common", this.lang),
			dojo.i18n.getLocalization("prmax", "TtlImgLinkDialog", this.lang));
		var dropDown = (this.dropDown = new dijit.TooltipDialog({
			title: messages[this.command + "Title"],
			execute: dojo.hitch(this, "setValue"),
			onOpen: function(){
				_this._onOpenDialog();
				dijit.TooltipDialog.prototype.onOpen.apply(this, arguments);
			},
			onCancel: function(){
				setTimeout(dojo.hitch(_this, "_onCloseDialog"),0);
			}
		}));
		messages.urlRegExp = this.urlRegExp;
		messages.id = dijit.getUniqueId(this.editor.id);
		this._uniqueId = messages.id;
		this._setContent(dropDown.title +
			"<div style='border-bottom: 1px black solid;padding-bottom:2pt;margin-bottom:4pt'></div>" +
			dojo.string.substitute(this.linkDialogTemplate, messages));
		dropDown.startup();
		this._urlInput = dijit.byId(this._uniqueId + "_urlInput");
		this._textInput = dijit.byId(this._uniqueId + "_textInput");
		this._setButton = dijit.byId(this._uniqueId + "_setButton");
		this.connect(dijit.byId(this._uniqueId + "_cancelButton"), "onClick", function(){
			this.dropDown.onCancel();
		});
		if(this._urlInput){
			this.connect(this._urlInput, "onChange", "_checkAndFixInput");
		}
		if(this._textInput){
			this.connect(this._textInput, "onChange", "_checkAndFixInput");
		}
		this._connectTagEvents();
		if(this.command.length){
			var className = this.iconClassPrefix+" "+this.iconClassPrefix + this.command.charAt(0).toUpperCase() + this.command.substr(1);
			if(!this.button){
				var props = dojo.mixin({
					label: messages.label,
					showLabel: false,
					iconClass: className,
					dropDown: this.dropDown,
					tabIndex: "-1"
				}, this.params || {});
				this.button = new this.buttonClass(props);
			}
		}
	},
	_onDblClick: function(e){
		// summary:
		// 		Function to define a behavior on double clicks on the element
		//		type this dialog edits to select it and pop up the editor
		//		dialog.
		// e: Object
		//		The double-click event.
		// tags:
		//		protected.
		if(e && e.target){
			var t = e.target;
			var tg = t.tagName? t.tagName.toLowerCase() : "";
			if(tg === this.tag && dojo.attr(t,"src")){
				dojo.withGlobal(this.editor.window,
					 "selectElement",
					 dijit._editor.selection, [t]);
				this.editor.onDisplayChanged();
				setTimeout(dojo.hitch(this, function(){
					// Focus shift outside the event handler.
					// IE doesn't like focus changes in event handles.
					this.button.set("disabled", false);
					this.button.openDropDown();
				}), 10);
			}
		}
	}
});

// Register this plugin.
dojo.subscribe(dijit._scopeName + ".Editor.getPlugin",null,function(o){
	if(o.plugin){ return; }
	switch(o.args.name){
		case "ttlinsertimage":
			o.plugin = new prmax.editor.TtlImgLinkDialog({command: o.args.name});
			break;
	}
});

}

if(!dojo._hasResource["prmax.iadmin.sales.newsfeed.add"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.newsfeed.add"] = true;
//-----------------------------------------------------------------------------
// Name:    prmax.iadmin.sales.newsfeed.add
// Author:  Chris Hoy
// Purpose:
// Created: 06/01/2012
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.sales.newsfeed.add");












dojo.declare("prmax.iadmin.sales.newsfeed.add", [ ttl.BaseWidget ], {
	templateString: dojo.cache("prmax", "iadmin/sales/newsfeed/templates/add.html", "<div>\r\n\t<div data-dojo-attach-point=\"frame\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='gutters:false,style:\"width:800px;height:600px\"'>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"top\",style:\"overflow:auto;width:100%;height:30%\",splitter:true'>\r\n\t\t\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='\"class\":\"prmaxdefault\",onsubmit:\"return false\"'>\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t\t<tr><td width=\"120px\" align=\"right\" class=\"prmaxrowtag\">Subject</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"subject\" data-dojo-props='\"class\":\"prmaxrequired\",name:\"subject\",required:true,trim:true,maxLength:120,type:\"text\",style:\"width:99%\"' ></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Summary</td><td><textarea data-dojo-props='maxLength:254, \"class\":\"prmaxrequired\",name:\"summary\",rows:2,required:true,style:\"width:99%\"' data-dojo-type=\"ttl.form.ValidationTextarea\" data-dojo-attach-point=\"summary\"></textarea></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">News Type</td><td><select data-dojo-props='name:\"newsfeedtypeid\",autoComplete:\"true\",labelType:\"html\", required:true, style:\"width:15em\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"newsfeedtypeid\"></select></td></tr>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Valid From Date</td><td><input data-dojo-props='type:\"text\",name:\"embargo\",required:\"true\"' data-dojo-attach-point=\"embargo\" data-dojo-type=\"dijit.form.DateTextBox\" ></td>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Valid to Date</td><td><input data-dojo-props='type:\"text\",name:\"expire\",required:\"true\"' data-dojo-attach-point=\"expire\" data-dojo-type=\"dijit.form.DateTextBox\" ></td>\r\n\t\t\t\t</table>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\",splitter:true'>\r\n\t\t\t<div data-dojo-type=\"dijit.Editor\" data-dojo-attach-point=\"newscontent\" data-dojo-props='name:\"newscontent\", \"class\":\"bordered\",extraPlugins:[{name:\"dijit._editor.plugins.FontChoice\",command:\"fontName\", generic:false},\"fontSize\",\"createLink\",\"viewsource\",\"preview\",\"ttlinsertimage\",\"insertCollateral\"],style:\"width:100%;height:100%\"' ></div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"bottom\",style:\"overflow:auto;width:100%;height:12m\",splitter:true'>\r\n\t\t\t<button data-dojo-attach-point=\"addbtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='style:\"float:right;padding-right:20px\", busyLabel:\"Please Wait Adding News\", label:\"Create News Item\", \"class\":\"prmaxbutton\"' data-dojo-attach-event=\"onClick:_AddNews\" ></button>\r\n\t</div>\r\n</div>\r\n"),
	constructor:function()
	{

		this._newsfeedtypes = new dojo.data.ItemFileReadStore ( {url:'/common/lookups?searchtype=newsfeedtypes',onError:ttl.utilities.globalerrorchecker, clearOnClose:true, urlPreventCache:true });
		this._add_news_call_back = dojo.hitch(this, this._add_news_call);
	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.newsfeedtypeid.set("store", this._newsfeedtypes);
		this.newsfeedtypeid.set("value", 1);
	},
	resize:function()
	{
		this.frame.resize(arguments[0]);
		this.inherited(arguments);
	},
	Load:function( _dialog,  _model)
	{
		this._dialog = _dialog;
		this._model = _model;
		this._Clear();
		this._dialog.show();
	},
	_Clear:function()
	{
		this.addbtn.cancel();
		this.subject.set("value", "");
		this.summary.set("value", "");
		this.newsfeedtypeid.set("value", 1);
		this.embargo.set("value", new Date());
		this.expire.set("value", new Date());
		this.newscontent.set("value", "");
	},
	_add_news_call:function( response )
	{
		if ( response.success == "OK")
		{
			this._model.newItem(response.news);
			alert("News Added");
			this._dialog.hide();
			this._Clear();
		}
		else
		{
			alert("problem adding news");
		}
		this.addbtn.cancel();
	},
	_AddNews:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		var content = this.form.get("value");

		content["embargo"] = ttl.utilities.toJsonDate ( this.embargo.get("value") ) ;
		content["expire"] = ttl.utilities.toJsonDate ( this.expire.get("value") ) ;
		content["newscontent"] = this.newscontent.get("value");

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._add_news_call_back,
			url:'/iadmin/newsfeed/add',
			content:content}));
	}
});

}

if(!dojo._hasResource["prmax.iadmin.sales.newsfeed.edit"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.newsfeed.edit"] = true;
//-----------------------------------------------------------------------------
// Name:    prmax.iadmin.sales.newsfeed.edit
// Author:  Chris Hoy
// Purpose:
// Created: 06/01/2012
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.sales.newsfeed.edit");



dojo.declare("prmax.iadmin.sales.newsfeed.edit", [ ttl.BaseWidget ], {
	templateString: dojo.cache("prmax", "iadmin/sales/newsfeed/templates/edit.html", "<div>\r\n\t<div data-dojo-attach-point=\"frame\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='gutters:false,style:\"width:100%;height:100%\", \"class\":\"bordered\"'>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"top\",style:\"overflow:auto;width:100%;height:30%\",splitter:true'>\r\n\t\t\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='\"class\":\"prmaxdefault\",onsubmit:\"return false\"'>\r\n\t\t\t\t<input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"newsfeedid\" data-dojo-props='type:\"hidden\", name:\"newsfeedid\"'>\r\n\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t\t<tr><td width=\"120px\" align=\"right\" class=\"prmaxrowtag\">Subject</td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"subject\" data-dojo-props='\"class\":\"prmaxrequired\",name:\"subject\",required:true,trim:true,maxLength:120,type:\"text\",style:\"width:99%\"' ></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Summary</td><td><textarea data-dojo-props='maxLength:254, \"class\":\"prmaxrequired\",name:\"summary\",rows:2,required:true,style:\"width:99%\"' data-dojo-type=\"ttl.form.ValidationTextarea\" data-dojo-attach-point=\"summary\"></textarea></td></tr>\r\n\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">News Type</td><td><select data-dojo-props='name:\"newsfeedtypeid\",autoComplete:\"true\",labelType:\"html\", required:true, style:\"width:15em\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"newsfeedtypeid\"></select></td></tr>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Valid From Date</td><td><input data-dojo-props='type:\"text\",name:\"embargo\",required:\"true\"' data-dojo-attach-point=\"embargo\" data-dojo-type=\"dijit.form.DateTextBox\" ></td>\r\n\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Valid to Date</td><td><input data-dojo-props='type:\"text\",name:\"expire\",required:\"true\"' data-dojo-attach-point=\"expire\" data-dojo-type=\"dijit.form.DateTextBox\" ></td>\r\n\t\t\t\t</table>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\",splitter:true'>\r\n\t\t\t<div data-dojo-type=\"dijit.Editor\" data-dojo-attach-point=\"newscontent\" data-dojo-props='name:\"newscontent\", \"class\":\"bordered\",extraPlugins:[{name:\"dijit._editor.plugins.FontChoice\",command:\"fontName\", generic:false},\"fontSize\",\"createLink\",\"viewsource\",\"preview\",\"ttlinsertimage\",\"insertCollateral\"],style:\"width:100%;height:100%\"' ></div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"bottom\",style:\"overflow:auto;width:100%;height:12m\",splitter:true'>\r\n\t\t\t<button data-dojo-attach-point=\"updbtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='style:\"float:right;padding-right:20px\", busyLabel:\"Please Wait Updating News\", label:\"Update News Item\", \"class\":\"prmaxbutton\"' data-dojo-attach-event=\"onClick:_UpdateNews\" ></button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"),
	constructor:function()
	{
		this._load_news_call_back = dojo.hitch(this, this._load_news_call);
		this._update_news_call_back = dojo.hitch(this, this._update_news_call);
		this._newsfeedtypes = new dojo.data.ItemFileReadStore ( {url:'/common/lookups?searchtype=newsfeedtypes',onError:ttl.utilities.globalerrorchecker, clearOnClose:true, urlPreventCache:true });
	},
	postCreate:function()
	{

		this.inherited(arguments);
		this.newsfeedtypeid.set("store", this._newsfeedtypes);
		this.newsfeedtypeid.set("value", 1);

	},
	_load_news_call:function( response )
	{
		if (response.success == "OK")
		{
			with(response)
			{
				this.newsfeedid.set("value", news.newsfeedid);
				this.subject.set("value", news.subject);
				this.summary.set("value", news.summary);
				this.newsfeedtypeid.set("value", news.newsfeedtypeid);

				this.embargo.set("value", ttl.utilities.fromObjectDate(news.embargo));
				this.expire.set("value", ttl.utilities.fromObjectDate(news.expire));
				this.newscontent.set("value", news.newscontent);
			}
			this._show_call(1, null);
		}
	},
	Load:function( newsfeedid, _show_call)
	{
		this._show_call = _show_call;
		this.Clear();
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._load_news_call_back,
			url:'/iadmin/newsfeed/get',
			content:{newsfeedid:newsfeedid}}));
	},
	Clear:function()
	{
		this.updbtn.cancel();
		this.subject.set("value", "");
		this.summary.set("value", "");
		this.newsfeedtypeid.set("value", 1);
		this.embargo.set("value", new Date());
		this.expire.set("value", new Date());
		this.newscontent.set("value", "");
	},
	_update_news_call:function(response)
	{
		if ( response.success == "OK")
		{
			this._show_call(2, response.news);
			alert("News Item Updated");
		}
		else
		{
			alert("Problem Updating");
		}

		this.updbtn.cancel();

	},
	_UpdateNews:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.updbtn.cancel();
			return false;
		}

		var content = this.form.get("value");

		content["embargo"] = ttl.utilities.toJsonDate ( this.embargo.get("value") ) ;
		content["expire"] = ttl.utilities.toJsonDate ( this.expire.get("value") ) ;
		content["newscontent"] = this.newscontent.get("value");

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._update_news_call_back,
			url:'/iadmin/newsfeed/update',
			content:content}));
	},
	resize:function()
	{
		this.frame.resize( arguments[0]);

		this.inherited(arguments);
	}
});

}

if(!dojo._hasResource["prmax.iadmin.sales.newsfeed.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.newsfeed.view"] = true;
//-----------------------------------------------------------------------------
// Name:    prmax.iadmin.sales.newsfeed.view
// Author:  Chris Hoy
// Purpose:
// Created: 06/01/2012
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prmax.iadmin.sales.newsfeed.view");













dojo.declare("prmax.iadmin.sales.newsfeed.view", [ ttl.BaseWidget ], {
	templateString: dojo.cache("prmax", "iadmin/sales/newsfeed/templates/view.html", "<div>\r\n\t<div data-dojo-attach-point=\"borderCtrl\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='style:\"width:100%;height:100%\",gutters:false' >\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"top\",style:\"width:100%;height:48px;padding:0px;margin:0px\"'>\r\n\t\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t\t<div data-dojo-type=\"dijit.form.Button\"  data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxAddIcon\",label:\"New Task\",showLabel:false' data-dojo-attach-event=\"onClick:_NewNewsFeed\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"width:50%\",splitter:\"true\"' >\r\n\t\t\t<div data-dojo-attach-point=\"grid\" data-dojo-type=\"dojox.grid.EnhancedGrid\" data-dojo-props='rowsPerPage:50' ></div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.StackContainer\" data-dojo-props='region:\"center\",splitter:\"true\", \"class\":\"scrollpanel\"' data-dojo-attach-point=\"newszone\" >\r\n\t\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='title:\"blank\", selected:\"selected\"' data-dojo-attach-point=\"blank\"></div>\r\n\t\t\t<div data-dojo-type=\"prmax.iadmin.sales.newsfeed.edit\" data-dojo-props='style:\"width:100%;height:100%\", title:\"edit\"' data-dojo-attach-point=\"edit_ctrl\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Add News\"' data-dojo-attach-point=\"newsdialog\">\r\n\t\t<div data-dojo-attach-point=\"newsctrl\" data-dojo-type=\"prmax.iadmin.sales.newsfeed.add\" ></div>\r\n\t</div>\r\n</div>\r\n"),
	constructor:function()
	{
		this._news = new dojox.data.JsonRestStore( {target:"/iadmin/newsfeed/news", idAttribute:"newsfeedid"});

		this._show_call_back = dojo.hitch(this, this._show_call);
		this._delete_news_call_back = dojo.hitch(this, this._delete_news_call);
	},
	postCreate:function()
	{
		this.grid.set("structure", this.view1);
		this.grid._setStore( this._news);
		this.grid.setQuery(this._DefaultQuery());
		this.grid["onCellClick"] = dojo.hitch(this,this._SelectRow);
		this.inherited(arguments);
	},
	view1:{
		cells: [[
			{name: 'Id',width: "40px",field:"newsfeedid", styles:"text-align:right;"},
			{name: 'Subject',width: "150px",field:"subject"},
			{name: 'Summary',width: "250px",field:"summary"},
			{name: 'Type',width: "80px",field:"newsfeedtypedescription"},
			{name: 'Active',width: "80px",field:"embargo_display"},
			{name: 'Expire',width: "80px",field:"expire_display"},
			{name: ' ',width: "2em",field:'tasktagid',formatter:ttl.utilities.deleteRowCtrl}
			]]
	},
	_show_call:function( option, news)
	{
		switch(option)
		{
			case 1:
				this.newszone.selectChild(this.edit_ctrl);
				break;
			case 2:
				this._news.setValue( this._row, "subject", news.subject);
			  this._news.setValue( this._row, "summary",news.summary);
			  this._news.setValue( this._row, "newsfeedtypedescription",news.newsfeedtypedescription);
				this._news.setValue( this._row, "embargo_display", news.embargo_display);
				this._news.setValue( this._row, "expire_display", news.expire_display);
				break;
		}
	},
	_delete_news_call:function(response)
	{
		if (response.success == "OK")
		{
			this._news.deleteItem(this._row);
			this._row = null;
			alert("News Item Deleted");
		}
		else
		{
			alert("Problem Deleting News");
		}
	},
	_SelectRow:function(e)
	{
		var rowData = this.grid.getItem(e.rowIndex);
		this.grid.selection.clickSelectEvent(e);
		this._row = rowData;
		if (e.cellIndex == 6)
		{
			if (confirm("Delete News Item ()" + this._row.subject +")"))
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._delete_news_call_back,
				url:'/iadmin/newsfeed/delete',
				content:{newsfeedid:this._row.newsfeedid}}));
		}
		else
		{
			this.edit_ctrl.Load( rowData.newsfeedid , this._show_call_back);
		}
	},
	resize:function()
	{
		this.borderCtrl.resize ( arguments[0] )

		this.inherited(arguments);
	},
	_DefaultQuery:function()
	{
		return {};
	},
	_NewNewsFeed:function()
	{
		this.newsctrl.Load(this.newsdialog, this._news );
	}
});

}

if(!dojo._hasResource["prmax.iadmin.PrmaxDataSets"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.PrmaxDataSets"] = true;
dojo.provide("prmax.iadmin.PrmaxDataSets");




_data_set_selected = function(inDatum)
{
	var status = inDatum ? 'checked.gif':'unchecked.gif';
	return '<img  height="10px" width="10px" style="padding:0x;margin:0px" src="/static/images/'+status+'" ></img>';
};

dojo.declare("prmax.iadmin.PrmaxDataSets",
	[ttl.BaseWidget],{
	templateString:"<div>\r\n\t<div  dojoAttachPoint=\"borderControl\" dojotype=\"dijit.layout.BorderContainer\" gutters=\"false\"  style=\"width:100%;height:100%;overflow: hidden; border: 0; padding: 0; margin: 0\" >\r\n\t\t<div dojoAttachPoint=\"datasetsgrid\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"50\" region=\"center\"></div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._datasets = new dojox.data.JsonRestStore( {target:"/iadmin/customer_data_sets", idAttribute:"prmaxdatasetid"});
		this._update_data_set_call_back = dojo.hitch(this,this._update_data_set_call);
		this._has_international_data = false;
	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.datasetsgrid.set("structure",this.view);
		this.datasetsgrid._setStore(this._datasets );
		this.datasetsgrid['onRowClick'] = dojo.hitch(this,this._on_row_select);
	},
	_on_row_select:function(e)
	{
		if (this._has_international_data==true)
		{
			this._row = this.datasetsgrid.getItem(e.rowIndex);

			var message = "Remove Data Set " + this._row.prmaxdatasetdescription + " ?";
			if ( this._row.customerprmaxdatasetid == null)
				message = null;

			if ( message == null || confirm (message) == true)
			{
				dojo.xhrPost(
					ttl.utilities.makeParams({
					load: this._update_data_set_call_back,
						url:'/iadmin/customer_data_set_update',
						content:{
							'icustomerid':this._customerid,
							customerprmaxdatasetid:this._row.customerprmaxdatasetid,
							prmaxdatasetid:this._row.prmaxdatasetid
						}
						}));
			}
		}
		else
		{
			alert("International Data Disabled");
		}
	},
	_update_data_set_call:function( response )
	{
		if ( response.success == "OK")
		{
			this._datasets.setValue( this._row, "customerprmaxdatasetid",response.data.customerprmaxdatasetid);
		}
		else
		{
			alert("Problem Updating");
		}
	},
	resize:function()
	{
		this.inherited(arguments);
		this.borderControl.resize(arguments[0]);
	},
	view :
	{noscroll: false,
			cells: [[
			{name: 'Selected',width: "5em",field:'customerprmaxdatasetid', formatter:_data_set_selected},
			{name: 'Data Set',width: "auto",field:'prmaxdatasetdescription' }
		]]
	},
	load:function(customerid, has_international_data)
	{
		if ( customerid != null)
		{
			this._customerid = customerid;
			this.datasetsgrid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(), {icustomerid:customerid}));
		}

		this._has_international_data = has_international_data;
	}
});

}

if(!dojo._hasResource["prcommon.prcommonobjects"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.prcommonobjects"] = true;
dojo.provide("prcommon.prcommonobjects");

// This contains all the data object that the system uses

// Display control object for display pane
//  Contacts
function Constants() {}
Constants.prototype.Search_grid_markall = 0 ;
Constants.prototype.Search_grid_invertmarks = 1 ;
Constants.prototype.Search_grid_clear = 2 ;
Constants.prototype.Search_grid_clear_appended = 3 ;
Constants.prototype.Search_grid_mark_appended = 4 ;
Constants.prototype.PRMAX_Base = 1 ;
Constants.prototype.PRMAX_Pro = 2 ;
Constants.prototype.Freelance = 19;

// Events
function PREvents() {}
// An employee has been deleted
PREvents.prototype.Employee_Deleted = "/employee/deleted";
// An employees details has been chnaged
PREvents.prototype.Employee_Updated = "/employee/update";
// An Item has been added to a seach session
PREvents.prototype.SearchSession_Added = "/searchsession/add";
// Search session an item has been deleted
PREvents.prototype.SearchSession_Deleted = "/searchsession/delete";
// outlet deleted
PREvents.prototype.Outlet_Deleted = "/outlet/deleted";
// outlet updated
PREvents.prototype.Outlet_Updated = "/outlet/update";
// Outlet overrides
PREvents.prototype.Outlet_Overrides = "/outlet/overrides";
// Search session details have been changed
PREvents.prototype.SearchSession_Changed = "/searchsession/changed";
PREvents.prototype.Advance_Session_Changed = "/advance/sessionchanged";

// display control retry
PREvents.prototype.Display_Retry = "/display/retry";
// Employee add
PREvents.prototype.Employee_Add = "/employee/add";
// Employee override
PREvents.prototype.Employee_Override = "/employee/overrides";
// Display control clear
PREvents.prototype.Display_Clear ="/display/clear";
//Load
PREvents.prototype.Display_Load ="/display/load";
// dilaof events
PREvents.prototype.Dialog_Close = "/dialog/close";
//  refresh load`
PREvents.prototype.Display_ReLoad = "/display/refresh";
//  view changed
PREvents.prototype.Display_View_Changed = "/display/chnaged";

// search partial mactch chnaged
PREvents.prototype.Search_PartialMatch = "/search/partialmatch";
// search total option
PREvents.prototype.Search_Total = "/search/searchtotal";
// collateral record added
PREvents.prototype.Collateral_Add = "/collateral/add";

// Projects
PREvents.prototype.Project_Add = "/projects/add";
PREvents.prototype.Project_Update = "/projects/update";
PREvents.prototype.Project_Delete = "/projects/delete";

// Lists
PREvents.prototype.List_Deleted = "/lists/delete";
PREvents.prototype.List_Add = "/lists/add";

// users
PREvents.prototype.User_Added = "/user/added";

// word html
PREvents.prototype.Word_Html_Data = "/email.html";

// geographical
PREvents.prototype.Geographical_Area_Delete = "/geographical/delete";
PREvents.prototype.Geographical_Area_Update = "/geographical/update";
PREvents.prototype.Geographical_Area_Add = "/geographical/add";

// interests
PREvents.prototype.Interest_Delete = "/interest/delete";
PREvents.prototype.Interest_Update = "/interest/update";
PREvents.prototype.Interest_Add = "/interest/add";

// Coverage
PREvents.prototype.Coverage_Moved = "/coverage/moved";

// Person
PREvents.prototype.Person_Added = "/person/add";
PREvents.prototype.Person_Update = "/person/update";
PREvents.prototype.Person_Delete = "/person/delete";

// Press Release
PREvents.prototype.PressReleaseStart = "/pressrelease/start";

// Contact History
PREvents.prototype.Crm_Note_Add = "/crm/add";
PREvents.prototype.Crm_Note_Update = "/crm/update";
PREvents.prototype.Crm_Note_Delete = "/crm/delete";

// Payments
PREvents.prototype.Monthly_Payments = "/payment/taken";

// Messages
PREvents.prototype.Message_Sent = "/messages/sent";

// Generic button Pressed name of button is first  param
PREvents.prototype.Button_Pressed = "/button/pressed";

// Features
PREvents.prototype.Feature_Deleted = "/feature/deleted";
PREvents.prototype.Feature_Added = "/feature/added";
PREvents.prototype.Feature_Updated = "/feature/update";

PREvents.prototype.Feature_List_Add = "/featurelist/add";
PREvents.prototype.Feature_List_Update = "/featurelist/update";
PREvents.prototype.Feature_List_Update = "/featurelist/delete";

// Geographical
PREvents.prototype.Geographical_Selected = "/geographical/selected";
// bounced email
PREvents.prototype.BouncedEmail_Completed = "/events/bouncedcompleted";

PREvents.prototype.Financial_ReLoad = "/financial/refresh";

// Maint

PREvents.prototype.Show_Customer_Main = "/m/show";
PREvents.prototype.Expire_Date_Changed = "/m/exp";
PREvents.prototype.Task_Refresh = "/m/t_refresh";

PREvents.prototype.Edit_Notes = "/crm/edit_notes";
PREvents.prototype.Update_Notes ="crm/notes_updated";

PREvents.prototype.Issue_Add ="issue/add";
PREvents.prototype.Issue_Update = "issue/update";
PREvents.prototype.Issue_Delete = "issue/delete";

PREvents.prototype.Task_Add = "/task/add";
PREvents.prototype.Task_Update = "task/updated";

PREvents.prototype.Document_Add = "/document/add";
PREvents.prototype.Document_Update = "/document/update";
PREvents.prototype.Document_Deleted = "document/delete";

PRCOMMON.Events = new PREvents();
PRCOMMON.Constants = new Constants();

}

if(!dojo._hasResource["prcommon.data.DataStores"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.data.DataStores"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.data.DataStores
// Author:  Chris Hoy
// Purpose: allows data to be chnaged from a query
// Created: 23/05/2008
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prcommon.data.DataStores");



dojo.declare("prcommon.data.DataStores", null,
{
	constructor: function(/* Object */ params)
	{
		this._prmaxoutlettypes = new dojo.data.ItemFileReadStore({ url:"/common/lookups?searchtype=privatechannels"} );
		this._frequencies = new dojo.data.ItemFileReadStore(	{ url:"/common/lookups?searchtype=frequencies"} );
		this._reasoncode_data_upd = new dojo.data.ItemFileReadStore ({ url:"/common/lookups?searchtype=reasoncodes&reasoncategoryid=2"});
		this._reasoncode_data_add = new dojo.data.ItemFileReadStore ({ url:"/common/lookups?searchtype=reasoncodes&reasoncategoryid=1"});
		this._reasoncode_data_del = new dojo.data.ItemFileReadStore ({ url:"/common/lookups?searchtype=reasoncodes&reasoncategoryid=3"});
		this._reasoncode_data_email = new dojo.data.ItemFileReadStore ({ url:"/common/lookups?searchtype=reasoncodes&reasoncategoryid=4"});
		this._interest_master_type =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=interestgroups"});
		this._interest_sections =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=interestgroups&sections=1"});
		this._research_frequencies =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=researchfrequencies"});
		this._countries = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=countries"});
		this._contacthistorysources = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=contacthistorytypes"});
		this._contacthistorysourcesext = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=contacthistorytypes&include_no_option=1"});
		this._messagetypes = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=messagetypes"});
		this._customertypes_model = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=customertypes"});
		this._customertypes_model_ext = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=customertypes&include_no_option=1"});
		this._researchprojectstatus = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=researchprojectstatus"});
		this._customersources = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=customersources&include_no_option=1"});
		this._reasoncode_del_hist = new dojo.data.ItemFileReadStore ({ url:"/common/lookups?searchtype=reasoncodes&reasoncategoryid=8"});

	},
	Reason_Add_Default:5,
	Reason_Upd_Default:8,
	fetch:function()
	{
		this._interest_master_type.fetch();
		this._messagetypes.fetch();

		/*this._prmaxoutlettypes.fetch();
		this._frequencies.fetch();
		this._reasoncode_data_upd.fetch();
		this._reasoncode_data_add.fetch();
		this._reasoncode_data_del.fetch();
		this._research_frequencies.fetch();
		this._countries.fetch();
		this._contacthistorysources.fetch();
		this._contacthistorysourcesext.fetch();
		*/

	},
	MessageTypes:function()
	{
		return this._messagetypes;
	},
	OutletTypes:function()
	{
		return this._prmaxoutlettypes;
	},
	Frequency:function()
	{
		return this._frequencies;
	},
	Research_Reason_Update_Codes:function()
	{
		return this._reasoncode_data_upd;
	},
	Research_Reason_Add_Codes:function()
	{
		return this._reasoncode_data_add;
	},
	Research_Reason_Del_Codes:function()
	{
		return this._reasoncode_data_del;
	},
	Research_Reason_Del_Hist_Codes:function()
	{
		return this._reasoncode_del_hist;
	},
	Research_Reason_Add_Email:function()
	{
		return this._reasoncode_data_email;
	},
	Interest_Filter:function()
	{
		return this._interest_master_type;
	},
	Research_Frequencies:function()
	{
		return this._research_frequencies;
	},
	Countries:function()
	{
			return this._countries;
	},
	ContactHistoryTypes:function( include_no_option )
	{
		if ( include_no_option === true )
			return this._contacthistorysourcesext;
		else
			return this._contacthistorysources;
	},
	Interest_Sections:function()
	{
		return this._interest_sections;
	},
	Customer_Types:function()
	{
			return this._customertypes_model;
	},
	Customer_Types_Filter:function()
	{
		return this._customertypes_model_ext;
	},
	Research_Project_Status:function()
	{
		return this._researchprojectstatus;
	},
	Customer_Source_Filter:function()
	{
		return this._customersources;
	}
});

}

if(!dojo._hasResource["prmax.crm.viewer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.crm.viewer"] = true;
//-----------------------------------------------------------------------------
// Name:    ViewContact.js
// Author:  Chris Hoy
// Purpose:
// Created: 28/05/2010
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.crm.viewer");

dojo.declare("prmax.crm.viewer",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div dojoAttachPoint=\"borderControl\" dojotype=\"dijit.layout.BorderContainer\" style=\"width:100%;height:100%\" gutters=\"false\" >\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"controls\" region=\"top\" style=\"height:42px;width:100%;overflow:hidden\">\r\n\t\t\t<button dojotype=\"dijit.form.Button\" label=\"Add Note\" dojoAttachEvent=\"onClick:_AddNoteShow\"></button>\r\n\t\t\tFilter By <select class=\"prmaxrequired\" name=\"contacthistorysourceid\" autoComplete=\"true\" searchAttr=\"name\" dojoType=\"dijit.form.FilteringSelect\" required=\"true\" invalidMessage=\"Please Select Contact History Type\" labelType=\"html\" dojoAttachPoint=\"contacthistorysourceid\"></select>\r\n\t\t\t<button dojotype=\"dijit.form.Button\" label=\"Filter\" dojoAttachEvent=\"onClick:_Filter\"></button>\r\n\t\t</div>\r\n\t\t<div dojotype=\"dijit.layout.ContentPane\"   style=\"width:100%\" region=\"center\"  splitter=\"true\">\r\n\t\t\t<div dojoAttachPoint=\"viewer_grid\" dojoType=\"dojox.grid.DataGrid\"   query=\"{ }\" rowsPerPage=\"30\" style=\"width:100%;height:100%\" ></div>\r\n\t\t</div>\r\n\t\t<div dojotype=\"dijit.layout.ContentPane\"   style=\"width:100%;height:30%\" class=\"scrollpanel\" region=\"bottom\"  splitter=\"true\">\r\n\t\t\t<div dojoAttachPoint=\"view_details\" dojotype=\"prmax.crm.ViewContact\" class=\"scrollpanel\" isdelete=\"true\"  isedit=\"true\" style=\"width:100%;height:100%\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"addctrl\" dojoType=\"dijit.Dialog\" title=\"Add Contact Note\">\r\n\t\t<div dojoAttachPoint=\"addctrl1\" dojotype=\"prmax.crm.AddContact\" showclose=\"true\" style=\"width:600px;height:300px\"></div>\r\n\t</div>\r\n</div>\r\n",
	contacthistorysourceid_default:-1,
	taskview:false,
	constructor: function()
	{
		this._SetContactNoteCallBack = dojo.hitch( this , this._SetContactNoteCall);
		this._customerid = -2 ;
		this._taskid = null;
		dojo.subscribe(PRCOMMON.Events.Dialog_Close, dojo.hitch(this,this._DialogCloseEvent));
		dojo.subscribe(PRCOMMON.Events.Crm_Note_Add, dojo.hitch(this,this._AddNoteEvent));
		dojo.subscribe(PRCOMMON.Events.Crm_Note_Update, dojo.hitch(this,this._UpdateNoteEvent));
		dojo.subscribe(PRCOMMON.Events.Crm_Note_Delete, dojo.hitch(this,this._DeleteNoteEvent));

		this.filter_db = new prcommon.data.QueryWriteStore (
			{url:'/crm/filter',
				nocallback:true,
				onError:ttl.utilities.globalerrorchecker
		});
	},
	view:{
		cells: [[
			{name: 'Date',width: "120px",field:'taken_display'},
			{name: 'Subject',width: "auto",field:'subject'},
			{name: 'Source Type',width: "auto",field:'contacthistorydescription'},
			{name: 'Source',width: "auto",field:'source'}
			]]
	},
	view2:{
		cells: [[
			{name: 'Date',width: "120px",field:'taken_display'},
			{name: 'Subject',width: "auto",field:'subject'}
			]]
	},

	postCreate:function()
	{
		this.contacthistorysourceid.store = PRCOMMON.utils.stores.ContactHistoryTypes( true );
		this.contacthistorysourceid.set("value", this.contacthistorysourceid_default);
		if ( this.taskview )
		{
			this.viewer_grid.set("structure", this.view2);
			dojo.addClass(this.controls.domNode, "prmaxhidden");
		}
		else
		{
			this.viewer_grid.set("structure", this.view);
		}
		this.viewer_grid._setStore(this.filter_db);
		this.viewer_grid.onRowClick = dojo.hitch(this,this.onSelectRow);
		this.viewer_grid.onStyleRow = dojo.hitch(this,this.onStyleRow);

		this.inherited(arguments);
	},
	onStyleRow: function(inRow)
	{
		ttl.GridHelpers.onStyleRow(inRow);
	},
	onSelectRow : function(e) {
		var row=this.viewer_grid.getItem(e.rowIndex);

		this.view_details.Load ( row.i.contacthistoryid);
		this.viewer_grid.selection.clickSelectEvent(e);
	},
	_Filter:function()
	{
		var query = {contacthistorysourceid: this.contacthistorysourceid.get("value"),
				icustomerid : this._customerid
				};
		if ( this._taskid )
			query["taskid"] = this._taskid;

		this.viewer_grid.setQuery(ttl.utilities.getPreventCache( query ));
	},
	_AddNoteShow:function()
	{
		this.addctrl.show();
	},
	LoadControls:function( outletid, employeeid, contactid, ref_customerid, taskid )
	{
		this._customerid = ref_customerid;
		this.addctrl1.LoadControls( outletid, employeeid, contactid, ref_customerid, taskid );
		this.view_details.Clear();

		if ( this._customerid != null && this.contacthistorysourceid_default != -1 )
		{
			this.addctrl1.set("contacthistorysourceid_default" , this.contacthistorysourceid_default);
				this._Filter();
		}
		this.refresh( ) ;
	},
	refresh:function ( )
	{
		this._Filter();
	},
	resize:function()
	{
		this.borderControl.resize(arguments[0]);
		this.inherited(arguments);
	},
	_DialogCloseEvent:function(  source )
	{
		if ( source == "add_contact" )
			this.addctrl.hide();
	},
	_AddNoteEvent:function ( notes )
	{
		this.filter_db.newItem ( notes ) ;
	},
	_SetContactNoteCall:function()
	{
		this._row = arguments[0];
	},
	_UpdateNoteEvent:function ( notes )
	{
		this._row = null;
		var item  =	{
				identity: notes.contacthistoryid,
				onItem: this._SetContactNoteCallBack};

		this.filter_db.fetchItemByIdentity(item);
		if  (this._row )
		{
			this.filter_db.setValue(  this._row, "subject" , notes.subject, true );
			this.filter_db.setValue(  this._row, "contacthistorydescription" , notes.contacthistorydescription, true );
		}
	},
	_DeleteNoteEvent:function( contacthistoryid )
	{
		this._row = null;
		var item  =	{
				identity: contacthistoryid,
				onItem: this._SetContactNoteCallBack};

		this.filter_db.fetchItemByIdentity(item);
		if  (this._row )
			this.filter_db.deleteItem( this._row );
	}
});






}

if(!dojo._hasResource["prmax.crm.AddContact"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.crm.AddContact"] = true;
//-----------------------------------------------------------------------------
// Name:    AddContac.js
// Author:  Chris Hoy
// Purpose:
// Created: 28/05/2010
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.crm.AddContact");

dojo.declare("prmax.crm.AddContact",
	[ dijit._Widget, dijit._Templated, dijit._Container],
	{
	widgetsInTemplate: true,
	contacthistorysourceid_default:-2,
	showclose:false,
	isedit:false,
	templateString:"<div >\r\n\t<form class=\"prmaxdefault\" dojoAttachPoint=\"formNode\" dojoType=\"dijit.form.Form\" onSubmit=\"return false\">\r\n\t\t<input name=\"contacthistoryid\" type=\"hidden\" dojoAttachPoint=\"contacthistoryid\"  value = \"-1\" dojoType=\"dijit.form.TextBox\" />\r\n\t\t<input name=\"ref_customerid\" type=\"hidden\" dojoAttachPoint=\"ref_customerid\"  dojoType=\"dijit.form.TextBox\" />\r\n\t\t<input name=\"outletid\" type=\"hidden\" dojoAttachPoint=\"outletid\"  dojoType=\"dijit.form.TextBox\" />\r\n\t\t<input name=\"employeeid\" type=\"hidden\" dojoAttachPoint=\"employeeid\"  dojoType=\"dijit.form.TextBox\" />\r\n\t\t<input name=\"taskid\" type=\"hidden\" dojoAttachPoint=\"taskid\"  dojoType=\"dijit.form.TextBox\" />\r\n\t\t<input name=\"contactid\" type=\"hidden\" dojoAttachPoint=\"contactid\"  dojoType=\"dijit.form.TextBox\" />\r\n\t\t<table style=\"width:100%;border-collapse:collapse;\" cellspacing=\"1\" cellpadding=\"1\" border=\"0\">\r\n\t\t\t<tr><td width=\"20%\" class=\"prmaxrowtag\" valign=\"top\"align=\"right\">Subject</td><td><input class=\"prmaxrequired\" name=\"subject\" type=\"text\" dojoAttachPoint=\"subject\"  maxlength=\"80\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width:98%\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\">Contact Type</td><td><select class=\"prmaxrequired\" name=\"contacthistorysourceid\" autoComplete=\"true\" searchAttr=\"name\" dojoType=\"dijit.form.FilteringSelect\" required=\"true\" invalidMessage=\"Please Select Contact History Type\" labelType=\"html\" dojoAttachPoint=\"contacthistorysourceid\"></td></tr>\r\n\t\t\t<tr><td  align=\"right\" valign=\"top\" class=\"prmaxrowtag\">Details</td><td ><div class=\"stdframe\" style=\"height:150px;\" ><textarea dojoAttachPoint=\"details\" name=\"details\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.Textarea\" style=\"width:99%;height:80%\" ></textarea></div></td></tr>\r\n\t\t\t<tr><td colspan=\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td ><button class=\"prmaxhidden\" dojoAttachEvent=\"onClick:_Close\" dojoAttachPoint=\"closeNode\" dojoType=\"dijit.form.Button\" type=\"button\" label=\"Close\"></button></td><td align=\"right\"><button dojoAttachEvent=\"onClick:_Save\" dojoAttachPoint=\"saveNode\" dojoType=\"dojox.form.BusyButton\" type=\"button\" busyLabel=\"Please Wait Adding Notes...\" label=\"Add\"></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._SavedCallBack = dojo.hitch ( this, this._SavedCall);
		this._GetCallBack = dojo.hitch ( this, this._GetCall);
		this._UpdateCallBack = dojo.hitch ( this, this._UpdateCall);
		this._contacthistoryid = -1;
		this.inherited(arguments);
	},
	postCreate:function()
	{
		this.contacthistorysourceid.store = PRCOMMON.utils.stores.ContactHistoryTypes();
		if ( this.contacthistorysourceid_default != -2)
			this.contacthistorysourceid.st("value",this.contacthistorysourceid_default);

		if ( this.showclose)
			dojo.removeClass( this.closeNode.domNode, "prmaxhidden");

		this.inherited(arguments);
	},
	_Save:function()
	{
		if ( ttl.utilities.formValidator(this.formNode)==false)
		{
			alert("Not all required field filled in");
			this.saveNode.cancel();
			return;
		}

		if ( this._contacthistoryid == -1 )
		{
			dojo.xhrPost(
						ttl.utilities.makeParams({
							load: this._SavedCallBack,
							url:"/crm/addnote" ,
							content: this.formNode.get("value")
							})	);
		}
		else
		{
			dojo.xhrPost(
						ttl.utilities.makeParams({
							load: this._UpdateCallBack,
							url:"/crm/updatenote" ,
							content: this.formNode.get("value")
							})	);
		}
	},
	_UpdateCall:function( response )
	{
		if ( response.success == "OK" )
		{
			dojo.publish ( PRCOMMON.Events.Crm_Note_Update , [response.data ]);
			this._Close();
		}
		else
		{
			alert("Problem Updating Note");
			this.saveNode.cancel();
		}
	},
	_SavedCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			dojo.publish ( PRCOMMON.Events.Crm_Note_Add , [response.data ]);
			this._Close();
		}
		else
		{
			alert("Problem Adding Note");
			this.saveNode.cancel();
		}
	},
	Clear:function()
	{
		this.contacthistorysourceid.set("value", ( this.contacthistorysourceid_default != -2) ? this.contacthistorysourceid_default:null);
		this.subject.set("value","");
		this.details.set("value","");
		this.saveNode.cancel();
		this.isedit = false;
		this._contacthistoryid = -1;
		this.contacthistoryid.set("value", -1 ) ;
		this.saveNode.set("label", "Add");
		this.saveNode.set("busyLabel","Please Wait Adding Notes...");

	},
	_Close:function()
	{
		dojo.publish(PRCOMMON.Events.Dialog_Close, ["add_contact"]);
		this.Clear();
	},
	LoadControls:function( outletid, employeeid, contactid, ref_customerid, taskid)
	{
		this.ref_customerid.set("value",ref_customerid);
		this.outletid.set("value",outletid);
		this.employeeid.set("value",employeeid);
		this.contactid.set("value",contactid);
		this.taskid.set("value", taskid);
	},
	_setContacthistorysourceid_defaultAttr:function(value)
	{
		this.contacthistorysourceid_default = value;
		if ( this.contacthistorysourceid_default != -2)
			this.contacthistorysourceid.set("value",this.contacthistorysourceid_default);
	},
	_getContacthistorysourceid_defaultAttr:function()
	{
		return this.contacthistorysourceid_default;
	},
	_GetCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			this.contacthistoryid.set("value", response.data.contacthistoryid ) ;
			this.subject.set("value" , response.data.subject ) ;
			this.details.set("value" , response.data.details ) ;
			this.contacthistorysourceid.set("value" , response.data.contacthistorysourceid ) ;
			this.saveNode.set("label", "Save");
			this.saveNode.set("busyLabel","Please Wait Updating Notes...");
		}
		else
		{
			alert("Problem Loading Note");
		}
	},
	LoadEdit:function( contacthistoryid )
	{
		this._contacthistoryid = contacthistoryid;

			dojo.xhrPost(
						ttl.utilities.makeParams({
							load: this._GetCallBack,
							url:"/crm/getnote" ,
							content: {contacthistoryid : contacthistoryid }
							})	);

	}
});






}

if(!dojo._hasResource["prmax.crm.ViewContact"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.crm.ViewContact"] = true;
//-----------------------------------------------------------------------------
// Name:    ViewContact.js
// Author:  Chris Hoy
// Purpose:
// Created: 28/05/2010
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.crm.ViewContact");

dojo.declare("prmax.crm.ViewContact",
	[ dijit._Widget, dijit._Templated, dijit._Container],
	{
	widgetsInTemplate: true,
	contacthistoryid:-1,
	isdelete:false,
	isedit:false,
	templateString:"<div class=\"prmaxhidden scrollpanel\" dojoAttachPoint=\"view\" style=\"width:100%;height:100%\" >\r\n\t<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" class=\"prmaxtable\" border=\"0\">\r\n\t\t<tr><td align=\"right\" width=\"20%\" class=\"prmaxrowtag\" >Subject</td><td colspan=\"2\" dojoAttachPoint=\"subject\"></td></tr>\r\n\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Created Date</td><td dojoAttachPoint=\"taken\"></td>\r\n\t\t<td rowspan=\"2\" align=\"right\" width=\"10%\" ><button dojotype=\"dijit.form.Button\" label=\"Edit Note\" dojoAttachEvent=\"onClick:_EditNote\" dojoAttachPoint=\"editbtn\" class=\"prmaxhidden\"></button></td></tr>\r\n\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Created By</td><td dojoAttachPoint=\"takenbyname\"></td></tr>\r\n\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Source Type</td><td dojoAttachPoint=\"contacthistorydescription\"></td>\r\n\t\t<td rowspan=\"2\" align=\"right\" width=\"10%\" ><button dojotype=\"dijit.form.Button\" label=\"Delete Note\" dojoAttachEvent=\"onClick:_DeleteNote\" dojoAttachPoint=\"deletebtn\" class=\"prmaxhidden\"></button></td></tr>\r\n\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Modified Date</td><td dojoAttachPoint=\"modified\"></td></tr>\r\n\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Modified By</td><td dojoAttachPoint=\"modifiedbyname\"></td></tr>\r\n\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" valign=\"top\">Details</td><td  colspan=\"2\" dojoAttachPoint=\"details\"></td></tr>\r\n\t</table>\r\n\t<div dojoAttachPoint=\"editctrl\" dojoType=\"dijit.Dialog\" title=\"Edit Contact Note\">\r\n\t\t<div dojoAttachPoint=\"editctrl1\" dojotype=\"prmax.crm.AddContact\" showclose=\"true\" isedit=\"true\" style=\"width:600px;height:300px\"></div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._LoadCallBack = dojo.hitch(this,this._LoadCall);
		this._DeleteCallBack = dojo.hitch(this, this._DeleteCall);

		dojo.subscribe(PRCOMMON.Events.Dialog_Close, dojo.hitch(this,this._DialogCloseEvent));
		dojo.subscribe(PRCOMMON.Events.Crm_Note_Update, dojo.hitch(this,this._UpdateNoteEvent));

		this.inherited(arguments);
	},
	postCreate:function()
	{
		if ( this.isdelete == true )
			dojo.removeClass ( this.deletebtn.domNode,"prmaxhidden");
		if ( this.isedit == true )
			dojo.removeClass ( this.editbtn.domNode,"prmaxhidden");

		this.inherited(arguments);
	},
	Load: function( contacthistoryid )
	{
		this.contacthistoryid = contacthistoryid;
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._LoadCallBack,
					url:'/crm/getnote',
					content: {contacthistoryid:contacthistoryid}
			})	);
	},
	_LoadCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			this._LoadDisplay ( response.data ) ;
			dojo.removeClass(this.view,"prmaxhidden");
		}
	},
	_LoadDisplay:function ( data )
	{
		dojo.attr(this.subject,"innerHTML", data.subject);
		dojo.attr(this.taken,"innerHTML", data.taken);
		dojo.attr(this.details,"innerHTML", data.details);
		dojo.attr(this.takenbyname,"innerHTML", data.takenbyname);
		dojo.attr(this.modified,"innerHTML", data.modified);
		dojo.attr(this.modifiedbyname,"innerHTML", data.modifiedbyname);
		dojo.attr(this.contacthistorydescription,"innerHTML", data.contacthistorydescription);
	},
	_EditNote:function()
	{
		this.editctrl1.LoadEdit ( this.contacthistoryid ) ;
		this.editctrl.show();
	},
	_DialogCloseEvent:function(  source )
	{
		if ( source == "add_contact" )
			this.editctrl.hide();
	},
	_UpdateNoteEvent:function(  data )
	{
		this._LoadDisplay ( data ) ;
	},
	_DeleteCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			dojo.publish ( PRCOMMON.Events.Crm_Note_Delete , [ this.contacthistoryid ]);
			this.Clear();
		}
		else
		{
			alert("Problem Deleting Note");
		}
	},
	_DeleteNote:function()
	{
		if ( confirm ("Delete Note") )
		{
			dojo.xhrPost(
						ttl.utilities.makeParams({
							load: this._DeleteCallBack,
							url:"/crm/deletenote" ,
							content: { contacthistoryid: this.contacthistoryid }
							})	);
		}
	},
	Clear:function()
	{
		dojo.addClass(this.view,"prmaxhidden");
		dojo.attr(this.subject,"innerHTML", "");
		dojo.attr(this.taken,"innerHTML", "");
		dojo.attr(this.details,"innerHTML", "");
		dojo.attr(this.takenbyname,"innerHTML", "");
		dojo.attr(this.modified,"innerHTML", "");
		dojo.attr(this.modifiedbyname,"innerHTML", "");
		dojo.attr(this.contacthistorydescription,"innerHTML", "");
	}
});






}

if(!dojo._hasResource["prmax.crm.task.viewer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.crm.task.viewer"] = true;
//-----------------------------------------------------------------------------
// Name:    viewer.js
// Author:  Chris Hoy
// Purpose:
// Created: 15/08/2011
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.crm.task.viewer");



dojo.declare("prmax.crm.task.viewer",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div data-dojo-attach-point=\"borderControl\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='style:\"width:100%;height:100%\",gutters:false'>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:42px;width:100%;overflow:hidden\"'>\r\n\t\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t\t<div data-dojo-attach-event=\"onClick:_New\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PrmaxResultsIcon PrmaxResultsEmpty\"'><span>New</span></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\"  data-dojo-props='region:\"center\"'>\r\n\t\t\t<div data-dojo-attach-point=\"viewer_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='query:\"{ }\",rowsPerPage:30,style:\"width:100%;height:100%\"' style=\"width:100%;height:100%\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"New Task\"' data-dojo-attach-point=\"newtaskdialog\">\r\n\t<div data-dojo-attach-point=\"newtaskctrl\" data-dojo-type=\"prmax.iadmin.TaskAdd\" ></div>\r\n</div>\r\n</div>\r\n",
	constructor: function()
	{
		this.filter_db = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/tasks',
				nocallback:true,
				onError:ttl.utilities.globalerrorchecker
		});
	},
	_view : { noscroll: false,
		cells: [[
		{name: 'Owner',width: "150px",field:'user_name'},
		{name: 'Date',width: "60px",field:'due_date_display'},
		{name: 'Status',width: "80px",field:'taskstatusdescription'},
		{name: 'Type',width: "80px",field:'tasktypedescription'},
		{name: 'Subject',width: "150px",field:'subject'},
		{name: 'Diary Type',width: "80px",field:'tasktagdescription'}
		]]
	},
	postCreate:function()
	{
		this.viewer_grid.set("structure", this._view);
		this.viewer_grid._setStore(this.filter_db);

		this.viewer_grid.onRowClick = dojo.hitch(this,this.onSelectRow);
		this.viewer_grid.onStyleRow = dojo.hitch(this,this.onStyleRow);

		this.inherited(arguments);
	},
	onStyleRow: function(inRow)
	{
		ttl.GridHelpers.onStyleRow(inRow);
	},
	onSelectRow : function(e) {
		var row=this.viewer_grid.getItem(e.rowIndex);
		this.viewer_grid.selection.clickSelectEvent(e);
	},
	_Filter:function()
	{
		this.viewer_grid.setQuery(ttl.utilities.getPreventCache(
				{contacthistorysourceid: this.contacthistorysourceid.get("value"),
				icustomerid : this._customerid
				}));
	},
	Load:function( icustomerid )
	{
		this._customerid = icustomerid;
		this.refresh() ;
	},
	refresh:function (  )
	{
		var query = { icustomerid : this._customerid}

		this.viewer_grid.setQuery(ttl.utilities.getPreventCache( query ) );
	},
	resize:function()
	{
		this.borderControl.resize(arguments[0]);
		this.inherited(arguments);
	},
	_New:function()
	{
		this.newtaskctrl.Load ( PRMAX.utils.settings.groups, this.newtaskdialog, this.filter_db, this._customerid ) ;
		this.newtaskdialog.show();
	}
});

}

if(!dojo._hasResource["prmax.customer.InternalAddCustomer"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.customer.InternalAddCustomer"] = true;
dojo.provide("prmax.customer.InternalAddCustomer");























dojo.declare("prmax.customer.InternalAddCustomer",
	[ ttl.BaseWidget],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<form class=\"prmaxdefault\" dojoAttachPoint=\"form\" onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t<input name=\"nbrofloginsid\" dojoAttachPoint=\"nbroflogins\" type=\"hidden\" value=\"1\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t<table class=\"prmaxtable\" width=\"100%\"  border=\"0\">\r\n\t\t\t<tr><td class=\"prmaxrowdisplaylarge\" align=\"center\" colspan=\"2\">Account Details</td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Type</td><td><select class=\"prmaxinput\" name=\"customertypeid\" dojoAttachPoint=\"customertypeid\" style=\"width:9em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Title</td><td><input class=\"prmaxinput\" name=\"contact_title\" dojoAttachPoint=\"contact_title\" type=\"text\" trim=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 2em;\" ></input></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >First Name</td><td><input class=\"prmaxrequired\" name=\"contact_firstname\" dojoAttachPoint=\"contact_firstname\" type=\"text\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 8em;\" ></input><td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Surname</td><td><input class=\"prmaxrequired\" name=\"contact_surname\" dojoAttachPoint=\"contact_surname\" type=\"text\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 12em;\"></input></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Job Title</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"contactjobtitle\" name=\"contactjobtitle\" type=\"text\" trim=\"true\" maxlength=\"80\"  dojoType=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Business Name</td><td width=\"70%\"><input class=\"prmaxrequired\" dojoAttachPoint=\"customername\" name=\"customername\" type=\"text\" trim=\"true\" required=\"true\" maxlength=\"80\" invalidMessage=\"Please Enter the name of the business\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Email:</td><td><input class=\"prmaxrequired\" dojoAttachPoint=\"email\" name=\"email\" type=\"text\" size=\"40\" maxlength=\"80\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.ValidationTextBox\" lowercase=\"true\" regExpGen=\"dojox.validate.regexp.emailAddress\" trim=\"true\" invalidMessage=\"invalid email address\" size=\"40\" maxlength=\"70\"/></td></tr>\r\n\t\t\t<tr ><td colspan=\"2\">\r\n\t\t\t\t<div dojoType=\"dojox.form.PasswordValidator\" name=\"password\" class=\"prmaxrowtag\" dojoAttachPoint=\"password\">\r\n\t\t\t\t\t<table class=\"prmaxtable\" width=\"100%\" >\r\n\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" width=\"30%\">Password:</td><td><input class=\"prmaxrequired\" type=\"password\" pwType=\"new\" /></td></tr>\r\n\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Verify:</td><td><input class=\"prmaxrequired\" type=\"password\" pwType=\"verify\" /></td></tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Address:</td><td><input class=\"prmaxrequired\" dojoAttachPoint=\"address1\" name=\"address1\" type=\"text\" size=\"40\" required=\"true\" invalidMessage=\"Please Enter first line of address\" dojoType=\"dijit.form.ValidationTextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Address 2:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"address2\" name=\"address2\" type=\"text\" size=\"40\" maxlength=\"80\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Town</td><td><input class=\"prmaxrequired\" dojoAttachPoint=\"townname\" name=\"townname\" type=\"text\" size=\"30\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >County</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"county\" name=\"county\" type=\"text\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Postcode:</td><td><input class=\"prmaxrequired\" dojoAttachPoint=\"postcode\" name=\"postcode\" type=\"text\" style=\"width:10em\" maxlength=\"10\" required =\"true\" invalidMessage=\"Please Enter a post code \" dojoType=\"dijit.form.ValidationTextBox\"/></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Country</td><td>\r\n\t\t\t<select class=\"prmaxinput\" name=\"countryid\" dojoAttachPoint=\"countryid\" style=\"width:15em\" dojoAttachEvent=\"onChange:_ShowVat\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr class=\"prmaxhidden\" dojoAttachPoint=\"vatnumber_view\"><td align=\"right\" class=\"prmaxrowtag\" >Vat No</td><td><input class=\"prmaxrequired\" dojoAttachPoint=\"vatnumber\" trim=\"true\" name=\"vatnumber\" type=\"text\" size=\"25\" maxlength=\"40\" dojoType=\"dijit.form.TextBox\" /></td></tr>\r\n\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Tel:</td><td><input class=\"prmaxrequired\" dojoAttachPoint=\"tel\" name=\"tel\" type=\"text\" size=\"25\" maxlength=\"40\" required =\"true\" invalidMessage=\"Please enter a contact telephone number\" dojoType=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan =\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Term</td><td><select class=\"prmaxinput\" name=\"termid\" dojoAttachPoint=\"term\" style=\"width:9em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Expires</td><td><input type=\"text\"  dojoAttachPoint=\"licence_expired\" name = \"licence_expired\" dojoType=\"dijit.form.DateTextBox\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Status</td><td><select name=\"customerstatusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"customerstatusid\"></select></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" >Modules</td><td>&nbsp;</td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Features</td><td><input dojoAttachPoint=\"advancefeatures\" name=\"advancefeatures\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td></tr>\r\n\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Crm</td><td><input dojoAttachPoint=\"crm\" name=\"crm\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan =\"2\">&nbsp;</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" colspan=\"2\" align=\"center\"><button dojoAttachPoint=\"saveNode\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Creating...\" dojoAttachEvent=\"onClick:_CustomerSave\" label=\"Create Account\" class=\"prmaxbutton\"></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n\r\n\r\n",
	constructor: function()
	{
		this._SavedCallBack = dojo.hitch(this,this._Saved);
		this._CostCallBack = dojo.hitch(this,this._ShowCost);
		this._getModelItemCall = dojo.hitch(this,this._getModelItem);

		this._payment =  false;
		this._vatrequired = false;
		this.countries = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=countries"});
		this.termmodel = new dojo.data.ItemFileReadStore ( { url:'/common/lookups?searchtype=terms'});
		this.customerstatus_model = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=customerstatus"});
	},
	postCreate:function()
	{
		this.countryid.store = this.countries;
		this.customertypeid.store  = PRCOMMON.utils.stores.Customer_Types();
		this.term.store = this.termmodel;
		this.customerstatusid.store = this.customerstatus_model;
		dojo.connect(this.form,"onSubmit",dojo.hitch(this,this._onCustomerSubmit));

		this._Clear();

		this.inherited(arguments);

	},
	startup:function()
	{
		this.contact_title.focus();
		this.inherited(arguments);
	},
	_Saved:function(response)
	{
		if ( response.success=="OK")
		{
			alert("Account Created\nCustomer Id : " + response.data.cust.customerid + " User Id : " + response.data.user.user_id);
			this._Clear();
		}
		if ( response.success=="DU")
		{
			alert(response.message);
		}
		this.saveNode.cancel();
	},
	_CustomerSave:function()
	{
		this.form.submit();
	},
	_onCustomerSubmit:function()
	{
		try
		{
			if (this.password._inputWidgets[1].get("value").length<6 )
			{
				alert("Password not long enough miminum length is 6 characters");
				this.saveNode.cancel();
				this.password.focus();
				return;
			}
			if ( ttl.utilities.formValidator(this.form)==false)
			{
				alert("Not all required fields filled in");
				this.saveNode.cancel();
				return;
			}

			if ( this._vatrequired == true && this.vatnumber.get("value").length == 0 )
			{
				alert("Vat number required");
				this.saveNode.cancel();
				this.vatnumber.focus();
				return;

			}
			var content = this.form.get("value");

			var d = this.licence_expired.get("value");
			if ( d == null )
			{
				alert("Expiry Date required");
				this.saveNode.cancel();
				return;

			}
			content["licence_expire"]  = d.getFullYear() + "-" + (d.getMonth() + 1 )  + "-" + d.getDate();
			content["password"] = this.password.value;

			dojo.xhrPost(
						ttl.utilities.makeParams({
							load: this._SavedCallBack,
							url:'/iadmin/new' ,
							content: content
							})	);
		}
		catch(e) { alert(e);}
	},
	_getModelItem:function()
	{
			if (arguments[0].vatnbrequired[0] == true )
			{
				this._vatrequired = true;
				dojo.removeClass(this.vatnumber_view,"prmaxhidden");
				this.vatnumber.focus();
			}
			else
			{
				dojo.addClass(this.vatnumber_view,"prmaxhidden");
				this._vatrequired = false;
			}
	},
	_ShowVat:function()
	{
		this.countries.fetchItemByIdentity(
			{	identity: this.countryid.get("value"),
				onItem:  this._getModelItemCall
			} );
	},
	_Clear:function()
	{
		this.nbroflogins.set("value",1);
		this.customertypeid.set("value",1);
		this.countryid.set("value",1);
		this.customerstatusid.set("value",1);
		this.term.set("value",4);
		this.contact_title.set("value","");
		this.contact_firstname.set("value","");
		this.contact_surname.set("value","");
		this.contactjobtitle.set("value","");
		this.customername.set("value","");
		this.email.set("value","");
		this.address1.set("value","");
		this.address2.set("value","");
		this.townname.set("value","");
		this.county.set("value","");
		this.postcode.set("value","");
		this.vatnumber.set("value","");
		this.tel.set("value","");
		this.password.set("value","");
	}
});

}

if(!dojo._hasResource["prcommon.query.query"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.query.query"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.query.query
// Author:  Chris Hoy
// Purpose:
// Created: 13/05/2010
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prcommon.query.query");








dojo.declare("prcommon.query.query",
	[ ttl.BaseWidget ],
	{
	widgetsInTemplate: true,
	templateString:"<div >\r\n\t<div dojoAttachPoint=\"borderControl\" dojotype=\"dijit.layout.BorderContainer\" style=\"width:100%;height:100%\" >\r\n\t\t<div dojotype=\"dijit.layout.BorderContainer\" region=\"center\">\r\n\t\t\t<div dojotype=\"dijit.layout.ContentPane\" region=\"top\" style=\"width:100%;height:240px\">\r\n\t\t\t\t<textarea name = \"query_text\" style=\"width:100%\" rows=9 class=\"prmaxdefault\" dojoAttachPoint=\"query_text\"></textarea>\r\n\t\t\t\t<table cellpadding=\"0\" cellpadding=\"0\" width=\"100%\">\r\n\t\t\t\t\t<tr><td><button dojoAttachPoint=\"execute_button\" dojoType=\"dojox.form.BusyButton\" dojoAttachEvent=\"onClick:_Execute\" busyLabel=\"Wait Executing\">Execute</button></td>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<form dojoAttachPoint=\"to_excel_form\" target=\"_newtab\" method=\"post\" action=\"/query/to_excel\" dojoAttachEvent=\"onsubmit:_To_Excel\" >\r\n\t\t\t\t\t\t<input type=\"hidden\"  dojoAttachPoint=\"query_text_to_excel\" name = \"query_text\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t\t\t<input type=\"hidden\"  dojoAttachPoint=\"tmp_to_excel\" name = \"tmp_cache\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t\t<button type=\"submit\" dojoType=\"dijit.form.Button\" label=\"To Excel\" ></button>\r\n\t\t\t\t</form></td>\r\n\t\t\t\t<td align=\"right\">Visible to Research</td><td><input name=\"visibletoresearch\" type=\"checkbox\" dojoAttachPoint=\"visibletoresearch\"  dojotype=\"dijit.form.CheckBox\" dojoAttachEvent=\"onClick:_VisibleToResearch\" /></td>\r\n\t\t\t\t<td align=\"right\"><button dojoType=\"dijit.form.Button\" dojoAttachEvent=\"onClick:_Save\">Save As</button><select dojoAttachPoint=\"select\" dojotype =\"dijit.form.FilteringSelect\"  searchAttr=\"subject\" labelType=\"html\" ></select><button dojoType=\"dijit.form.Button\" dojoAttachEvent=\"onClick:_Load\">Load</button></td></tr></table>\r\n\t\t\t\t<br/>\r\n\t\t\t</div>\r\n\t\t\t<div dojotype=\"dijit.layout.ContentPane\" region=\"center\" dojoAttachPoint=\"result_view\">\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div dojoAttachPoint=\"savedlg\" dojotype=\"dijit.Dialog\" style=\"width:300px;height:200px\" title=\"Save Query\">\r\n\t\t<div class=\"dijitDialogPaneContentArea\">\r\n\t\t\t<form class=\"prmaxdefault\" dojoAttachPoint=\"formNode\" dojoType=\"dijit.form.Form\" onSubmit=\"return false\">\r\n\t\t\t\t<table style=\"width:100%;border-collapse:collapse;\" cellspacing=\"1\" cellpadding=\"1\" border=\"0\">\r\n\t\t\t\t<tr><td class=\"prmaxrowtag\">Subject</td><td><input style=\"float:left\" name=\"subject\" type=\"text\" dojoAttachPoint=\"subject_name\"  dojoType=\"dijit.form.ValidationTextBox\" trim=\"true\" required=\"true\"/></td></tr>\r\n\t\t\t\t</table>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t<div class=\"dijitDialogPaneActionBar\">\r\n\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_Query_Save\" style=\"float:left\">OK</button>\r\n\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_CancelDialog\" style=\"float:right\">Cancel</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",
	constructor: function()
	{
		this._QueryCallBack = dojo.hitch(this,this._QueryCall);
		this._QueryLoadCallBack = dojo.hitch(this,this._QueryLoadCall);
		this._QuerySaveCallBack = dojo.hitch(this,this._QuerySaveCall);
		this._QueryUpdateCallBack = dojo.hitch(this,this._QueryUpdateCall)

		this.queries = new dojox.data.QueryReadStore (
			{url:'/query/queries',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true
			});

	},
	postCreate:function()
	{
		this.select.store = this.queries;

		this.inherited(arguments);

	},
	resize:function()
	{
		this.borderControl.resize(arguments);
		this.inherited(arguments);
	},
	_QueryCall:function (response )
	{
		if ( response.success == "OK" )
		{
			this.result_view.setContent ( response.data ) ;
		}
		else
		{
			alert("problem");
		}
		this.execute_button.cancel();
	},
	 _Execute:function()
	 {
		var query = dojo.attr(this.query_text,"value");

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._QueryCallBack,
			url:"/query/execute" ,
			content: {query_text:query}}));
	 },
	 _QueryLoadCall:function ( response )
	 {
		if ( response.success == "OK" )
		{
			dojo.attr(this.query_text,"value", response.data.query_text);
			this.visibletoresearch.set("value", response.data.typeid);
		}
		else
		{
			alert("problem");
		}
	 },
	_Load:function()
	{
			dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._QueryLoadCallBack,
			url:"/query/load" ,
			content: {queryhistoryid:this.select.get("value")}}));
	},
	_Save:function()
	{
		var query_text = dojo.attr(this.query_text,"value");
		if ( query_text.length>0)
		{
			this.savedlg.show();
		}
	},
	_CancelDialog:function()
	{
		this.savedlg.hide();
	},
	 _QuerySaveCall:function ( response )
	 {
		if ( response.success == "OK" )
		{
			alert("Query Saved");
			this._CancelDialog();
		}
		else
		{
			alert("problem");
		}
	 },
	_Query_Save:function()
	{
		if ( ttl.utilities.formValidator(this.formNode)==false)
		{
			alert("Not all required field filled in");
			return;
		}

		var query_text = dojo.attr(this.query_text,"value");
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._QuerySaveCallBack,
			url:"/query/save" ,
			content: {query_text:query_text,subject:this.subject_name.get("value")}}));
	},
	_To_Excel:function()
	{
		this.query_text_to_excel.set("value", dojo.attr(this.query_text,"value"));
		this.tmp_to_excel.set("value", new Date());

		return true ;
	},
	_VisibleToResearch:function()
	{
		var content = {};
		content['queryhistoryid'] = this.select.get("value");
		content['visibletoresearch'] = this.visibletoresearch.get("value");
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._QueryUpdateCallBack,
			url:"/query/toresearch" ,
			content:content}));
	},
	 _QueryUpdateCall:function ( response )
	 {
		if ( response.success == "OK" )
		{
			alert("Query Updated");
		}
		else
		{
			alert("Problem");
		}
	 },		
});

}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.bounces.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.bounces.view"] = true;
//-----------------------------------------------------------------------------
// Name:    view.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.bounces.view");













dojo.declare("prmax.iadmin.sales.prospects.bounces.view",
	[ ttl.BaseWidget,dijit.layout.BorderContainer ],
	{
	widgetsInTemplate: true,
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/bounces/templates/view.html", "<div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:45px;width:100%;overflow:hidden\"'>\r\n\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t<div data-dojo-attach-event=\"onClick:_refresh\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxRefreshIcon\"'><span>Refresh</span></div>\r\n\t\t\t\t<div data-dojo-type=\"dijit.form.DropDownButton\"  data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxFilterIcon\",showLabel:true'>\r\n\t\t\t\t\t<span>Filter By</span>\r\n\t\t\t\t\t<div data-dojo-type=\"dijit.TooltipDialog\" data-dojo-props='title:\"Filter By\"' data-dojo-attach-event=\"execute:_execute_filter\">\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tr><td><label>Email Address</label></td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"emailaddress\" data-dojo-props='type:\"text\",name:\"emailaddress\"' ></td></tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td align=\"left\"><button data-dojo-attach-event=\"onClick: _clear_filter\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' >Clear Filter</button></td>\r\n\t\t\t\t\t\t\t\t<td align=\"right\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"submit\",name:\"submit\"'>Filter</button></td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"width:50%\"'>\r\n\t\t<div data-dojo-attach-point=\"result_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='style:\"height:100%;width:100%\",rowsPerPage:50'></div>\r\n\t</div>\r\n\t<div data-dojo-attach-point=\"tabcont\" data-dojo-type=\"dijit.layout.StackContainer\" data-dojo-props=\"region:'center',splitter:true,'class':'bordered'\">\r\n\t\t<div title=\"blank\" data-dojo-attach-point=\"blank\" data-dojo-type=\"dijit.layout.ContentPane\" selected class=\"bordered\"></div>\r\n\t</div>\r\n</div>\r\n"),
	constructor: function()
	{
		this._store = new dojox.data.JsonRestStore( {target:"/dataadmin/prospects/bounces/list", idAttribute:"mailingentryid"});
	},
	clear:function()
	{
	},
	postCreate:function()
	{
		this.result_grid.set("structure",this.view);
		this.result_grid._setStore(this._store );

		this.result_grid.onStyleRow = dojo.hitch(this,ttl.GridHelpers.onStyleRow);
		this.result_grid.onRowClick = dojo.hitch(this,this._on_select_row);

		this.inherited(arguments);
	},
	_on_select_row : function(e)
	{
		this._row = this.result_grid.getItem(e.rowIndex);

		this.result_grid.selection.clickSelectEvent(e);

	},
	view: {
		cells: [[
		{name: " ",width: "12px",field:"",formatter:ttl.utilities.formatRowCtrl},
		{name: " ",width: "12px",field:"",formatter:ttl.utilities.deleteRowCtrl},
		{name: 'Email',width: "200px",field:"email"},
		{name: 'Contact',width: "200px",field:"contactname"},
		{name: 'Company',width: "200px",field:"companyname"}
		]]
	},
	_refresh:function()
	{
		this._clear_filter();
	},
	_clear_filter:function()
	{
		this.emailaddress.set("value","");
	},
	_execute_filter:function()
	{
		var filter = {};

		if ( arguments[0].emailaddress.length > 0 )
			filter["emailaddress"] = arguments[0].emailaddress;

		this.result_grid.setQuery( filter );
		this.clear();
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.companies.add"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.companies.add"] = true;
//-----------------------------------------------------------------------------
// Name:    add.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.companies.add");







dojo.declare("prmax.iadmin.sales.prospects.companies.add",
	[ ttl.BaseWidget ],
	{
	url:"/iadmin/prospects/companies/add_company",
	mode:"add",
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/companies/templates/add.html", "<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"prospectcompanyid\"' data-dojo-attach-point=\"prospectcompanyid\" data-dojo-type=\"dijit.form.TextBox\" >\r\n\t\t<table width=\"400px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Company Name</td><td><input data-dojo-props='type:\"text\",name:\"prospectcompanyname\",required:true' data-dojo-attach-point=\"prospectcompanyname\" data-dojo-type=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"prmaxrowlabel\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"closebtn\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_close\">Close</button></td>\r\n\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='busyLabel:\"Saving ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_update\">Save</button></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n"),
	constructor: function()
	{
		this._dialog = null;
		this._save_call_back = dojo.hitch(this, this._save_call);
		this.prospectcompanyid = null;
	},
	_close:function()
	{
		if (this._dialog)
			this._dialog.hide();
	},
	_save_call:function( response )
	{
		if ( response.success == "OK")
		{
			dojo.publish("/prospect/comp/add", [response.data] );
			if (this.mode == "add")
			{
				alert("Company Added");
			}
			else
			{
				alert("Company Updated");
			}
			this._close();
			this.clear();
		}

		else if ( response.success == "DU")
		{
			alert("Already Exists");
		}
		else
		{
			alert("Problem with saving company");
		}

		this.addbtn.cancel();

	},
	_update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._save_call_back,
			url:this.url,
			content:this.form.get("value")}));
	},
	load:function( dialog, prospectcompanyid , prospectcompanyname )
	{
		this._dialog = dialog;
		this.clear();
		this.prospectcompanyid.set("value", prospectcompanyid);
		this._prospectcompanyid = prospectcompanyid;
		if (this._prospectcompanyid)
		this.prospectcompanyname.set("value", prospectcompanyname);
	},
	clear:function()
	{
		this.addbtn.cancel();
		this.prospectcompanyid.set("value","-1");
		this.prospectcompanyname.set("value", "");
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.companies.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.companies.view"] = true;
//-----------------------------------------------------------------------------
// Name:    view.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.companies.view");











dojo.declare("prmax.iadmin.sales.prospects.companies.view",
	[ ttl.BaseWidget, dijit.layout.BorderContainer ],
	{
	widgetsInTemplate: true,
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/companies/templates/view.html", "<div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:45px;width:100%;overflow:hidden\"'>\r\n\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t<div data-dojo-attach-event=\"onClick:_add\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxAddIcon\",showLabel:true'><span>Add</span></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\"'>\r\n\t\t<div data-dojo-attach-point=\"result_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='style:\"height:100%;width:100%\",rowsPerPage:50'></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Add New Company\"' data-dojo-attach-point=\"adddialog\">\r\n\t\t<div data-dojo-attach-point=\"addctrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.companies.add\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"rename Company\"' data-dojo-attach-point=\"editdialog\">\r\n\t\t<div data-dojo-attach-point=\"editctrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.companies.add\" data-dojo-props='url:\"/iadmin/prospects/companies/update_company\"'></div>\r\n\t</div>\r\n\r\n</div>\r\n"),
	constructor: function()
	{
		this._store = new dojox.data.JsonRestStore( {target:"/iadmin/prospects/companies/list", idAttribute:"prospectcompanyid"});
		dojo.subscribe("/prospect/comp/add", dojo.hitch(this, this._add_event));
	},
	_add_event:function( company )
	{
		this._store.newItem ( company ) ;
	},
	clear:function()
	{
	},
	postCreate:function()
	{
		this.result_grid.set("structure",this.view);
		this.result_grid._setStore(this._store );

		this.result_grid.onStyleRow = dojo.hitch(this,ttl.GridHelpers.onStyleRow);
		this.result_grid.onRowClick = dojo.hitch(this,this._on_select_row);

		this.inherited(arguments);
	},
	_on_select_row : function(e)
	{
		this._row = this.result_grid.getItem(e.rowIndex);

		this.result_grid.selection.clickSelectEvent(e);

	},
	view: {
		cells: [[
		{name: " ",width: "12px",field:"",formatter:ttl.utilities.formatRowCtrl},
		{name: 'Company',width: "400px",field:"prospectcompanyname"}
		]]
	},
	_add:function()
	{
		this.addctrl.load( this.adddialog);
		this.adddialog.show();
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.exclusions.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.exclusions.view"] = true;
//-----------------------------------------------------------------------------
// Name:    view.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.exclusions.view");











dojo.declare("prmax.iadmin.sales.prospects.exclusions.view",
	[ ttl.BaseWidget,dijit.layout.BorderContainer ],
	{
	widgetsInTemplate: true,
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/exclusions/templates/view.html", "<div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:45px;width:100%;overflow:hidden\"'>\r\n\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t<div data-dojo-attach-event=\"onClick:_refresh\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxRefreshIcon\"'><span>Refresh</span></div>\r\n\t\t\t\t<div data-dojo-type=\"dijit.form.DropDownButton\"  data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxFilterIcon\",showLabel:true'>\r\n\t\t\t\t\t<span>Filter By</span>\r\n\t\t\t\t\t<div data-dojo-type=\"dijit.TooltipDialog\" data-dojo-props='title:\"Filter By\"' data-dojo-attach-event=\"execute:_execute_filter\">\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tr><td><label>Email Address</label></td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"emailaddress\" data-dojo-props='type:\"text\",name:\"emailaddress\"' ></td></tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td align=\"left\"><button data-dojo-attach-event=\"onClick: _clear_filter\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' >Clear Filter</button></td>\r\n\t\t\t\t\t\t\t\t<td align=\"right\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"submit\",name:\"submit\"'>Filter</button></td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"width:50%\"'>\r\n\t\t<div data-dojo-attach-point=\"result_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='style:\"height:100%;width:100%\",rowsPerPage:50'></div>\r\n\t</div>\r\n\t<div data-dojo-attach-point=\"tabcont\" data-dojo-type=\"dijit.layout.StackContainer\" data-dojo-props=\"region:'center',splitter:true,'class':'bordered'\">\r\n\t\t<div title=\"blank\" data-dojo-attach-point=\"blank\" data-dojo-type=\"dijit.layout.ContentPane\" selected class=\"bordered\"></div>\r\n\t</div>\r\n</div>\r\n"),
	constructor: function()
	{
		this._store = new dojox.data.JsonRestStore( {target:"/iadmin/prospects/unsubscribe/list", idAttribute:"unsubscribeid"});
		this._update_call_back = dojo.hitch(this, this._update_call);
	},
	clear:function()
	{
	},
	postCreate:function()
	{
		this.result_grid.set("structure",this.view);
		this.result_grid._setStore(this._store );

		this.result_grid.onStyleRow = dojo.hitch(this,ttl.GridHelpers.onStyleRow);
		this.result_grid.onRowClick = dojo.hitch(this,this._on_select_row);

		this.inherited(arguments);
	},
	_on_select_row : function(e)
	{
		this._row = this.result_grid.getItem(e.rowIndex);

		if ( confirm("Remove UnSubscribe - " + this._row.email +"?"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._update_call_back,
				url:"/iadmin/prospects/unsubscribe/delete_unsubscribe",
				content:{unsubscribeid:this._row.unsubscribeid}}));
		}

		this.result_grid.selection.clickSelectEvent(e);

	},
	_update_call:function( response )
	{
		if ( response.success == "OK")
		{
			alert("Unsubscribe Deleted");
			this._store.deleteItem(this._row);
		}
		else
		{
			alert("Problem Deleting Unsubscribe");
		}
	},
	view: {
		cells: [[
		{name: " ",width: "12px",field:"",formatter:ttl.utilities.deleteRowCtrl},
		{name: 'Email',width: "300px",field:"email"},
		{name: 'Reason',width: "200px",field:"unsubscribereason"},
		{name: 'Contact',width: "200px",field:"contactname"},
		{name: 'Company',width: "200px",field:"prospectcompanyname"}
		]]
	},
	_refresh:function()
	{
		this._clear_filter();
	},
	_clear_filter:function()
	{
		this.emailaddress.set("value","");
	},
	_execute_filter:function()
	{
		var filter = {};

		if ( arguments[0].emailaddress.length > 0 )
			filter["emailaddress"] = arguments[0].emailaddress;

		this.result_grid.setQuery( filter );
		this.clear();
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.sources.add"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.sources.add"] = true;
//-----------------------------------------------------------------------------
// Name:    add.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.sources.add");







dojo.declare("prmax.iadmin.sales.prospects.sources.add",
	[ ttl.BaseWidget ],
	{
	url:"/iadmin/prospects/sources/add_source",
	mode:"add",
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/sources/templates/add.html", "<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"prospectsourceid\"' data-dojo-attach-point=\"prospectsourceid\" data-dojo-type=\"dijit.form.TextBox\" >\r\n\t\t<table width=\"400px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Source Name</td><td><input data-dojo-props='type:\"text\",name:\"prospectsourcename\",required:true' data-dojo-attach-point=\"prospectsourcename\" data-dojo-type=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"prmaxrowlabel\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"closebtn\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_close\">Close</button></td>\r\n\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='busyLabel:\"Saving ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_update\">Save</button></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n"),
	constructor: function()
	{
		this._dialog = null;
		this._save_call_back = dojo.hitch(this, this._save_call);
		this.prospectcompanyid = null;
	},
	_close:function()
	{
		if (this._dialog)
			this._dialog.hide();
	},
	_save_call:function( response )
	{
		if ( response.success == "OK")
		{
			dojo.publish("/prospect/sources/add", [response.data] );
			if (this.mode == "add")
			{
				alert("Source Added");
			}
			else
			{
				alert("source Updated");
			}
			this._close();
			this.clear();
		}

		else if ( response.success == "DU")
		{
			alert("Already Exists");
		}
		else
		{
			alert("Problem with saving sources");
		}

		this.addbtn.cancel();

	},
	_update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._save_call_back,
			url:this.url,
			content:this.form.get("value")}));
	},
	load:function( dialog  )
	{
		this._dialog = dialog;
		this.clear();
	},
	clear:function()
	{
		this.addbtn.cancel();
		this.prospectsourceid.set("value","-1");
		this.prospectsourcename.set("value", "");
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.types.add"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.types.add"] = true;
//-----------------------------------------------------------------------------
// Name:    add.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.types.add");







dojo.declare("prmax.iadmin.sales.prospects.types.add",
	[ ttl.BaseWidget ],
	{
	url:"/iadmin/prospects/types/add_type",
	mode:"add",
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/types/templates/add.html", "<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"prospecttypeid\"' data-dojo-attach-point=\"prospecttypeid\" data-dojo-type=\"dijit.form.TextBox\" >\r\n\t\t<table width=\"400px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Type Name</td><td><input data-dojo-props='type:\"text\",name:\"prospecttypename\",required:true' data-dojo-attach-point=\"prospecttypename\" data-dojo-type=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"prmaxrowlabel\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"closebtn\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_close\">Close</button></td>\r\n\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='busyLabel:\"Saving ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_update\">Save</button></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n"),
	constructor: function()
	{
		this._dialog = null;
		this._save_call_back = dojo.hitch(this, this._save_call);
	},
	_close:function()
	{
		if (this._dialog)
			this._dialog.hide();
	},
	_save_call:function( response )
	{
		if ( response.success == "OK")
		{
			dojo.publish("/prospect/types/add", [response.data] );
			if (this.mode == "add")
			{
				alert("Source Added");
			}
			else
			{
				alert("Soure Updated");
			}
			this._close();
			this.clear();
		}

		else if ( response.success == "DU")
		{
			alert("Already Exists");
		}
		else
		{
			alert("Problem with saving Source");
		}

		this.addbtn.cancel();

	},
	_update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._save_call_back,
			url:this.url,
			content:this.form.get("value")}));
	},
	load:function( dialog)
	{
		this._dialog = dialog;
		this.clear();
	},
	clear:function()
	{
		this.addbtn.cancel();
		this.prospecttypeid.set("value","-1");
		this.prospecttypename.set("value", "");
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.regions.add"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.regions.add"] = true;
//-----------------------------------------------------------------------------
// Name:    add.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.regions.add");







dojo.declare("prmax.iadmin.sales.prospects.regions.add",
	[ ttl.BaseWidget ],
	{
	url:"/iadmin/prospects/regions/add_regions",
	mode:"add",
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/regions/templates/add.html", "<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"prospectregionid\"' data-dojo-attach-point=\"prospectregionid\" data-dojo-type=\"dijit.form.TextBox\" >\r\n\t\t<table width=\"400px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Region Name</td><td><input data-dojo-props='type:\"text\",name:\"prospectregionname\",required:true' data-dojo-attach-point=\"prospectregionname\" data-dojo-type=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"prmaxrowlabel\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"closebtn\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_close\">Close</button></td>\r\n\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='busyLabel:\"Saving ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_update\">Save</button></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n"),
	constructor: function()
	{
		this._dialog = null;
		this._save_call_back = dojo.hitch(this, this._save_call);
		this.prospectcompanyid = null;
	},
	_close:function()
	{
		if (this._dialog)
			this._dialog.hide();
	},
	_save_call:function( response )
	{
		if ( response.success == "OK")
		{
			dojo.publish("/prospect/regions/add", [response.data] );
			if (this.mode == "add")
			{
				alert("Region Added");
			}
			else
			{
				alert("Region Updated");
			}
			this._close();
			this.clear();
		}

		else if ( response.success == "DU")
		{
			alert("Already Exists");
		}
		else
		{
			alert("Problem with saving Region");
		}

		this.addbtn.cancel();

	},
	_update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._save_call_back,
			url:this.url,
			content:this.form.get("value")}));
	},
	load:function( dialog  )
	{
		this._dialog = dialog;
		this.clear();
	},
	clear:function()
	{
		this.addbtn.cancel();
		this.prospectregionid.set("value","-1");
		this.prospectregionname.set("value", "");
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.gather.add"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.gather.add"] = true;
//-----------------------------------------------------------------------------
// Name:    add.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.gather.add");
















dojo.declare("prmax.iadmin.sales.prospects.gather.add",
	[ ttl.BaseWidget ],
	{
	url:"/iadmin/prospects/prospect/add_prospect",
	mode:"add",
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/gather/templates/add.html", "<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-props='type:\"hidden\",name:\"prospectid\"' data-dojo-attach-point=\"prospectid\" data-dojo-type=\"dijit.form.TextBox\" >\r\n\t\t<table width=\"500px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Email</td><td><input data-dojo-attach-point=\"email\" data-dojo-props='required:true,\"class\":\"prmaxinput\",name:\"email\",type:\"text\",style:\"width:20em\",trim:\"true\",regExpGen:dojox.validate.regexp.emailAddress,invalidMessage:\"invalid email address\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Family Name</td><td><input data-dojo-props='type:\"text\",name:\"familyname\"' data-dojo-attach-point=\"familyname\" data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >First Name</td><td><input data-dojo-props='type:\"text\",name:\"firstname\"' data-dojo-attach-point=\"firstname\" data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Title</td><td><input data-dojo-props='type:\"text\",name:\"title\"' data-dojo-attach-point=\"title\" data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Company</td><td>\r\n\t\t\t\t<select data-dojo-props='searchAttr:\"prospectcompanyname\",required:false,\"class\":\"prmaxinput\",name:\"prospectcompanyid\",style:\"width:19em\",autoComplete:true' data-dojo-attach-point=\"prospectcompanyid\" data-dojo-type=\"dijit.form.FilteringSelect\" ></select>\r\n\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_add_company\">New </button>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Source</td><td><select data-dojo-props='searchAttr:\"prospectsourcename\",required:false,\"class\":\"prmaxinput\",name:\"prospectsourceid\",style:\"width:19em\",autoComplete:true' data-dojo-attach-point=\"prospectsourceid\" data-dojo-type=\"dijit.form.FilteringSelect\" ></select>\r\n\t\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_add_source\">New </button>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Type</td><td>\r\n\t\t\t\t\t<select data-dojo-props='searchAttr:\"prospecttypename\",required:false,\"class\":\"prmaxinput\",name:\"prospecttypeid\",style:\"width:19em\",autoComplete:true' data-dojo-attach-point=\"prospecttypeid\" data-dojo-type=\"dijit.form.FilteringSelect\" ></select>\r\n\t\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_add_type\">New </button>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Region</td><td>\r\n\t\t\t\t\t<select data-dojo-props='searchAttr:\"prospectregionname\",required:false,\"class\":\"prmaxinput\",name:\"prospectregionid\",style:\"width:19em\",autoComplete:true' data-dojo-attach-point=\"prospectregionid\" data-dojo-type=\"dijit.form.FilteringSelect\" ></select>\r\n\t\t\t\t\t<button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_add_region\">New </button>\r\n\t\t\t</td></tr>\r\n\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Www:</td><td><input data-dojo-attach-point=\"web\" data-dojo-props='name:\"web\",type:\"text\",maxlength:120,regExpGen:dojox.validate.regexp.url' data-dojo-type=\"dijit.form.ValidationTextBox\"/></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Tel:</td><td><input data-dojo-attach-point=\"telephone\" data-dojo-props='name:\"telephone\",type:\"text\",maxlength:40,trim:true' data-dojo-type=\"dijit.form.ValidationTextBox\" /></td></tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"prmaxrowlabel\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"closebtn\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_close\">Close</button></td>\r\n\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='busyLabel:\"Saving ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_update\">Save</button></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</form>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Add New Company\"' data-dojo-attach-point=\"adddialog\">\r\n\t\t<div data-dojo-attach-point=\"addctrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.companies.add\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Add New Prospect Source\"' data-dojo-attach-point=\"addsourcedialog\">\r\n\t\t<div data-dojo-attach-point=\"addsourcectrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.sources.add\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Add New Prospect Type\"' data-dojo-attach-point=\"addtypedialog\">\r\n\t\t<div data-dojo-attach-point=\"addtypectrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.types.add\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Add New Prospect Region\"' data-dojo-attach-point=\"addregiondialog\">\r\n\t\t<div data-dojo-attach-point=\"addregionctrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.regions.add\" ></div>\r\n\t</div>\r\n</div>\r\n"),
	constructor: function()
	{
		this._dialog = null;
		this._store = new dojox.data.JsonRestStore( {target:"/iadmin/prospects/companies/list", idAttribute:"prospectcompanyid"});
		this._prospectsources = new dojox.data.JsonRestStore( {target:"/iadmin/prospects/sources/list", idAttribute:"prospectsourceid"});
		this._prospecttypes = new dojox.data.JsonRestStore( {target:"/iadmin/prospects/types/list", idAttribute:"prospecttypeid"});
		this._prospectregions = new dojox.data.JsonRestStore( {target:"/iadmin/prospects/regions/list", idAttribute:"prospectregionid"});

		dojo.subscribe("/prospect/comp/add", dojo.hitch(this, this._add_event));
		dojo.subscribe("/prospect/sources/add", dojo.hitch(this, this._add_sources_event));
		dojo.subscribe("/prospect/types/add", dojo.hitch(this, this._add_types_event));
		dojo.subscribe("/prospect/regions/add", dojo.hitch(this, this._add_region_event));
		this._update_call_back = dojo.hitch(this, this._update_call);
		this._domain_call_back = dojo.hitch(this, this._domain_call);
	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.prospectcompanyid.set("store", this._store);
		this.prospectsourceid.set("store", this._prospectsources);
		this.prospecttypeid.set("store", this._prospecttypes);
		this.prospectregionid.set("store", this._prospectregions);
		this.prospectsourceid.set("value", 1);
		this.prospecttypeid.set("value", 5);
		this.prospectregionid.set("value", null);

		if (this.mode == "edit")
		{
			dojo.addClass(this.closebtn.domNode,"prmaxhidden");
		}
	},
	_close:function()
	{
		if (this._dialog)
			this._dialog.hide();
	},
	_update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._domain_call_back,
			url:"/iadmin/prospects/prospect/check_prospect_domain",
			content:this.form.get("value")}));
	},
	_domain_call:function( response )
	{
		var do_add = false ;

		if ( response.success == "OK")
		{
			do_add = true;
		}
		else if ( response.success == "DU")
		{
			alert("Email Address already exists");
		}
		else if ( response.success == "SA")
		{
			if (confirm("Domain is already in the database Continue?"))
				do_add = true ;
		}
		else
		{
			if (response.message != null)
				alert(response.message);
			else
				alert("Problem adding Entry");
		}

		if ( do_add == true )
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._update_call_back,
				url:this.url,
				content:this.form.get("value")}));
		}
		else
		{
			this.addbtn.cancel();
		}
	},
	_update_call:function( response )
	{
		if ( response.success == "OK")
		{
			if (this.mode == "add")
			{
				dojo.publish("/prospect/prospect/add", [response.data] );
				alert("Prospect Added");
				this._close();
				this.clear();
			}
			else
			{
				dojo.publish("/prospect/prospect/updated", [response.data] );
				alert("Prospect Updated");
			}
		}
		else if ( response.success == "DU")
		{
			alert("Email Address already exists");
		}
		else
		{
			if (response.message != null)
				alert(response.message);
			else
				alert("Problem adding Entry");
		}
		this.addbtn.cancel();
	},
	_setDialogAttr:function( dialog)
	{
		this._dialog = dialog;
	},
	load:function(prospect)
	{
		this.prospectid.set("value",prospect.prospectid);
		this.email.set("value",prospect.email);
		this.familyname.set("value",prospect.familyname);
		this.firstname.set("value",prospect.firstname);
		this.title.set("value",prospect.title);
		this.prospectcompanyid.set("value",prospect.prospectcompanyid);
		this.prospectsourceid.set("value",prospect.prospectsourceid);
		this.prospecttypeid.set("value",prospect.prospecttypeid);
		this.web.set("value",prospect.web);
		this.telephone.set("value",prospect.telephone);
		this.prospectregionid.set("value", prospect.prospectregionid);
	},
	clear:function()
	{
		this.email.set("value","");
		this.familyname.set("value","");
		this.firstname.set("value","");
		this.title.set("value","");
		this.prospectcompanyid.set("value",null);
		this.addbtn.cancel();
		this.prospectsourceid.set("value", 1);
		this.prospecttypeid.set("value", 5);
		this.web.set("value","");
		this.telephone.set("value","");
		this.prospectregionid.set("value", "" );
	},
	_add_company:function()
	{
		this.addctrl.clear();
		this.addctrl.load( this.adddialog );
		this.adddialog.show();
	},
	_add_source:function()
	{
		this.addsourcectrl.clear();
		this.addsourcectrl.load( this.addsourcedialog );
		this.addsourcedialog.show();
	},
	_add_type:function()
	{
		this.addtypectrl.clear();
		this.addtypectrl.load( this.addtypedialog );
		this.addtypedialog.show();
	},
	_add_region:function()
	{
		this.addregionctrl.clear();
		this.addregionctrl.load( this.addregiondialog );
		this.addregiondialog.show();
	},
	_add_event:function( company )
	{
		this.prospectcompanyid.set("value", company.prospectcompanyid);
	},
	_add_sources_event:function( source )
	{
		this.prospectsourceid.set("value", source.prospectsourceid);
	},
	_add_types_event:function( type )
	{
		this.prospecttypeid.set("value", type.prospecttypeid);
	},
	_add_region_event:function( region )
	{
		this.prospectregionid.set("value", region.prospectregionid);
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.gather.delete"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.gather.delete"] = true;
//-----------------------------------------------------------------------------
// Name:    delete.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.gather.delete");












dojo.declare("prmax.iadmin.sales.prospects.gather.delete",
	[ ttl.BaseWidget ],
	{
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/gather/templates/delete.html", "<div>\r\n\t<br/>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<input data-dojo-attach-point=\"prospectid\" data-dojo-props='type:\"hidden\",name:\"prospectid\"', data-dojo-type=\"dijit.form.TextBox\" ></input>\r\n\t\t<table width=\"600px\" cellpadding=\"0\" cellpadding=\"0\" >\r\n\t\t\t<tr><td colspan=\"2\" class=\"prmaxHeadingStyle\" data-dojo-attach-point=\"title\"></td></tr>\r\n\t\t\t<tr><td><br/></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" width=\"60px\" >Reason</td><td><select data-dojo-props='searchAttr:\"name\",required:true,\"class\":\"prmaxinput\",name:\"unsubscribereasonid\",style:\"width:19em\",autoComplete:true' data-dojo-attach-point=\"unsubscribereasonid\" data-dojo-type=\"dijit.form.FilteringSelect\" ></select></td></tr>\r\n\t\t\t<tr><td><br/></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" valign=\"top\">Action</td><td>\r\n\t\t\t<input data-dojo-props='\"class\":\"prmaxlabeltag\",type:\"radio\",name:\"deleteoption\",value:\"0\",checked:\"checked\"' data-dojo-type=\"dijit.form.RadioButton\" /><label data-dojo-attach-point=\"deletoption_0\">Archive</label><br/>\r\n\t\t\t<input data-dojo-props='\"class\":\"prmaxlabeltag\",type:\"radio\",name:\"deleteoption\",value:\"1\"' data-dojo-type=\"dijit.form.RadioButton\" /><label data-dojo-attach-point=\"deletoption_1\">Unsubscribe</label><br/><br/>\r\n\t\t\t</td></tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"prmaxrowtag\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"closebtn\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_close\">Close</button></td>\r\n\t\t\t\t<td class=\"prmaxrowtag\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='busyLabel:\"Saving ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_update\">Remove</button></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n"),
	constructor: function()
	{

		this._dialog = null;
		this._update_call_back = dojo.hitch(this, this._update_call);
		this._unsubscribereason = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=unsubscribereason"} );
	},
	postCreate:function()
	{
		this.inherited(arguments);
		this.unsubscribereasonid.set("store", this._unsubscribereason);
	},
	_close:function()
	{
		this._dialog.hide();
	},
	_update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._update_call_back,
			url:"/iadmin/prospects/prospect/delete_prospect",
			content:this.form.get("value")}));
	},
	_update_call:function( response )
	{
		if ( response.success == "OK")
		{
			dojo.publish("/prospect/prospect/delete", [response.data] );
			alert("Prospect Deleted");
			this._close();
			this.clear();
		}
		else
		{
			alert("Problem Deleting Prospect");
		}
		this.addbtn.cancel();
	},
	load:function( prospectid, dialog, title)
	{
		this._dialog = dialog;
		dojo.attr(this.title,"innerHTML", title );
		this.clear();
		this.prospectid.set("value", prospectid);
	},
	clear:function()
	{
		this.addbtn.cancel();
		this.prospectid.set("value",-1);
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.gather.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.gather.view"] = true;
//-----------------------------------------------------------------------------
// Name:    view.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
// To do:
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.gather.view");
















dojo.declare("prmax.iadmin.sales.prospects.gather.view",
	[ ttl.BaseWidget,dijit.layout.BorderContainer ],
	{
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/gather/templates/view.html", "<div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:45px;width:100%;overflow:hidden\"'>\r\n\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t<div data-dojo-attach-event=\"onClick:_add\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxNewIcon\",showLabel:true'><span>Add Prospect</span></div>\r\n\t\t\t<div data-dojo-attach-event=\"onClick:_refresh\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxRefreshIcon\"'><span>Refresh</span></div>\r\n\t\t\t<div data-dojo-type=\"dijit.form.DropDownButton\"  data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxFilterIcon\",showLabel:true'>\r\n\t\t\t\t<span>Filter By</span>\r\n\t\t\t\t<div data-dojo-type=\"dijit.TooltipDialog\" data-dojo-props='title:\"Filter By\"' data-dojo-attach-event=\"execute:_execute_filter\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<tr><td><label>Email Address</label></td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"emailaddress\" data-dojo-props='type:\"text\",name:\"emailaddress\"' ></td></tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td align=\"left\"><button data-dojo-attach-event=\"onClick: _clear_filter\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' >Clear Filter</button></td>\r\n\t\t\t\t\t\t\t<td align=\"right\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"submit\",name:\"submit\"'>Filter</button></td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"width:50%\"'>\r\n\t\t<div data-dojo-attach-point=\"result_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='style:\"height:100%;width:100%\",rowsPerPage:50'></div>\r\n\t</div>\r\n\t<div data-dojo-attach-point=\"tabcont\" data-dojo-type=\"dijit.layout.StackContainer\" data-dojo-props=\"region:'center',splitter:true,'class':'bordered'\">\r\n\t\t<div title=\"blank\" data-dojo-attach-point=\"blank\" data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='selected:\"selected\"' ></div>\r\n\t\t<div title=\"editctrl\" data-dojo-attach-point=\"editctrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.gather.add\" data-dojo-props='mode:\"edit\",url:\"/iadmin/prospects/prospect/update_prospect\"'></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Add New Prospect\"' data-dojo-attach-point=\"adddialog\">\r\n\t\t<div data-dojo-attach-point=\"addctrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.gather.add\" ></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Remove Prospect\"' data-dojo-attach-point=\"deletedialog\">\r\n\t\t<div data-dojo-attach-point=\"deletectrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.gather.delete\" ></div>\r\n\t</div></div>\r\n"),
	constructor: function()
	{
		this._store = new dojox.data.JsonRestStore( {target:"/iadmin/prospects/prospect/list", idAttribute:"prospectid"});
		dojo.subscribe("/prospect/prospect/add", dojo.hitch(this, this._add_event));
		dojo.subscribe("/prospect/prospect/updated", dojo.hitch(this, this._update_event));
		dojo.subscribe("/prospect/prospect/delete", dojo.hitch(this, this._delete_event));

		this._load_call_back = dojo.hitch(this,this._load_call);

	},
	clear:function()
	{
		this.tabcont.selectChild (this.blank);
	},
	postCreate:function()
	{
		this.result_grid.set("structure",this.view);
		this.result_grid._setStore(this._store );

		this.result_grid.onStyleRow = dojo.hitch(this,ttl.GridHelpers.onStyleRow);
		this.result_grid.onRowClick = dojo.hitch(this,this._on_select_row);

		this.inherited(arguments);
		this.addctrl.set("dialog",this.adddialog);

	},
	_on_select_row : function(e)
	{
		this._row = this.result_grid.getItem(e.rowIndex);
		if ( e.cellIndex == 0 )
		{
			// Delete 2 options
			// 1. Move to archive
			// 2. Move to archive and remove email put email in unsuscribe list
			this.deletectrl.load( this._row.prospectid, this.deletedialog,this._row.email);
			this.deletedialog.show();
		}
		else
		{
			// Edit is obvious
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._load_call_back,
				url:"/iadmin/prospects/prospect/get",
				content:{prospectid:this._row.prospectid}}));
		}
		this.result_grid.selection.clickSelectEvent(e);
	},
	_load_call:function ( response )
	{
		if (response.success == "OK")
		{
			this.editctrl.load ( response.data );
			this.tabcont.selectChild (this.editctrl);
		}
		else
		{

		}
	},
	view: {
		cells: [[
		{name: " ",width: "12px",field:"",formatter:ttl.utilities.deleteRowCtrl},
		{name: " ",width: "12px",field:"",formatter:ttl.utilities.formatRowCtrl},
		{name: 'Email',width: "200px",field:"email"},
		{name: 'Contact',width: "200px",field:"contactname"},
		{name: 'Company',width: "200px",field:"prospectcompanyname"},
		{name: 'Type',width: "100px",field:"prospecttypename"},
		{name: 'Source',width: "100px",field:"prospectsourcename"},
		{name: 'Region',width: "100px",field:"prospectregionname"}
		]]
	},
	_refresh:function()
	{
		this.result_grid.setQuery( {} );
	},
	_clear_filter:function()
	{

		this.emailaddress.set("value","");
		this.result_grid.setQuery( {} );
		this.clear();
	},
	_execute_filter:function()
	{
		var filter = {};

		if ( arguments[0].emailaddress.length > 0 )
			filter["emailaddress"] = arguments[0].emailaddress;

		this.result_grid.setQuery( filter );
		this.clear();
	},
	_add:function()
	{
		this.tabcont.selectChild (this.blank);
		this.addctrl.clear();
		this.adddialog.show();
	},
	_add_event:function( prospect )
	{
		this._store.newItem ( prospect ) ;
	},
	_update_event:function( prospect )
	{

		this._store.setValue(this._row,"email",prospect.email);
		this._store.setValue(this._row,"contactname",prospect.contactname);
		this._store.setValue(this._row,"prospectcompanyname",prospect.prospectcompanyname);
		this._store.setValue(this._row,"prospecttypename",prospect.prospecttypename);
		this._store.setValue(this._row,"prospectsourcename",prospect.prospectsourcename);
		this._store.setValue(this._row,"prospectregionname",prospect.prospectregionname);
	},
	_delete_event:function( prospect )
	{
		this._store.deleteItem ( this._row ) ;
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.mailing.create"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.mailing.create"] = true;
//-----------------------------------------------------------------------------
// Name:    create.js
// Author:  Chris Hoy
// Purpose:
// Created: 01/08/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.mailing.create");












dojo.declare("prmax.iadmin.sales.prospects.mailing.create",
	[ ttl.BaseWidget ],
	{
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/mailing/templates/create.html", "<div>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-props='onsubmit:\"return false\"' data-dojo-type=\"dijit.form.Form\">\r\n\t\t<table>\r\n\t\t\t<tr><td class=\"prmaxrowlabel\" align=\"right\" >Mailing Name</td><td><input data-dojo-props='type:\"text\",name:\"mailingname\"' data-dojo-attach-point=\"mailingname\" data-dojo-type=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td class=\"prmaxrowlabel\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"closebtn\" data-dojo-props='type:\"button\"' data-dojo-attach-event=\"onClick:_close\">Close</button></td>\r\n\t\t\t\t<td class=\"prmaxrowlabel\" align=\"right\"><button data-dojo-type=\"dojox.form.BusyButton\" data-dojo-attach-point=\"addbtn\" data-dojo-props='busyLabel:\"Saving ...\",type:\"button\"' data-dojo-attach-event=\"onClick:_update\">Adding</button></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n"),
	constructor: function()
	{
		this._update_call_back = dojo.hitch(this,this._update_call);
	},
	postCreate:function()
	{
		this.inherited(arguments);
	},
	_close:function()
	{
		this._dialog.hide();
	},
	_update:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._update_call_back,
			url:"/iadmin/prospects/mailing/add_mailing",
			content:this.form.get("value")}));
	},
	_update_call:function( response )
	{
		if ( response.success == "OK")
		{
			dojo.publish("/prospect/mailing/add", [response.data] );
				alert("Mailing Added");
			this._close();
			this.clear();
		}
		else if ( response.success == "DU")
		{
			alert("Mailing already exists");
		}
		else
		{
			alert("Problem Adding Mailing");
		}

		this.addbtn.cancel();
	},
	load:function( dialog )
	{
		this._dialog = dialog;
		this.clear();
	},
	clear:function()
	{
		this.addbtn.cancel();
	}
});






}

if(!dojo._hasResource["prmax.iadmin.sales.prospects.mailing.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.sales.prospects.mailing.view"] = true;
//-----------------------------------------------------------------------------
// Name:    view.js
// Author:  Chris Hoy
// Purpose:
// Created: 25/07/2012
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.sales.prospects.mailing.view");














dojo.declare("prmax.iadmin.sales.prospects.mailing.view",
	[ ttl.BaseWidget,dijit.layout.BorderContainer ],
	{
	widgetsInTemplate: true,
	templateString: dojo.cache("prmax", "iadmin/sales/prospects/mailing/templates/view.html", "<div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:45px;width:100%;overflow:hidden\"'>\r\n\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"height:99%;width:100%;padding:0px;margin:0px\"'>\r\n\t\t\t<div data-dojo-attach-event=\"onClick:_create\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxNewIcon\"'><span>New</span></div>\r\n\t\t\t<div data-dojo-attach-event=\"onClick:_refresh\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxRefreshIcon\"'><span>Refresh</span></div>\r\n\t\t\t<div data-dojo-type=\"dijit.form.DropDownButton\"  data-dojo-props='iconClass:\"PRMaxStdIcon PRMaxFilterIcon\",showLabel:true'>\r\n\t\t\t\t<span>Filter By</span>\r\n\t\t\t\t<div data-dojo-type=\"dijit.TooltipDialog\" data-dojo-props='title:\"Filter By\"' data-dojo-attach-event=\"execute:_execute_filter\">\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<tr><td><label>Name</label></td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"emailaddress\" data-dojo-props='type:\"text\",name:\"emailaddress\"' ></td></tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td align=\"left\"><button data-dojo-attach-event=\"onClick: _clear_filter\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\"' >Clear Filter</button></td>\r\n\t\t\t\t\t\t\t<td align=\"right\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"submit\",name:\"submit\"'>Filter</button></td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"left\",style:\"width:50%\"'>\r\n\t\t<div data-dojo-attach-point=\"result_grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='style:\"height:100%;width:100%\",rowsPerPage:50'></div>\r\n\t</div>\r\n\t<div data-dojo-attach-point=\"tabcont\" data-dojo-type=\"dijit.layout.StackContainer\" data-dojo-props=\"region:'center',splitter:true,'class':'bordered'\">\r\n\t\t<div title=\"blank\" data-dojo-attach-point=\"blank\" data-dojo-type=\"dijit.layout.ContentPane\" selected class=\"bordered\"></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-props='title:\"Create Mailing\"' data-dojo-attach-point=\"createdialog\">\r\n\t\t<div data-dojo-attach-point=\"createctrl\" data-dojo-type=\"prmax.iadmin.sales.prospects.mailing.create\" ></div>\r\n\t</div>\r\n\t<form data-dojo-attach-point=\"csv_mailing_form\" target=\"_newtab\" method=\"post\" action=\"/iadmin/prospects/mailing/to_csv\">\r\n\t\t<input type=\"text\" data-dojo-attach-point=\"csv_mailingid\" name = \"mailingid\" >\r\n\t</form>\r\n\r\n</div>\r\n"),
	constructor: function()
	{
		this._store = new dojox.data.JsonRestStore( {target:"/iadmin/prospects/mailing/list", idAttribute:"mailingid"});
		dojo.subscribe("/prospect/mailing/add", dojo.hitch(this, this._add_event));
	},
	clear:function()
	{
	},
	postCreate:function()
	{
		this.result_grid.set("structure",this.view);
		this.result_grid._setStore(this._store );

		this.result_grid.onStyleRow = dojo.hitch(this,ttl.GridHelpers.onStyleRow);
		this.result_grid.onRowClick = dojo.hitch(this,this._on_select_row);

		this.inherited(arguments);
	},
	_on_select_row : function(e)
	{
		this._row = this.result_grid.getItem(e.rowIndex);

		dojo.attr(this.csv_mailingid,"value", this._row.mailingid);
		dojo.attr(this.csv_mailing_form, "action","/iadmin/prospects/mailing/to_csv/" + this._row.mailingid);

		this.csv_mailing_form.submit();

		this.result_grid.selection.clickSelectEvent(e);

	},
	view: {
		cells: [[
		{name: " ",width: "12px",field:"",formatter:ttl.utilities.formatRowCtrl},
		{name: 'Mailing',width: "200px",field:"mailingname"}
		]]
	},
	_refresh:function()
	{
		this._clear_filter();
	},
	_clear_filter:function()
	{
		this.emailaddress.set("value","");
	},
	_execute_filter:function()
	{
		var filter = {};

		if ( arguments[0].emailaddress.length > 0 )
			filter["emailaddress"] = arguments[0].emailaddress;

		this.result_grid.setQuery( filter );
		this.clear();
	},
	_create:function()
	{
		this.createctrl.load( this.createdialog );
		this.createdialog.show();
	},
	_add_event:function( mailing )
	{
		this._store.newItem( mailing );

	}
});






}

if(!dojo._hasResource["prcommon.search.SearchCount"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.search.SearchCount"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.search.SearchCount
// Author:  Chris Hoy
// Purpose:
// Created: 28/06/2008
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prcommon.search.SearchCount");



dojo.declare("prcommon.search.SearchCount",
	[ ttl.BaseWidget ],
	{
		templateString:"<div dojoAttachPoint=\"innerNode\" class=\"prmaxsearchcount\">&nbsp;</div>\r\n",
		// styandard clear function
		Clear:function()
		{
			this.innerNode.innerHTML ="&nbsp;";
		},
		_getValueAttr:function()
		{
			return this.innerNode.innerHTML;
		},
		_setValueAttr:function( value )
		{
			this.innerNode.innerHTML =value;
		}
	}
);

}

if(!dojo._hasResource["prcommon.search.std_search"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.search.std_search"] = true;
//-----------------------------------------------------------------------------
// Name:    standard.js
// Author:  Chris Hoy
// Purpose: basic search field, This is a standard text field should be overridden
//			for ther fields such as dropdown list etc
// Created: 27/05/2008
//
// To do:
//			1. css settings for each field
//			2. use of table for layout to fixed?

//
//-----------------------------------------------------------------------------
dojo.provide("prcommon.search.std_search");




dojo.declare("prcommon.search.std_search",
	null,
	{
		commoncontrols:"search", // base name for the setting controls that might be used to control this control ie expand results etc
		dojoAttachEvent: "",
		dojoAttachPoint: "",
		waiRole: "",
		waiState:"",
		name:"",
		keytypeid:"",
		displayname:"",
		testmode:false,
		usepartial:false,
		search:"",
		min:0,
		searchTime:400,
		constructor: function()
		{
			this._LoadCallBack = dojo.hitch(this,this._Load);
			this._value = "";
			this._extended = false;
			this.open = false;
			this.searchTimer = null;

			dojo.subscribe(PRCOMMON.Events.Search_PartialMatch, dojo.hitch(this,this._PartialEvent));
		},
		_PartialEvent:function( command )
		{
			if (this.usepartial && command.search==this.search && this._value.length>0)
				this._Get (this._value, true ) ;
		},
		_setdisplay:function(value)
		{
			if (value.length==0)
				this.countNode.Clear();
			else
				this.countNode.set("value",value);
		},
		// Load the details of a specific customer
		_Load: function(response, ioArgs)
		{
			if (response.success=="OK")
			{
				console.log ("response" , this._transactionid , response.transactionid ) ;

				if(this._transactionid == response.transactionid )
					this._setdisplay(response.count.toString());
			}
		},
		// Load the  customer into the system
		_Send_Request_Count:function(value)
		{
			// send the request to the server
			var content= this._CaptureExtendedContent({keytypeid:this.keytypeid,fieldname:this.name,value:this._value});

			this._transactionid = PRCOMMON.utils.uuid.createUUID();
			content['transactionid'] = this._transactionid;

			dojo.xhrPost(
				ttl.utilities.makeParamsIgnore({
					load: this._LoadCallBack,
					url:'/search/displaycount',
					content: content
					})	);
			this.searchTimer = null;
		},
		_Get: function(value,force)
		{
			// value not changed
			if (this._value==value && force!=true) return ;
			// setup new value
			// if empty then simply clear
			this._value=value;
			if (this._value.length>this.min)
			{
				if (this.searchTimer)
				{
					clearTimeout ( this.searchTimer);
					this.searchTimer = null;
				}
				this.searchTimer = setTimeout(dojo.hitch(this, this._Send_Request_Count,value),this.searchTime);
			}
			else
			{
				this._setdisplay("");
			}

			dojo.publish(PRCOMMON.Events.Search_Total, [{search:this.search}]);
		},
		_CaptureExtendedContent:function(stdfields)
		{
			// This need to capture the flags that may be avalible on the current
			// form
			// partial match need to check
			var partial = dijit.byId("search_partial");
			var private_only = dijit.byId(this.commoncontrols +"private");
			try
			{
				return dojo.mixin(stdfields,{
					partial:partial? partial.checked?2:0:2,
					private_only:private_only? private_only.attr("value"):0
					});
			}
			catch(e) { alert(e); }
		},
		_setExtendedAttr:function(value)
		{
			this._extended = value;
		},
		_getExtendedAttr:function()
		{
			return this._extended;
		},
		_Toggle:function()
		{
			this.open = !this.open;
			this._ToggleCascade();
		},
		_ToggleCascade:function()
		{
			dojo.style(this.selectarea,"display",this.open?"block":"none");
//			this.toggleCtrl.src =  this.open?"/static/images/toclosed.gif":"/static/images/toopen.gif";
			if (this.open)
			{
				dojo.addClass(this.toggleCtrl,"fa-minus-circle");
				dojo.removeClass(this.toggleCtrl,"fa-plus-circle");
			}
			else
			{
				dojo.addClass(this.toggleCtrl,"fa-plus-circle");
				dojo.removeClass(this.toggleCtrl,"fa-minus-circle");
			}
//			this.toggleCtrl.src =  this.open? '<i class="fa-minus-circle"></i>':'<i class="fa-plus-circle"></i>' ;

			if (this.open) this._focus();
		},
		Clear:function()
		{
			this._MakeClosed();
			if (this.searchTimer)
			{
				clearTimeout ( this.searchTimer);
				this.searchTimer = null;
			}

		},
		_MakeClosed:function()
		{
			if (this.open==true)
				this._Toggle();
		},
		MakeOpen:function()
		{
			this.open=false;
			this._Toggle();
		}
	}
);






}

if(!dojo._hasResource["prcommon.search.Countries"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.search.Countries"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.search.Countries
// Author:  Chris Hoy
// Purpose:
// Created: 19/07/2010
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prcommon.search.Countries");




// Main control
dojo.declare("prcommon.search.Countries",
	[ prcommon.search.std_search, ttl.BaseWidget],
	{
		name:"",		// name used for a form integration
		value:"",
		displaytitle : 'Countries',
		search : '',
		size:'7',
		testmode:false,
		selectonly:false,
		startopen:false,
		preload:true,
		interesttypeid:1,
		restrict:1,
		widgetsInTemplate: true,
		templateString:"<div data-dojo-attach-point=\"containerNode\" >\r\n\t<table width=\"100%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" data-dojo-attach-point=\"top_panel\">\r\n\t\t<tr><td width=\"20%\" class=\"prmaxrowtag\">${displaytitle}</td>\r\n\t\t\t\t<td width=\"5%\" ><i dojoAttachPoint=\"toggleCtrl\" dojoAttachEvent=\"onclick:_Toggle\" class=\"fa fa-plus-circle\" style=\"color:#7F7F7F\"></i></td>\r\n\t\t\t\t<td align=\"right\" v-align=\"top\" ><div data-dojo-attach-point=\"countNode\" data-dojo-type=\"prcommon.search.SearchCount\"></div></td>\r\n\t\t</tr>\r\n\t</table>\r\n\t<div class=\"dojoInterestPane\" >\r\n\t\t<div data-dojo-attach-point=\"selectarea\" class=\"prmaxselectmultiple\" style=\"display:none\" >\r\n\t\t\t<table width=\"100%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" >\r\n\t\t\t\t  <tr><td width=\"47%\"></td><td width=\"5%\"></td><td width=\"48%\" ></td></tr>\r\n\t\t\t\t  <tr><td colspan=\"3\">\r\n\t\t\t\t\t  <table style=\"width:100%\" class=\"prmaxtable\" >\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td width=\"40%\" data-dojo-attach-point=\"master_type_text\"><span class=\"prmaxrowtag\">Select</span><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-props='\"class\":\"prmaxfocus prmaxinput\",type:\"text\",style:\"width:60%\"' data-dojo-attach-point=\"interest_list_select\" data-dojo-attach-event=\"onkeyup:interestSelect\" /></td>\r\n\t\t\t\t\t\t\t<td width=\"40%\"><select  data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-props='style:\"width:100%\",autoComplete:true,searchAttr:\"name\",labelType:\"html\"' data-dojo-attach-point=\"master_type\" data-dojo-attach-event=\"onChange:_change_filter\"></select></td>\r\n\t\t\t\t\t\t\t<td width=\"3%\" align=\"right\"><input data-dojo-props='\"class\":\"prmaxdefault\",checked:\"checked\",type:\"checkbox\",value:\"2\"' data-dojo-attach-point=\"AndOr\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-event=\"onClick:And_Or\"/></td>\r\n\t\t\t\t\t\t\t<td width=\"15%\"><label data-dojo-attach-point=\"AndOrLabel\" class=\"prmaxlabeltag\" >All</label></td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t  </td></tr>\r\n\t\t\t\t\t  <tr><td ><select style=\"width:100%\" data-dojo-attach-point=\"interest_list\" size=\"${size}\" class=\"lists\" multiple=\"multiple\" ></select></td>\r\n\t\t\t\t  <td>\r\n\t\t\t\t  <button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_add_all\"' data-dojo-attach-point=\"button_all\" data-dojo-attach-event=\"onClick:interestSelectAll\" data-dojo-type=\"dijit.form.Button\"><div class=\"std_movement_button\">&gt;&gt;</div></button><br/>\r\n\t\t\t\t  <button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_add_single\"' data-dojo-attach-point=\"button_single\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:interestSelectSingle\"><div class=\"std_movement_button\">&gt;&nbsp;</div></button><br/>\r\n\t\t\t\t  <button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_del_all\"' data-dojo-attach-point=\"button_del_all\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:interestRemoveAll\"><div class=\"std_movement_button\">&lt;&lt;</div></button><br/>\r\n\t\t\t\t  <button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_del_single\"' data-dojo-attach-point=\"button_del_single\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:interestRemoveSingle\"><div class=\"std_movement_button\">&lt;&nbsp;</div></button></td>\r\n\t\t\t\t  <td ><select style=\"width:100%\" size=\"${size}\" class=\"lists\" multiple=\"multiple\" data-dojo-attach-point=\"interest_select\" data-dojo-attach-event=\"onchange:interestUpdateSelection\"></select></td>\r\n\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",
		constructor: function()
		{
			this.disabled = false;
			this._extended = false;
			this._LoadSelectionCall = dojo.hitch(this,this._LoadSelection);
			this._continents = new dojo.data.ItemFileReadStore({ url:"/common/lookups?searchtype=continents"} );
			this.interestTimer = null;

			this.inherited(arguments);
		},
		postCreate:function()
		{
			// key
			dojo.connect(this.interest_list_select.domNode,"onkeyup" ,  dojo.hitch(this,this.interestSelect));
			dojo.connect(this.interest_list,"onchange" ,  dojo.hitch(this,this.interestUpdateSelection));
			dojo.connect(this.interest_list,"ondblclick" ,  dojo.hitch(this,this.interestSelectDbl));
			dojo.attr(this.AndOrLabel, "for", this.AndOr.id);
			if (this.selectonly)
			{
				this.AndOr.domNode.style.display ="None";
				this.countNode.domNode.style.display ="None";
				this.AndOrLabel.style.display ="None";
				if (this.displaytitle == '')
				{
					dojo.addClass(this.top_panel,"prmaxhidden");
				}
			}
			if (this.startopen)
			{
				dojo.style(this.toggleCtrl,"display","none");
				dojo.style(this.selectarea,"display","block");
			}
			if (this.preload)
			{
				this._load_defaults();
				if ( PRMAX.utils.settings.countries.length > 0 )
				{
					this.MakeOpen();
					this._Get(this._getValueAttr(),true);
				}

			}

			this.master_type.store = this._continents;
			this.master_type.set("value",-1);

			this.inherited(arguments);
		},
		_load_defaults:function()
		{
			for ( var key in PRMAX.utils.settings.countries )
			{
				var option = PRMAX.utils.settings.countries[key];

				this.interest_select.options[this.interest_select.options.length] = new Option(option.countryname,option.countryid);
			}
		},
		// styandard clear function
		Clear:function()
		{
			this._ClearSelectionBox();
			this._ClearSelectedBox();
			this.interest_list_select.set("value","");
			this._Get(this._getValueAttr());
			this._SelectionOptions();
			this._load_defaults();

			this.inherited(arguments);
		},
		_Send_Request:function( data )
		{
			this._transactionid = PRCOMMON.utils.uuid.createUUID();
			var filter = this.master_type.get("value");

			if ( filter == "-1" && data == "*" )
				data = "";


			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._LoadSelectionCall,
					url:'/geographical/countries_listselection',
					content:{ word:data,
										logic:this.AndOr.get("value"),
										filter:filter,
										keytypeid:this.keytypeid,
										restrict:this.restrict,

										transactionid: this._transactionid}})	);
		},
		interestSelect:function( p1, defaultvalue )
		{
			var data = this.interest_list_select.get("value");

			if ( defaultvalue != null )
				data = defaultvalue;

			if (data.length>0)
			{
				if (this.interestTimer)
				{
					clearTimeout ( this.interestTimer);
					this.interestTimer = null;
				}
				this.interestTimer = setTimeout(dojo.hitch(this, this._Send_Request,data),this.searchTime);
			}
			else
			{
				this.interestTimer = null;
				this._ClearSelectionBox();
				this._SelectionOptions();
			}
		},
		_LoadSelection:function(response)
		{
			if ( this._transactionid == response.transactionid )
			{
				this._ClearSelectionBox();
				for ( var i=0 ; i <response.data.length; ++i )
				{
					var record = response.data[i];
					this.interest_list.options[this.interest_list.options.length] = new Option(record.countryname,record.countryid);
				}
				this._SelectionOptions();
			}
		},
		_ClearSelectionBox:function()
		{
			this.interest_list.options.length=0;
		},
		_ClearSelectedBox:function()
		{
			this.interest_select.length=0;
		},

		And_Or:function()
		{
			this._Get(this._getValueAttr(),true);
		},
		interestUpdateSelection:function()
		{
			this._SelectionOptions();
		},
		interestSelectDbl:function()
		{
			this.interestSelectSingle();
			this._SelectionOptions();
		},
		interestSelectAll:function()
		{
			for (var c=0; c<this.interest_list.options.length ;c++){
				var option = this.interest_list.options[c];
				var addRecord = true;
				for (var c1=0; c1<this.interest_select.options.length ;c1++){
					if (this.interest_select.options[c1].value==option.value){
						addRecord = false;
						break;
					}
				}
				if ( addRecord ) {
					this.interest_select.options[this.interest_select.options.length] = new Option(option.text,option.value);
				}
			}
			this._Get(this._getValueAttr());
			this.interest_list.options.length = 0 ;
			this.interestUpdateSelection();
		},
		interestSelectSingle:function()
		{
			for (var c=0; c<this.interest_list.options.length ;c++){
				var option = this.interest_list.options[c];
				if (option.selected) {
					option.selected=false;
					var addRecord = true;
					for (var c1=0; c1<this.interest_select.options.length ;c1++){
						if (this.interest_select.options[c1].value==option.value){
							addRecord = false;
							break;
						}
					}
					if ( addRecord ) {
						this.interest_select.options[this.interest_select.options.length] = new Option(option.text,option.value);
						this._Get(this._getValueAttr());
					}
				}
			}
		},
		interestRemoveAll:function()
		{
			this.interest_select.options.length = 0 ;
			this.interestUpdateSelection();
			this._Get(this._getValueAttr());
		},
		interestRemoveSingle:function()
		{
			for (var c=0; c<this.interest_select.options.length ;c++){
				if (this.interest_select.options[c].selected)
					this.interest_select.options[c] = null;
			}
			this.interestUpdateSelection();
			this._Get(this._getValueAttr());

		},
		addSelect:function(data)
		{
			this.interest_select.options[this.interest_select.options.length] = new Option(data.countryname,data.countryid);
		},
		_setValueAttr:function(values)
		{
			this.Clear();
			var data = values.data;
			var open = false;
			if ( data == null || data == undefined )
				data = values;
			for (var key in data)
			{
				var record = data[key];
				this.interest_select.options[this.interest_select.options.length] = new Option(record.countryname,record.countryid);
				opne = true;
			}
			if ( open )
				this.MakeOpen();
			this._Get(this._getValueAttr());

		},
		_getValueAttr:function()
		{
			var data = Array();
			for (var c=0; c<this.interest_select.options.length ;c++)
			{
				if (this._extended)
				{
					data[c] = {
						countryid:parseInt(this.interest_select.options[c].value),
						countryname:this.interest_select.options[c].text
						};
				}
				else
				{
					data[c] = parseInt(this.interest_select.options[c].value);
				}
			}
			var obj = {data:data,logic:this.AndOr.get("value")};
			if (this._extended)
			{
				return obj;
			}
			else
			{
				var data = data.length>0?dojo.toJson(obj):"";
				this.value = data;
				return data;
			}
		},
		_getCountAttr:function()
		{
			return this.interest_select.options.length;
		},
		_setExtendedAttr:function(value)
		{
			this._extended = value
		},

		_SelectionOptions:function()
		{
			this.button_all.set('disabled',this.interest_list.length?false:true);
			this.button_single.set('disabled',this.interest_list.selectedIndex!=-1?false:true);

			this.button_del_all.set('disabled',this.interest_select.length?false:true);
			this.button_del_single.set('disabled',this.interest_select.selectedIndex!=-1?false:true);
		},
		_CaptureExtendedContent:function(data)
		{
			var logic=this.AndOr.get("value");
			return dojo.mixin(data,{logic:logic});
		},
		_setDisabledAttr:function(values)
		{
			this.disabled = values;
		},
		_getDisabledAttr:function()
		{
			return this.disabled;
		},
		 destroy: function()
		 {
			this.inherited(arguments);
		},
		_Get:function()
		{
			if (this.selectonly==false)
				this.inherited(arguments);
		},
		_focus:function()
		{
			this.interest_list_select.focus();
		},
		_change_filter:function()
		{
			var data = this.interest_list_select.get("value");

			if ( data.length == 0)
			data = "*";

			this.interestSelect(null, data );
		}
});






}

if(!dojo._hasResource["prcommon.languages.Languages"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.languages.Languages"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.languages.Languages
// Author:  
// Purpose:
// Created: June 2016
//
// To do:
//-----------------------------------------------------------------------------

dojo.provide("prcommon.languages.Languages");



// Main control
dojo.declare("prcommon.languages.Languages",
	[ttl.BaseWidget],
	{
		name:"",	
		value:"",
		displaytitle : 'Languages',
		search : '',
		size:'7',
		testmode:false,
		selectonly:false,
		startopen:false,
		preload:true,
		interesttypeid:1,
		restrict:1,
		widgetsInTemplate: true,
		templateString:"<div data-dojo-attach-point=\"containerNode\" >\r\n\t<table width=\"100%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" >\r\n\t\t<tr><td width=\"20%\" class=\"prmaxrowtag\">${displaytitle}</td>\r\n\t\t</tr>\r\n\t</table>\r\n\t<div class=\"dojolanguagesPane\" >\r\n\t\t<div data-dojo-attach-point=\"selectarea\" class=\"prmaxselectmultiple\" >\r\n\t\t\t<table width=\"100%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n\t\t\t\t  <tr><td width=\"47%\"></td><td width=\"5%\"></td><td width=\"48%\" ></td></tr>\r\n\t\t\t\t  <tr><td colspan=\"3\">\r\n\t\t\t\t  <table style=\"width:100%\" class=\"prmaxtable\" >\r\n\t\t\t\t\t  <tr>\r\n\t\t\t\t\t  <td width=\"40%\" data-dojo-attach-point=\"master_type_text\"><span class=\"prmaxrowtag\">Select </span><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-props='\"class\":\"prmaxfocus prmaxinput\",type:\"text\",style:\"width:60%\"' data-dojo-attach-point=\"languages_list_select\" data-dojo-attach-event=\"onkeyup:languages_select_event\" /></td>\r\n\t\t\t\t\t  </tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t  </td></tr>\r\n\t\t\t\t  <tr><td ><select style=\"width:100%\" data-dojo-attach-point=\"languages_list\" size=\"${size}\" class=\"lists\" multiple=\"multiple\" ></select></td>\r\n\t\t\t\t  <td >\r\n\t\t\t\t\t<button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_add_all\"' data-dojo-attach-point=\"button_all\" data-dojo-attach-event=\"onClick:languages_select_all\" data-dojo-type=\"dijit.form.Button\"><div class=\"std_movement_button\">&gt;&gt;</div></button><br/>\r\n\t\t\t\t\t<button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_add_single\"' data-dojo-attach-point=\"button_single\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:languages_select_single\"><div class=\"std_movement_button\">&gt;&nbsp;</div></button><br/>\r\n\t\t\t\t\t<button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_del_all\"' data-dojo-attach-point=\"button_del_all\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:languages_remove_all\"><div class=\"std_movement_button\">&lt;&lt;</div></button><br/>\r\n\t\t\t\t\t<button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_del_single\"' data-dojo-attach-point=\"button_del_single\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:languages_remove_single\"><div class=\"std_movement_button\">&lt;&nbsp;</div></button></td>\r\n\t\t\t\t  <td ><select style=\"width:100%\" data-dojo-attach-point=\"languages_select\" size=\"${size}\" class=\"lists\"  data-dojo-attach-event=\"onchange:languages_update_selection\"></select></td>\r\n\t\t\t\t  </tr>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n",
		constructor: function()
		{
			this.disabled = false;
			this._extended = false;
			this._LoadSelectionCall = dojo.hitch(this,this._LoadSelection);
			
			this.selectTimer = null;
		},
		postCreate:function()
		{
			// key
			dojo.connect(this.languages_list_select.domNode,"onkeyup" ,  dojo.hitch(this,this.languages_select_event));
			dojo.connect(this.languages_list,"onchange" ,  dojo.hitch(this,this.languages_update_selection));
			dojo.connect(this.languages_list,"ondblclick" ,  dojo.hitch(this,this.languages_select_dbl));

			if (this.preload)
			{
				this._Send_Request("*");
			}			
			this.inherited(arguments);
		},
		
		Clear:function()
		{
			this._ClearSelectionBox();
			this._ClearSelectedBox();
			this.languages_list_select.set("value","");
			this._Get(this._getValueAttr());
			this._SelectionOptions();

			this.inherited(arguments);
		},

		_Send_Request:function ( data )
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._LoadSelectionCall,
					url:'/languages/listuserselection',
					content:{ word:data}}));		
		},
		languages_select_event:function()
		{
			var data = this.languages_list_select.get("value");
			if (data.length>0)
			{
				if (this.selectTimer)
				{
					clearTimeout ( this.selectTimer);
					this.selectTimer = null;
				}
				this.selectTimer = setTimeout(dojo.hitch(this, this._Send_Request,data),this.searchTime);
			}
			else
			{
				if ( this.selectTimer )
				{
					clearTimeout ( this.selectTimer);
					this.selectTimer = null;
				}
				this._ClearSelectionBox();
				this._SelectionOptions();
			}

		},
		_LoadSelection:function(response)
		{
			this._ClearSelectionBox();
			for ( var i=0 ; i <response.data.length; ++i )
			{
				var record = response.data[i];
				this.languages_list.options[this.languages_list.options.length] = new Option(record.languagename,record.languageid);
			}
			this._SelectionOptions();
		},
		_ClearSelectionBox:function()
		{
			this.languages_list.options.length=0;
		},
		_ClearSelectedBox:function()
		{
			this.languages_select.length=0;
		},
		languages_update_selection:function()
		{
			this._SelectionOptions();
		},
		languages_select_dbl:function()
		{
			this.languages_select_single();
			this._SelectionOptions();
		},
		languages_select_all:function()
		{
			for (var c=0; c<this.languages_list.options.length ;c++){
				var option = this.languages_list.options[c];
				var addRecord = true;
				for (var c1=0; c1<this.languages_select.options.length ;c1++){
					if (this.languages_select.options[c1].value==option.value){
						addRecord = false;
						break;
					}
				}
				if ( addRecord ) {
					this.languages_select.options[this.languages_select.options.length] = new Option(option.text,option.value);
				}
			}
			this._Get(this._getValueAttr());
			this.languages_list.options.length = 0 ;
			this.languages_update_selection();
		},
		languages_select_single:function()
		{
			for (var c=0; c<this.languages_list.options.length ;c++){
				var option = this.languages_list.options[c];
				if (option.selected) {
					option.selected=false;
					var addRecord = true;
					for (var c1=0; c1<this.languages_select.options.length ;c1++){
						if (this.languages_select.options[c1].value==option.value){
							addRecord = false;
							break;
						}
					}
					if ( addRecord ) {
						this.languages_select.options[this.languages_select.options.length] = new Option(option.text,option.value);
						this._Get(this._getValueAttr());
					}
				}
			}
		},
		languages_remove_all:function()
		{
			this.languages_select.options.length = 0 ;
			this.languages_update_selection();
			this._Get(this._getValueAttr());
		},
		languages_remove_single:function()
		{
			for (var c=0; c<this.languages_select.options.length ;c++){
				if (this.languages_select.options[c].selected)
					this.languages_select.options[c] = null;
			}
			this.languages_update_selection();
			this._Get(this._getValueAttr());

		},
		add_select:function(data)
		{
			this.languages_select.options[this.languages_select.options.length] = new Option(data.languagename,data.languageid);
		},
		_setValueAttr:function(values)
		{
			this.Clear();
			if (values != null)
			{
				var data = values.data;
				var open = false;
				if ( data == null || data == undefined )
					data = values;
				for (var key in data)
				{
					var record = data[key];
					this.languages_select.options[this.languages_select.options.length] = new Option(record.languagename,record.languageid);
					opne = true;
				}
				if ( open )
					this.make_open();
				this._Get(this._getValueAttr());
			}
		},
		_getValueAttr:function()
		{
			var data = Array();
			for (var c=0; c<this.languages_select.options.length ;c++)
			{
				if (this._extended)
				{
					data[c] = {
						languageid:parseInt(this.languages_select.options[c].value),
						languagename:this.languages_select.options[c].text
						};
				}
				else
				{
					data[c] = parseInt(this.languages_select.options[c].value);
				}
			}
			var obj = {data:data};

			if (this._extended)
			{
				return obj;
			}
			else
			{
				var data = data.length>0?dojo.toJson(obj):"";
				this.value = data;
				return data;
			}
		},
		_getCountAttr:function()
		{
			return this.languages_select.options.length;
		},
		_setExtendedAttr:function(value)
		{
			this._extended = value
		},

		change_filter:function()
		{
			this.languages_select();
		},
		_SelectionOptions:function()
		{
			this.button_all.set('disabled',this.languages_list.length?false:true);
			this.button_single.set('disabled',this.languages_list.selectedIndex!=-1?false:true);

			this.button_del_all.set('disabled',this.languages_select.length?false:true);
			this.button_del_single.set('disabled',this.languages_select.selectedIndex!=-1?false:true);

			this._up_down();
		},
		_up_down:function()
		{
			var upvalue = true ;
			var downvalue = true ;

			if (this.languages_select.options.length>1 && this.languages_select.selectedIndex != -1 )
			{
				if  (this.languages_select.selectedIndex>0)
					upvalue = false ;

				if  (this.languages_select.selectedIndex<this.languages_select.options.length - 1 )
					downvalue = false;
			}
		},
		_setDisabledAttr:function(values)
		{
			this.disabled = values;
		},
		_getDisabledAttr:function()
		{
			return this.disabled;
		},
		_Get:function()
		{
			if (this.selectonly==false)
				this.inherited(arguments);
		},
		_focus:function()
		{
			this.languages_list_select.focus();
		}
});


}

if(!dojo._hasResource["prcommon.clippings.clippingstype"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.clippings.clippingstype"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.clippings.ClippingsType
// Author:  
// Purpose:
// Created: June 2016
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prcommon.clippings.clippingstype");



// Main control
dojo.declare("prcommon.clippings.clippingstype",
    [ ttl.BaseWidget],
    {
        name:"",		// name used for a form integration
        value:"",
        displaytitle : 'clippingstype',
        search : '',
        size:'7',
        testmode:false,
        selectonly:false,
        startopen:false,
        preload:true,
        interesttypeid:1,
        restrict:1,
        widgetsInTemplate: true,
        templateString:"<div data-dojo-attach-point=\"containerNode\" >\r\n    <table width=\"100%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" >\r\n        <tr><td width=\"20%\" class=\"prmaxrowtag\">${displaytitle}</td>\r\n        </tr>\r\n    </table>\r\n    <div class=\"dojolanguagesPane\" >\r\n        <div data-dojo-attach-point=\"selectarea\" class=\"prmaxselectmultiple\" >\r\n            <table width=\"100%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n                  <tr><td width=\"47%\"></td><td width=\"5%\"></td><td width=\"48%\" ></td></tr>\r\n                  <tr><td colspan=\"3\">\r\n                      <table style=\"width:100%\" class=\"prmaxtable\" >\r\n                            <tr>\r\n                            <td width=\"40%\" data-dojo-attach-point=\"master_type_text\"><span class=\"prmaxrowtag\">Select</span><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-props='\"class\":\"prmaxfocus prmaxinput\",type:\"text\",style:\"width:60%\"' data-dojo-attach-point=\"clippingstype_list_select\" data-dojo-attach-event=\"onkeyup:clippingsTypeSelect\" /></td>\r\n                            </tr>\r\n                      </table>\r\n                      </td></tr>\r\n                      <tr><td ><select style=\"width:100%\" data-dojo-attach-point=\"clippingstype_list\" size=\"${size}\" class=\"lists\" multiple=\"multiple\" ></select></td>\r\n                  <td>\r\n                  <button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_add_all\"' data-dojo-attach-point=\"button_all\" data-dojo-attach-event=\"onClick:clippingsTypeSelectAll\" data-dojo-type=\"dijit.form.Button\"><div class=\"std_movement_button\">&gt;&gt;</div></button><br/>\r\n                  <button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_add_single\"' data-dojo-attach-point=\"button_single\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:clippingsTypeSelectSingle\"><div class=\"std_movement_button\">&gt;&nbsp;</div></button><br/>\r\n                  <button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_del_all\"' data-dojo-attach-point=\"button_del_all\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:clippingsTypeRemoveAll\"><div class=\"std_movement_button\">&lt;&lt;</div></button><br/>\r\n                  <button data-dojo-props='style:\"padding:0px;margin:0px\",disabled:\"true\",type:\"button\",\"class\":\"button_del_single\"' data-dojo-attach-point=\"button_del_single\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:clippingsTypeRemoveSingle\"><div class=\"std_movement_button\">&lt;&nbsp;</div></button></td>\r\n                  <td ><select style=\"width:100%\" size=\"${size}\" class=\"lists\" multiple=\"multiple\" data-dojo-attach-point=\"clippingstype_select\" data-dojo-attach-event=\"onchange:clippingsTypeUpdateSelection\" data-dojo-props='required:true, \"class\":\"prmaxrequired\"' ></select></td>\r\n            </tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
        constructor: function()
        {
            this.disabled = false;
            this._extended = false;
            this._LoadSelectionCall = dojo.hitch(this,this._LoadSelection);
            
            this.interestTimer = null;
        },
        postCreate:function()
        {
            // key
            dojo.connect(this.clippingstype_list_select.domNode,"onkeyup" ,  dojo.hitch(this,this.clippingsTypeSelect));
            dojo.connect(this.clippingstype_list,"onchange" ,  dojo.hitch(this,this.clippingsTypeUpdateSelection));
            dojo.connect(this.clippingstype_list,"ondblclick" ,  dojo.hitch(this,this.clippingsTypeSelectDbl));

            if (this.preload)
            {
                this._Send_Request("*");
            }
            
            this.inherited(arguments);
        },
        
        // styandard clear function
        Clear:function()
        {
            this._ClearSelectionBox();
            this._ClearSelectedBox();
            this.clippingstype_list_select.set("value","");
            this._Get(this._getValueAttr());
            this._SelectionOptions();

            this.inherited(arguments);
        },
        
        _Send_Request:function( data )
        {
        
            dojo.xhrPost(
                ttl.utilities.makeParams({
                    load: this._LoadSelectionCall,
                    url:'/clippingstypes/listuserselection',
                    content:{ word:data}}));
        },
        clippingsTypeSelect:function( p1, defaultvalue )
        {
            var data = this.clippingstype_list_select.get("value");
            if (data.length>0)
            {
                if (this.interestTimer)    
                {
                    clearTimeout ( this.interestTimer);
                    this.interestTimer = null;                
                }
                this.interestTimer = setTimeout(dojo.hitch(this, this._Send_Request,data),this.searchTime);
            }
            else
            {
                if (this.interestTimer) 
                {
                    clearTimeout ( this.interestTimer);
                    this.interestTimer = null;                
                }
                this._ClearSelectionBox();
                this._SelectionOptions();
            }
        },
        _LoadSelection:function(response)
        {
            this._ClearSelectionBox();
            for ( var i=0 ; i <response.data.length; ++i )
            {
                var record = response.data[i];
                this.clippingstype_list.options[this.clippingstype_list.options.length] = new Option(record.clippingstypedescription,record.clippingstypeid);
            }
            this._SelectionOptions();
        },
        _ClearSelectionBox:function()
        {
            this.clippingstype_list.options.length=0;
        },
        _ClearSelectedBox:function()
        {
            this.clippingstype_select.length=0;
        },
        clippingsTypeUpdateSelection:function()
        {
            this._SelectionOptions();
        },
        clippingsTypeSelectDbl:function()
        {
            this.clippingsTypeSelectSingle();
            this._SelectionOptions();
        },
        clippingsTypeSelectAll:function()
        {
            for (var c=0; c<this.clippingstype_list.options.length ;c++){
                var option = this.clippingstype_list.options[c];
                var addRecord = true;
                for (var c1=0; c1<this.clippingstype_select.options.length ;c1++){
                    if (this.clippingstype_select.options[c1].value==option.value){
                        addRecord = false;
                        break;
                    }
                }
                if ( addRecord ) {
                    this.clippingstype_select.options[this.clippingstype_select.options.length] = new Option(option.text,option.value);
                }
            }
            this._Get(this._getValueAttr());
            this.clippingstype_list.options.length = 0 ;
            this.clippingUpdateSelection();
        },
        clippingsTypeSelectSingle:function()
        {
            for (var c=0; c<this.clippingstype_list.options.length ;c++){
                var option = this.clippingstype_list.options[c];
                if (option.selected) {
                    option.selected=false;
                    var addRecord = true;
                    for (var c1=0; c1<this.clippingstype_select.options.length ;c1++){
                        if (this.clippingstype_select.options[c1].value==option.value){
                            addRecord = false;
                            break;
                        }
                    }
                    if ( addRecord ) {
                        this.clippingstype_select.options[this.clippingstype_select.options.length] = new Option(option.text,option.value);
                        this._Get(this._getValueAttr());
                    }
                }
            }
        },
        clippingsTypeRemoveAll:function()
        {
            this.clippingstype_select.options.length = 0 ;
            this.clippingsTypeUpdateSelection();
            this._Get(this._getValueAttr());
        },
        clippingsTypeRemoveSingle:function()
        {
            for (var c=0; c<this.clippingstype_select.options.length ;c++){
                if (this.clippingstype_select.options[c].selected)
                    this.clippingstype_select.options[c] = null;
            }
            this.clippingsTypeUpdateSelection();
            this._Get(this._getValueAttr());

        },
        addSelect:function(data)
        {
            this.clippingstype_select.options[this.clippingstype_select.options.length] = new Option(data.clippingstypedescription,data.clippingstypeid);
        },
        _setValueAttr:function(values)
        {
            this.Clear();
            if (values != null)
            {
                var data = values.data;
                var open = false;
                if ( data == null || data == undefined )
                    data = values;
                for (var key in data)
                {
                    var record = data[key];
                    this.clippingstype_select.options[this.clippingstype_select.options.length] = new Option(record.clippingstypedescription,record.clippingstypeid);
                    opne = true;
                }
                if ( open )
                    this.MakeOpen();
                this._Get(this._getValueAttr());
            }
        },
        _getValueAttr:function()
        {
            var data = Array();
            for (var c=0; c<this.clippingstype_select.options.length ;c++)
            {
                if (this._extended)
                {
                    data[c] = {
                        clippingstypeid:parseInt(this.clippingstype_select.options[c].value),
                        clippingstypedescription:this.clippingstype_select.options[c].text
                        };
                }
                else
                {
                    data[c] = parseInt(this.clippingstype_select.options[c].value);
                }
            }
            var obj = {data:data};
            if (this._extended)
            {
                return obj;
            }
            else
            {
                var data = data.length>0?dojo.toJson(obj):"";
                this.value = data;
                return data;
            }
        },
        _getCountAttr:function()
        {
            return this.clippingstype_select.options.length;
        },
        _setExtendedAttr:function(value)
        {
            this._extended = value
        },
//        _change_filter:function()
//        {
//            this.clippingsTypeSelect();
//        },
        _SelectionOptions:function()
        {
            this.button_all.set('disabled',this.clippingstype_list.length?false:true);
            this.button_single.set('disabled',this.clippingstype_list.selectedIndex!=-1?false:true);

            this.button_del_all.set('disabled',this.clippingstype_select.length?false:true);
            this.button_del_single.set('disabled',this.clippingstype_select.selectedIndex!=-1?false:true);
        },
        _up_down:function()
        {
            var upvalue = true ;
            var downvalue = true ;

            if (this.clippingstype_select.options.length>1 && this.clippingstype_select.selectedIndex != -1 )
            {
                if  (this.clippingstype_select.selectedIndex>0)
                    upvalue = false ;

                if  (this.clippingstype_select.selectedIndex<this.clippingstype_select.options.length - 1 )
                    downvalue = false;
            }
        },        
        _setDisabledAttr:function(values)
        {
            this.disabled = values;
        },
        _getDisabledAttr:function()
        {
            return this.disabled;
        },
        _Get:function()
        {
            if (this.selectonly==false)
                this.inherited(arguments);
        },
        _focus:function()
        {
            this.clippingstype_list_select.focus();
        },
        _change_filter:function()
        {
            var data = this.clippingstype_list_select.get("value");

            if ( data.length == 0)
            data = "*";

            this.clippingsTypeSelect(null, data );
        },
        isValid:function()
        {
            var cliptype_selected  = this.clippingstype_select.value;
            if ( (cliptype_selected == null || cliptype_selected == ""))
            {
                return false;
            }
            else
                return true;
        }
});






}

if(!dojo._hasResource["prmax.iadmin.clippings.add_order"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.clippings.add_order"] = true;
//-----------------------------------------------------------------------------
// Name:    add_order.js
// Author:  Chris Hoy
// Purpose:
// Created:
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.clippings.add_order");









dojo.declare("prmax.iadmin.clippings.add_order",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='\"class\":\"scrollpanel\",style:\"width:1000px;height:700px\"'>\r\n\t\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='onSubmit:\"return false\",\"class\":\"common_prmax_layout\"'>\r\n\t\t\t<div style=\"height:155px;width:49%;float:left;padding:0px;margin:0px\">\r\n\t\t\t\t<input data-dojo-attach-point=\"icustomerid\" data-dojo-props='value:\"\",name:\"icustomerid\",type:\"hidden\"' data-dojo-type=\"dijit.form.TextBox\"/>\r\n\t\t\t\t<label class=\"label_2\">Source</label><select data-dojo-attach-point=\"clippingsourceid\" data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-props='name:\"clippingsourceid\",autoComplete:true,style:\"width:8em\"' data-dojo-attach-event=\"onChange:_change_source\"></select><br/>\r\n\t\t\t\t<label class=\"label_2\">Description</label><input data-dojo-attach-point=\"description\" data-dojo-props='name:\"description\",type:\"text\",required:true,trim:true' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t<label class=\"label_2\">Start Date</label><input data-dojo-props='name:\"startdate\",style:\"width:8em\",type:\"text\",required:true' data-dojo-attach-point=\"startdate\" data-dojo-type=\"dijit.form.DateTextBox\"/><br/>\r\n\t\t\t\t<label class=\"label_2\">End Date</label><input data-dojo-props='name:\"enddate\",style:\"width:8em\",type:\"text\",required:true, readOnly:true' data-dojo-attach-point=\"enddate\" data-dojo-type=\"dijit.form.DateTextBox\"/><br/>\r\n\t\t\t\t<label class=\"label_2\">Keywords</label><input data-dojo-attach-point=\"keywords\" data-dojo-props='name:\"keywords\",type:\"text\",required:true,trim:true,style:\"width:20em\"' data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/>\r\n\t\t\t\t<label class=\"label_2\">RSS Feed</label><input data-dojo-attach-point=\"rss_feed\" data-dojo-props='name:\"rss_feed\",type:\"text\",required:false, trim:true,style:\"width:20em\"' data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:155px;width:49%;float:right;padding:0px;margin:0px\">\r\n\t\t\t\t<label class=\"label_2\">Price Band</label><select data-dojo-props='name:\"clippingspriceid\",autoComplete:true,searchAttr:\"description\",labelType:\"html\",required:true' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"clippingspriceid\" ></select><br/>\r\n\t\t\t\t<label class=\"label_2\">Price Code</label><select data-dojo-attach-point=\"pricecodeid\" data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-props='name:\"pricecodeid\",autoComplete:true,style:\"width:8em\"'></select><br/>\r\n\t\t\t\t<label class=\"label_2\">Purchase Order</label><input data-dojo-attach-point=\"purchaseorder\" data-dojo-props='name:\"purchaseorder\",type:\"text\",required:false,trim:true,style:\"width:12em\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t<label class=\"label_2\">Client</label><select data-dojo-props='name:\"clientid\",autoComplete:true,searchAttr:\"clientname\",labelType:\"html\",required:false' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"clientid\" data-dojo-attach-event=\"onChange:_client_change\"></select>\r\n\t\t\t\t\t<button data-dojo-attach-event=\"onClick: _New_Client\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",\"class\":\"prmaxdefault\"' >New</button><br/>\r\n\t\t\t\t<label class=\"label_2\">Campaign</label><select data-dojo-props='name:\"issueid\",autoComplete:true,searchAttr:\"name\",labelType:\"html\",required:false' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"issueid\"></select><br/>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:20px;width:100%;float:left;padding:0px;margin:0px\"><hr/></div>\r\n\t\t\t<div style=\"height:160px;width:49%;float:left;padding:0px;margin:0px\">\r\n\t\t\t\t<div data-dojo-attach-point=\"countries\" data-dojo-props='style:\"width:450px\",name:\"countries\", selectonly:true, startopen:true' data-dojo-type=\"prcommon.search.Countries\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:160px;width:49%;float:right;padding:0px;margin:0px\">\r\n\t\t\t\t<div data-dojo-attach-point=\"languages\" data-dojo-props='style:\"width:450px\",name:\"languages\"' data-dojo-type=\"prcommon.languages.Languages\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:20px;width:100%;float:left;padding:0px;margin:0px\"><br/></div>\r\n\t\t\t<div style=\"height:160px;width:100%;float:left;padding:0px;margin:0px\" data-dojo-attach-point=\"clippingstypes_node\">\r\n\t\t\t\t<div data-dojo-attach-point=\"clippingstypes\" data-dojo-props='style:\"width:450px\",name:\"clippingstypes\"' data-dojo-type=\"prcommon.clippings.clippingstype\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:20px;width:100%;float:left;padding:0px;margin:0px\"><hr/></div>\r\n\t\t\t<div style=\"height:100px;width:100%\">\r\n\t\t\t\t<label class=\"label_2\">Message</label><div class=\"stdframe\" style=\"height:50px\" ><textarea data-dojo-attach-point=\"message\" data-dojo-props='name:\"message\",trim:true,style:\"width:99%;height:50px\"' data-dojo-type=\"dijit.form.Textarea\" ></textarea></div><br/>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_close\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Close\",style:\"float:left\"'></button>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_add\" data-dojo-attach-point=\"addbtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\",busyLabel:\"Please Wait Adding...\",label:\"Create Order\",\"class\":\"btnright\"'></button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"client_add_dialog\" data-dojo-props='title:\"Add New Client\",style:\"width:700px;height:600px\"'>\r\n\t\t<div data-dojo-type=\"prmax.customer.clients.add\" data-dojo-attach-point=\"client_add_ctrl\"></div>\r\n\t</div>\t\r\n</div>\r\n\r\n",
	constructor: function()
	{
		this._add_call_back = dojo.hitch(this,this._add_call);
		this._Client_Add_Call_Back = dojo.hitch(this, this._Client_Add_Call);
		this._clippings_orders_model = new dojox.data.JsonRestStore({target:'/iadmin/clippings/list_clippingsprices', idAttribute:"clippingspriceid"});
		this._clients = new dojox.data.JsonRestStore({target:"/iadmin/clippings/list_clients", idAttribute:"clientid"});
		this._issues = new dojox.data.JsonRestStore({target:"/iadmin/clippings/list_issues", idAttribute:"issueid"});
		this._pricecodes = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=clippings"});
		this._sources = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=clippingsource"});

	},
	postCreate:function()
	{
		this.clippingspriceid.set("store",this._clippings_orders_model);
		this.clientid.set("store",this._clients);
		this.issueid.set("store",this._issues);
		this.pricecodeid.set("store", this._pricecodes);
		this.clippingsourceid.set("store", this._sources);
		this._clear();
		this.inherited(arguments);
	},
	load:function ( dialog, icustomerid, end_date)
	{
		this._dialog = dialog;
//		this.end_date = new Date('2035-01-01');
		//this.end_date = end_date;
		//this.end_date.set("value", new Date('2035-01-01'));
		this.icustomerid.set("value",icustomerid);
		this._icustomerid = icustomerid;
		this.clientid.set("query",{icustomerid:icustomerid});
		this.issueid.set("query",{icustomerid:icustomerid});
		this._dialog.resize({w:1010, h:700})
	},
	_close:function()
	{
		this._dialog.hide();
	},
	_add_call:function ( response )
	{
		if ( response.success == "OK" )
		{
			this._dialog.hide();
			this._clear();
			dojo.publish ( "/clippings/order/add" , [response.data ]);
		}
		else
		{
			alert("Problem Adding Clippings Order");
		}
		this.addbtn.cancel();
	},
	_clear:function()
	{
		this.addbtn.cancel();
		this.startdate.set("value",new Date());
		this.enddate.set("value", new Date('2035-01-01'));
//		this.enddate.set("value",this.end_date);
		this.keywords.set("value","");
		this.rss_feed.set("value","");
		this.purchaseorder.set("value","");
		this.description.set("value","");
		this.message.set("value","");
		this.clientid.set("value", null);
		this.issueid.set("value", null);
		this.clippingsourceid.set("value", 6);
	},
	_add:function()
	{
		if (this.clippingsourceid != 1 && this.clippingstypes.value == "" )
		{
			alert("Please Enter Clippings Type");
			this.addbtn.cancel();
			return false;
		}
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.addbtn.cancel();
			return false;
		}

		var content = this.form.get("value");

		content["startdate"] = ttl.utilities.toJsonDate(this.startdate.get("value"));
		content["enddate"] = ttl.utilities.toJsonDate(this.enddate.get("value"));

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._add_call_back),
			url:'/iadmin/clippings/add_order',
			content: content}));
	},
	clear:function()
	{
		this._clear();
	},
	_client_change:function()
	{
		var clientid = this.clientid.get("value");
		if (clientid == undefined)
			clientid = -1;

		this.issueid.set("query",{
			icustomerid: this.icustomerid.get("value"),
			clientid: clientid
		});

		this.issueid.set("value",null);

	},
	_change_source:function()
	{
		var sourceid = this.clippingsourceid.get("value");
		if (sourceid == 1)
		{
			dojo.addClass( this.clippingstypes_node, "prmaxhidden");
			if (this._dialog)
			{
				this._dialog.resize({w:1010, h:525});
			}
		}
		else
		{
			try
			{
				this._dialog.resize({w:1010, h:700});
			}
			catch(e){}

			dojo.removeClass( this.clippingstypes_node, "prmaxhidden");
		}
	},
	_Client_Add_Call:function(action, data )
	{
		this.clientid.set("value", data.clientid );
		this.client_add_dialog.hide();
	},
	_New_Client:function()
	{
		this.client_add_ctrl.Load(-1, this._Client_Add_Call_Back);
		this.client_add_ctrl.set("icustomerid",this._icustomerid);
		this.client_add_dialog.show();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.clippings.update_order"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.clippings.update_order"] = true;
//-----------------------------------------------------------------------------
// Name:    update_order.js
// Author:  Chris Hoy
// Purpose:
// Created:
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.clippings.update_order");








dojo.declare("prmax.iadmin.clippings.update_order",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='style:\"width:1000px;height:700px\"'>\r\n\t\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='onSubmit:\"return false\",\"class\":\"common_prmax_layout\"'>\r\n\t\t\t<div style=\"height:165px;width:49%;float:left;padding:0px;margin:0px\">\r\n\t\t\t\t<input data-dojo-attach-point=\"icustomerid\" data-dojo-props='value:\"\",name:\"icustomerid\",type:\"hidden\"' data-dojo-type=\"dijit.form.TextBox\"/>\r\n\t\t\t\t<input data-dojo-attach-point=\"clippingsorderid\" data-dojo-props='value:\"\",name:\"clippingsorderid\",type:\"hidden\"' data-dojo-type=\"dijit.form.TextBox\"/>\r\n\t\t\t\t<label class=\"label_2\">Source</label><select data-dojo-attach-point=\"clippingsourceid\" data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-props='name:\"clippingsourceid\",readOnly:\"readonly\",autoComplete:true,style:\"width:8em\"'></select><br/>\r\n\t\t\t\t<label class=\"label_2\">Description</label><input data-dojo-attach-point=\"description\" data-dojo-props='name:\"description\",type:\"text\",required:true,trim:true' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t<label class=\"label_2\">Start Date</label><input data-dojo-props='name:\"startdate\",style:\"width:8em\",type:\"text\",required:true' data-dojo-attach-point=\"startdate\" data-dojo-type=\"dijit.form.DateTextBox\"/><br/>\r\n\t\t\t\t<label class=\"label_2\">End Date</label><input data-dojo-props='name:\"enddate\",style:\"width:8em\",type:\"text\",required:true' data-dojo-attach-point=\"enddate\" data-dojo-type=\"dijit.form.DateTextBox\"/><br/>\r\n\t\t\t\t<label class=\"label_2\">Keywords</label><input data-dojo-attach-point=\"keywords\" data-dojo-props='name:\"keywords\",type:\"text\",required:true,trim:true,style:\"width:20em\"' data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/>\r\n\t\t\t\t<label class=\"label_2\">RSS Feed</label><input data-dojo-attach-point=\"rss_feed\" data-dojo-props='name:\"rss_feed\",type:\"text\",required:false,trim:true,style:\"width:20em\"' data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/>\r\n\t\t\t\t<label class=\"label_2\">Price Band</label><select data-dojo-props='name:\"clippingspriceid\",autoComplete:true,searchAttr:\"description\",labelType:\"html\",required:true' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"clippingspriceid\" ></select><br/>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:165px;width:49%;float:right;padding:0px;margin:0px\">\r\n\t\t\t\t<label class=\"label_2\">Price Code</label><select data-dojo-attach-point=\"pricecodeid\" data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-props='name:\"pricecodeid\",autoComplete:true,style:\"width:8em\"'></select><br/>\r\n\t\t\t\t<label class=\"label_2\">Purchase Order</label><input data-dojo-attach-point=\"purchaseorder\" data-dojo-props='name:\"purchaseorder\",type:\"text\",required:false,trim:true,style:\"width:12em\"' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t<label class=\"label_2\">Client</label><select data-dojo-props='name:\"clientid\",autoComplete:true,searchAttr:\"clientname\",labelType:\"html\",required:false' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"clientid\" data-dojo-attach-event=\"onChange:_client_change\"></select>\r\n\t\t\t\t\t<button data-dojo-attach-event=\"onClick: _New_Client\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",\"class\":\"prmaxdefault\"' >New</button><br/>\r\n\t\t\t\t<label class=\"label_2\">Campaign</label><select data-dojo-props='name:\"issueid\",autoComplete:true,searchAttr:\"name\",labelType:\"html\",required:false' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"issueid\"></select><br/>\r\n\t\t\t\t<label class=\"label_2\">Supplier Ref</label><input data-dojo-attach-point=\"supplierreference\" data-dojo-props='name:\"supplierreference\",type:\"text\",required:false,trim:true' data-dojo-type=\"dijit.form.ValidationTextBox\" /><br/>\r\n\t\t\t\t<label class=\"label_2\">Resend Supplier?</label><input data-dojo-type=\"dijit.form.CheckBox\" data-dojo-attach-point=\"resendsupemail\" data-dojo-props='type:\"checkbox\",name:\"resendsupemail\"' ><br/>\r\n\t\t\t\t<label class=\"label_2\">Email Address</label><input data-dojo-attach-point=\"email\" data-dojo-props='name:\"email\",type:\"text\",size:\"40\",maxlength:\"84\",trim:true,style:\"width:25em\",regExpGen:dojox.validate.regexp.emailAddress' data-dojo-type=\"dijit.form.ValidationTextBox\"/><br/>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:20px;width:100%;float:left;padding:0px;margin:0px\"><hr/></div>\r\n\t\t\t<div style=\"height:160px;width:49%;float:left;padding:0px;margin:0px\">\r\n\t\t\t\t<div data-dojo-attach-point=\"countries\" data-dojo-props='style:\"width:450px\",name:\"countries\", selectonly:true, startopen:true' data-dojo-type=\"prcommon.search.Countries\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:160px;width:49%;float:right;padding:0px;margin:0px\">\r\n\t\t\t\t<div data-dojo-attach-point=\"languages\" data-dojo-props='style:\"width:450px\",name:\"languages\"' data-dojo-type=\"prcommon.languages.Languages\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:20px;width:100%;float:left;padding:0px;margin:0px\"><br/></div>\r\n\t\t\t<div style=\"height:160px;width:49%;float:left;padding:0px;margin:0px\" data-dojo-attach-point=\"clippingstypes_node\" class=\"prmaxhidden\">\r\n\t\t\t\t<div data-dojo-attach-point=\"clippingstypes\" data-dojo-props='style:\"width:450px\",name:\"clippingstypes\"' data-dojo-type=\"prcommon.clippings.clippingstype\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"height:20px;width:100%;float:left;padding:0px;margin:0px\"><hr/></div>\r\n\t\t\t<div style=\"height:100px;width:100%\">\r\n\t\t\t\t<label class=\"label_2\">Message</label><div class=\"stdframe\" style=\"height:50px\" ><textarea data-dojo-attach-point=\"message\" data-dojo-props='name:\"message\",trim:true,style:\"width:99%;height:50px\"' data-dojo-type=\"dijit.form.Textarea\" ></textarea></div><br/>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_reactivate\" data-dojo-attach-point=\"reactivatebtn\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Reactivate\",\"class\":\"btnright prmaxhidden\"'></button>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_update\" data-dojo-attach-point=\"updbtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\",busyLabel:\"Please Wait Adding...\",label:\"Update Order\",\"class\":\"btnright\"'></button>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_resend_conformation\" data-dojo-attach-point=\"resendbtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\",busyLabel:\"Please Wait Sending...\",label:\"Save & Resend Order Conformation\",\"class\":\"btnright\"'></button>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_close\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Close\",style:\"float:left\"'></button>\r\n\t\t\t\t<button data-dojo-attach-event=\"onClick:_cancel\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-point=\"cancelbtn\" data-dojo-props='type:\"button\",label:\"Cancel Clipping\",style:\"float:left\"'></button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"client_add_dialog\" data-dojo-props='title:\"Add New Client\",style:\"width:700px;height:600px\"'>\r\n\t\t<div data-dojo-type=\"prmax.customer.clients.add\" data-dojo-attach-point=\"client_add_ctrl\"></div>\r\n\t</div>\r\n</div>\r\n\r\n",
	constructor: function()
	{
		this._update_call_back = dojo.hitch(this,this._update_call);
		this._load_call_back = dojo.hitch(this,this._load_call);
		this._resend_conformation_call_back = dojo.hitch(this, this._resend_conformation_call);
		this._cancel_call_back = dojo.hitch(this, this._cancel_call);
		this._reactivate_call_back = dojo.hitch(this, this._reactivate_call);
		this._Client_Add_Call_Back = dojo.hitch(this, this._Client_Add_Call);
		this._clippings_orders_model = new dojox.data.JsonRestStore({target:'/iadmin/clippings/list_clippingsprices', idAttribute:"clippingspriceid"});
		this._clients = new dojox.data.JsonRestStore({target:"/iadmin/clippings/list_clients", idAttribute:"clientid"});
		this._issues = new dojox.data.JsonRestStore({target:"/iadmin/clippings/list_issues", idAttribute:"issueid"});
		this._pricecodes = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=pricecodes&type=clippings"});
		this._sources = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=clippingsource"});
		this._change_client_enabled=true;
	},
	postCreate:function()
	{
		this.clippingspriceid.set("store",this._clippings_orders_model);
		this.clientid.set("store",this._clients);
		this.issueid.set("store",this._issues);
		this.pricecodeid.set("store", this._pricecodes);
		this.clippingsourceid.set("store", this._sources);
		this._clear();
		this.inherited(arguments);
	},
	load:function ( clippingsorderid , dialog, icustomerid, end_date)
	{
		this._dialog = dialog;
		this.licence_expire = end_date;
		this.clippingsorderid.set("value",clippingsorderid);
		this.icustomerid.set("value",icustomerid);
		this.clientid.set("query",{icustomerid:icustomerid});
		
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._load_call_back),
			url:'/iadmin/clippings/get_order',
			content: {clippingsorderid:clippingsorderid}}));
	},
	_load_call:function(response)
	{
		if ( response.success=="OK")
		{
			with (response)
			{
				this.updbtn.cancel();
				this.resendsupemail.set("checked",false);
				this.icustomerid.set("value",order.customerid);
				this.startdate.set("value",order.startdate);
				this.enddate.set("value",order.enddate);
				this.keywords.set("value",order.keywords);
				this.rss_feed.set("value",order.rss_feed);
				this.purchaseorder.set("value",order.purchaseorder);
				this.description.set("value",order.description);
				this.message.set("value","");
				this._change_client_enabled = false;
				this.clientid.set("value",order.defaultclientid);
				this.issueid.set("value",order.defaultissueid);
				this.clippingspriceid.set("value",order.clippingspriceid);
				this.supplierreference.set("value",order.supplierreference);
				this.pricecodeid.set("value",order.pricecodeid);
				this.email.set("value", order.email);
				this.clippingsourceid.set("value", order.clippingsourceid);
				this.countries.set("value", order.countries);
				this.languages.set("value", order.languages);
				this.clippingstypes.set("value", order.clippingstypes);
				if (this.clippingsourceid.value == 1)
				{
					dojo.addClass( this.clippingstypes_node, "prmaxhidden");
					if (this._dialog)
					{
						this._dialog.resize({w:1010, h:550});
					}					
				}
				else
				{
					this._dialog.resize({w:1010, h:700});
					dojo.removeClass( this.clippingstypes_node, "prmaxhidden");
				};
				if (order.clippingorderstatusid == 2)
				{
					dojo.addClass( this.updbtn.domNode, "prmaxhidden");
					dojo.addClass( this.resendbtn.domNode, "prmaxhidden");
					dojo.addClass( this.cancelbtn.domNode, "prmaxhidden");
					dojo.removeClass( this.reactivatebtn.domNode, "prmaxhidden");
				}
				else
				{
					dojo.removeClass( this.updbtn.domNode, "prmaxhidden");
					dojo.removeClass( this.resendbtn.domNode, "prmaxhidden");
					dojo.removeClass( this.cancelbtn.domNode, "prmaxhidden");
					dojo.addClass( this.reactivatebtn.domNode, "prmaxhidden");
				};
			}
			this._dialog.show();
		}
	},
	_close:function()
	{
		this._dialog.hide();
	},
	_update_call:function ( response )
	{
		if ( response.success == "OK" )
		{
			this._dialog.hide();
			dojo.publish ( "/clippings/order/upd" , [response.data ]);
			this._clear();
		}
		else
		{
			alert("Problem Updating Clippings Order");
		}
		this.updbtn.cancel();
	},
	_clear:function()
	{
		this.updbtn.cancel();
		this.resendbtn.cancel();

		this.startdate.set("value",new Date());
		this.enddate.set("value",dojo.date.add(new Date(), "year", 1));
		this.keywords.set("value","");
		this.rss_feed.set("value","");
		this.purchaseorder.set("value","");
		this.description.set("value","");
		this.message.set("value","");
		this._change_client_enabled = false;
		this.clientid.set("value", -1);
		this.issueid.set("value", -1);
		this._change_client_enabled = true;
		this.supplierreference.set("value","");
		this.resendsupemail.set("checked",false);
		this.clippingsourceid.set("value", 1);
	},
	_update:function()
	{
		if (this.clippingsourceid != 1 && this.clippingsourceid != 7 && this.clippingstypes.value == "" )
		{
			alert("Please Enter Clippings Type");
			this.updbtn.cancel();
			return false;
		}
	
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			this.updbtn.cancel();
			return false;
		}

		var content = this.form.get("value");

		content["startdate"] = ttl.utilities.toJsonDate(this.startdate.get("value"));
		content["enddate"] = ttl.utilities.toJsonDate(this.enddate.get("value"));

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._update_call_back),
			url:'/iadmin/clippings/update_order',
			content: content}));
	},
	_client_change:function()
	{
		var clientid = this.clientid.get("value");
		if (clientid == undefined)
			clientid = -1;

		this.issueid.set("query",{
			icustomerid: this.icustomerid.get("value"),
			clientid: clientid
		});
		
		if (this._change_client_enabled==true)
		{
			this.issueid.set("value",null);
		}
		this._change_client_enabled = true ;		
	},
	_resend_conformation_call:function(response)
	{
		if ( response.success=="OK")
		{
			dojo.publish ( "/clippings/order/upd" , [response.data ]);
			alert("Sent");
		}
		else
		{
			alert("Problem");
		}

		this.resendbtn.cancel();
	},
	_resend_conformation:function()
	{

		if (ttl.utilities.formValidator( this.form ) == false )
			{
			alert("Please Enter Details");
			this.resendbtn.cancel();
			return false;
		}

		if ( confirm("Update & Resend Order Conformation"))
		{
			var content = this.form.get("value");

			content["startdate"] = ttl.utilities.toJsonDate(this.startdate.get("value"));
			content["enddate"] = ttl.utilities.toJsonDate(this.enddate.get("value"));

			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._resend_conformation_call_back),
				url:'/iadmin/clippings/resend_conformation',
				content: content}));
		}
	},
	_cancel_call:function(response)
	{
		if ( response.success=="OK")
		{
			alert("Clipping cancelled");
			this._dialog.hide();
		}
		else
		{
			alert("Problem");
		}
	},	
	_cancel:function()
	{
		this.enddate.set("value", new Date());
		var content = this.form.get("value");		
		content["enddate"] = ttl.utilities.toJsonDate(this.enddate.get("value"));
		content["startdate"] = ttl.utilities.toJsonDate(this.startdate.get("value"));
		
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._cancel_call_back),
			url:'/iadmin/clippings/cancel_order',
			content: content}));
		
	},	
	_reactivate_call:function(response)
	{
		if ( response.success=="OK")
		{
			alert("Clipping reactivated");
			this._dialog.hide();
		}
		else
		{
			alert("Problem");
		}
	},	
	_reactivate:function()
	{
		this.enddate.set("value", this.licence_expire);
		var content = this.form.get("value");
		content["enddate"] = ttl.utilities.toJsonDate(this.enddate.get("value"));
		content["startdate"] = ttl.utilities.toJsonDate(this.startdate.get("value"));
		
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._reactivate_call_back),
			url:'/iadmin/clippings/reactivate_order',
			content: content}));
		
	},
	_Client_Add_Call:function(action, data )
	{
		this._change_client_enabled==true
		this.clientid.set("value", data.clientid );
		this.client_add_dialog.hide();
	},
	_New_Client:function()
	{
		this.client_add_ctrl.Load(-1, this._Client_Add_Call_Back);
		this.client_add_dialog.show();
	}
	
});

}

if(!dojo._hasResource["prmax.iadmin.clippings.update_expiry_date"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.clippings.update_expiry_date"] = true;
//-----------------------------------------------------------------------------
// Name:    update_expiry_date.js
// Author:  
// Purpose:
// Created: Sept 2017
//
// To do:
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.clippings.update_expiry_date");



dojo.declare("prmax.iadmin.clippings.update_expiry_date",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div><br/>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='onSubmit:\"return false\",\"class\":\"common_prmax_layout\"'>\r\n\t\t<label class=\"label_2\">New Expiry Date:</label><input data-dojo-props='name:\"enddate\",style:\"width:10em\",type:\"text\",required:true' data-dojo-attach-point=\"enddate\" data-dojo-type=\"dijit.form.DateTextBox\"/><br/><br/>\r\n\t\t<button data-dojo-attach-event=\"onClick:_close\" data-dojo-attach-point=\"closebtn\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Close\",style:\"float:left\"'></button>\r\n\t\t<button data-dojo-attach-event=\"onClick:_update_expiry_date\" data-dojo-attach-point=\"upddatebtn\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Update\",style:\"float:right\"'></button>\r\n\t</form><br/>\r\n</div>\r\n\r\n",
	constructor: function()
	{
		this._update_expiry_date_call_back = dojo.hitch(this,this._update_expiry_date_call);
	},
	postCreate:function()
	{
		this._clear();
		this.inherited(arguments);
	},
	load:function(dialog, icustomerid)
	{
		this._dialog = dialog;
//		this.icustomerid.set("value",icustomerid);
		this._icustomerid = icustomerid;
	},
	_close:function()
	{
		this._dialog.hide();
	},
	_update_expiry_date:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false )
		{
			alert("Please Enter Details");
			return false;
		}

		var content = {};
		content["enddate"] = ttl.utilities.toJsonDate(this.enddate.get("value"));
		content["icustomerid"] = this._icustomerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._update_expiry_date_call_back),
			url:'/iadmin/clippings/update_expiry_date',
			content: content}));
	},
	_update_expiry_date_call:function(response)
	{
		if ( response.success == "OK" )
		{
			this._dialog.hide();
			this._clear();
			dojo.publish("/clippings/order/update_expiry_date" , [ttl.utilities.toJsonDate2(this.enddate.get("value"))]);
		}
		else
		{
			alert("Problem Updating Expiry Date");
		}
	},
	_clear:function()
	{
		this.enddate.set("value",this.end_date);
	},
	clear:function()
	{
		this._clear();
	},

});

}

if(!dojo._hasResource["prmax.iadmin.clippings.view"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.clippings.view"] = true;
//-----------------------------------------------------------------------------
// Name:    view.js
// Author:  Chris Hoy
// Purpose:
// Created:
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.clippings.view");







dojo.declare("prmax.iadmin.clippings.view",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div>\r\n\t<div  data-dojo-attach-point=\"border_control\" data-dojo-type=\"dijit.layout.BorderContainer\" data-dojo-props='gutters:false,\"class\":\"clientview\",style:\"width:100%;height:100%;overflow: hidden\"'>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-attach-point=\"controls\" data-dojo-props='region:\"top\",style:\"height:42px;width:100%;overflow:hidden\", \"class\":\"std_menu_view\"'>\r\n\t\t\t<div data-dojo-type=\"dijit.Toolbar\" data-dojo-props='style:\"float:left;height:99%;width:100%;padding:0px;margin:0px\",\"class\":\"dijitToolbarTop\"'>\r\n\t\t\t\t<div data-dojo-attach-event=\"onClick:_add\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"fa fa-plus fa-3x\",label:\"Add Order\"'></div>\r\n\t\t\t\t<div data-dojo-attach-event=\"onClick:_update_expiry_date\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='iconClass:\"fa fa-pencil fa-3x\",label:\"Update Expiry Date\"'></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div data-dojo-type=\"dijit.layout.ContentPane\" data-dojo-props='region:\"center\",style:\"width:100%;height:50%\"'>\r\n\t\t\t<div data-dojo-attach-point=\"grid\" data-dojo-type=\"dojox.grid.DataGrid\" data-dojo-props='style:\"height:100%;width:100%\",rowsPerPage:50,splitter:true'></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"clipping_add_dialog\" data-dojo-props='title:\"Add Clipping Order\"'>\r\n\t\t<div data-dojo-type=\"prmax.iadmin.clippings.add_order\" data-dojo-attach-point=\"clipping_add_ctrl\" data-dojo-props='mode:\"add\",\"class\":\"scrollpanel\",style:\"width:100%;height:100%\"'></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"clipping_upd_dialog\" data-dojo-props='title:\"Update Clipping Order\"'>\r\n\t\t<div data-dojo-type=\"prmax.iadmin.clippings.update_order\" data-dojo-attach-point=\"clipping_upd_ctrl\" data-dojo-props='\"class\":\"scrollpanel\",style:\"width:100%;height:100%\"'></div>\r\n\t</div>\r\n\t<div data-dojo-type=\"dijit.Dialog\" data-dojo-attach-point=\"update_expiry_date_dialog\" data-dojo-props='title:\"Update Expiry Date\"'>\r\n\t\t<div data-dojo-type=\"prmax.iadmin.clippings.update_expiry_date\" data-dojo-attach-point=\"update_expiry_date_ctrl\" data-dojo-props='\"class\":\"scrollpanel\",style:\"width:100%;height:100%\"'></div>\r\n\t</div>\r\n</div>\r\n\r\n",
	constructor: function()
	{
		this._clippings_orders_model = new dojox.data.JsonRestStore( {target:'/iadmin/clippings/list_orders', idAttribute:"clippingsorderid"});
		this._get_model_item_call=dojo.hitch(this,this._get_model_item);
		dojo.subscribe("/clippings/order/add",dojo.hitch(this,this._add_order_event));
		dojo.subscribe("/clippings/order/upd",dojo.hitch(this,this._update_order_event));
		dojo.subscribe("/clippings/order/update_expiry_date",dojo.hitch(this,this._update_expiry_date_event));

		this._icustomerid = null;
	},
	postCreate:function()
	{
		this.grid.set("structure",this.view1 );
		this.grid._setStore ( this._clippings_orders_model ) ;
		this.grid["onCellClick"] = dojo.hitch(this, this._on_cell_click_call);
		this.grid.onStyleRow = dojo.hitch(this, this._on_style_row_call);

		this.inherited(arguments);
	},
	_on_style_row_call:function(row)
	{
		try
		{
			var d = this._clippings_orders_model.getValue(this.grid.getItem(row.index), "enddate", null).split('-');
			var dd = new Date(d[0], d[1]-1, d[2]);

			if (dd < new Date())
			{
				row.customClasses += " prmaxOverDueRow";
			}
		}
		catch(e)
		{
		}
	},
	_on_cell_click_call:function ( e )
	{
		this._row = this.grid.getItem(e.rowIndex);

		this.clipping_upd_ctrl.load(this._row.clippingsorderid, this.clipping_upd_dialog, this._icustomerid, this.end_date );

		this.grid.selection.clickSelectEvent(e);
	},
	view1:{
		cells: [[
			{name: 'Clipping Order',width: "auto",field:"description"},
			{name: 'Source',width: "auto",field:"clippingsourcedescription"},
			{name: 'Price Level',width: "auto",field:"clippingpriceserviceleveldescription"},
			{name: 'Keywords',width: "auto",field:"keywords"},
			{name: 'Status',width: "auto",field:"clippingorderstatusdescription"},
			{name: 'Expiry Date',width: "auto",field:"enddate"},
			{name: ' ',width: "15px",styles: 'text-align: center;', width: "20px",formatter:ttl.utilities.formatRowCtrl}
			]]
	},
	resize:function()
	{
		this.border_control.resize(arguments[0]);
	},
	_add:function()
	{
		this.clipping_add_ctrl.clear();
		this.clipping_add_dialog.show();
	},
	load:function(icustomerid, end_date)
	{
		this.end_date = end_date;
		this._icustomerid = icustomerid;
		this.grid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),{icustomerid:icustomerid}));
		this.clipping_add_ctrl.load(this.clipping_add_dialog, icustomerid, end_date );

	},
	_add_order_event:function(order)
	{
		this._clippings_orders_model.newItem(order);
	},
	_update_order_event:function(order)
	{
		this.tmp_row = null;
		var item  = {identity:order.clippingsorderid,
				onItem:  this._get_model_item_call};
		this._clippings_orders_model.fetchItemByIdentity(item);
		if (this.tmp_row)
		{
			this._clippings_orders_model.setValue(  this.tmp_row, "description", order.description, true );
			this._clippings_orders_model.setValue(  this.tmp_row, "nbrclips", order.nbrclips, true );
			this._clippings_orders_model.setValue(  this.tmp_row, "clippingpriceserviceleveldescription", order.clippingpriceserviceleveldescription, true );
			this._clippings_orders_model.setValue(  this.tmp_row, "keywords", order.keywords, true );
			this._clippings_orders_model.setValue(  this.tmp_row, "enddate", order.enddate, true );
		}
	},
	_update_expiry_date_event:function(enddate)
	{
		for (var x =0; x <= this.grid._by_idx.length -1; x++ )
		{
			this._clippings_orders_model.setValue(  this.grid._by_idx[x].item, "enddate", enddate, true );
		}
	},
	_get_model_item:function()
	{
		this.tmp_row = arguments[0];
	},
	_update_expiry_date:function()
	{
		this.update_expiry_date_ctrl.clear();
		this.update_expiry_date_ctrl.load(this.update_expiry_date_dialog, this._icustomerid);
		this.update_expiry_date_dialog.show();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.extendedsettings"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.extendedsettings"] = true;
//-----------------------------------------------------------------------------
// Name:    extendedsettings.js
// Author:  Chris Hoy
// Purpose:
// Created:
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.extendedsettings");

dojo.declare("prmax.iadmin.extendedsettings",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div class=\"common_prmax_layout\">\r\n<br/>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='onSubmit:\"return false\",\"class\":\"common_prmax_layout\"'>\r\n\t\t<input data-dojo-attach-point=\"customerid\" data-dojo-props='name:\"icustomerid\",type:\"hidden\"' data-dojo-type=\"dijit.form.TextBox\" />\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"search_show_job_roles\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"search_show_job_roles\",type:\"checkbox\"'/> Job Title Search</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"search_show_coverage\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"search_show_coverage\",type:\"checkbox\"'/> Coverage Search</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"search_show_profile\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"search_show_profile\",type:\"checkbox\"'/> Profile Search</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"search_show_smart\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"search_show_smart\",type:\"checkbox\"'/> Smart Search</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"view_outlet_results_colours\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"view_outlet_results_colours\",type:\"checkbox\"'/> Outlet Results Colours </label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"no_distribution\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"no_distribution\",type:\"checkbox\"'/> No Distribution </label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"distributionistemplated\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"distributionistemplated\",type:\"checkbox\"'/> Distribution is Templated</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"no_export\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"no_export\",type:\"checkbox\"'/> No Export (Excel)</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"has_clickthrought\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"has_clickthrought\",type:\"checkbox\"'/> Click Through Release</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"cla\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"cla\",type:\"checkbox\",value:\"2\"'/> CLA Licence</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"nla\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"nla\",type:\"checkbox\",value:\"3\"'/> NLA Licence</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"extended_security\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"extended_security\",type:\"checkbox\"'/> Extended Security</label><br/>\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"required_client\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"required_client\",type:\"checkbox\"'/> Required Client</label><br/><br/><br/>\r\n\t\t<br/><br/>\r\n\t\t<label class=\"label_2\">IP Restrictions</label><input data-dojo-props='type:\"text\",name:\"valid_ips\"' data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"valid_ips\" ><br/>\r\n\t\t<br/><br/>\r\n\t\t<button data-dojo-attach-event=\"onClick:_update\" data-dojo-attach-point=\"updatebtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\",busyLabel:\"Please Wait Updating ...\",label:\"Update\",'></button><br/><br/>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._update_call_back = dojo.hitch(this,this._update_call);
	},
	load:function(customer, customermediaaccesstypes)
	{
		this.search_show_job_roles.set("checked", customer.search_show_job_roles);
		this.search_show_coverage.set("checked", customer.search_show_coverage);
		this.search_show_profile.set("checked", customer.search_show_profile);
		this.search_show_smart.set("checked", customer.search_show_smart);
		this.view_outlet_results_colours.set("checked", customer.view_outlet_results_colours);
		this.no_distribution.set("checked", customer.no_distribution);
		this.no_export.set("checked", customer.no_export);
		this.has_clickthrought.set("checked", customer.has_clickthrought);
		this.customerid.set("value", customer.customerid);
		this.distributionistemplated.set("checked", customer.distributionistemplated);
		this.cla.set("checked", false);
		this.nla.set("checked", false);
		this.extended_security.set("checked", customer.extended_security);
		this.required_client.set("checked", customer.required_client);
		this.valid_ips.set("value", customer.valid_ips);
		if (customermediaaccesstypes != null && customermediaaccesstypes.length > 0)
		{
			for (var i = 0; i < customermediaaccesstypes.length; i++) {
				if (customermediaaccesstypes[i] == 2) //CLA
				{
					this.cla.set("checked", true);
				}
				if (customermediaaccesstypes[i] == 3)//NLA
				{
					this.nla.set("checked", true);
				}
			}
		}
	},
	_update:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
				load: this._update_call_back,
				url:'/iadmin/update_extendedsettings',
				content: this.form.get("value")
			}));
	},
	_update_call:function(response)
	{
		if ( response.success=="OK")
		{
			dojo.publish("extended_settings",[response.data]);
			alert("Updated");
		}
		else
		{
			alert("Problem");
		}

		this.updatebtn.cancel();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.emailserver"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.emailserver"] = true;
//-----------------------------------------------------------------------------
// Name:    emailserver.js
// Author:
// Purpose:
// Created: March 2018
//
// To do:
//
//
//-----------------------------------------------------------------------------
dojo.provide("prmax.iadmin.emailserver");



dojo.declare("prmax.iadmin.emailserver",
	[ ttl.BaseWidget ],{
	widgetsInTemplate: true,
	templateString:"<div class=\"common_prmax_layout\">\r\n<br/>\r\n\t<form data-dojo-attach-point=\"form\" data-dojo-type=\"dijit.form.Form\" data-dojo-props='onSubmit:\"return false\",\"class\":\"common_prmax_layout\"'>\r\n\t\t<input data-dojo-attach-point=\"customerid\" data-dojo-props='name:\"icustomerid\",type:\"hidden\"' data-dojo-type=\"dijit.form.TextBox\" />\r\n\t\t<label class=\"label_3\"><input data-dojo-attach-point=\"thirdparty\" data-dojo-type=\"dijit.form.CheckBox\" data-dojo-props='name:\"thirdparty\",type:\"checkbox\"' data-dojo-attach-event=\"onChange: _change\"/> Via 3rd Party</label><br/><br/><br/><br/>\r\n\r\n\t\t<label class=\"label_3\" data-dojo-attach-point=\"emailservertype_label\" data-dojo-props='\"class\":\"prmaxhidden\"'>Email Server Type</label><select data-dojo-props='\"class\":\"prmaxinput prmaxhidden\",name:\"emailservertypeid\",autoComplete:true,style:\"width:8em\"' data-dojo-type=\"dijit.form.FilteringSelect\" data-dojo-attach-point=\"emailservertypeid\" data-dojo-attach-event=\"onChange: _set_emailservertype\"></select></br>\r\n\r\n\t\t<label class=\"label_3\" data-dojo-attach-point=\"hostname_label\" data-dojo-props='\"class\":\"prmaxhidden\"'>Host Name</label><input data-dojo-props='\"class\":\"prmaxhidden\", type:\"text\",name:\"hostname\"' data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"hostname\" ><br/></br>\r\n\r\n\t\t<br/><br/>\r\n\t\t<button data-dojo-attach-event=\"onClick:_update\" data-dojo-attach-point=\"updatebtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='type:\"button\",busyLabel:\"Please Wait Updating ...\",label:\"Update\",'></button><br/><br/>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this._emailservertypes =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=emailservertypes"});
		this._update_call_back = dojo.hitch(this,this._update_call);
	},
	load:function(customer, emailserver)
	{
		this.thirdparty.set("checked", customer.thirdparty);
		this.customerid.set("value", customer.customerid);
		
		if (this.thirdparty.get("checked"))
		{
			dojo.removeClass(this.emailservertypeid.domNode, "prmaxhidden");		
			dojo.removeClass(this.emailservertype_label, "prmaxhidden");
			if (emailserver)
			{
				this.emailservertypeid.set("value", emailserver.emailservertypeid);
				if (this.emailservertypeid.get("value") == 2)
				{
					dojo.removeClass(this.hostname.domNode, "prmaxhidden");		
					dojo.removeClass(this.hostname_label, "prmaxhidden");
					this.hostname.set("value", emailserver.email_host);
				}
				else
				{
					dojo.addClass(this.hostname.domNode, "prmaxhidden");		
					dojo.addClass(this.hostname_label, "prmaxhidden");		
				}
			}
		}
		else
		{
			dojo.addClass(this.emailservertypeid.domNode, "prmaxhidden");		
			dojo.addClass(this.emailservertype_label, "prmaxhidden");
			dojo.addClass(this.hostname.domNode, "prmaxhidden");		
			dojo.addClass(this.hostname_label, "prmaxhidden");					
		}
	},
	postCreate:function()
	{
		this.emailservertypeid.set("store", this._emailservertypes);
		this.emailservertypeid.set("value", 1);
	},
	_change:function()
	{
		if (this.thirdparty.get("checked"))
		{
			dojo.removeClass(this.emailservertypeid.domNode, "prmaxhidden");		
			dojo.removeClass(this.emailservertype_label, "prmaxhidden");		
			if (this.emailservertypeid.get("value") == 2)
			{
				dojo.removeClass(this.hostname.domNode, "prmaxhidden");		
				dojo.removeClass(this.hostname_label, "prmaxhidden");		
			}
			else
			{
				dojo.addClass(this.hostname.domNode, "prmaxhidden");		
				dojo.addClass(this.hostname_label, "prmaxhidden");		
			}			
		}
		else
		{
			dojo.addClass(this.emailservertypeid.domNode, "prmaxhidden");		
			dojo.addClass(this.emailservertype_label, "prmaxhidden");		
			dojo.addClass(this.hostname.domNode, "prmaxhidden");		
			dojo.addClass(this.hostname_label, "prmaxhidden");		
		}
	},
	_set_emailservertype:function()
	{
		if (this.emailservertypeid.get("value") == 2)
		{
			dojo.removeClass(this.hostname.domNode, "prmaxhidden");		
			dojo.removeClass(this.hostname_label, "prmaxhidden");		
		}
		else
		{
			dojo.addClass(this.hostname.domNode, "prmaxhidden");		
			dojo.addClass(this.hostname_label, "prmaxhidden");		
		}
	
	},
	_update:function()
	{
		var content = {};
		content['icustomerid'] = this.customerid;
		dojo.xhrPost(
			ttl.utilities.makeParams({
				load: this._update_call_back,
				url:'/emailserver/update_emailserver',
				content: this.form.get("value")
			}));
	},
	_update_call:function(response)
	{
		if ( response.success=="OK")
		{
//			dojo.publish("extended_settings",[response.data]);
			alert("Updated");
		}
		else
		{
			alert("Problem");
		}

		this.updatebtn.cancel();
	}
});

}

if(!dojo._hasResource["prmax.iadmin.admin"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.admin"] = true;
dojo.provide("prmax.iadmin.admin");










































































































dojo.declare("prmax.iadmin.admin",
	[dijit._Widget, dijit._Templated, dijit._Container],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<div dojoType=\"dojo.data.ItemFileReadStore\" jsId=\"customerstatus_filter_store\"  url=\"/common/lookups?searchtype=customerstatus&filter=1\"></div>\r\n\t<div dojoType=\"dojo.data.ItemFileReadStore\" jsId=\"customerstatus_no_filter_store\"  url=\"/common/lookups?searchtype=customerstatus\"></div>\r\n<div  dojoAttachPoint=\"frame\" dojotype=\"dijit.layout.BorderContainer\" gutters=\"false\" style=\"width:100%;height:100%\" >\r\n\t<div dojoAttachPoint=\"frame_tabs\" dojotype=\"dijit.layout.TabContainer\"  style=\"width:100%;height:100%\" region=\"center\" gutters=\"false\">\r\n\t\t<div dojoAttachPoint=\"frame_tab_m\" dojotype=\"dijit.layout.BorderContainer\" gutters=\"false\" title=\"Maintenance\" style=\"width:100%;height:100%\" >\r\n\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" region=\"top\" style=\"width:100%\" >\r\n\t\t\t\t<div style=\"height:40px;width:100%;overflow:hidden;padding:0px;margin:0px\" class=\"searchresults\">\r\n\t\t\t\t\t<div style=\"height:100%;width:15%;float:left;padding:0px;margin:0px\" class=\"dijitToolbar prmaxrowdisplaylarge\">Time</div>\r\n\t\t\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left;height:100%;width:85%;padding:0px;margin:0px\" >\r\n\t\t\t\t\t\t<div dojoType=\"dijit.form.DropDownButton\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\">\r\n\t\t\t\t\t\t\t<span>Filter  By</span>\r\n\t\t\t\t\t\t\t<div dojoType=\"dijit.TooltipDialog\" title=\"Enter Project filter\" dojoAttachEvent=\"execute: _ExecuteCustomerFilter\">\r\n\t\t\t\t\t\t\t\t<table width=\"500px\">\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Status</label></td><td><select name=\"statusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"filter_customer_statusid\" store=\"customerstatus_filter_store\"></select></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Customer Type</label></td><td><select name=\"customertypeid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"filter_customertypeid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Customer Source</label></td><td><select name=\"customersourceid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"filter_customersourceid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Financial Status</label></td><td><select name=\"financialstatusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"filter_financialstatus\" ></select></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Customer Name</label></td><td><input type=\"text\" name=\"customername\" dojoType=\"dijit.form.TextBox\" dojoAttachPoint=\"filter_customername\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Account Nbr</label></td><td><input type=\"text\" name=\"accountnbr\" dojoType=\"dijit.form.TextBox\" dojoAttachPoint=\"filter_accountnbr\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Not Expired</label></td><td><input type=\"checkbox\" name=\"licence_expired\" dojoAttachPoint=\"filter_licence_expired\" dojoType=\"dijit.form.CheckBox\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Monitoring</label></td><td><select name=\"monitoringstatusid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"filter_monitoringstatusid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Monitoring Source</label></td><td><select name=\"clippingsourceid\" autoComplete=\"true\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" dojoAttachPoint=\"filter_clippingsourceid\" ></select></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Email</label></td><td><input type=\"text\" name=\"email\" dojoType=\"dijit.form.TextBox\" dojoAttachPoint=\"filter_customeremail\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Is Internal</label></td><td><input type=\"text\" name=\"isinternal\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"filter_isinternal\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >User Name</label></td><td><input type=\"text\" name=\"contactname\" dojoType=\"dijit.form.TextBox\" dojoAttachPoint=\"filter_contactname\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Invoice Nbr</label></td><td><input type=\"text\" name=\"invoicenbr\" dojoType=\"dijit.form.TextBox\" dojoAttachPoint=\"filter_invoicenbr\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >Credit Nt. Nbr</label></td><td><input type=\"text\" name=\"creditnotenbr\" dojoType=\"dijit.form.TextBox\" dojoAttachPoint=\"filter_creditnotenbr\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\"><label >UnAllocated</label></td><td><input type=\"checkbox\" name=\"unallocated\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"filter_unallocated\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td align=\"left\"><button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachEvent=\"onClick:_ClearFilter\">Clear Filter by</button></td>\r\n\t\t\t\t\t\t\t\t\t\t<td align=\"right\"><button dojoType=\"dijit.form.Button\" type=\"submit\" name=\"submit\">Filter by</button></td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div dojoType=\"dijit.form.Button\" dojoAttachEvent=\"onClick:_Logout\" showLabel=\"true\">Logout</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" region=\"left\" style=\"width:50%\" splitter=\"true\" gutters=\"false\" >\r\n\t\t\t\t<div dojoAttachPoint=\"customergrid\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"50\" structure=\"PRMAX.iadmin.gridlayout.main_view\" style=\"width:100%;height:100%\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div  dojoType=\"dijit.layout.BorderContainer\" region=\"center\" gutters=\"false\" class=\"prmaxhidden\" dojoAttachPoint=\"detailsview\" >\r\n\t\t\t\t<div dojoAttachPoint=\"tabs\" dojoType=\"dijit.layout.TabContainer\" style=\"width:99%;height:100%\" region=\"center\" gutters=\"false\">\r\n\t\t\t\t\t<div dojoType=\"dijit.layout.BorderContainer\" gutters=\"false\" title=\"Options\">\r\n\t\t\t\t\t\t<div dojoType=\"dijit.layout.TabContainer\" region=\"center\" style=\"width:99%;height:100%\" dojoAttachPoint=\"options_tab\">\r\n\t\t\t\t\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" style=\"width:99%;height:100%\" title=\"Details\" dojoAttachPoint=\"options_tab_details\">\r\n\t\t\t\t\t\t\t\t<table style=\"width:100%;border-collapse:collapse;\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Name</td><td class=\"prmaxrowdisplay\" dojoAttachPoint=\"displayname\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Customer Source</td><td data-dojo-attach-point=\"customersourcedescription\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Status</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<select dojoAttachPoint=\"statusid\"\r\n\t\t\t\t\t\t\t\t\t\t\tautoComplete=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tdojoType=\"dijit.form.FilteringSelect\"\r\n\t\t\t\t\t\t\t\t\t\t\tlabelType=\"html\"\r\n\t\t\t\t\t\t\t\t\t\t\tstore=\"customerstatus_no_filter_store\">\r\n\t\t\t\t\t\t\t\t\t\t\t</select><button dojoType=\"dojox.form.BusyButton\" label=\"Change Status\" dojoAttachPoint=\"statusidbutton\" dojoAttachEvent=\"onClick:_ChangeStatus\"></button>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Customer type</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<select dojoAttachPoint=\"customertypeid\"\r\n\t\t\t\t\t\t\t\t\t\t\tautoComplete=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tdojoType=\"dijit.form.FilteringSelect\"\r\n\t\t\t\t\t\t\t\t\t\t\tlabelType=\"html\"></select>\r\n\t\t\t\t\t\t\t\t\t\t\t<button dojoAttachEvent=\"onClick:_CustomerType\" dojoType=\"dijit.form.Button\" label=\"Set Customer Type\" type=\"button\" ></button>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Expire Date</td><td><div style=\"display:inline\" class=\"prmaxrowtag\" dojoAttachPoint=\"expire_display\"></div>&nbsp;<button type=\"button\" dojoType=\"dijit.form.Button\" label=\"Set Expire Date\" dojoAttachEvent=\"onClick:_SetExpireDate\" ></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Concurrent Count</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"setusercountform\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"logins\" dojoType=\"dijit.form.NumberTextBox\" dojoAttachPoint=\"logins\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<button dojoAttachPoint=\"setusercount\" dojoType=\"dijit.form.Button\" label=\"Set User Count\" type=\"submit\" ></button>\r\n\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">User Name Count</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"setupernamecount\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"nbrofusersaccounts\" dojoType=\"dijit.form.NumberTextBox\" dojoAttachPoint=\"nbrofusersaccounts\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<button dojoAttachPoint=\"setusercount\" dojoType=\"dijit.form.Button\" label=\"Set User Name Count\" type=\"submit\" ></button>\r\n\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Collateral Limit</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"collaterallimitform\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"collateral_size\" dojoType=\"dijit.form.NumberTextBox\" dojoAttachPoint=\"collateral_size\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<button dojoAttachPoint=\"collateral_sizecollateral_size_btn\" dojoType=\"dijit.form.Button\" label=\"Set Collateral Size\" type=\"submit\" ></button>\r\n\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Email Day Limit</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"emaillimitform\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"max_emails_for_day\" dojoType=\"dijit.form.NumberTextBox\" dojoAttachPoint=\"max_emails_for_day\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<button dojoAttachPoint=\"email_limit_btn\" dojoType=\"dijit.form.Button\" label=\"Set Email Day Limit\" type=\"submit\" ></button>\r\n\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" valign=\"top\">Demo Status</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"demoaccountform\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t\t<table style=\"width:100%;border-collapse:collapse;\" cellspacing=\"0\" cellpadding=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" width=\"20%\">Core</td><td align=\"left\"><input type=\"text\" name=\"demo\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"demoaccount_check\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Features</td><td><input type=\"text\" name=\"isadvancedemo\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"isadvancedemo\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Monitoring</td><td><input type=\"text\" name=\"ismonitoringdemo\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"ismonitoringdemo\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr><td></td><td><button dojoAttachPoint=\"demoaccountset\" dojoType=\"dijit.form.Button\" label=\"Change Demo Status\" type=\"submit\" ></button>\r\n\t\t\t\t\t\t<button dojoAttachPoint=\"reactive_demo\" dojoType=\"dijit.form.Button\" label=\"Re-Activate Demo\" type=\"button\" class=\"prmaxhidden\" dojoAttachEvent=\"onClick:_ReActiveDemo\" ></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Email Enabled</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"emailenabledform\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"useemail\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"useemail_check\" value=\"1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<label> Email Test Mode</label>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"emailistestmode\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"emailistestmode_check\" value=\"1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<button dojoAttachPoint=\"useemailset\" dojoType=\"dijit.form.Button\" label=\"Change Email Status\" type=\"submit\" ></button>\r\n\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Is Internal Account</td><td>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"isinternal\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"isinternal\">\r\n\t\t\t\t\t\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" label=\"Change Internal Status\" type=\"button\" dojoAttachEvent=\"onClick:_ChangeInternalStatus\"></button>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Delete Account</td><td><button dojoAttachPoint=\"deleteaccount\" dojoAttachEvent=\"onClick: _DeleteAccount\" dojoType=\"dijit.form.Button\" label=\"Delete Account\" type=\"button\" ></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td valign=\"top\" class=\"prmaxrowtag\">Modules</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Professional</td><td><input dojoAttachPoint=\"is_bundle\" name=\"is_bundle\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" dojoAttachEvent=\"_bundle_settings\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Features</td><td><input dojoAttachPoint=\"advancefeatures\" name=\"advancefeatures\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Crm</td><td><input dojoAttachPoint=\"crm\" name=\"crm\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >International Data</td><td><input dojoAttachPoint=\"has_international_data\" name=\"has_international_data\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td align=\"right\" class=\"prmaxrowtag\" >Monitoring</td><td><input dojoAttachPoint=\"updatum\" name=\"updatum\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" dojoAttachEvent=\"onClick:_CheckLayout\" ></td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td><table width=\"100%\" dojoAttachPoint=\"max_users_monitoring\" class=\"prmaxhidden\"><tr><td class=\"prmaxrowtag\" >Max Logins</td><td><input type=\"text\" name=\"maxmonitoringusers\" dojoType=\"dijit.form.NumberTextBox\" dojoAttachPoint=\"maxmonitoringusers\" ></td></tr></table></td>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >News Room's</td><td><input dojoAttachPoint=\"has_news_rooms\" name=\"has_news_rooms\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Global News Room's</td><td><input dojoAttachPoint=\"has_global_newsroom\" name=\"has_global_newsroom\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >SEO</td><td><input dojoAttachPoint=\"seo\" name=\"seo\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" dojoAttachEvent=\"onChange:_ChangeSeoOption\"></td><td align=\"right\" class=\"prmaxrowtag prmaxhidden\" dojoAttachPoint=\"seotranslation_node\" >SEO Translations<input dojoAttachPoint=\"seotranslation\" name=\"seotranslation\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Journo Requests</td><td><input dojoAttachPoint=\"has_journorequests\" name=\"has_journorequests\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Clippings</td><td><input dojoAttachPoint=\"has_clippings\" name=\"has_clippings\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\" ></td><td><button dojoAttachEvent=\"onClick:_UpdateModules\" dojoType=\"dijit.form.Button\" label=\"Update Modules\" type=\"button\" ></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t</table></td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Support User</td><td>\r\n\t\t\t\t\t\t\t\t\t\t\t<select dojoAttachPoint=\"support_userid\" autoComplete=\"true\" searchAttr=\"name\" dojoType=\"dijit.form.FilteringSelect\" labelType=\"html\" required=\"true\"></select>\r\n\t\t\t\t\t\t\t\t\t\t\t<button class=\"prmaxbutton\" type=\"button\" dojoAttachEvent=\"onClick:_SetCustomer\" dojoType=\"dijit.form.Button\" label=\"Set Support User to Customer\"></button>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">SEO Free Qty</td><td class=\"prmaxrowtag\"><button data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_SetSeoCount\" data-dojo-props='label:\"Set SEO Free Count\"'></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Extended Email Subject</td><td>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"has_extended_email_subject\" dojoType=\"dijit.form.CheckBox\" dojoAttachPoint=\"has_extended_email_subject\">\r\n\t\t\t\t\t\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" label=\"Change Extended Subject\" type=\"button\" dojoAttachEvent=\"onClick:_change_extended_subject\"></button>\r\n\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" style=\"width:99%;height:100%\" title=\"Menu Settings\" dojoAttachPoint=\"options_tab_menusettings\">\r\n\t\t\t\t\t\t\t\t<table style=\"width:100%;border-collapse:collapse;\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t\t\t\t\t\t<tr><td>&nbsp;</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td>&nbsp;</td></tr>\r\n\t\t\t\t\t\t\t\t\t<tr><td valign=\"top\" class=\"prmaxrowtag\">Private Menu</td><td>\r\n\t\t\t\t\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td>&nbsp;</td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td>&nbsp;</td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >New Outlet</td><td><input dojoAttachPoint=\"pm_new_outlet\" name=\"pm_new_outlet\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >New Freelance</td><td><input dojoAttachPoint=\"pm_new_freelance\" name=\"pm_new_freelance\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Collateral</td><td><input dojoAttachPoint=\"pm_collateral\" name=\"pm_collateral\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Exclusions</td><td><input dojoAttachPoint=\"pm_exclusions\" name=\"pm_exclusions\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Clients</td><td><input dojoAttachPoint=\"pm_clients\" name=\"pm_clients\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Issues</td><td><input dojoAttachPoint=\"pm_issues\" name=\"pm_issues\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Statements</td><td><input dojoAttachPoint=\"pm_statements\" name=\"pm_statements\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Questions</td><td><input dojoAttachPoint=\"pm_questions\" name=\"pm_questions\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Global Analysis</td><td><input dojoAttachPoint=\"pm_global_analysis\" name=\"pm_global_analysis\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Documents</td><td><input dojoAttachPoint=\"pm_documents\" name=\"pm_documents\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Private Media Channels</td><td><input dojoAttachPoint=\"pm_private_media_channels\" name=\"pm_private_media_channels\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >User Preferences</td><td><input dojoAttachPoint=\"pm_user_preferences\" name=\"pm_user_preferences\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Account Details</td><td><input dojoAttachPoint=\"pm_account_details\" name=\"pm_account_details\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Activity Log</td><td><input dojoAttachPoint=\"pm_activity_log\" name=\"pm_activity_log\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >User Admin</td><td><input dojoAttachPoint=\"pm_user_admin\" name=\"pm_user_admin\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >Financial</td><td><input dojoAttachPoint=\"pm_financial\" name=\"pm_financial\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td align=\"right\" class=\"prmaxrowtag\" >PRRequests</td><td><input dojoAttachPoint=\"pm_prrequests\" name=\"pm_prrequests\" type=\"checkBox\" dojoType=\"dijit.form.CheckBox\" value=\"true\"></td><td></td><td><button dojoAttachEvent=\"onClick:_UpdatePrivateMenu\" dojoType=\"dijit.form.Button\" label=\"Update Private Menu\" type=\"button\" ></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t</table></td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div dojoType=\"prmax.iadmin.PrmaxDataSets\" style=\"width:99%;height:100%\" title=\"Data Sets\" dojoAttachPoint=\"datasets\"></div>\r\n\t\t\t\t\t\t\t<div dojoType=\"prmax.iadmin.clippings.view\" style=\"width:99%;height:100%\" title=\"Clippings Order\" dojoAttachPoint=\"clippings\"></div>\r\n\t\t\t\t\t\t\t<div dojoType=\"prmax.iadmin.extendedsettings\" style=\"width:99%;height:100%\" title=\"Extended Settings\" dojoAttachPoint=\"extendedsettings\"></div>\r\n\t\t\t\t\t\t\t<div dojoType=\"prmax.iadmin.emailserver\" style=\"width:99%;height:100%\" title=\"Email Server\" dojoAttachPoint=\"emailserver\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div dojoType=\"dijit.layout.ContentPane\" title=\"Details\">\r\n\t\t\t\t\t\t<form dojoAttachPoint=\"customerForm\" onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t<table class=\"prmaxtable\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\">\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" style=\"width:30%\">Business Name</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"customername\" name=\"customername\" type=\"text\" trim=\"true\" required=\"true\" invalidMessage=\"Please Enter the name of the business\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Is Individual</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"individual\" name=\"individual\" dojoType=\"dijit.form.CheckBox\" ></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Customer Source</td><td><select class=\"prmaxinput\" name=\"customersourceid\" dojoAttachPoint=\"customersourceid\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select>\r\n\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Contact Name</td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Title</td><td><input class=\"prmaxinput\" name=\"contact_title\" dojoAttachPoint=\"contact_title\" type=\"text\" trim=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 2em;\" ></input></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >First Name</td><td><input class=\"prmaxinput\" name=\"contact_firstname\" dojoAttachPoint=\"contact_firstname\" type=\"text\" trim=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 8em;\" ></input></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Surname</td><td><input class=\"prmaxrequired\" name=\"contact_surname\" dojoAttachPoint=\"contact_surname\" type=\"text\" trim=\"true\" dojoType=\"dijit.form.TextBox\" style=\"width: 12em;\"></input></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Job Title</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"contactjobtitle\" name=\"contactjobtitle\" type=\"text\" trim=\"true\" maxlength=\"80\"  dojoType=\"dijit.form.TextBox\" ></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\">Address</td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Address:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"address1\" name=\"address1\" type=\"text\" size=\"40\" required=\"true\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Address 2:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"address2\" name=\"address2\" type=\"text\" size=\"40\" maxlength=\"80\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Town</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"townname\" name=\"townname\" type=\"text\" size=\"30\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >County</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"county\" name=\"county\" type=\"text\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Postcode:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"postcode\" name=\"postcode\" type=\"text\" style=\"width:10em\" maxlength=\"10\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Email:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"email\" name=\"email\" type=\"text\" size=\"40\" maxlength=\"80\" trim=\"true\" required=\"true\" dojoType=\"dijit.form.ValidationTextBox\" regExpGen=\"dojox.validate.regexp.emailAddress\" trim=\"true\" invalidMessage=\"invalid email address\" size=\"40\" maxlength=\"70\"/></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Tel:</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"tel\" name=\"tel\" type=\"text\" size=\"25\" maxlength=\"40\" dojoType=\"dijit.form.TextBox\"/></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Country</td><td><select class=\"prmaxinput\" name=\"countryid\" dojoAttachPoint=\"countryid\" style=\"width:15em\" dojoType=\"dijit.form.FilteringSelect\" autoComplete=\"true\"></select></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" align=\"right\" >Vat No</td><td><input class=\"prmaxinput\" dojoAttachPoint=\"vatnumber\" trim=\"true\" name=\"vatnumber\" type=\"text\" size=\"25\" maxlength=\"40\" dojoType=\"dijit.form.TextBox\" /></td></tr>\r\n\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" colspan=\"2\" align=\"right\"><button iconClass=\"dijitPrmaxIcon dijitPrmaxUpdate\" dojoAttachPoint=\"saveNode\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Saving...\" type=\"button\" dojoAttachEvent=\"onClick:_CustomerSave\" label=\"Save\" class=\"prmaxbutton\"></button></td></tr>\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div dojoType=\"prmax.iadmin.accounts.FinancialControl\" dojoAttachPoint=\"financialcontrol\" title=\"Financial Controls\"></div>\r\n\t\t\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" title=\"Financial Log\" >\r\n\t\t\t\t\t\t<div dojoAttachPoint=\"financialgrid\" dojoType=\"prmax.iadmin.accounts.FinancialView\" style=\"width:100%;height:100%\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div  dojoType=\"dijit.layout.BorderContainer\" title=\"Users\" gutters=\"false\">\r\n\t\t\t\t\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"top\" style=\"width:100%;height:42px\">\r\n\t\t\t\t\t\t\t<div style=\"height:40px;width:100%;overflow:hidden;padding:0px;margin:0px\" class=\"searchresults\">\r\n\t\t\t\t\t\t\t\t<div style=\"height:100%;width:15%;float:left;padding:0px;margin:0px\"class=\"prmaxrowdisplaylarge\">Manage Users</div>\r\n\t\t\t\t\t\t\t\t<div class=\"dijitToolbarTop\" dojoType=\"dijit.Toolbar\" style=\"float:left;height:100%;width:85%;padding:0px;margin:0px\" >\r\n\t\t\t\t\t\t\t\t\t<div dojoType=\"dijit.form.Button\" iconClass=\"PrmaxResultsIcon PrmaxResultsEmpty\" showLabel=\"true\" dojoAttachEvent=\"onClick:_Add_User\">Add User</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div  dojoType=\"dijit.layout.BorderContainer\" preload=\"true\" region=\"center\" gutters=\"false\" style=\"width:100%;height:100%\">\r\n\t\t\t\t\t\t\t<div dojoType=\"dijit.layout.ContentPane\" preload=\"true\" region=\"top\" style=\"width:100%;height:30%\" splitter=\"true\">\r\n\t\t\t\t\t\t\t\t<div dojoAttachPoint=\"usergrid\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"50\"structure=\"PRMAX.iadmin.gridlayout.user_view\" style=\"width:100%;height:100%\"></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"center\" >\r\n\t\t\t\t\t\t\t\t<div class=\"prmaxhidden\" dojoAttachPoint=\"userdetails\" style=\"width:99%;margin:2px\">\r\n\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"userdetailsform\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t<table class=\"prmaxtable\" width=\"100%\" border=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">Email Address</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"user_email_address\" name=\"email_address\" type=\"text\" trim=\"true\" required=\"true\" invalidMessage=\"Please Enter the name of the business\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">Login Name</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"user_user_name\" name=\"user_name\" type=\"text\" trim=\"true\" required=\"true\" invalidMessage=\"Please Enter the name of the business\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">Display Name</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"user_display_name\" name=\"display_name\" type=\"text\" trim=\"true\" required=\"true\" invalidMessage=\"Please Enter the name of the business\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">User Admin</td><td><input type=\"checkbox\" name=\"isuseradmin\" dojoAttachPoint=\"isuseradmin\" dojoType=\"dijit.form.CheckBox\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">No Direct Mail</td><td><input type=\"checkbox\" name=\"nodirectmail\" dojoAttachPoint=\"nodirectmail\" dojoType=\"dijit.form.CheckBox\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">See Invoices</td><td><input type=\"checkbox\" name=\"canviewfinancial\" dojoAttachPoint=\"canviewfinancial\" dojoType=\"dijit.form.CheckBox\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">Force Password Recovery</td><td><input type=\"checkbox\" name=\"force_passwordrecovery\" dojoAttachPoint=\"force_passwordrecovery\" dojoType=\"dijit.form.CheckBox\"></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr dojoAttachPoint=\"external_id_view\" class=\"prmaxhidden\"><td class=\"prmaxrowtag\" style=\"width:30%\">External Id</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"external_key\" name=\"external_key\" type=\"text\" trim=\"true\" required=\"false\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"prmaxrowtag\" align=\"left\"><button dojoAttachEvent=\"onClick:_send_login_details\" dojoType=\"dijit.form.Button\" type=\"button\" label=\"Send Login Details\" class=\"prmaxbutton\"></button></td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"prmaxrowtag\" align=\"right\"><button dojoAttachEvent=\"onClick:_UpdateUserDetails\" iconClass=\"dijitPrmaxIcon dijitPrmaxUpdate\" dojoAttachPoint=\"userdetailsNode\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Saving...\" type=\"button\" label=\"Change Details\" class=\"prmaxbutton\"></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"userpasswordform\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t<div dojoAttachPoint=\"userpassword\" dojoType=\"dojox.form.PasswordValidator\" name=\"password\" class=\"prmaxrowtag\" style=\"width:100%\">\r\n\t\t\t\t\t\t\t\t\t\t\t<table class=\"prmaxtable\" width=\"100%\" border=\"0\" >\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" width=\"30%\">Password:</td><td><input class=\"prmaxrequired\" type=\"password\" pwType=\"new\" /></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" >Verify:</td><td><input class=\"prmaxrequired\" type=\"password\" pwType=\"verify\" /></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" colspan=\"2\" align=\"right\"><button dojoAttachEvent=\"onClick:_UpdateUserPassword\" iconClass=\"dijitPrmaxIcon dijitPrmaxUpdate\" dojoAttachPoint=\"savePasswordNode\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Saving...\" type=\"button\" label=\"Change Password\" class=\"prmaxbutton\"></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t<div dojoAttachPoint=\"user_monitor_total_view\" class=\"prmaxhidden\">\r\n\t\t\t\t\t\t\t\t\t\t<form dojoAttachPoint=\"updatumform\"  onsubmit=\"return false\" dojoType=\"dijit.form.Form\">\r\n\t\t\t\t\t\t\t\t\t\t\t<label class=\"prmaxrowtag\"> User Has Monitoring</label><input type=\"checkbox\" name=\"hasmonitoring\" dojoAttachPoint=\"hasmonitoring\" dojoType=\"dijit.form.CheckBox\" dojoAttachEvent=\"onClick:_ChangeMonitoring\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div dojoAttachPoint=\"user_monitor_view\" class=\"prmaxhidden\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<input class=\"prmaxinput\" dojoAttachPoint=\"updatum_iuserid\" name=\"iuserid\" type=\"hidden\" dojoType=\"dijit.form.TextBox\" >\r\n\t\t\t\t\t\t\t\t\t\t\t\t<table class=\"prmaxtable\" width=\"100%\" border=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">Current Password</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"updatum_pwd_display\" type=\"text\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" ></td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>Copy too Support user </td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" style=\"width:30%\">Monitoring User Name</td><td width=\"70%\"><input class=\"prmaxinput\" dojoAttachPoint=\"updatum_username\" name=\"updatum_username\" type=\"text\" trim=\"true\" required=\"true\" invalidMessage=\"Missing User\" dojoType=\"dijit.form.ValidationTextBox\" ></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr><td colspan=\"2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div dojoAttachPoint=\"updatum_password\" dojoType=\"dojox.form.PasswordValidator\" name=\"updatum_password\" class=\"prmaxrowtag\" style=\"width:100%\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<table class=\"prmaxtable\" width=\"100%\" border=\"0\" >\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" width=\"30%\">Password:</td><td><input class=\"prmaxrequired\" type=\"password\" pwType=\"new\" /></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<tr><td class=\"prmaxrowtag\" >Verify:</td><td><input class=\"prmaxrequired\" type=\"password\" pwType=\"verify\" /></td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td></tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<button style=\"float:right;padding-right:15px\" dojoAttachEvent=\"onClick:_UpdateUpdatum\" iconClass=\"dijitPrmaxIcon dijitPrmaxUpdate\" dojoAttachPoint=\"saveUpdatum\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Saving...\" type=\"button\" label=\"Update Monitoring Details\" class=\"prmaxbutton\"></button>\r\n\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t<table class=\"prmaxtable\" width=\"99%\" >\r\n\t\t\t\t\t\t\t\t\t\t<tr><td><button iconClass=\"dijitPrmaxIcon dijitPrmaxDelete\" dojoAttachEvent=\"onClick:_DeleteUser\" dojoAttachPoint=\"deleteUserNode\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Saving...\" type=\"button\" label=\"Delete User\" class=\"prmaxbutton\"></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t\t\t<table class=\"prmaxtable\" width=\"99%\" >\r\n\t\t\t\t\t\t\t\t\t\t<tr><td><button iconClass=\"fa fa-unlock\" dojoAttachEvent=\"onClick:_UnlockUser\" dojoAttachPoint=\"unlockUserNode\" dojoType=\"dojox.form.BusyButton\" busyLabel=\"Please Wait Saving...\" type=\"button\" label=\"Unlock User\" class=\"prmaxhidden prmaxbutton\"></button></td></tr>\r\n\t\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div dojoAttachPoint=\"notestab\" dojoType=\"dijit.layout.BorderContainer\" title=\"Notes\" style=\"width:100%;height:100%\" gutters=\"false\">\r\n\t\t\t\t\t\t<div  dojoType=\"prmax.crm.viewer\" dojoAttachPoint=\"crmviewer\" region=\"center\" ></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" title=\"Audit\" style=\"width:100%;height:100%\">\r\n\t\t\t\t\t\t<div dojoAttachPoint=\"auditgrid\" dojoType=\"dojox.grid.DataGrid\" query=\"{ name:'*'}\" rowsPerPage=\"50\" structure=\"PRMAX.iadmin.gridlayout.audit_view\" style=\"width:100%;height:100%\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" title=\"Diary\" style=\"width:100%;height:100%\">\r\n\t\t\t\t\t\t<div dojoAttachPoint=\"diary_view\" dojoType=\"prmax.crm.task.viewer\" style=\"width:100%;height:100%\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div  dojoType=\"dijit.layout.ContentPane\" title=\"SEO\" style=\"width:100%;height:100%\">\r\n\t\t\t\t\t\t<div dojoAttachPoint=\"seo_view\" dojoType=\"prmax.iadmin.accounts.SeoView\" style=\"width:100%;height:100%\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div dojoAttachPoint=\"frame_tab_e\" dojotype=\"dijit.layout.BorderContainer\" gutters=\"false\" title=\"Extra Options\" style=\"width:100%;height:100%;overflow: hidden; border: 0; padding: 0; margin: 0\" >\r\n\t\t\t<div  dojotype=\"dojox.layout.ExpandoPane\"\ttitle=\"Options\"\tregion=\"left\" maxWidth=\"175\" style=\"width:15%;height:100%;overflow: hidden; border: 1px solid black; padding: 0; margin: 0\" >\r\n\t\t\t\t<div dojoType=\"dojo.data.ItemFileReadStore\" jsId=\"catStore\" url=\"/iadmin/options\"></div>\r\n\t\t\t\t<div dojoType=\"dijit.tree.ForestStoreModel\" jsId=\"catModel\" store=\"catStore\" query=\"{type: '1'} \"  childrenAttrs=\"children\" rootId=\"root\" rootLabel=\"root\" ></div>\r\n\t\t\t\t<div  dojoType=\"dijit.Tree\" model=\"catModel\" showRoot=\"false\" dojoAttachEvent=\"onClick: _SelectNode\" ></div>\r\n\t\t\t</div>\r\n\t\t\t<div dojoType=\"dijit.layout.StackContainer\" dojoAttachPoint=\"zone\" region=\"center\"  doLayout=\"true\" style=\"border:1px solid black\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n<div dojoAttachPoint=\"expirectrl\" dojoType=\"prmax.iadmin.sales.SetExpireDate\" ></div>\r\n<div dojoType=\"dijit.Dialog\" title=\"Add User\" dojoAttachPoint=\"adduserdialog\">\r\n\t<div  dojoAttachPoint=\"adduserctrl\" dojoType=\"prmax.user.AddUser\" ></div>\r\n</div>\r\n<form dojoAttachPoint=\"documentform\" target=\"_blank\" method=\"post\" action=\"/iadmin/viewpdf\">\r\n\t<input type=\"hidden\" name=\"audittrailid\"dojoAttachPoint=\"documentform_audittrailid\">\r\n</form>\r\n<form data-dojo-attach-point=\"htmlform\" target=\"_blank\" method=\"post\" action=\"/iadmin/viewhtml\">\r\n\t<input type=\"hidden\" name=\"audittrailid\" data-dojo-attach-point=\"htmlform_audittrailid\">\r\n</form>\r\n\r\n\r\n<div dojoType=\"dijit.Dialog\" title=\"New Task\" dojoAttachPoint=\"newtaskdialog\">\r\n\t<div dojoAttachPoint=\"newtaskctrl\" dojoType=\"prmax.iadmin.TaskAdd\" ></div>\r\n</div>\r\n<div dojoType=\"dijit.Dialog\" title=\"Re-Activate Demo\" dojoAttachPoint=\"reactiveatedialog\">\r\n\t<div dojoAttachPoint=\"reactiveatectrl\" dojoType=\"prmax.iadmin.sales.ReActivateDemo\" ></div>\r\n</div>\r\n<div data-dojo-type=\"prmax.iadmin.sales.SetFreeSEOCount\" data-dojo-attach-point=\"seofree\"></div>\r\n\r\n<div data-dojo-type=\"dijit.Dialog\"data-dojo-props='title:\"Reset Password and Send Login Details\"' data-dojo-attach-point=\"send_password_dialog\">\r\n\t<div data-dojo-attach-point=\"send_password_ctrl\" data-dojo-type=\"prmax.iadmin.support.ResetAndSend\" ></div>\r\n</div>\r\n\r\n<!-- -->\r\n",
	constructor: function()
	{
		this._LoadCustomerCall = dojo.hitch(this,this._LoadCustomer);
		this._ChangeStatusResponseCall = dojo.hitch(this,this._ChangeStatusResponse);
		this._UpdateUserPasswordResponseCall = dojo.hitch(this,this._UpdateUserPasswordResponse);
		this._UpdateUserDetailsResponseCall = dojo.hitch ( this , this._UpdateUserDetailsResponse);
		this._EmailResponseCall = dojo.hitch(this,this._EmailResponse);
		this._SetUserCountResponseCall = dojo.hitch(this,this._SetUserCountResponse);
		this._ChangeDemoStatusResponseCall = dojo.hitch(this,this._ChangeDemoStatusResponse);
		this._ChangeEmailStatusResponseCall = dojo.hitch(this,this._ChangeEmailStatusResponse);
		this._CustomerSaveResponseCall = dojo.hitch(this,this._CustomerSaveResponse);
		this._LoadUserCall = dojo.hitch(this, this._LoadUser);
		this._DeleteAccountResponseCall = dojo.hitch(this,this._DeleteAccountResponse);
		this._DeleteUserResponseCall = dojo.hitch(this,this._DeleteUserResponse);
		this._UnlockUserResponseCall = dojo.hitch(this,this._UnlockUserResponse);
		this._SetUserNameCountResponseCall = dojo.hitch(this,this._SetUserNameCountResponse);
		this._UserLoggedOffCallBack = dojo.hitch(this,this._UserLoggedOffCall);
		this._UpdatedCustomerTypeCallBack = dojo.hitch(this,this._UpdatedCustomerTypeCall);
		this._UpdatedInternalStatusCallBack = dojo.hitch(this, this._UpdatedInternalStatusCall);
		this._SetCustomerCallBack = dojo.hitch(this, this._SetCustomerCall);
		this._LoadCustomer2CallBack = dojo.hitch(this, this._LoadCustomer2Call);
		this._UpdateUpdatumCallBack = dojo.hitch(this, this._UpdateUpdatumCall);
		this._change_extended_subject_call_back = dojo.hitch(this,this._change_extended_subject_call);

		this.front_customerid = -1;
		this._show_all = 0;
		this._extended_security = false;

		dojo.subscribe(PRCOMMON.Events.User_Added, dojo.hitch(this,this._User_Added_Event));
		dojo.subscribe(PRCOMMON.Events.Show_Customer_Main, dojo.hitch(this,this._Show_Customer_Event));
		dojo.subscribe(PRCOMMON.Events.Expire_Date_Changed, dojo.hitch(this,this._Change_Expire_Date));
		dojo.subscribe("extended_settings", dojo.hitch(this, this._Change_Extended_Setting));

		this.customerlist= new prcommon.data.QueryWriteStore (
			{url:'/iadmin/customers',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true,
			nocallback:true
			});
		this.auditlist = new dojox.data.QueryReadStore (
			{url:'/iadmin/audit',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true
			});

		this.userlist = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/users',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});
		this._financialstatus_filter =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=financialstatus&ignore=1"});
		this._financialstatus_filter =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=financialstatus&ignore=1"});
		this._customersourceid =  new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=customersources"});
		this._clippingsourceid = new dojo.data.ItemFileReadStore ( { url:"/common/lookups?searchtype=clippingsource&nofilter=1"});

		this.user_model = new prcommon.data.QueryWriteStore (
			{url:'/iadmin/users_support',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			nocallback:true,
			urlPreventCache:true
			});


		this._Windows = new dojox.collections.Dictionary();

	},
	postCreate:function()
	{
		// get the front pager text
		this.filter_customertypeid.store = PRCOMMON.utils.stores.Customer_Types_Filter();
		this.filter_customersourceid.store = PRCOMMON.utils.stores.Customer_Source_Filter();
		this.filter_financialstatus.store = this._financialstatus_filter;
		this.customersourceid.store = this._customersourceid;

		this.customergrid._setStore(this.customerlist );
		this.auditgrid._setStore(this.auditlist);
		this.usergrid._setStore(this.userlist );
		this.customergrid['onStyleRow'] = dojo.hitch(this,this._OnStyleRow);
		this.customergrid['onRowClick'] = dojo.hitch(this,this._OnSelectRow);
		this.usergrid['onRowClick'] = dojo.hitch(this,this._OnSelectUserRow);
		this.auditgrid['onRowClick'] = dojo.hitch(this,this._OnSelectAudit);
		this.support_userid.store =  this.user_model ;

		this.filter_customer_statusid.set("value","-1");
		this.filter_customertypeid.set("value","-1");
		this.filter_financialstatus.set("value","-1");
		this.filter_customersourceid.set("value","-1");

		dojo.connect(this.setusercountform, "onSubmit", dojo.hitch(this,this._SetUserCount));
		dojo.connect(this.setupernamecount, "onSubmit", dojo.hitch(this,this._SetUserNameCount));
		dojo.connect(this.demoaccountform, "onSubmit", dojo.hitch(this,this._ChangeDemoStatus));
		dojo.connect(this.emailenabledform, "onSubmit", dojo.hitch(this,this._ChangeEmailStatus));
		dojo.connect(this.collaterallimitform, "onSubmit", dojo.hitch(this,this._Set_Collateral_Limit));
		dojo.connect(this.emaillimitform, "onSubmit", dojo.hitch(this,this._set_email_day_limit));

		this.countryid.store =  PRCOMMON.utils.stores.Countries();
		this.customertypeid.store = PRCOMMON.utils.stores.Customer_Types();
		this.filter_monitoringstatusid.store = this._init_monitoring_filter();
		this.filter_monitoringstatusid.set("value",-1);
		this.filter_clippingsourceid.store = this._clippingsourceid;
		this.filter_clippingsourceid.set("value",-1);

		this.inherited(arguments);
	},
	startup:function()
	{
		this.inherited(arguments);
	},
	_OnStyleRow:function(inRow)
	{
		ttl.GridHelpers.onStyleRow(inRow);
	},
	_LoadUser:function ( response )
	{
		if ( response.success == "OK" )
		{
			dojo.removeClass (this.userdetails, "prmaxhidden") ;
			this.user_email_address.set("value", response.data.email_address ) ;
			this.user_display_name.set("value",response.data.display_name ) ;
			this.user_user_name.set("value",response.data.user_name ) ;
			this.canviewfinancial.set("value",response.data.canviewfinancial ) ;
			this.force_passwordrecovery.set("value",response.data.force_passwordrecovery) ;
			this.isuseradmin.set("value",response.data.isuseradmin ) ;
			this.nodirectmail.set("value",response.data.nodirectmail);
			this.userpassword.reset();
			this.hasmonitoring.set("value", response.data.hasmonitoring );
			this._ChangeMonitoring();
			this.updatum_username.set("value", response.data.updatum_username);
			this.updatum_pwd_display.set("value", response.data.updatum_pwd_display);
			this.updatum_password.reset();
			this.updatum_iuserid.set("value", this._userrow.i.user_id );
			this.external_key.set("value", response.data.external_key);
			if (response.data.invalid_login_tries >= 10 || response.data.invalid_reset_tries >= 10)
			{
				dojo.removeClass(this.unlockUserNode.domNode, "prmaxhidden");
			}
			else
			{
				dojo.addClass(this.unlockUserNode.domNode, "prmaxhidden");
			}
		}
	},
	_ChangeMonitoring:function()
	{
		if (this.hasmonitoring.get("checked"))
			dojo.removeClass (this.user_monitor_view, "prmaxhidden") ;
		else
			dojo.addClass (this.user_monitor_view, "prmaxhidden") ;

	},
	_OnSelectUserRow:function(e)
	{
		this._userrow = this.usergrid.getItem(e.rowIndex);

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadUserCall,
			url:'/iadmin/get_user_internal',
			content:{'iuserid':this._userrow.i.user_id}
			}));
	},
	_OnSelectRow : function(e) {

		var row = this.customergrid.getItem(e.rowIndex);

		this._customerid = row.i.customerid;

		if ( e.cellIndex == 0)
		{
			this.newtaskctrl.Load ( PRMAX.utils.settings.groups, this.newtaskdialog, null, this._customerid ) ;
			this.newtaskdialog.show();
		}
		else
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._LoadCustomerCall,
				url:'/iadmin/get_internal',
				content:{'icustomerid':this._customerid}
				}));


			this._LoadTabs ( this._customerid);
			this.customergrid.selection.clickSelectEvent(e);
		}
	},
	_LoadTabs:function( icustomerid )
	{
		this.auditgrid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),{icustomerid:icustomerid}));
		this.usergrid.setQuery(dojo.mixin(ttl.utilities.getPreventCache(),{icustomerid:icustomerid}));
		this.financialgrid.Load(icustomerid);
		this.crmviewer.LoadControls( null, null, null, icustomerid );
	},
	_LoadCustomer:function( response )
	{
		this._customertypeid = response.data.cust.customertypeid;

		dojo.removeClass(this.detailsview.domNode,"prmaxhidden");
		dojo.addClass (this.userdetails, "prmaxhidden") ;

		this.detailsview.resize();
		this.statusid.set("value",response.data.cust.customerstatusid);
		dojo.attr(this.displayname,"innerHTML",response.data.cust.customername);
		dojo.attr(this.customersourcedescription,"innerHTML", response.data.custsource.customersourcedescription);
		this.logins.set("value", response.data.cust.logins);
		this.nbrofusersaccounts.set("value",response.data.cust.maxnbrofusersaccounts);
		this.collateral_size.set("value",response.data.cust.collateral_size);
		this.max_emails_for_day.set("value",response.data.cust.max_emails_for_day);

		// Modules
		this.advancefeatures.set("value",response.data.cust.advancefeatures);
		this.crm.set("value",response.data.cust.crm);
		this.seo.set("value", response.data.cust.seo);
		if (this.seo.checked == false)
		{
			dojo.addClass(this.seotranslation_node, "prmaxhidden");
			this.seotranslation.set("value", false);
		}
		else
		{
			dojo.removeClass(this.seotranslation_node, "prmaxhidden");
			this.seotranslation.set("value", response.data.cust.seotranslation);
		}

		this.updatum.set("value", response.data.cust.updatum);
		this.maxmonitoringusers.set("value", response.data.cust.maxmonitoringusers);
		this._CheckLayout( response.data.cust, response.data.mediaaccesstype, response.data.emailserver );

		this.customertypeid.set("value", response.data.cust.customertypeid);

		this.demoaccount_check.set("value", response.data.cust.isdemo);
		this.isadvancedemo.set("value", response.data.cust.isadvancedemo);
		this.ismonitoringdemo.set("value", response.data.cust.ismonitoringdemo);
		this.is_bundle.set("value", response.data.cust.is_bundle);
		this.has_news_rooms.set("value", response.data.cust.has_news_rooms);
		this.has_global_newsroom.set("value", response.data.cust.has_global_newsroom);
		this.has_journorequests.set("value", response.data.cust.has_journorequests);
		this.has_international_data.set("value", response.data.cust.has_international_data);
		this.has_clippings.set("value", response.data.cust.has_clippings);

		// load details
		this.customername.set("value", response.data.cust.customername);

		this.contact_title.set("value", response.data.cust.contact_title);
		this.contact_firstname.set("value", response.data.cust.contact_firstname);
		this.contact_surname.set("value", response.data.cust.contact_surname);
		this.individual.set("checked",response.data.cust.individual);
		this.customersourceid.set("value", response.data.cust.customersourceid);

		this.contactjobtitle.set("value", response.data.cust.contactjobtitle);
		this.address1.set("value", response.data.address.address1);
		this.address2.set("value", response.data.address.address2);
		this.townname.set("value", response.data.address.townname);
		this.county.set("value", response.data.address.county);
		this.postcode.set("value", response.data.address.postcode);
		this.email.set("value", response.data.cust.email);
		this.tel.set("value", response.data.cust.tel);
		this.countryid.set("value", response.data.cust.countryid );
		this.vatnumber.set("value", response.data.cust.vatnumber );

		this.useemail_check.set("value", response.data.cust.useemail);
		this.emailistestmode_check.set("value", response.data.cust.emailistestmode);
		this.isinternal.set("value", response.data.cust.isinternal);

		this.has_extended_email_subject.set("value", response.data.cust.has_extended_email_subject);
		if (response.data.cust.extended_security)
		{
			this._extended_security	= true;
		}

		dojo.attr(this.expire_display , "innerHTML", response.data.cust.licence_expire_display);

		// finanical details
		this.financialcontrol.Load ( response.data )
		this.diary_view.Load ( response.data.cust.customerid ) ;

		// if demo flag set then show reactivate butto n
		if ( response.data.cust.isdemo )
			dojo.removeClass(this.reactive_demo.domNode, "prmaxhidden");
		else
			dojo.addClass(this.reactive_demo.domNode, "prmaxhidden");

		// Load SEO
		this.seo_view.Load( response.data.cust.customerid );

		//load datasets
		this.datasets.load(response.data.cust.customerid, response.data.cust.has_international_data);

		//Clippings
		this.clippings.load(response.data.cust.customerid, response.data.cust.end_date);

		// check external user id
		if (response.data.cust.customertypeid == 23 || response.data.cust.customertypeid == 24)
		{
			dojo.removeClass(this.external_id_view,"prmaxhidden");
			this.external_key.set("required", true);
		}
		else
		{
			dojo.addClass(this.external_id_view,"prmaxhidden");
			this.external_key.set("required", false);
		}
		//Private Menu settings
		if (response.data.customermenusettings)
		{
			this.pm_new_outlet.set("value", response.data.customermenusettings.pm_new_outlet);
			this.pm_new_freelance.set("value", response.data.customermenusettings.pm_new_freelance);
			this.pm_collateral.set("value", response.data.customermenusettings.pm_collateral);
			this.pm_exclusions.set("value", response.data.customermenusettings.pm_exclusions);
			this.pm_clients.set("value", response.data.customermenusettings.pm_clients);
			this.pm_issues.set("value", response.data.customermenusettings.pm_issues);
			this.pm_statements.set("value", response.data.customermenusettings.pm_statements);
			this.pm_questions.set("value", response.data.customermenusettings.pm_questions);
			this.pm_global_analysis.set("value", response.data.customermenusettings.pm_global_analysis);
			this.pm_documents.set("value", response.data.customermenusettings.pm_documents);
			this.pm_private_media_channels.set("value", response.data.customermenusettings.pm_private_media_channels);
			this.pm_user_preferences.set("value", response.data.customermenusettings.pm_user_preferences);
			this.pm_account_details.set("value", response.data.customermenusettings.pm_account_details);
			this.pm_activity_log.set("value", response.data.customermenusettings.pm_activity_log);
			this.pm_user_admin.set("value", response.data.customermenusettings.pm_user_admin);
			this.pm_financial.set("value", response.data.customermenusettings.pm_financial);
			this.pm_prrequests.set("value", response.data.customermenusettings.pm_prrequests);
		}else{
			this._clear_private_menu_settings();
		}

		this.options_tab.selectChild(this.options_tab_details);
	},
	_clear_private_menu_settings:function()
	{
		this.pm_new_outlet.set("value", false);
		this.pm_new_freelance.set("value", false);
		this.pm_collateral.set("value", false);
		this.pm_exclusions.set("value", false);
		this.pm_clients.set("value", false);
		this.pm_issues.set("value", false);
		this.pm_statements.set("value", false);
		this.pm_questions.set("value", false);
		this.pm_global_analysis.set("value", false);
		this.pm_documents.set("value", false);
		this.pm_private_media_channels.set("value", false);
		this.pm_user_preferences.set("value", false);
		this.pm_account_details.set("value", false);
		this.pm_activity_log.set("value", false);
		this.pm_user_admin.set("value", false);
		this.pm_financial.set("value", false);
		this.pm_prrequests.set("value", false);

	},
	_Change_Expire_Date:function( cust )
	{
		dojo.attr(this.expire_display , "innerHTML", cust.licence_expire_display);

	},

	_ChangeStatus:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._ChangeStatusResponseCall),
			url:'/iadmin/changestatus',
			content:{'customerid':this._customerid,
						customerstatusid: this.statusid.get("value")}
				}));
	},
	_ChangeStatusResponse:function( response )
	{
		if (response.success=="OK")
		{
			alert("Status Changed was Successful");
		}
		else
		{
			alert("Status Changed Failed ");
		}
		this.statusidbutton.cancel();

	},
	_CustomerSaveResponse:function( response )
	{
		if (response.success=="OK")
		{
			alert("Customer Details Updated");
		}

		this.saveNode.cancel();

	},
	_CustomerSave:function ( )
	{
		var content = this.customerForm.get("value");
		content["icustomerid"]  = this._customerid ;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._CustomerSaveResponseCall),
			url:'/iadmin/update_customer',
			content:content
		}));

	},
	_EmailResponse:function( response )
	{
		this.sendemailbutton.cancel();
		alert("Email Queued");
	},
	_SendEmail:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._EmailResponseCall),
			url:'/iadmin/sendprimarypassword',
			content:{'customerid':this._customerid,
						customerstatusid: this.statusid.get("value")}
				}));
	},
	_ResetPassword:function()
	{

	},
	resize:function()
	{
		this.frame.resize(arguments[0]);
		this.inherited(arguments);
	},
	_SetExpireDate:function( response )
	{
		this.expirectrl.Load( this._customerid ) ;
	},
	_SetUserCountResponse:function( response )
	{
		if ( response.success == "OK" )
			alert("Concurrent User Count Re-Set");
		else
			alert("Problem Resetting Concurrent User Count");
	},
	_SetUserCount:function()
	{
		if (ttl.utilities.formValidator( this.setusercountform ) == false )
		{
			alert("form invalid");
			return false;
		}

		var content = this.setusercountform.get("value");
		content["icustomerid"] = this._customerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._SetUserCountResponseCall),
			url:'/iadmin/set_login_count',
			content:content}));
	},
	_SetUserNameCountResponse:function( response )
	{
		if ( response.success == "OK" )
			alert("Nbr of User Names Re-Set");
		else
			alert("Problem Resetting Nbr of User Names");
	},
	_SetUserNameCount:function()
	{
		if (ttl.utilities.formValidator( this.setupernamecount ) == false )
		{
			alert("form invalid");
			return false;
		}

		var content = this.setupernamecount.get("value");
		content["icustomerid"] = this._customerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._SetUserNameCountResponseCall),
			url:'/iadmin/set_users_count',
			content:content}));
	},
	_Set_Collateral_Limit:function()
	{
		if (ttl.utilities.formValidator( this.collateral_size ) == false )
		{
			alert("form invalid");
			return false;
		}

		var content = this.collaterallimitform.get("value");
		content["icustomerid"] = this._customerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._Set_Collateral_Limit_Response),
			url:'/iadmin/set_collateral_limit',
			content:content}));
	},
	_Set_Collateral_Limit_Response:function( response )
	{
		if ( response.success == "OK" )
			alert("Collateral Limit Updated");
		else
			alert("Collateral Limit Update Failed");
	},
	_set_email_day_limit:function()
	{
		if (ttl.utilities.formValidator( this.emaillimitform ) == false )
		{
			alert("form invalid");
			return false;
		}

		var content = this.emaillimitform.get("value");
		content["icustomerid"] = this._customerid;

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._set_email_day_limit_call),
			url:'/iadmin/set_max_emails_for_day',
			content:content}));
	},
	_set_email_day_limit_call:function( response )
	{
		if ( response.success == "OK" )
			alert("Email Limit Updated");
		else
			alert("Email Limit Update Failed");
	},
	_Set_Collateral_Limit_Response:function( response )
	{
		if ( response.success == "OK" )
			alert("Collateral Limit Updated");
		else
			alert("Collateral Limit Update Failed");
	},

	_ChangeDemoStatusResponse:function( response )
	{
		if ( response.success == "OK" )
			alert("Demo Status Changed");
		else
			alert("Problem Changing Demo Status ");
	},
	_ChangeDemoStatus:function()
	{
		var content = dojo.mixin ({'icustomerid':this._customerid}, this.demoaccountform.get("value"));

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._ChangeDemoStatusResponseCall),
			url:'/iadmin/set_demo_status',
			content:content}));
	},
	_ChangeEmailStatusResponse:function( response )
	{
		if ( response.success == "OK" )
			alert("Email Status Changed");
		else
			alert("Problem Changing Email Status ");
	},
	_ChangeEmailStatus:function()
	{
		var content = dojo.mixin ({'icustomerid':this._customerid}, this.emailenabledform.get("value"));

		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._ChangeEmailStatusResponseCall),
			url:'/iadmin/set_email_status',
			content:content}));

	},
	_SetTime:function( field )
	{
		dojo.attr( field ,"innerHTML",new Date().toString());
	},
	_UpdateUserDetails:function()
	{
		if (ttl.utilities.formValidator( this.userdetailsform ) == false )
		{
			alert("Invalid Info");
			this.userdetailsNode.cancel();
			return false;
		}

		if ( confirm("Update's users details"))
		{
			var content = this.userdetailsform.get("value");
			content["iuserid"] = this._userrow.i.user_id;
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._UpdateUserDetailsResponseCall),
				url:'/iadmin/update_user_details',
				content:content }));
		}
		return false;
	},
	_UpdateUserDetailsResponse:function ( response )
	{
		if ( response.success=="OK")
			alert("User Details Changed");
		else
			alert("Problem Changing user details");

		this.userdetailsNode.cancel();
	},
	_UpdateUpdatum:function()
	{
		if ( this.hasmonitoring.get("checked"))
		{
			if (ttl.utilities.formValidator( this.updatumform ) == false )
			{
				alert("Invalid Details");
				this.saveUpdatum.cancel();
				return false;
			}
		}

		if ( confirm("Update's Monitoring Details"))
		{
			var content = this.updatumform.get("value");

			content["updatum_password"] = this.updatum_password.value;
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._UpdateUpdatumCallBack),
				url:'/iadmin/update_updatum_password',
				content:content }));
		}
		return false;
	},
	_UpdateUpdatumCall:function( response )
	{
		if ( response.success=="OK")
		{
			alert("Updatum Details Changed");
		}
		else if ( response.success=="LI")
		{
			alert("Use Count for Monitoring Exceeded");
		}
		else
		{
			alert("Problem Changing Updatum details");
		}
		this.saveUpdatum.cancel();
	},
	_has_lower_case:function(str)
	{
		var i = 0;
		while (i <= str.length )
		{
			c = str.charAt(i);
			if (c == c.toLowerCase())
			{
				return true;
			}
			i++;
		}
		return false;
	},
	_has_upper_case:function(str)
	{
		var i = 0;
		while (i <= str.length )
		{
			c = str.charAt(i);
			if (c == c.toUpperCase())
			{
				return true;
			}
			i++;
		}
		return false;
	},
	_has_number:function(str)
	{
		var i = 0;
		while (i <= str.length )
		{
			c = str.charAt(i);
			if (parseInt(c))
			{
				return true;
			}
			i++;
		}
		return false;
	},
	_UpdateUserPassword:function()
	{
		if (ttl.utilities.formValidator( this.userpasswordform ) == false )
		{
			alert("Invalid Password");
			this.savePasswordNode.cancel();
			return false;
		}
		var userpassword = this.userpassword.value;
		if (this._extended_security == true)
		{
			if (userpassword.length < 8 || this._has_lower_case(userpassword) == false || this._has_upper_case(userpassword) == false || this._has_number(userpassword) == false)
			{
				alert("Please enter a valid password: minimum length 8 characters, at least one character upper case, one character lower case and one digit");
				this.savePasswordNode.cancel();
				return;
			}
		}
		if ( confirm("Update's users password"))
		{
			var content = this.userpasswordform.get("value");

			content["iuserid"] = this._userrow.i.user_id;
			content["password"] = this.userpassword.value;
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._UpdateUserPasswordResponseCall),
				url:'/iadmin/update_user_password',
				content:content }));
		}
		return false;
	},
	_UpdateUserPasswordResponse:function( response )
	{
		if ( response.success=="OK")
			alert("Password Changed");
		else
			alert("Problem Chnaging user password");

		this.savePasswordNode.cancel();
	},
	_DeleteUserResponse:function( response )
	{
		if ( response.success=="OK")
		{
			this.userlist.deleteItem( this._userrow);
			dojo.addClass (this.userdetails, "prmaxhidden") ;
			alert("User Deleted ");
		}
		else
		{
			alert("Problem Deleting User");
		}

		this.deleteUserNode.cancel();
	},
	_DeleteUser:function()
	{
		if (confirm("Delete User?"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._DeleteUserResponseCall,
				url:'/iadmin/delete_user',
				content:{iuserid:this._userrow.i.user_id}}));
		}
	},
	_UnlockUserResponse:function( response )
	{
		if ( response.success=="OK")
		{
			alert("User Unlocked ");
		}
		else
		{
			alert("Problem unlocking User");
		}

		this.unlockUserNode.cancel();
		dojo.addClass(this.unlockUserNode.domNode, "prmaxhidden");
	},
	_UnlockUser:function()
	{
		if (confirm("Unlock User?"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._UnlockUserResponseCall,
				url:'/iadmin/unlock_user',
				content:{iuserid:this._userrow.i.user_id}}));
		}
	},
	_Change_Extended_Setting:function( data )
	{
		this._extended_security = data.cust.extended_security;
	},


	_Logout:function()
	{
		if  ( confirm("Logout of Prmax?")==true)
			window.location.href = "/logout?ref=/iadmin/main";
	},
	_OnSelectAudit:function ( e )
	{
		var row = this.auditgrid.getItem(e.rowIndex);

		// open invoice
		if ( e.cellIndex  == 3 && row.i.documentpresent == true )
		{
			if ( row.i.audittypeid == 17 || row.i.audittypeid == 24 )
			{
				dojo.attr(this.htmlform_audittrailid,"value", row.i.audittrailid);
				dojo.attr(this.htmlform, "action", "/iadmin/viewhtml/" + row.i.audittrailid);
				this.htmlform.submit();
			}
			else
			{
				dojo.attr(this.documentform_audittrailid,"value", row.i.audittrailid);
				dojo.attr(this.documentform, "action", "/iadmin/viewpdf/" + row.i.audittrailid);
				this.documentform.submit();
			}
		}
		this.auditgrid.selection.clickSelectEvent(e);
	},
	_DeleteAccountResponse:function ( response )
	{
		if ( response.success=="OK")
		{
			this.customergrid.setQuery(ttl.utilities.getPreventCache({}));
			this.customergrid.selection.clear();
			dojo.style(this.detailsview.domNode,"display","none");
			dojo.addClass (this.userdetails, "prmaxhidden") ;
			alert("Account Deleted");
		}
		else if ( response.success == "FD")
		{
			alert("Record has been marked as Deleted but has not been delete because it has Financial Information attached");
		}
		else
		{
			alert("Problem Deleteing Account");
		}
	},
	_DeleteAccount:function()
	{
		if ( confirm ("Do You Wish to Delete Account ?"))
		{
			if ( confirm ("Are you REALLY Sure?"))
			{
				dojo.xhrPost(
					ttl.utilities.makeParams({
					load: this._DeleteAccountResponseCall,
					url:'/iadmin/delete_customer',
					content:{'icustomerid':this._customerid}}));
			}
		}
	},
	_Add_User:function()
	{
		this.adduserctrl.Clear();
		this.adduserctrl.set_has_external_level(this._customertypeid);
		this.adduserctrl.icustomerid.set("value", this._customerid);
		this.adduserctrl.extended_security.set("value", this._extended_security);
		this.adduserdialog.show();
	},
	_User_Added_Event:function( data )
	{
		this.userlist.newItem( data ) ;
		this.adduserdialog.hide();
		this.adduserctrl.Clear();
	},
	_ExecuteCustomerFilter:function()
	{
		var query = {
			statusid:arguments[0].statusid,
			customername:arguments[0].customername,
			accountnbr:arguments[0].accountnbr,
			customertypeid:arguments[0].customertypeid,
			customersourceid:arguments[0].customersourceid,
			financialstatusid:arguments[0].financialstatusid,
			email:arguments[0].email,
			isinternal:arguments[0].isinternal,
			contactname:arguments[0].contactname,
			invoicenbr:arguments[0].invoicenbr,
			creditnotenbr:arguments[0].creditnotenbr,
			unallocated:arguments[0].unallocated
		};

		if ( arguments[0].licence_expired )
			query["licence_expired"] = arguments[0].licence_expired;

		if ( arguments[0].monitoringstatusid != "" && arguments[0].monitoringstatusid != "-1")
			query["monitoringstatusid"] = arguments[0].monitoringstatusid;

		if ( arguments[0].clippingsourceid != "" && arguments[0].clippingsourceid != "-1")
			query["clippingsourceid"] = arguments[0].clippingsourceid;

		this.customergrid.setQuery(ttl.utilities.getPreventCache(query));
		dojo.addClass(this.detailsview.domNode,"prmaxhidden");

	},
	_ClearFilter:function()
	{
		this.filter_licence_expired.set("checked",false);
		this.filter_isinternal.set("checked",false);
		this.filter_customername.set("value","");
		this.filter_customer_statusid.set("value","-1");
		this.filter_accountnbr.set("value","");
		this.filter_customertypeid.set("value",-1);
		this.filter_customeremail.set("value","");
		this.filter_customersourceid.set("value",-1);
		this.filter_contactname.set("value","");
		this.filter_invoicenbr.set("value","");
		this.filter_creditnotenbr.set("value", "");
		this.filter_unallocated.set("checked", false ) ;
		this.filter_monitoringstatusid.set("value",-1);
		this.filter_clippingsourceid.set("value",-1);
	},
	_SelectNode:function()
	{
		var  obj = arguments[0];
		if (this._Windows.containsKey( obj.id) == false )
		{
			var widget = null;
			if (obj.type==0)
				widget = new dijit.layout.ContentPane({title:obj.id.toString(),content:"<div dojoType='"+ obj.content + "' style='width:100%;height:100%'></div>"});
			if (obj.type==2)
				widget = new dijit.layout.ContentPane({title:obj.id.toString(),href:obj.page});

			this.zone.addChild ( widget, 0);
			setTimeout("dijit.byId('"+this.zone.id +"').selectChild('"+widget.id+"');",10);
			this._Windows.add(obj.id,  widget.id ) ;
		}
		else
		{
			var wid = this._Windows.entry(obj.id).value;

			this.zone.selectChild (  dijit.byId(wid));

		}
	},
	_CheckLayout:function( customer, mediaaccesstype, emailserver)
	{
		if (this.updatum.get("checked"))
		{
			dojo.removeClass(this.max_users_monitoring, "prmaxhidden");
			dojo.removeClass(this.user_monitor_total_view, "prmaxhidden");
		}
		else
		{
			dojo.addClass(this.max_users_monitoring, "prmaxhidden");
			dojo.addClass(this.user_monitor_total_view, "prmaxhidden");
		}

		this.financialcontrol.Show_Hide_Fields(customer);
		this.datasets.load(null, customer.has_international_data);

		var display = (customer.has_clippings)?"":"none";
		this.clippings.controlButton.domNode.style.display = display;
		display = (customer.has_international_data)?"":"none";
		this.datasets.controlButton.domNode.style.display = display;
		this.extendedsettings.load(customer, mediaaccesstype);
		this.emailserver.load(customer, emailserver);
		display = (customer.customertypeid == 20)?"":"none";
		this.options_tab_menusettings.controlButton.domNode.style.display = display;

	},
	_UpdateModulesCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			alert("Module Updated");
			this._CheckLayout( response.data.cust, response.data.mediaaccesstype );
		}
		else
		{
			alert("Module Update Failed");
		}
	},
	_UpdateModules:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._UpdateModulesCall),
			url:'/iadmin/update_customer_modules',
			content:{'icustomerid': this._customerid,
						crm: this.crm.get("value"),
						advancefeatures: this.advancefeatures.get("value"),
						updatum: this.updatum.get("value"),
						seo: this.seo.get("value"),
						seotranslation: this.seotranslation.get("value"),
						maxmonitoringusers: this.maxmonitoringusers.get("value"),
						is_bundle : this.is_bundle.get("value"),
						has_news_rooms : this.has_news_rooms.get("value"),
						has_global_newsroom : this.has_global_newsroom.get("value"),
						has_international_data: this.has_international_data.get("value"),
						has_clippings : this.has_clippings.get("value"),
						has_journorequests: this.has_journorequests.get("value")}
			}));
	},
	_UpdatePrivateMenu:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: dojo.hitch(this,this._UpdatePrivateMenuCall),
			url:'/iadmin/update_customer_private_menu',
			content:{'icustomerid': this._customerid,
				pm_new_outlet: this.pm_new_outlet.get("value"),
				pm_new_freelance: this.pm_new_freelance.get("value"),
				pm_collateral: this.pm_collateral.get("value"),
				pm_exclusions: this.pm_exclusions.get("value"),
				pm_clients: this.pm_clients.get("value"),
				pm_issues: this.pm_issues.get("value"),
				pm_statements : this.pm_statements.get("value"),
				pm_questions : this.pm_questions.get("value"),
				pm_global_analysis : this.pm_global_analysis.get("value"),
				pm_documents: this.pm_documents.get("value"),
				pm_private_media_channels : this.pm_private_media_channels.get("value"),
				pm_user_preferences: this.pm_user_preferences.get("value"),
				pm_account_details: this.pm_account_details.get("value"),
				pm_activity_log: this.pm_activity_log.get("value"),
				pm_user_admin: this.pm_user_admin.get("value"),
				pm_financial: this.pm_financial.get("value"),
				pm_prrequests: this.pm_prrequests.get("value")}
			}));
	},
	_UpdatePrivateMenuCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			alert("Private Menu Updated");
			this._CheckLayout(response.data.cust);
		}
		else
		{
			alert("Private Menu Update Failed");
		}
	},
	_UpdatedCustomerTypeCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			alert("Customer Type Changed");
			this.extendedsettings.load(response.data.cust,response.data.mediaaccesstype);
			this._CheckLayout(response.data.cust);
			if (response.data.customermenusettings)
			{
				this.pm_new_outlet.set("value", response.data.customermenusettings.pm_new_outlet);
				this.pm_new_freelance.set("value", response.data.customermenusettings.pm_new_freelance);
				this.pm_collateral.set("value", response.data.customermenusettings.pm_collateral);
				this.pm_exclusions.set("value", response.data.customermenusettings.pm_exclusions);
				this.pm_clients.set("value", response.data.customermenusettings.pm_clients);
				this.pm_issues.set("value", response.data.customermenusettings.pm_issues);
				this.pm_statements.set("value", response.data.customermenusettings.pm_statements);
				this.pm_questions.set("value", response.data.customermenusettings.pm_questions);
				this.pm_global_analysis.set("value", response.data.customermenusettings.pm_global_analysis);
				this.pm_documents.set("value", response.data.customermenusettings.pm_documents);
				this.pm_private_media_channels.set("value", response.data.customermenusettings.pm_private_media_channels);
				this.pm_user_preferences.set("value", response.data.customermenusettings.pm_user_preferences);
				this.pm_account_details.set("value", response.data.customermenusettings.pm_account_details);
				this.pm_activity_log.set("value", response.data.customermenusettings.pm_activity_log);
				this.pm_user_admin.set("value", response.data.customermenusettings.pm_user_admin);
				this.pm_financial.set("value", response.data.customermenusettings.pm_financial);
				this.pm_prrequests.set("value", response.data.customermenusettings.pm_prrequests);			
			}


		}
		else
		{
			alert("Problem Changing Customer Type");
		}
	},
	_CustomerType:function()
	{
		if ( confirm("Change Customer Type"))
		{
			this._clear_private_menu_settings();
			
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._UpdatedCustomerTypeCallBack),
				url:'/iadmin/update_customertypeid',
				content:{
							icustomerid: this._customerid,
							customertypeid: this.customertypeid.get("value")}
				}));
		}
	},
	_UpdatedInternalStatusCall:function( response )
	{
		if ( response.success == "OK" )
		{
			alert("Status Changed");
		}
		else
		{
			alert("Problem Changing Status");
		}

	},
	_ChangeInternalStatus:function()
	{
		if ( confirm("Change Status"))
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
				load: dojo.hitch(this,this._UpdatedInternalStatusCallBack),
				url:'/iadmin/update_internal_status',
				content:{
							icustomerid: this._customerid,
							isinternal: this.isinternal.get("value")}
				}));
		}
	},
	_SetCustomerCall:function ( response )
	{
		if ( response.success == "OK" )
		{
			alert("Support Customer updated");
		}
		else
		{
			alert("pRoblem Updating Support Customer");
		}
	},
	_SetCustomer:function()
	{
		var iuserid = this.support_userid.get("value");
		if (iuserid == null || iuserid === "")
		{
			alert("No User Specified");
			return;
		}

		if ( confirm ( "Set Support Customer" ) )
		{
			dojo.xhrPost(
				ttl.utilities.makeParams({
					load: this._SetCustomerCallBack,
					url:'/iadmin/support_customer_set',
					content: { iuserid : iuserid,
										icustomerid : this._customerid}
			}));
		}
	},
	_LoadCustomer2Call:function ( response )
	{
		this._customerid = response.data.cust.customerid;
		this._customertypeid = response.data.cust.customertypeid;

		this._LoadCustomer( response ) ;
		this._LoadTabs( this._customerid ) ;
		this.tabs.selectChild ( this.notestab);
		this.frame_tabs.selectChild( this.frame_tab_m);
	},
	_Show_Customer_Event:function ( icustomerid )
	{
		this._icustomerid = icustomerid;
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._LoadCustomer2CallBack,
			url:'/iadmin/get_internal',
			content:{'icustomerid': icustomerid}
			}));
	},
	_ReActiveDemo:function()
	{
		this.reactiveatectrl.Load ( this._customerid, this.reactiveatedialog ) ;
	},
	_SetSeoCount:function()
	{
		this.seofree.Load(this._customerid);
	},
	_bundle_settings:function()
	{

	},
	_change_extended_subject:function()
	{
		dojo.xhrPost(
			ttl.utilities.makeParams({
			load: this._change_extended_subject_call_back,
			url:'/iadmin/update_extended_subject',
			content:{'icustomerid': this._customerid,
										has_extended_email_subject: this.has_extended_email_subject.get("value")
			}
			}));
	},
	_change_extended_subject_call:function ( response)
	{
		if (response.success == "OK")
		{
			alert("Updated");
		}
		else
		{
			alert("Problem Updating");
		}
	},
	_send_login_details:function()
	{
		this.send_password_ctrl.load( this._userrow.i.user_id, this.send_password_dialog);
	},
	_ChangeSeoOption:function()
	{
		if (this.seo.checked == false)
		{
			dojo.addClass(this.seotranslation_node, "prmaxhidden");
		}
		else
		{
			dojo.removeClass(this.seotranslation_node, "prmaxhidden");
		}
	},
	_init_monitoring_filter:function()
	{
		return new dojo.data.ItemFileReadStore({data: { identifier: "id",
				items: [ {id: -1, name:"No Selection"},
						{id: 1, name:"Enabled"},
						{id: 2, name:"Enabled - Has active Orders"},
						{id: 3, name:"Enabled - No Orders"},
						{id: 4, name:"Enabled - Has Expired Orders Only"}
				]
		}});
	}
});

dojo.declare("prmax.iadmin.gridlayouts",
	null,{
	constructor: function()
	{
		this.main_view = {noscroll: false,
			cells: [[
			{name: '', width:"1em", formatter:ttl.utilities.formatRowCtrl},
			{name: 'Acc',width: "4em",field:'customerid',styles:"text-align:right;padding-right:3px;"},
			{name: 'Customer name',width: "20em",field:'customername'},
			{name: 'Type',width: "8em",field:'customertypename'},
			{name: 'Contact',width: "14em",field:'contactname'},
			{name: 'Expires',width: "6em",field:'licence_expire'},
			{name: 'Status',width: "9em",field:'customerstatusname'},
			{name: 'Created',width: "6em",field:'created'},
			{name: 'Last Accessed',width: "10em",field:'last_login_display'},

		]]
		};
		this.audit_view = {noscroll: false,
			cells: [[
			{name: 'Type',width: "4em",field:'audittypeid',style:"text-align:right"},
			{name: 'Date',width: "10em",field:'auditdate'},
			{name: 'Text',width: "25em",field:'audittext'},
			{name: ' ',width: "2em",field:'documentpresent',formatter:ttl.utilities.documentExists},
			{name: 'Who',width: "10em",field:'user_name'}

		]]
		};
		this.user_view = {noscroll: false,
			cells: [[
			{name: 'User Id',width: "5em",field:'user_id'},
			{name: 'Display Name',width: "auto",field:'display_name'},
			{name: 'Login Name',width: "auto",field:'user_name'},
			{name: 'Email',width: "auto",field:'email_address'}
		]]	};

		this.demorequest = {noscroll: false,
			cells: [[
			{name: 'Customer Name',width: "auto",field:'customername'},
			{name: 'Contact Name',width: "auto",field:'contactname'},
			{name: 'Email',width: "auto",field:'email'},
			{name: 'Address1',width: "auto",field:'address1'},
			{name: 'Town',width: "auto",field:'townname'},
			{name: 'PostCode',width: "auto",field:'postcode'},
			{name: 'Telephone',width: "auto",field:'telephone'}
		]]
		};
	}
});

}

if(!dojo._hasResource["prmax.iadmin.Privateimport"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prmax.iadmin.Privateimport"] = true;
dojo.provide("prmax.iadmin.Privateimport");

dojo.declare("prmax.iadmin.Privateimport",
	[dijit._Widget, dijit._Templated, dijit._Container],{
		widgetsInTemplate: true,
		templateString:"<div>\r\n\t<form  dojoAttachPoint=\"private_form\" method=\"post\" name=\"private_form\" enctype=\"multipart/form-data\"  onSubmit=\"return false;\">\r\n\t\t<input class=\"prmaxinput\" type=\"hidden\" dojoAttachPoint=\"private_cache\" name=\"private_cache\" value=\"-1\">\r\n\t\t<table width=\"50%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\r\n\t\t\t<tr><td class=\"prmaxrowtag\">File Name</td><td><input size=\"30\" class=\"prmaxinput\" type=\"file\" dojoAttachPoint=\"private_file\" name=\"private_file\"></td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\">Customer</td><td>\r\n\t\t\t<select name=\"icustomerid\"\r\n\t\t\t\tautoComplete=\"true\"\r\n\t\t\t\tdojoType=\"dijit.form.FilteringSelect\"\r\n\t\t\t\tlabelType=\"html\"\r\n\t\t\t\tsearchAttr=\"customername\"\r\n\t\t\t\tdojoAttachPoint=\"icustomerid\"\r\n\t\t\t\tsearch></select></td></tr>\r\n\t\t\t<tr><td colspan = \"2\" >&nbsp;</td></tr>\r\n\t\t\t<tr><td colspan = \"2\" ><span dojoAttachPoint=\"progressNode\" style=\"display:none;\"><div dojoType=\"dijit.ProgressBar\" dojoAttachPoint=\"progressControl\" style=\"width:200px\" indeterminate=\"true\"></div></span></td></tr>\r\n\t\t\t<tr><td colspan=\"2\" align=\"right\"><button class=\"prmaxbutton\"  dojoAttachPoint=\"saveNode\" type=\"button\"  dojoType=\"dijit.form.Button\" label=\"Upload Private Data\" dojoAttachEvent=\"onClick:_Add\"></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n</div>\r\n",
	constructor: function()
	{
		this.icustomerid_data = new dojox.data.QueryReadStore (
			{url:'/iadmin/customers_combo',
			onError:ttl.utilities.globalerrorchecker,
			clearOnClose:true,
			urlPreventCache:true
			});

		this._AddedCallback = dojo.hitch(this,this._Added);

	},
	postCreate:function()
	{
		this.icustomerid.store = this.icustomerid_data;
	},
	_Added:function( response )
	{
		this.progressNode.style.display = "none";
		if (response.success=="OK")
		{
			alert("Private Data Added");
			this._Close();
		}
		else if (response.success=="FA")
		{
			alert(response.message);
		}
		else
		{
			alert("Problem Adding Private Data");
		}
	},
	_Add:function()
	{
		this.private_cache.value = new Date().valueOf();
		this.progressNode.style.display = "block";

		dojo.io.iframe.send(
		{
			url: "/iadmin/import_customer_outlets",
			handleAs:"json",
	        load: this._AddedCallback,
	        form: this.private_form
		});
	}
});

}

if(!dojo._hasResource["prcommon.contacthistory.notes"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.contacthistory.notes"] = true;
//-----------------------------------------------------------------------------
// Name:    prcommon.contracthistory.notes
// Author:  Chris Hoy
// Purpose:
// Created: 01/11/2013
//
// To do:
//
//-----------------------------------------------------------------------------

dojo.provide("prcommon.contacthistory.notes");


dojo.declare("prcommon.contacthistory.notes", null,
{
	constructor: function()
	{
	},
	show_notes:function(outletid)
	{
		dojo.publish ( PRCOMMON.Events.Edit_Notes , [ outletid ]);

	}
});

}

if(!dojo._hasResource["prcommon.recovery.passwordrecoverydetails"]){ //_hasResource checks added by build. Do not use _hasResource directly in your code.
dojo._hasResource["prcommon.recovery.passwordrecoverydetails"] = true;
//-----------------------------------------------------------------------------
// Name:    passwordrecoverydetails
// Author:
// Purpose:
// Created: Feb 2018
//
// To do:
//
//-----------------------------------------------------------------------------


dojo.provide("prcommon.recovery.passwordrecoverydetails");



dojo.declare("prcommon.recovery.passwordrecoverydetails",
	[ ttl.BaseWidget],
	{
	widgetsInTemplate: true,
	templateString:"<div style=\"margin:10px\">\r\n\t<form data-dojo-attach-point=\"form\" onsubmit=\"return false\" data-dojo-type=\"dijit.form.Form\" data-dojo-point='style:\"margin:15px\"'>\r\n\t\t<p data-dojo-attach-point='message' data-dojo-props='value:\"\"'></p>\r\n\t\t<table width=\"98%\" class=\"prmaxtable\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n\t\t\t<tr><td>&nbsp</td></tr>\r\n\t\t\t<tr><td align=\"right\" width=\"20%\" class=\"prmaxrowtag\"><label>Email</label></td><td><input data-dojo-type=\"dijit.form.ValidationTextBox\" data-dojo-attach-point=\"recovery_email\" data-dojo-props='regExpGen:dojox.validate.regexp.emailAddress,invalidMessage:\"invalid email address\", name:\"recovery_email\",required:true,trim:true,type:\"text\",style:\"width:320px\"'></td></tr>\r\n<!--\r\n\t\t\t<tr><td align=\"right\" width=\"20%\" class=\"prmaxrowtag\"><label>Phone</label></td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"recovery_phone\" data-dojo-props='name:\"recovery_phone\",trim:true,type:\"text\",style:\"width:300px\"'></input></td></tr>\r\n-->\r\n\t\t\t<tr><td align=\"right\" width=\"20%\" class=\"prmaxrowtag\"><label>Secret Word</label></td><td><input data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"recovery_word\" data-dojo-props='name:\"recovery_word\",trim:true,type:\"text\",style:\"width:150px\", required:true'></input></td></tr>\r\n\r\n\t\t\t<tr><td>&nbsp</td></tr>\r\n\t\t\t<tr><td class=\"prmaxrowtag\" align=\"left\"><button data-dojo-attach-event=\"onClick:_close\" data-dojo-attach-point=\"closebtn\" data-dojo-type=\"dijit.form.Button\" data-dojo-props='type:\"button\",label:\"Close\",\"class\":\"btnleft\"'></button></td>\r\n\t\t\t\t<td class=\"prmaxrowtag\" align=\"right\"><button data-dojo-attach-event=\"onClick:_save\" data-dojo-attach-point=\"savebtn\" data-dojo-type=\"dojox.form.BusyButton\" data-dojo-props='style:\"float:right\", type:\"button\",busyLabel:\"Please Wait Saving...\",label:\"Save\",\"class\":\"btnright\"'></button></td></tr>\r\n\t\t</table>\r\n\t</form>\r\n\r\n</div>\r\n",
	constructor: function()
	{
		this._save_call_back = dojo.hitch(this,this._save_call);
		this._load_call_back = dojo.hitch(this,this._load_call);
		
		this._message = '';
	},
	load:function ( dialog, show_message, message)
	{
		if (show_message && message=='set')
		{
			this._message = message;
			dojo.removeClass(this.message, 'prmaxhidden');	
			dojo.attr(this.message, 'innerHTML' , 'Please set your password recovery details by entering:</br>1. An email address different than your username and your user email address</br>2. A secret word of at least 8 characters');
			dojo.attr(this.savebtn, 'label', 'Save');
		}
		else if(show_message && message=='update')
		{
			this._message = message;
			dojo.removeClass(this.message, 'prmaxhidden');	
			dojo.attr(this.message, 'innerHTML', 'Please confirm your password recovery details');
			dojo.attr(this.savebtn, 'label', 'Confirm');
		}
		else
		{
			dojo.addClass(this.message, 'prmaxhidden');	
			dojo.attr(this.savebtn, 'label', 'Save');
		}
		this._dialog = dialog;
		
		dojo.xhrPost(
				ttl.utilities.makeParams({
				load: this._load_call_back,
				url:'/user/get_password_recovery_details'})	);		
	},	
	_load_call:function(response)
	{
		if (response.success == 'OK')
		{
			if (PRMAX.utils.settings.passwordrecovery && response.details)
			{
				this.recovery_email.set("value", response.details.recovery_email);
	//			this.recovery_phone.set("value", response.details.recovery_phone);
				this.recovery_word.set("value", response.details.recovery_word);		
			}
		}
	},
	_save:function()
	{
		if (ttl.utilities.formValidator( this.form ) == false)
		{
			alert("Please Enter Details");
			this.savebtn.cancel();
			if (this._message == 'update')
			{
				dojo.attr(this.savebtn, 'label', 'Confirm');	
			}
			return false;
		}
		if (this.recovery_word.get("value").length < 8)
		{
			alert("Please enter secret word of minimum 8 characters");
			this.savebtn.cancel();
			if (this._message == 'update')
			{
				dojo.attr(this.savebtn, 'label', 'Confirm');	
			}
			return;
		}
		if (this.recovery_email.get("value").toLowerCase() == PRMAX.utils.settings.username.toLowerCase() || this.recovery_email.get("value").toLowerCase() == PRMAX.utils.settings.uemail.toLowerCase())
		{
			alert("Please enter different email address than your username and your user email address");
			this.savebtn.cancel();
			if (this._message == 'update')
			{
				dojo.attr(this.savebtn, 'label', 'Confirm');	
			}			
			return;
		}

		var data = this.form.get("value");
		dojo.xhrPost(
					ttl.utilities.makeParams({
						load: this._save_call_back,
						url:"/user/set_password_recovery" ,
						content: data
						}));

	},
	_save_call:function ( response )
	{
		if ( response.success == "OK" )
		{
			alert("Saved Details for Password Recovery");
			this.savebtn.cancel();
			this._dialog.hide();
		}
		else
		{
			alert("Problem Adding Details for Password Recovery");
		}
		this.savebtn.cancel();
		if (this._message == 'update')
		{
			dojo.attr(this.savebtn, 'label', 'Confirm');	
		}		
	},	
	_close:function()
	{
		this._dialog.hide();
	},
	_clear:function()
	{
		this.recovery_email.set("value", "");
//		this.recovery_phone.set("value", "");
		this.recovery_word.set("value", "");
	}
	
});

}


dojo.i18n._preloadLocalizations("dojo.nls.prmaxinternal", ["ROOT","ar","ca","cs","da","de","de-de","el","en","en-gb","en-us","es","es-es","fi","fi-fi","fr","fr-fr","he","he-il","hu","it","it-it","ja","ja-jp","ko","ko-kr","nb","nl","nl-nl","pl","pt","pt-br","pt-pt","ru","sk","sl","sv","th","tr","xx","zh","zh-cn","zh-tw"]);
